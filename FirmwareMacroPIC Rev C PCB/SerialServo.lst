SerialServo.asm                                                       Page: 1
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00001 0000 	;====================================================================================================
00002 0000 	;
00003 0000 	;    Filename:      SerialServo.asm
00004 0000 	;    Date:          8/11/2019
00005 0000 	;    File Version:  1.1b2
00006 0000 	;
00007 0000 	;    Author:        David M. Flynn
00008 0000 	;    Company:       Oxford V.U.E., Inc.
00009 0000 	;    E-Mail:        dflynn@oxfordvue.com
00010 0000 	;    Web Site:      http://www.oxfordvue.com/
00011 0000 	;
00012 0000 	;====================================================================================================
00013 0000 	;    SerialServo is sample code.
00014 0000 	;    Controls a single robot arm joint using an R/C servo (SG90) modified
00015 0000 	;    for continuous rotation.  Features and configurations will be added as needed.
00016 0000 	;
00017 0000 	;    Features: 	TTL Packet Serial
00018 0000 	;	R/C Servo PWM output
00019 0000 	;	Current sensing.
00020 0000 	;	3 Buttons/LEDs for config
00021 0000 	;	Absolute magnetic encoder
00022 0000 	;
00023 0000 	;Mode 0: (LED 1 = off) servo test mode, copy AN4 Pot value x 2 + 1976 to servo PWM.
00024 0000 	;Mode 1: (LED 1 = 1 flash) servo and encoder test mode, AN4 Pot value + 950 - EncoderVal to servo dir.
00025 0000 	;Mode 2: Basic Serial Servo, output servo pulse of ssCmdPos x 0.5uS.
00026 0000 	;Mode 3: Absolute encoder position control. ssCmdPos = 0..4095
00027 0000 	;Mode 4: Gripper force control.
00028 0000 	;
00029 0000 	;    History:
00030 0000 	; 1.1b2   8/11/2019	Continue fixes for 14bit encoder. New defaults Mode 3 (2950 Â±100, fast, Idle center)
00031 0000 	; 1.1b1   3/21/2019	Port for Rev C PCB
00032 0000 	; 1.0b7   10/3/2018	Mode 3 is working for 4-wheel rover corner pivot motors.
00033 0000 	; 1.0b6   8/18/2018	Moved analog variables to bank 1. Fast blink on error. EncoderOffset for mode3
00034 0000 	; 1.0b5   7/23/2018	Aux IO
00035 0000 	; 1.0b4   7/14/2018	Better defaults. Gripper mode (4).
00036 0000 	; 1.0b3   6/19/2018	Added ssEnableFastPWM
00037 0000 	; 1.0b2   6/3/2018	Servo current is averaged, DD DD Sync bytes and checksum.
00038 0000 	; 1.0b1   6/1/2018	Modes 2 and 3 are working. No current limit yet.
00039 0000 	; 1.0a3   5/31/2018    Added Speed, StopCenter.
00040 0000 	; 1.0a2   5/25/2018	Added some more commands.
00041 0000 	; 1.0a1   5/24/2018	It begins to work.
00042 0000 	; 1.0d1   4/26/2018	First code.
00043 0000 	;
00044 0000 	;====================================================================================================
00045 0000 	; ToDo:
00046 0000 	;
00047 0000 	; Mode 3:
00048 0000 	; 1) On power on reset set command position to current position including offset.
00049 0000 	; 2) Speed is used as acceleration, add speed (counts/second).
00050 0000 	;
00051 0000 	;====================================================================================================
00052 0000 	;====================================================================================================
00053 0000 	; What happens next:
00054 0000 	;   At power up the system LED will blink.
00055 0000 	;   Mode 0: (LED 1 = off) servo test mode, copy AN4 Pot value to servo.
00056 0000 	;   Mode 1: (LED 1 = 1 flash) servo  and encoder test mode, AN4 Pot value - EncoderVal to servo dir.
00057 0000 	;   Mode 2: Basic Serial Servo, output servo pulse of CmdPos * 0.5uS.
00058 0000 	;   Mode 3: Absolute encoder position control.
00059 0000 	;   Mode 4: Gripper force control.
00060 0000 	;====================================================================================================
00061 0000 	;
00062 0000 	;   Pin 1 (RA2/AN2) SW1/LED1 (Active Low Input/Output)
00063 0000 	;   Pin 2 (RA3/AN3) SW2/LED2 (Active Low Input/Output)
00064 0000 	;   Pin 3 (RA4/AN4) n/c
00065 0000 	;   Pin 4 (RA5/MCLR*) VPP/MCLR*
00066 0000 	;   Pin 5 (GND) Ground
00067 0000 	;   Pin 6 (RB0) MagEnc_CSBit (Active Low Output)
00068 0000 	;   Pin 7 (RB1/AN11/SDA1) MISO MagEnc_DataBit (Digital Input)
00069 0000 	;   Pin 8 (RB2/AN10/TX) TTL Serial RX
00070 0000 	;   Pin 9 (RB3/CCP1) Pulse output for Servo
00071 0000 	;
00072 0000 	;   Pin 10 (RB4/AN8/SLC1) SCL1 MagEnc_CLKBit
00073 0000 	;   Pin 11 (RB5/AN7) TTL Serial TX
00074 0000 	;   Pin 12 (RB6/AN5/CCP2) ICSPCLK
00075 0000 	;   Pin 13 (RB7/AN6) ICSPDAT
00076 0000 	;   Pin 14 (Vcc) +5 volts
00077 0000 	;   Pin 15 (RA6) MOSI MagEnc_DataBit (Digital Output)
00078 0000 	;   Pin 16 (RA7/CCP2) LED3 (Active Low Output)(System LED)
00079 0000 	;   Pin 17 (RA0/AN0) Current sensing analog input
00080 0000 	;   Pin 18 (RA1/AN1) Battery voltage sensing analog input
00081 0000 	;
00082 0000 	;====================================================================================================
00083 0000 	;
00084 0000 	;
00085 0000 		list	p=16f1847,r=hex,W=1	; list directive to define processor
00001 0000 		nolist
00002 0000 	;
00003 0000 	;==========================================================================
00004 0000 	;  MPASM PIC16F1847 processor include
00005 0000 	; 
00006 0000 	;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
00007 0000 	;  Modified by DMF 11/16/2013
00008 0000 	;==========================================================================
00009 0000 	;
01043 0000 		NOLIST
01044 0000 	;
00088 0000 		list
00089 0000 	;
00090 8007 EFA4 		__CONFIG _CONFIG1,_FOSC_INTOSC & _WDTE_OFF & _MCLRE_OFF & _IESO_OFF
SerialServo.asm                                                       Page: 2
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00091 0000 	;
00092 0000 	;
00093 0000 	; INTOSC oscillator: I/O function on CLKIN pin
00094 0000 	; WDT disabled
00095 0000 	; PWRT disabled
00096 0000 	; MCLR/VPP pin function is digital input
00097 0000 	; Program memory code protection is disabled
00098 0000 	; Data memory code protection is disabled
00099 0000 	; Brown-out Reset enabled
00100 0000 	; CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin
00101 0000 	; Internal/External Switchover mode is disabled
00102 0000 	; Fail-Safe Clock Monitor is enabled
00103 0000 	;
00104 8008 DFFF 		__CONFIG _CONFIG2,_WRT_OFF & _PLLEN_ON & _LVP_OFF
00105 0000 	;
00106 0000 	; Write protection off
00107 0000 	; 4x PLL Enabled
00108 0000 	; Stack Overflow or Underflow will cause a Reset
00109 0000 	; Brown-out Reset Voltage (Vbor), low trip point selected.
00110 0000 	; Low-voltage programming enabled
00111 0000 	;
00112 0000 	; '__CONFIG' directive is used to embed configuration data within .asm file.
00113 0000 	; The lables following the directive are located in the respective .inc file.
00114 0000 	; See respective data sheet for additional information on configuration word.
00115 0000 	;
00116 0000 		constant	oldCode=0
00117 0000 		constant	useRS232=1
00118 0000 		constant	UseEEParams=1
00119 0000 	;
00120 0000 		constant	UseAltSerialPort=1
00121 0000 		constant	RP_LongAddr=0
00122 0000 		constant	RP_AddressBytes=1
00123 0000 		constant	RP_DataBytes=4
00124 0000 		constant	UseRS232SyncBytes=1
00125 0000 00DD 	kRS232SyncByteValue	EQU	0xDD
00126 0000 		constant	UseRS232Chksum=1
00127 0000 	;
00128 0000 0001 	kRS232_MasterAddr	EQU	0x01	;Master's Address
00129 0000 0002 	kRS232_SlaveAddr	EQU	0x02	;This Slave's Address
00130 0000 0004 	kGripperHC	EQU	0x04	;Gripper hysteresis
00131 0000 	;
00132 0000 0003 	#Define	_C	STATUS,C
00133 0000 0003 	#Define	_Z	STATUS,Z
00134 0000 	;
00135 0000 	;====================================================================================================
00138 0000 		nolist
00139 0000 	;
00140 0000 	;    Port A bits
00141 0000 00BF 	PortADDRBits	EQU	b'10111111'
00142 0000 0000 	PortAValue	EQU	b'00000000'
00143 0000 0003 	ANSELA_Val	EQU	b'00000011'	;RA0/AN0, RA4/AN4
00144 0000 	;
00145 0000 000C 	#Define	RA0_In	PORTA,0	;Current, Analog Input
00146 0000 000C 	#Define	RA1_In	PORTA,1	;Battery Volts, Analog Input
00147 0000 000C 	#Define	SW1_In	PORTA,2	;SW1/LED1
00148 0000 000C 	#Define	SW2_In	PORTA,3	;SW2/LED2
00149 0000 000C 	#Define	RA4_In	PORTA,4	;n/c
00150 0000 000C 	#Define	RA5_In	PORTA,5	;VPP/MCLR*
00151 0000 000C 	#Define	RA6_Out	PORTA,6	;MagEnc_DataBit Encoder MOSI (SPI, Digital Output)
00152 0000 000C 	#Define	RA7_In	PORTA,7	;LED3 (Active Low Output)(System LED)
00153 0000 0002 	LED1_Bit	EQU	2	;LED1 (Active Low Output)
00154 0000 0003 	LED2_Bit	EQU	3	;LED2 (Active Low Output)
00155 0000 0007 	SysLED_Bit	EQU	7	;LED3 (Active Low Output)
00156 0000 008C 	#Define	LED1_Tris	TRISA,LED1_Bit	;LED1 (Active Low Output)
00157 0000 010C 	#Define	LED1_Lat	LATA,LED1_Bit	;LED1 (Active Low Output)
00158 0000 008C 	#Define	LED2_Tris	TRISA,LED2_Bit	;LED2 (Active Low Output)
00159 0000 010C 	#Define	LED2_Lat	LATA,LED2_Bit	;LED2 (Active Low Output)
00160 0000 008C 	#Define	SysLED_Tris	TRISA,SysLED_Bit	;LED3 (Active Low Output)
00161 0000 	;
00162 0000 00F8 	Servo_AddrDataMask	EQU	0xF8
00163 0000 	;
00164 0000 	;
00165 0000 	;    Port B bits
00166 0000 00C6 	PortBDDRBits	EQU	b'11000110'	;MagEnc_CSBit, CCP1, MagEnc_CLKBit
00167 0000 0011 	PortBValue	EQU	b'00010001'
00168 0000 0000 	ANSELB_Val	EQU	b'00000000'	;RB5/AN7
00169 0000 	;
00170 0000 010D 	#Define	RB0_Out	LATB,0	;MagEnc_CSBit (Active Low Output)
00171 0000 000D 	#Define	RB1_In	PORTB,1	;MISO MagEnc_DataBit (Digital Input)
00172 0000 000D 	#Define	RB2_In	PORTB,2	;RX Serial Data
00173 0000 000D 	#Define	RB3_Out	PORTB,3	;CCP1 Output
00174 0000 000D 	#Define	RB4_In	PORTB,4	;SCL1 MagEnc_CLKBit
00175 0000 000D 	#Define	RB5_In	PORTB,5	;TX Serial Data
00176 0000 000D 	#Define	RB6_In	PORTB,6	;ICSPCLK
00177 0000 000D 	#Define	RB7_In	PORTB,7	;ICSPDAT
00178 0000 	;
00179 0000 	;
00180 0000 	;========================================================================================
00181 0000 	;========================================================================================
00182 0000 	;
00183 0000 	;Constants
00184 0000 00FF 	All_In	EQU	0xFF
00185 0000 0000 	All_Out	EQU	0x00
00186 0000 	;
00187 0000 0009 	CCP1CON_Clr	EQU	b'00001001'
00188 0000 0008 	CCP1CON_Set	EQU	b'00001000'
00189 0000 000A 	CCP1CON_Idle	EQU	b'00001010'
00190 0000 	;
00191 0000 	;OSCCON_Value	EQU	b'01110010'	; 8 MHz
SerialServo.asm                                                       Page: 3
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00192 0000 00F0 	OSCCON_Value	EQU	b'11110000'	;32MHz
00193 0000 	;
00194 0000 	;T2CON_Value	EQU	b'01001110'	;T2 On, /16 pre, /10 post
00195 0000 004F 	T2CON_Value	EQU	b'01001111'	;T2 On, /64 pre, /10 post
00196 0000 007D 	PR2_Value	EQU	.125
00197 0000 	;
00198 0000 0064 	LEDTIME	EQU	d'100'	;1.00 seconds
00199 0000 000A 	LEDErrorTime	EQU	d'10'
00200 0000 0014 	LEDFastTime	EQU	d'20'
00201 0000 	;
00202 0000 	;T1CON_Val	EQU	b'00000001'	;Fosc=8MHz, PreScale=1,Fosc/4,Timer ON
00203 0000 0021 	T1CON_Val	EQU	b'00100001'	;Fosc=32MHz, PreScale=4,Fosc/4,Timer ON
00204 0000 	;
00205 0000 	;TXSTA_Value	EQU	b'00100000'	;8 bit, TX enabled, Async, low speed
00206 0000 0024 	TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, high speed
00207 0000 0090 	RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00208 0000 0008 	BAUDCON_Value	EQU	b'00001000'	;BRG16=1
00209 0000 	; 8MHz clock low speed (BRGH=0,BRG16=1)
00210 0000 	;Baud_300	EQU	d'1666'	;0.299, -0.02%
00211 0000 	;Baud_1200	EQU	d'416'	;1.199, -0.08%
00212 0000 	;Baud_2400	EQU	d'207'	;2.404, +0.16%
00213 0000 	;Baud_9600	EQU	d'51'	;9.615, +0.16%
00214 0000 	; 32MHz clock low speed (BRGH=1,BRG16=1)
00215 0000 682A 	Baud_300	EQU	.26666	;300, 0.00%
00216 0000 1A0A 	Baud_1200	EQU	.6666	;1200, 0.00%
00217 0000 0D04 	Baud_2400	EQU	.3332	;2400, +0.01%
00218 0000 0340 	Baud_9600	EQU	.832	;9604, +0.04%
00219 0000 01A0 	Baud_19200	EQU	.416	;19.18k, -0.08%
00220 0000 00CF 	Baud_38400	EQU	.207	;38.46k, +0.16%
00221 0000 008A 	Baud_57600	EQU	.138	;57.55k, -0.08%
00222 0000 00CF 	BaudRate	EQU	Baud_38400
00223 0000 	;
00224 0000 9C40 	kServoDwellTime	EQU	.40000	;20mS
00225 0000 4E20 	kServoFastDwellTime	EQU	.20000	;10mS
00226 0000 0003 	kSysMode	EQU	.3	;Default Mode Basic Servo
00227 0000 000A 	kServoSpeed	EQU	.10	;Slow 5uS/Update
00228 0000 0019 	kssFlags	EQU	b'00011001'	;ssEnableFastPWM,ssMode3IdleCenter,ssEnableOverCur=true
00229 0000 0032 	kssMaxI	EQU	.50	;Low
00230 0000 0708 	kMinPulseWidth	EQU	.1800	;900uS
00231 0000 0BB8 	kMidPulseWidth	EQU	.3000	;1500uS
00232 0000 1068 	kMaxPulseWidth	EQU	.4200	;2100uS
00233 0000 0B86 	kServoCenterStop	EQU	.2950
00234 0000 0BEA 	kServoFastForward	EQU	kServoCenterStop+.100
00235 0000 0B22 	kServoFastReverse	EQU	kServoCenterStop-.100
00236 0000 0064 	kDeadBand	EQU	.100	;100 encoder counts
00237 0000 0000 	kSysFlags	EQU	.0
00238 0000 0028 	kGripI	EQU	.40
00239 0000 	;
00240 0000 000A 	DebounceTime	EQU	.10
00241 0000 0004 	kMaxMode	EQU	.4
00242 0000 	;
00243 0000 	; AuxIO modes
00244 0000 0000 	kAuxIOnone	EQU	0x00
00245 0000 0001 	kAuxIOLEDBtn	EQU	0x01
00246 0000 0002 	kAuxIODigitalIn	EQU	0x02
00247 0000 0003 	kAuxIODigitalOut	EQU	0x03
00248 0000 0004 	kAuxIOAnalogIn	EQU	0x04
00249 0000 0005 	kAuxIOHomeSw	EQU	0x05
00250 0000 0006 	kAuxIOFwdLimit	EQU	0x06
00251 0000 0007 	kAuxIORevLimit	EQU	0x07
00252 0000 	;
00253 0000 	;================================================================================================
00254 0000 	;***** VARIABLE DEFINITIONS
00255 0000 	; there are 256 bytes of ram, Bank0 0x20..0x7F, Bank1 0xA0..0xEF, Bank2 0x120..0x16F
00256 0000 	; there are 256 bytes of EEPROM starting at 0x00 the EEPROM is not mapped into memory but
00257 0000 	;  accessed through the EEADR and EEDATA registers
00258 0000 	;================================================================================================
00259 0000 	;  Bank0 Ram 020h-06Fh 80 Bytes
00260 0000 	;
00261 0000 		cblock	0x20
00262 0000 	;
00263 0000 0020 		SysLED_Time		;sys LED time
00264 0000 0021 		SysLED_Blinks		;0=1 flash,1,2,3
00265 0000 0022 		SysLED_BlinkCount
00266 0000 0023 		SysLEDCount		;sys LED Timer tick count
00267 0000 	;
00268 0000 0024 		LED1_Blinks		;0=off,1,2,3
00269 0000 0025 		LED2_Blinks
00270 0000 0026 		LED1_BlinkCount		;LED1_Blinks..0
00271 0000 0027 		LED2_BlinkCount
00272 0000 0028 		LED1_Count		;tick count
00273 0000 0029 		LED2_Count
00274 0000 	;
00275 0000 002A 		EEAddrTemp		;EEProm address to read or write
00276 0000 002B 		EEDataTemp		;Data to be writen to EEProm
00277 0000 	;
00278 0000 002C 		Timer1Lo		;1st 16 bit timer
00279 0000 002D 		Timer1Hi		; 50 mS RX timeiout
00280 0000 002E 		Timer2Lo		;2nd 16 bit timer
00281 0000 002F 		Timer2Hi		;
00282 0000 0030 		Timer3Lo		;3rd 16 bit timer
00283 0000 0031 		Timer3Hi		;GP wait timer
00284 0000 0032 		Timer4Lo		;4th 16 bit timer
00285 0000 0033 		Timer4Hi		; debounce timer
00286 0000 	;
00287 0000 0034 		TXByte		;Next byte to send
00288 0000 0035 		RXByte		;Last byte received
00289 0000 0036 		SerFlags
00290 0000 	;
SerialServo.asm                                                       Page: 4
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00291 0000 	;
00292 0000 0037 		ssCmdPos:2		;Commanded position, 0=not used
00293 0000 0039 		ssCurPos:2
00294 0000 003B 		ssMD3_Dest:2
00295 0000 003D 		ssTempFlags
00296 0000 003E 		ssStatus:4		;Status and condition flags for the user.
00297 0000 	;
00298 0000 0042 		EncoderAccum:3		;Accumulated distance
00299 0000 0045 		EncoderVal:2		;Value last read, raw 12 bit data
00300 0000 	;-----------------------
00301 0000 	;Below here are saved in eprom
00302 0000 0047 		EncoderFlags
00303 0000 0048 	                       EncoderHome:2                                 ;Absolute Home
00304 0000 004A 	                       EncoderOffset:2		;Used in mode 2 for single rotation
00305 0000 	;
00306 0000 004C 		ServoFastForward:2
00307 0000 004E 		ServoFastReverse:2
00308 0000 0050 		ServoStopCenter:2		;Mode 3 Idle position
00309 0000 0052 		ServoMin_uS:2
00310 0000 0054 		ServoMax_uS:2
00311 0000 0056 		ServoSpeed		;0 = off, 1..63 position change per cycle
00312 0000 0057 		SysMode
00313 0000 0058 		RS232_MasterAddr
00314 0000 0059 		RS232_SlaveAddr
00315 0000 005A 		ssFlags		;Serial Servo flags
00316 0000 005B 		ssMaxI		;Max Current 0=off
00317 0000 005C 		DeadBand		;Used by Mode 2
00318 0000 005D 		ssGripI		;Gripper tension
00319 0000 005E 		ssAux0Config
00320 0000 005F 		ssAux1Config
00321 0000 0060 		ssAux2Config
00322 0000 0061 		SysFlags		;saved in eprom 0x64 must
00323 0000 				; move something to another
00324 0000 				; bank before adding anything new
00325 0000 	;
00326 0000 		endc
00327 0000 	;--------------------------------------------------------------
00328 0000 	;---SerFlags bits---
00329 0000 0036 	#Define	DataReceivedFlag	SerFlags,1
00330 0000 0036 	#Define	DataSentFlag	SerFlags,2
00331 0000 	;
00332 0000 	;---ssTempFlags bits---
00333 0000 003D 	#Define	PulseSent	ssTempFlags,0
00334 0000 003D 	#Define	ServoOff	ssTempFlags,1
00335 0000 003D 	#Define	ServoIdle	ssTempFlags,2
00336 0000 003D 	#Define	OverCurrentFlag	ssTempFlags,3
00337 0000 003D 	#Define	GripIMet	ssTempFlags,4
00338 0000 003D 	#Define	GripIOver	ssTempFlags,5
00339 0000 	;
00340 0000 	;----ssStatus bits
00341 0000 003E 	#Define	MD3_FFwd	ssStatus,0
00342 0000 003E 	#Define	MD3_FRev	ssStatus,1
00343 0000 003E 	#Define	ssio_OverCurSD	ssStatus,2	;Servo stopped for over-current
00344 0000 003E 	#Define	ssRX_Timeout	ssStatus,3	;cleared by host read
00345 0000 003E 	#Define	ssGripOCur	ssStatus,4	;cleared by host read
00346 0000 003E 	#Define	ssGripMCur	ssStatus,5	;cleared by host read
00347 0000 	;
00348 0000 	; all bits of ssStatus+1 are cleared by a host kCmd_GetStatus command.
00349 0000 003F 	#Define	ssEncParityError	ssStatus+1,0	;cleared by host read
00350 0000 003F 	#Define	ssEncCmdError	ssStatus+1,1	;cleared by host read	
00351 0000 	;
00352 0000 	;---------------
00353 0000 0047 	#Define	FirstRAMParam	EncoderFlags
00354 0000 0061 	#Define	LastRAMParam	SysFlags
00355 0000 	;
00356 0000 	;---ssFlags bits---
00357 0000 005A 	#Define	ssEnableOverCur	ssFlags,0	;disable if current is too high
00358 0000 005A 	#Define	ssReverseDir	ssFlags,1	;if set ServoFastForward<=>ServoFastReverse
00359 0000 	;
00360 0000 005A 	#Define	ssMode3IdleCenter	ssFlags,3	;0= Disable PWM, 1= output ServoStopCenter
00361 0000 005A 	#Define	ssEnableFastPWM	ssFlags,4	;0= 20mS PWM, 1= 10mS PWM
00362 0000 005A 	#Define	ssEnableAN4	ssFlags,5	;0= Mode 0,1 disabled; 1= Enabled;
00363 0000 	;
00364 0000 0061 	#Define	SW1_Flag	SysFlags,0
00365 0000 0061 	#Define	SW2_Flag	SysFlags,1
00366 0000 0061 	#Define	SW3_Flag	SysFlags,2
00367 0000 0061 	#Define	SW4_Flag	SysFlags,3
00368 0000 	;
00369 0000 	;================================================================================================
00370 0000 	;  Bank1 Ram 0A0h-0EFh 80 Bytes
00371 0000 		cblock	0x0A0
00372 0000 00A0 		RX_ParseFlags
00373 0000 00A1 		RX_Flags
00374 0000 00A2 		RX_DataCount
00375 0000 00A3 		RX_CSUM
00376 0000 00A4 		RX_SrcAdd:RP_AddressBytes
00377 0000 00A5 		RX_DstAdd:RP_AddressBytes
00378 0000 00A6 		RX_TempData:RP_DataBytes
00379 0000 00AA 		RX_Data:RP_DataBytes
00380 0000 00AE 		TX_Data:RP_DataBytes
00381 0000 	;
00382 0000 00B2 		ANFlags
00383 0000 00B3 		Cur_AN0:2		;IServo
00384 0000 00B5 		Cur_AN1:2		;Battery Volts
00385 0000 00B7 		Cur_AN2:2		;SW1_LED1
00386 0000 00B9 		Cur_AN3:2		;SW2_LED2
00387 0000 	;
00388 0000 00BB 		OldAN0Value:2
00389 0000 		endc
SerialServo.asm                                                       Page: 5
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00390 0000 	;
00391 0000 00B3 	#Define	ServoCurrent	Cur_AN0
00392 0000 00B5 	#Define	BattVolts	Cur_AN1
00393 0000 00B7 	#Define	ModeZeroPot	Cur_AN2
00394 0000 	;
00395 0000 	;---ANFlags bits---
00396 0000 00B2 	#Define	NewDataAN0	ANFlags,0
00397 0000 00B2 	#Define	NewDataAN1	ANFlags,1
00398 0000 	;
00399 0000 	;================================================================================================
00400 0000 	;  Bank2 Ram 120h-16Fh 80 Bytes
00401 0000 	;
00402 0000 0002 	#Define	Ser_Buff_Bank	2
00403 0000 	;
00404 0000 		cblock	0x120
00405 0000 0120 		Ser_In_Bytes		;Bytes in Ser_In_Buff
00406 0000 0121 		Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00407 0000 0122 		Ser_In_InPtr
00408 0000 0123 		Ser_In_OutPtr
00409 0000 0124 		Ser_Out_InPtr
00410 0000 0125 		Ser_Out_OutPtr
00411 0000 0126 		Ser_In_Buff:20
00412 0000 0146 		Ser_Out_Buff:20
00413 0000 		endc
00414 0000 	;
00415 0000 	;================================================================================================
00416 0000 	;  Bank3 Ram 1A0h-1EFh 80 Bytes
00417 0000 	;=========================================================================================
00418 0000 	;  Bank5 Ram 2A0h-2EFh 80 Bytes
00419 0000 	;
00420 0000 		cblock	0x2A0
00421 0000 02A0 		SigOutTime
00422 0000 02A1 		SigOutTimeH
00423 0000 02A2 		CalcdDwell
00424 0000 02A3 		CalcdDwellH
00425 0000 		endc
00426 0000 	;
00427 0000 	;=======================================================================================================
00428 0000 	;  Common Ram 70-7F same for all banks
00429 0000 	;      except for ISR_W_Temp these are used for paramiter passing and temp vars
00430 0000 	;=======================================================================================================
00431 0000 	;
00432 0000 		cblock	0x70
00433 0000 0070 		Param70
00434 0000 0071 		Param71
00435 0000 0072 		Param72
00436 0000 0073 		Param73
00437 0000 0074 		Param74
00438 0000 0075 		Param75
00439 0000 0076 		Param76
00440 0000 0077 		Param77
00441 0000 0078 		Param78
00442 0000 0079 		Param79
00443 0000 007A 		Param7A
00444 0000 007B 		Param7B
00445 0000 007C 		Param7C
00446 0000 007D 		Param7D
00447 0000 007E 		Param7E
00448 0000 007F 		Param7F
00449 0000 		endc
00450 0000 	;
00451 0000 	;=========================================================================================
00452 0000 	;Conditions
00453 0000 0080 	HasISR	EQU	0x80	;used to enable interupts 0x80=true 0x00=false
00454 0000 	;
00455 0000 0070 	AS5047D_Flags	EQU	Param70	;Check that Param70 is OK to use
00456 0000 	;
00457 0000 0070 	#Define	ParityErrFlag	AS5047D_Flags,0
00458 0000 0070 	#Define	AngleReadFlag	AS5047D_Flags,1
00459 0000 0070 	#define	ContinueReadFlag	AS5047D_Flags,2
00460 0000 0070 	#Define	CmdErrorFlag	AS5047D_Flags,3
00461 0000 	;
00462 0000 	;=========================================================================================
00463 0000 	;==============================================================================================
00464 0000 	; ID Locations
00465 0000 		__idlocs	0x10b4
00466 0000 	;
00467 0000 	;==============================================================================================
00468 0000 	; EEPROM locations (NV-RAM) 0x00..0x7F (offsets)
00469 0000 	;
00470 0000 	; default values
00471 0000 		ORG	0xF000
00472 F000 0000 		de	0x00	;nvEncoderFlags
00473 F001 0000 0000 		de	0x00,0x00	;nvEncoderHome
00474 F003 0000 0000 		de	0x00,0x00	;nvEncoderOffset
00475 F005 00EA 		de	low kServoFastForward
00476 F006 000B 		de	high kServoFastForward
00477 F007 0022 		de	low kServoFastReverse
00478 F008 000B 		de	high kServoFastReverse
00479 F009 0086 		de	low kServoCenterStop	;nvServoStopCenter
00480 F00A 000B 		de	high kServoCenterStop
00481 F00B 0008 		de	low kMinPulseWidth	;nvServoMin_uS
00482 F00C 0007 		de	high kMinPulseWidth
00483 F00D 0068 		de	low kMaxPulseWidth	;nvServoMax_uS
00484 F00E 0010 		de	high kMaxPulseWidth
00485 F00F 000A 		de	kServoSpeed	;nvServoSpeed
00486 F010 0003 		de	kSysMode	;nvSysMode
00487 F011 0001 		de	kRS232_MasterAddr	;nvRS232_MasterAddr, 0x0F
00488 F012 0002 		de	kRS232_SlaveAddr	;nvRS232_SlaveAddr, 0x10
SerialServo.asm                                                       Page: 6
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00489 F013 0019 		de	kssFlags	;nvssFlags
00490 F014 0032 		de	kssMaxI	;nvssMaxI
00491 F015 0064 		de	kDeadBand	;nvDeadBand
00492 F016 0028 		de	kGripI
00493 F017 0000 		de	0x00	;ssAux0Config
00494 F018 0000 		de	0x00	;ssAux1Config
00495 F019 0000 		de	0x00	;ssAux2Config
00496 F01A 0000 		de	kSysFlags	;nvSysFlags
00497 F01B 	;
00498 F01B 		ORG	0xF0FF
00499 F0FF 0000 		de	0x00	;Skip BootLoader
00500 F100 	;
00501 F100 		cblock	0x0000
00502 F100 	;
00503 F100 0000 		nvEncoderFlags
00504 F100 0001 	                       nvEncoderHome:2
00505 F100 0003 	                       nvEncoderOffset:2
00506 F100 	;
00507 F100 0005 		nvServoFastForward:2
00508 F100 0007 		nvServoFastReverse:2
00509 F100 0009 		nvServoStopCenter:2
00510 F100 000B 		nvServoMin_uS:2
00511 F100 000D 		nvServoMax_uS:2
00512 F100 000F 		nvServoSpeed
00513 F100 0010 		nvSysMode
00514 F100 0011 		nvRS232_MasterAddr
00515 F100 0012 		nvRS232_SlaveAddr
00516 F100 0013 		nvssFlags
00517 F100 0014 		nvssMaxI
00518 F100 0015 		nvDeadBand
00519 F100 0016 		nvssGripI
00520 F100 0017 		nvssAux0Config
00521 F100 0018 		nvssAux1Config
00522 F100 0019 		nvssAux2Config
00523 F100 001A 		nvSysFlags
00524 F100 		endc
00525 F100 	;
00526 F100 0000 	#Define	nvFirstParamByte	nvEncoderFlags
00527 F100 001A 	#Define	nvLastParamByte	nvSysFlags
00528 F100 	;
00529 F100 	;
00530 F100 	;==============================================================================================
00531 F100 	;============================================================================================
00532 F100 	;
00533 F100 1E00 	BootLoaderStart	EQU	0x1E00
00534 F100 	;
00535 F100 		ORG	0x000	; processor reset vector
00536 0000 319E 		movlp	high BootLoaderStart
00537 0001 2E00 		goto	BootLoaderStart
00538 0002 018A 	ProgStartVector	CLRF	PCLATH
00539 0003 2BBB 	  	goto	start	; go to beginning of program
00540 0004 	;
00541 0004 	;===============================================================================================
00542 0004 	; Interupt Service Routine
00543 0004 	;
00544 0004 	; we loop through the interupt service routing every 0.008192 seconds
00545 0004 	;
00546 0004 	;
00547 0004 		ORG	0x004	; interrupt vector location
00548 0004 018A 		CLRF	PCLATH
00549 0005 0188 		CLRF	BSR	; bank0
00550 0006 	;
00551 0006 	;
00552 0006 1C91 		BTFSS	PIR1,TMR2IF
00553 0007 2888 		goto	SystemTick_end
00554 0008 	;
00555 0008 1091 		BCF	PIR1,TMR2IF	; reset interupt flag bit
00556 0009 	;------------------
00557 0009 	; These routines run 100 times per second
00558 0009 	;
00559 0009 	;------------------
00560 0009 	;Decrement timers until they are zero
00561 0009 	;
00562 0009 210A 		call	DecTimer1	;if timer 1 is not zero decrement
00563 000A 2108 		call	DecTimer2
00564 000B 2106 		call	DecTimer3
00565 000C 2104 		call	DecTimer4
00566 000D 	;
00567 000D 	;-----------------------------------------------------------------
00568 000D 	; blink LEDs
00569 000D 	;
00570 000D 	; All LEDs off
00571 000D 0021 		movlb	0x01	;bank 1
00572 000E 178C 		bsf	SysLED_Tris
00573 000F 	;
00574 000F 150C 		BSF	LED1_Tris
00575 0010 158C 		BSF	LED2_Tris
00576 0011 	;
00577 0011 	; Read Switches
00578 0011 0020 		movlb	0x00	;bank 0
00579 0012 	;--------------------
00580 0012 	; Sys LED time
00581 0012 0BA3 		DECFSZ	SysLEDCount,F	;Is it time?
00582 0013 3208 		bra	SystemBlink_end	; No, not yet
00583 0014 	;
00584 0014 08A1 		movf	SysLED_Blinks,F
00585 0015 		SKPNZ		;Standard Blinking?
00585 0015 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00586 0016 3200 		bra	SystemBlink_Std	; Yes
SerialServo.asm                                                       Page: 7
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00587 0017 	;
00588 0017 	; custom blinking
00589 0017 	;
00590 0017 01A2 	SystemBlink_Std	CLRF	SysLED_BlinkCount
00591 0018 0820 		MOVF	SysLED_Time,W
00592 0019 00A3 	SystemBlink_DoIt	MOVWF	SysLEDCount
00593 001A 0021 		movlb	0x01	;bank 1
00594 001B 138C 		bcf	SysLED_Tris	;LED ON
00595 001C 	SystemBlink_end:
00596 001C 	;--------------------
00597 001C 	; Flash LEDs
00598 001C 0020 		movlb	0x00	;bank 0
00599 001D 085E 		movf	ssAux0Config,W
00600 001E 390F 		andlw	0x0F
00601 001F 3C01 		sublw	kAuxIOLEDBtn
00602 0020 		SKPZ
00602 0020 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00603 0021 3220 		bra	LED1_Blink_end
00604 0022 	; Get Button Value
00605 0022 0021 		movlb	0x01	;bank 1
00606 0023 150C 		BSF	LED1_Tris
00607 0024 0020 		movlb	0x00	;bank 0
00608 0025 1061 		BCF	SW1_Flag
00609 0026 1D0C 		BTFSS	SW1_In
00610 0027 1461 		BSF	SW1_Flag
00611 0028 	;
00612 0028 08A4 		movf	LED1_Blinks,F
00613 0029 		SKPZ		;LED1 active?
00613 0029 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00614 002A 3203 		bra	LED1_Blinking	; Yes
00615 002B 01A6 		clrf	LED1_BlinkCount
00616 002C 01A8 		clrf	LED1_Count
00617 002D 3214 		bra	LED1_Blink_end
00618 002E 	;
00619 002E 0828 	LED1_Blinking	movf	LED1_Count,W
00620 002F 0426 		iorwf	LED1_BlinkCount,W
00621 0030 		SKPNZ		;Startup?
00621 0030 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00622 0031 320A 		bra	LED1_Start
00623 0032 	;
00624 0032 0BA8 		decfsz	LED1_Count,F	;Done w/ blink
00625 0033 320E 		bra	LED1_Blink_end	; no
00626 0034 	;
00627 0034 08A6 		movf	LED1_BlinkCount,F
00628 0035 		SKPNZ		;Done w/ cycle?
00628 0035 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00629 0036 3205 		bra	LED1_Start	; Yes
00630 0037 	;
00631 0037 0BA6 		decfsz	LED1_BlinkCount,F
00632 0038 3205 		bra	LED1_NextBlink
00633 0039 3064 		movlw	LEDTIME	;long off time
00634 003A 00A8 		movwf	LED1_Count
00635 003B 3206 		bra	LED1_Blink_end
00636 003C 	;
00637 003C 0824 	LED1_Start	movf	LED1_Blinks,W
00638 003D 00A6 		movwf	LED1_BlinkCount
00639 003E 3014 	LED1_NextBlink	movlw	LEDFastTime
00640 003F 00A8 		movwf	LED1_Count
00641 0040 	;
00642 0040 0021 		movlb	0x01
00643 0041 110C 		BCF	LED1_Tris
00644 0042 	LED1_Blink_end:
00645 0042 	;-------------
00646 0042 	;kAuxIODigitalOut
00647 0042 0020 		movlb	0x00	;bank 0
00648 0043 085E 		movf	ssAux0Config,W
00649 0044 390F 		andlw	0x0F
00650 0045 3C03 		sublw	kAuxIODigitalOut
00651 0046 		SKPZ
00651 0046 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00652 0047 320A 		bra	Aux0DigOut_end
00653 0048 	;
00654 0048 1C24 		btfss	LED1_Blinks,0
00655 0049 3203 		bra	Aux0DigOut_1
00656 004A 0022 		movlb	0x02	;bank 2
00657 004B 150C 		bsf	LED1_Lat
00658 004C 3203 		bra	Aux0DigOut_2
00659 004D 	;
00660 004D 0022 	Aux0DigOut_1	movlb	0x02	;bank 2
00661 004E 110C 		bcf	LED1_Lat
00662 004F 3200 		bra	Aux0DigOut_2
00663 0050 	;
00664 0050 0021 	Aux0DigOut_2	movlb	0x01	;bank 1
00665 0051 110C 		BCF	LED1_Tris
00666 0052 	Aux0DigOut_end:
00667 0052 	;-------------
00668 0052 0020 		movlb	0x00	;bank 0
00669 0053 085F 		movf	ssAux1Config,W
00670 0054 390F 		andlw	0x0F
00671 0055 3C01 		sublw	kAuxIOLEDBtn
00672 0056 		SKPZ
00672 0056 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00673 0057 3220 		bra	LED2_Blink_end
00674 0058 	; Get Button Value
00675 0058 0021 		movlb	0x01	;bank 1
00676 0059 158C 		BSF	LED2_Tris
00677 005A 0020 		movlb	0x00	;bank 0
00678 005B 10E1 		BCF	SW2_Flag
00679 005C 1D8C 		BTFSS	SW2_In
SerialServo.asm                                                       Page: 8
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00680 005D 14E1 		BSF	SW2_Flag
00681 005E 	;
00682 005E 08A5 		movf	LED2_Blinks,F
00683 005F 		SKPZ		;LED2 active?
00683 005F 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00684 0060 3203 		bra	LED2_Blinking	; Yes
00685 0061 01A7 		clrf	LED2_BlinkCount
00686 0062 01A9 		clrf	LED2_Count
00687 0063 3214 		bra	LED2_Blink_end
00688 0064 	;
00689 0064 0829 	LED2_Blinking	movf	LED2_Count,W
00690 0065 0427 		iorwf	LED2_BlinkCount,W
00691 0066 		SKPNZ		;Startup?
00691 0066 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00692 0067 320A 		bra	LED2_Start
00693 0068 	;
00694 0068 0BA9 		decfsz	LED2_Count,F	;Done w/ blink
00695 0069 320E 		bra	LED2_Blink_end	; no
00696 006A 	;
00697 006A 08A7 		movf	LED2_BlinkCount,F
00698 006B 		SKPNZ		;Done w/ cycle?
00698 006B 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00699 006C 3205 		bra	LED2_Start	; Yes
00700 006D 	;
00701 006D 0BA7 		decfsz	LED2_BlinkCount,F
00702 006E 3205 		bra	LED2_NextBlink
00703 006F 3064 		movlw	LEDTIME	;long off time
00704 0070 00A9 		movwf	LED2_Count
00705 0071 3206 		bra	LED2_Blink_end
00706 0072 	;
00707 0072 0825 	LED2_Start	movf	LED2_Blinks,W
00708 0073 00A7 		movwf	LED2_BlinkCount
00709 0074 3014 	LED2_NextBlink	movlw	LEDFastTime
00710 0075 00A9 		movwf	LED2_Count
00711 0076 	;
00712 0076 0021 		movlb	0x01
00713 0077 118C 		BCF	LED2_Tris
00714 0078 	LED2_Blink_end:
00715 0078 	;-------------
00716 0078 	;kAuxIODigitalOut
00717 0078 0020 		movlb	0x00	;bank 0
00718 0079 085F 		movf	ssAux1Config,W
00719 007A 390F 		andlw	0x0F
00720 007B 3C03 		sublw	kAuxIODigitalOut
00721 007C 		SKPZ
00721 007C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00722 007D 320A 		bra	Aux1DigOut_end
00723 007E 	;
00724 007E 1C25 		btfss	LED2_Blinks,0
00725 007F 3203 		bra	Aux1DigOut_1
00726 0080 0022 		movlb	0x02	;bank 2
00727 0081 158C 		bsf	LED2_Lat
00728 0082 3203 		bra	Aux1DigOut_2
00729 0083 	;
00730 0083 0022 	Aux1DigOut_1	movlb	0x02	;bank 2
00731 0084 118C 		bcf	LED2_Lat
00732 0085 3200 		bra	Aux1DigOut_2
00733 0086 	;
00734 0086 0021 	Aux1DigOut_2	movlb	0x01	;bank 1
00735 0087 118C 		BCF	LED2_Tris
00736 0088 	Aux1DigOut_end:
00737 0088 	;-------------
00738 0088 	;
00739 0088 	SystemTick_end:
00740 0088 	;
00741 0088 	;==================================================================================
00742 0088 	;
00743 0088 	; Handle CCP1 Interupt Flag, Enter w/ bank 0 selected
00744 0088 	;
00745 0088 0020 	IRQ_Servo1	MOVLB	0	;bank 0
00746 0089 1D11 		BTFSS	PIR1,CCP1IF
00747 008A 323B 		bra	IRQ_Servo1_End
00748 008B 	;
00749 008B 143D 		bsf	PulseSent	;ok to update CurPos
00750 008C 	;
00751 008C 1CBD 		BTFSS	ServoOff	;Are we sending a pulse?
00752 008D 3204 		bra	IRQ_Servo1_1	; Yes
00753 008E 	;
00754 008E 	;Servo is off, idle CCP1 and keep output low
00755 008E 0025 		MOVLB	0x05	;Bank 5
00756 008F 300A 		movlw	CCP1CON_Idle
00757 0090 0093 		movwf	CCP1CON
00758 0091 322E 		bra	IRQ_Servo1_Dwell
00759 0092 	;
00760 0092 193D 	IRQ_Servo1_1	btfsc	ServoIdle
00761 0093 321E 		bra	IRQ_Servo1_Idle
00762 0094 0025 		MOVLB	0x05	;Bank 5
00763 0095 1893 		BTFSC	CCP1CON,CCP1M1	;Idling?
00764 0096 3227 		bra	IRQ_Servo1_OL	; Yes, go high after dwell
00765 0097 1813 		BTFSC	CCP1CON,CCP1M0	;Cleared output on match?
00766 0098 3225 		bra	IRQ_Servo1_OL	; No
00767 0099 	; An output just went high
00768 0099 	;
00769 0099 0820 	IRQ_Servo1_OH	MOVF	SigOutTime,W	;Put the pulse into the CCP reg.
00770 009A 0791 		ADDWF	CCPR1L,F
00771 009B 0821 		MOVF	SigOutTime+1,W
00772 009C 3D92 		ADDWFC	CCPR1H,F
00773 009D 3009 		MOVLW	CCP1CON_Clr	;Clear output on match
00774 009E 0093 		MOVWF	CCP1CON	;CCP1 clr on match
SerialServo.asm                                                       Page: 9
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00775 009F 	;Calculate dwell time
00776 009F 0020 		movlb	0	;bank 0
00777 00A0 1E5A 		btfss	ssEnableFastPWM
00778 00A1 3206 		bra	IRQ_Servo1_20mS
00779 00A2 0025 		movlb	5	;Bank 5
00780 00A3 3020 		MOVLW	LOW kServoFastDwellTime
00781 00A4 00A2 		MOVWF	CalcdDwell
00782 00A5 304E 		MOVLW	HIGH kServoFastDwellTime
00783 00A6 00A3 		MOVWF	CalcdDwellH
00784 00A7 3205 		bra	IRQ_Servo1_CalcDwell
00785 00A8 	;
00786 00A8 0025 	IRQ_Servo1_20mS	movlb	5	;Bank 5
00787 00A9 3040 		MOVLW	LOW kServoDwellTime
00788 00AA 00A2 		MOVWF	CalcdDwell
00789 00AB 309C 		MOVLW	HIGH kServoDwellTime
00790 00AC 00A3 		MOVWF	CalcdDwellH
00791 00AD 	;
00792 00AD 0820 	IRQ_Servo1_CalcDwell	MOVF	SigOutTime,W
00793 00AE 02A2 		SUBWF	CalcdDwell,F
00794 00AF 0821 		MOVF	SigOutTime+1,W
00795 00B0 3BA3 		SUBWFB	CalcdDwellH,F
00796 00B1 3212 		bra	IRQ_Servo1_X
00797 00B2 	;
00798 00B2 0025 	IRQ_Servo1_Idle	MOVLB	0x05
00799 00B3 1893 		BTFSC	CCP1CON,CCP1M1	;Idling?
00800 00B4 320B 		bra	IRQ_Servo1_Dwell	; yes, continue idling.
00801 00B5 1C13 		BTFSS	CCP1CON,CCP1M0	;Just went low?
00802 00B6 33E2 		bra	IRQ_Servo1_OH	; No, finish pulse
00803 00B7 300A 		movlw	CCP1CON_Idle	; Yes, start idling
00804 00B8 0093 		movwf	CCP1CON
00805 00B9 3040 		MOVLW	LOW kServoDwellTime
00806 00BA 00A2 		MOVWF	CalcdDwell
00807 00BB 309C 		MOVLW	HIGH kServoDwellTime
00808 00BC 00A3 		MOVWF	CalcdDwellH
00809 00BD 3202 		bra	IRQ_Servo1_Dwell
00810 00BE 	;
00811 00BE 	; output went low so this cycle is done
00812 00BE 3008 	IRQ_Servo1_OL	MOVLW	CCP1CON_Set	;Set output on match
00813 00BF 0093 		MOVWF	CCP1CON
00814 00C0 	;
00815 00C0 0822 	IRQ_Servo1_Dwell	MOVF	CalcdDwell,W
00816 00C1 0791 		ADDWF	CCPR1L,F
00817 00C2 0823 		MOVF	CalcdDwellH,W
00818 00C3 3D92 		ADDWFC	CCPR1H,F
00819 00C4 	;
00820 00C4 0020 	IRQ_Servo1_X	MOVLB	0x00
00821 00C5 1111 		BCF	PIR1,CCP1IF
00822 00C6 	IRQ_Servo1_End:
00823 00C6 	;-----------------------------------------------------------------------------------------
00824 00C6 	;AUSART Serial ISR
00825 00C6 	;
00826 00C6 1E91 	IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00827 00C7 3201 		BRA	IRQ_Ser_End
00828 00C8 22C1 		CALL	RX_TheByte
00829 00C9 	;
00830 00C9 	IRQ_Ser_End:
00831 00C9 	;-----------------------------------------------------------------------------------------
00832 00C9 0009 		retfie		; return from interrupt
00833 00CA 	;
00834 00CA 	;
00835 00CA 	;=========================================================================================
00836 00CA 	;*****************************************************************************************
00837 00CA 	;=========================================================================================
00838 00CA 	;
00839 00CA 		include <F1847_Common.inc>
00001 00CA 	;=========================================================================================
00002 00CA 	; Commonly used routines PIC16F1847 version
00003 00CA 	;
00004 00CA 	;    Filename:      F1847 Common.inc
00005 00CA 	;    Date:          4/6/2019
00006 00CA 	;    File Version:  1.0.2
00007 00CA 	;
00008 00CA 	;    Author:        David M. Flynn
00009 00CA 	;    Company:       Oxford V.U.E., Inc.
00010 00CA 	;    E-Mail:        dflynn@oxfordvue.com
00011 00CA 	;    Web Site:      http://www.oxfordvue.com/
00012 00CA 	;
00013 00CA 	;=========================================================================================
00014 00CA 	;    History:
00015 00CA 	;
00016 00CA 	; 1.0.2  4/6/2019	Fixes to EERead/EEwrite
00017 00CA 	; 1.0.2 2/16/2019	Fix: added FSR0H to DecTimer.
00018 00CA 	; 1.0.1 11/21/2015	Updates DecTimer.
00019 00CA 	; 1.0   11/16/2013	Updated from F648A Common.inc
00020 00CA 	;
00021 00CA 	;=========================================================================================
00022 00CA 	; Routines:
00023 00CA 	;
00024 00CA 	; ClearRam	(2+0) Clears all RAM, call once before initializing variables, FSR0
00025 00CA 	; CopyToRam	(1+0) copy param memory (EEPROM) to ram, call once, FSR0
00026 00CA 	; SaveParams	(1+0) copy ram to param memory (EEPROM), FSR0
00027 00CA 	;
00028 00CA 	;  Set FSR0H before calling these routines
00029 00CA 	; DecTimer4	(0+0) Decrement routine for 16 bit timers, FSR0
00030 00CA 	; DecTimer3
00031 00CA 	; DecTimer2
00032 00CA 	; DecTimer1
00033 00CA 	; DecTimer	(0+0) High byte of counter address in W
00034 00CA 	;
SerialServo.asm                                                       Page: 10
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00035 00CA 	; TestT4_Zero	Test for 16 bit timers = zero
00036 00CA 	; TestT3_Zero	If Timer is zero return Z flag,1 else Z=0
00037 00CA 	; TestT2_Zero
00038 00CA 	; TestT1_Zero
00039 00CA 	;
00040 00CA 	; Delay10uS	(0+0)Delay uS    1 cycle = 1uS, 8Mhz clock version
00041 00CA 	; Delay100uS
00042 00CA 	; Delay40uS
00043 00CA 	; DelayWuS
00044 00CA 	;
00045 00CA 	; EEReadW	(0+0) Read EEPROM address in W
00046 00CA 	; EERead	(0+0) Read EEPROM address in EEAddrTemp
00047 00CA 	; EEWriteW	(0+0) Write EEPROM address in W, Data in EEDataTemp
00048 00CA 	; EEWrite	(0+0) Write EEPROM address in EEAdrTemp, Data in EEDataTemp, FSR0
00049 00CA 	;
00050 00CA 	;=========================================================================================
00051 00CA 		ifndef UseEEParams
00053 00CA 		endif
00054 00CA 	;=========================================================================================
00055 00CA 	; Clears all RAM
00056 00CA 	; Entry: none
00057 00CA 	; Exit: none
00058 00CA 	; RAM used: All
00059 00CA 	; Calls:(2+0) ClearRam_L2
00060 00CA 	;
00061 00CA 0020 	ClearRam	MOVLB	0x00
00062 00CB 305F 		MOVLW	0x5F	;Clear 20h-7Eh, 95 bytes
00063 00CC 00FF 		MOVWF	Param7F
00064 00CD 3020 		MOVLW	0x20
00065 00CE 0084 		MOVWF	FSR0
00066 00CF 0185 		CLRF	FSR0H
00067 00D0 20E4 		CALL	ClearRam_L2
00068 00D1 	;
00069 00D1 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00070 00D2 00FF 		MOVWF	Param7F
00071 00D3 30A0 		MOVLW	0xA0
00072 00D4 0084 		MOVWF	FSR0
00073 00D5 20E4 		CALL	ClearRam_L2
00074 00D6 	;
00075 00D6 0A85 		INCF	FSR0H,F	
00076 00D7 20DB 		CALL	ClearRam_2	;Banks 2,3
00077 00D8 0A85 		INCF	FSR0H,F	
00078 00D9 20DB 		CALL	ClearRam_2	;Banks 4,5
00079 00DA 0A85 		INCF	FSR0H,F	;Banks 6,7
00080 00DB 	;	
00081 00DB 3050 	ClearRam_2	MOVLW	0x50	;Clear 120h-16Fh, 80 bytes
00082 00DC 00FF 		MOVWF	Param7F
00083 00DD 3020 		MOVLW	0x20
00084 00DE 0084 		MOVWF	FSR0
00085 00DF 20E4 		CALL	ClearRam_L2
00086 00E0 	;
00087 00E0 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00088 00E1 00FF 		MOVWF	Param7F
00089 00E2 30A0 		MOVLW	0xA0
00090 00E3 0084 		MOVWF	FSR0
00091 00E4 	;
00092 00E4 0180 	ClearRam_L2	CLRF	INDF0
00093 00E5 0A84 		INCF	FSR0,F
00094 00E6 0BFF 		DECFSZ	Param7F,F
00095 00E7 33FC 		bra	ClearRam_L2
00096 00E8 0008 		RETURN
00097 00E9 	;
00098 00E9 		if UseEEParams
00099 00E9 	;==========================================================================
00100 00E9 	; copy param memory to ram
00101 00E9 	;
00102 00E9 3000 	CopyToRam	MOVLW	nvFirstParamByte
00103 00EA 00AA 		MOVWF	EEAddrTemp
00104 00EB 3047 		MOVLW	FirstRAMParam
00105 00EC 0084 		MOVWF	FSR0L
00106 00ED 0185 		CLRF	FSR0H
00107 00EE 2134 	CopyToRam_L1	CALL	EERead
00108 00EF 001A 		movwi	FSR0++
00109 00F0 0AAA 		INCF	EEAddrTemp,F
00110 00F1 3062 		MOVLW	LastRAMParam+1
00111 00F2 0204 		SUBWF	FSR0L,W
00112 00F3 		SKPZ
00112 00F3 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00113 00F4 33F9 		BRA	CopyToRam_L1
00114 00F5 0008 		RETURN
00115 00F6 	;
00116 00F6 	;===========================================================================
00117 00F6 	; copy ram to param memory
00118 00F6 	;
00119 00F6 3000 	SaveParams	MOVLW	nvFirstParamByte
00120 00F7 00AA 		MOVWF	EEAddrTemp
00121 00F8 3047 		MOVLW	FirstRAMParam
00122 00F9 0084 		MOVWF	FSR0L
00123 00FA 0185 		CLRF	FSR0H
00124 00FB 0012 	SaveParams_L1	moviw	FSR0++
00125 00FC 00AB 		MOVWF	EEDataTemp
00126 00FD 213E 		CALL	EEWrite
00127 00FE 0AAA 		INCF	EEAddrTemp,F
00128 00FF 3062 		MOVLW	LastRAMParam+1	;last byte
00129 0100 0204 		SUBWF	FSR0L,W
00130 0101 		SKPZ
00130 0101 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00131 0102 33F8 		BRA	SaveParams_L1
00132 0103 0008 		RETURN
SerialServo.asm                                                       Page: 11
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00133 0104 	;
00134 0104 		endif
00135 0104 	;=====================================================================================================
00136 0104 	;=========================================================================================================
00137 0104 	; Decrement routine for 16 bit timers
00138 0104 	; Set FSR0H before calling these routines.
00139 0104 	;
00140 0104 3033 	DecTimer4	movlw	Timer4Hi
00141 0105 3205 		bra	DecTimer
00142 0106 3031 	DecTimer3	movlw	Timer3Hi
00143 0107 3203 		bra	DecTimer
00144 0108 302F 	DecTimer2	movlw	Timer2Hi
00145 0109 3201 		bra	DecTimer
00146 010A 302D 	DecTimer1	movlw	Timer1Hi
00147 010B 	;DecTimer
00148 010B 	; entry: FSR=Timer(n)Hi
00149 010B 0084 	DecTimer	MOVWF	FSR0L
00150 010C 3000 		movlw	High Timer4Hi
00151 010D 0085 		movwf	FSR0H
00152 010E 0013 		MOVIW	FSR0--	;TimerNHi
00153 010F 0400 		IORWF	INDF0,W	;TimerNLo
00154 0110 		SKPNZ
00154 0110 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00155 0111 0008 		RETURN
00156 0112 3001 		MOVLW	0x01
00157 0113 0280 		SUBWF	INDF0,F	;TimerNLo
00158 0114 0A84 		INCF	FSR0L,F
00159 0115 0103 		CLRW
00160 0116 3B80 		SUBWFB	INDF0,F	;TimerNHi
00161 0117 0008 		RETURN
00162 0118 	;
00163 0118 	;==============================================================================================
00164 0118 	; Test for 16 bit timers = zero
00165 0118 	;If Timer is zero return Z flag,1 else Z=0
00166 0118 	;
00167 0118 0020 	TestT4_Zero	movlb	0
00168 0119 0832 		movf	Timer4Lo,W
00169 011A 0433 		iorwf	Timer4Hi,W
00170 011B 0008 		return
00171 011C 	;
00172 011C 0020 	TestT3_Zero	movlb	0
00173 011D 0830 		movf	Timer3Lo,W
00174 011E 0431 		iorwf	Timer3Hi,W
00175 011F 0008 		return
00176 0120 	;
00177 0120 0020 	TestT2_Zero	movlb	0
00178 0121 082E 		movf	Timer2Lo,W
00179 0122 042F 		iorwf	Timer2Hi,W
00180 0123 0008 		return
00181 0124 	;
00182 0124 0020 	TestT1_Zero	movlb	0
00183 0125 082C 		movf	Timer1Lo,W
00184 0126 042D 		iorwf	Timer1Hi,W
00185 0127 0008 		return	
00186 0128 	;
00187 0128 		if oldCode
00203 0128 		endif
00204 0128 	;======================================================================================
00205 0128 	;Delay uS    1 cycle = .125uS, 32MHz clock version
00206 0128 	; RAM used: Param77
00207 0128 	; Calls:(0) none
00208 0128 	;
00209 0128 3005 	Delay10uS	MOVLW	0x05	;(2*3+5)/2=10
00210 0129 3203 		bra	DelayWuS
00211 012A 3041 	Delay100uS	MOVLW	d'65'	;(28*3+5)/2=100
00212 012B 3201 		bra	DelayWuS
00213 012C 3019 	Delay40uS	MOVLW	d'25'	;(11*3+5)=40
00214 012D 00F7 	DelayWuS	MOVWF	Param77
00215 012E 0000 	DelayWuS_Loop	nop
00216 012F 0000 		nop
00217 0130 0BF7 		DECFSZ	Param77,F
00218 0131 33FC 		bra	DelayWuS_Loop
00219 0132 0008 		RETURN
00220 0133 	;==============================================================================================
00221 0133 	; Read EEPROM
00222 0133 	; entry: EEPROM address to read in W
00223 0133 	;        Bank 0 selected
00224 0133 	; exit: W=EEDATA, Bank 0 selected
00225 0133 	;
00226 0133 00AA 	EEReadW	movwf	EEAddrTemp
00227 0134 	;
00228 0134 	;==============================================================================================
00229 0134 	; Read EEPROM
00230 0134 	; entry: EEPROM address to read in EEAddrTemp
00231 0134 	;        Bank 0 selected
00232 0134 	; exit: W=EEDATA, Bank 0 selected
00233 0134 	;
00234 0134 082A 	EERead	movf	EEAddrTemp,W
00235 0135 0023 		MOVLB	0x03	;Bank 3
00236 0136 0091 		movwf	EEADR	;Address to read
00237 0137 1315 		bcf	EECON1,CFGS	;not config mem
00238 0138 1395 		bcf	EECON1,EEPGD	;Data memory
00239 0139 1415 		bsf	EECON1,RD
00240 013A 0813 		movf	EEDAT,W	;W=EEDAT
00241 013B 0020 		MOVLB	0x00	;Bank 0
00242 013C 0008 		return
00243 013D 	;
00244 013D 	;==============================================================================================
00245 013D 	; Write EEPROM
SerialServo.asm                                                       Page: 12
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00246 013D 	; entry: EEPROM address to write in W
00247 013D 	;        EEPROM data to write in EEDataTemp
00248 013D 	;        Bank 0 selected
00249 013D 	; exit: Bank 0 selected
00250 013D 	;
00251 013D 00AA 	EEWriteW	movwf	EEAddrTemp
00252 013E 	;
00253 013E 	;==============================================================================================
00254 013E 	; Write EEPROM
00255 013E 	; entry: EEPROM address to write in EEAdrTemp
00256 013E 	;        EEPROM data to write in EEDataTemp
00257 013E 	;        Bank 0 selected
00258 013E 	; exit: Bank 0 selected
00259 013E 	;
00260 013E 082A 	EEWrite	MOVF	EEAddrTemp,W
00261 013F 0023 		MOVLB	0x03	;Bank 3
00262 0140 0091 		movwf	EEADR	;Address to write
00263 0141 0020 		movlb	0x00	; bank 0
00264 0142 082B 		movf	EEDataTemp,W
00265 0143 0023 		movlb	0x03
00266 0144 0093 		movwf	EEDAT
00267 0145 1315 		bcf	EECON1,CFGS	;not config mem
00268 0146 1395 		bcf	EECON1,EEPGD	;Data memory
00269 0147 1515 		bsf	EECON1,WREN
00270 0148 138B 		bcf	INTCON,GIE	;Disale Ints
00271 0149 1B8B 		btfsc	INTCON,GIE
00272 014A 33FD 		bra	$-2
00273 014B 3055 		movlw	0x55
00274 014C 0096 		movwf	EECON2	;write 55
00275 014D 30AA 		movlw	0xAA
00276 014E 0096 		movwf	EECON2	;write AA
00277 014F 1495 		bsf	EECON1,WR
00278 0150 1895 	EEWriteLoop	btfsc	EECON1,WR	
00279 0151 33FE 		bra	EEWriteLoop
00280 0152 1115 		bcf	EECON1,WREN
00281 0153 178B 		bsf	INTCON,GIE
00282 0154 0020 		MOVLB	0x00	;Bank 0
00283 0155 0008 		return
00284 0156 	;
00285 0156 	;	
00286 0156 	;=========================================================================================
00287 0156 	;=========================================================================================
00288 0156 	;
00289 0156 	;
00290 0156 	;
00291 0156 	;
00840 0156 		include <MagEncoder.inc>
00001 0156 	;*****************************************************************************************
00002 0156 	;    Filename:      MagEncoder.inc
00003 0156 	;    Date:          8/11/2019
00004 0156 	;    File Version:  1.1.1
00005 0156 	;    
00006 0156 	;    Author:        David M. Flynn
00007 0156 	;    Company:       Oxford V.U.E., Inc.
00008 0156 	;    E-Mail:        dflynn@oxfordvue.com
00009 0156 	;    Web Site:      http://www.oxfordvue.com/
00010 0156 	;
00011 0156 	;*****************************************************************************************
00012 0156 	; Absolute Magnetic Encoder Reader
00013 0156 	; Written for the 16F1847 running at 32MHz
00014 0156 	; Add ReadEncoder to your main loop, must be call often enough so roll over/under
00015 0156 	;  is seen.
00016 0156 	; If the last ReadEncoder saw zero then MagEnc_Index is set.
00017 0156 	; If a roll over/under was detected MagEnc_IndexLatch will be set, you must clear it
00018 0156 	;  before calling ReadEncoder again.
00019 0156 	; Works in any segment, requires no additional stack.
00020 0156 	;
00021 0156 	; uses AS5047D_Lib.inc
00022 0156 	;
00023 0156 	; Constants for 14 bit encoder:
00024 0156 003C 	kUpper4Bits	EQU	0x3C	;test >= 0x3C00 or < 0x0400
00025 0156 	; 
00026 0156 	; History:
00027 0156 	;   1.1.1   8/11/2019	Updated for 14bit encoder.
00028 0156 	;   1.1     3/23/2019	Changed to use AS5047D
00029 0156 	;   1.0.1   5/28/2017  Added Home routines.
00030 0156 	;   1.0.0   5/27/2017  First Code and it WORKS!
00031 0156 	;*****************************************************************************************
00032 0156 	; Routines:
00033 0156 	;
00034 0156 	; ReadEncoder	Add change from last read to EncoderAccum,
00035 0156 	;	 update MagEnc_Index and MagEnc_IndexLatch.
00036 0156 	; Home_Absolute        Home absolute, Set home as encoder zero.
00037 0156 	; Home_Here            Set Home as last read value.
00038 0156 	;*****************************************************************************************
00039 0156 	; Add the following to the Bank 0 variables.
00040 0156 	;	cblock		;Variables bank0
00041 0156 	;	EncoderAccum:3		;Accumulated distance
00042 0156 	;	EncoderVal:2		;Value last read, raw 12 bit data
00043 0156 	;	EncoderFlags                                  ;saved in eprom
00044 0156 	;                      EncoderHome:2                                 ;Absolute Home, saved in eprom
00045 0156 	;	endc
00046 0156 	;
00047 0156 0047 	#Define	MagEnc_HighZone	EncoderFlags,0	
00048 0156 0047 	#Define	MagEnc_LowZone	EncoderFlags,1
00049 0156 0047 	#Define	MagEnc_Index	EncoderFlags,2
00050 0156 0047 	#Define	MagEnc_IndexLatch	EncoderFlags,3	;set if zero is crossed or Encode value = zero
00051 0156 0047 	#Define                MagEnc_Homed           EncoderFlags,4
00052 0156 	;
SerialServo.asm                                                       Page: 13
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00053 0156 	;=========================================
00054 0156 	; ReadEncoder
00055 0156 	; Entry: none
00056 0156 	; Exit: EncoderValue,EncoderAccum,EncoderFlags
00057 0156 	; Calls: none
00058 0156 	; Uses: Param76,Param77,Param78,Param79,Param7A FSR0
00059 0156 	;
00060 0156 2235 	ReadEncoder	call	AS5047_ReadPos
00061 0157 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00062 0157 	;
00063 0157 0020 		movlb	0	;bank0
00064 0158 	;
00065 0158 1870 		btfsc	ParityErrFlag
00066 0159 143F 		bsf	ssEncParityError
00067 015A 	;	return
00068 015A 	;
00069 015A 19F0 		btfsc	CmdErrorFlag
00070 015B 14BF 		bsf	ssEncCmdError
00071 015C 	;	return
00072 015C 	;	
00073 015C 	;
00074 015C 	;copy to temp Param77:Param76 = Enc Value, Param7A:Param79 = Old value
00075 015C 0878 		movf	Param78,W
00076 015D 00F6 		movwf	Param76
00077 015E 0879 		movf	Param79,W
00078 015F 00F7 		movwf	Param77
00079 0160 	;
00080 0160 0845 		movf	EncoderVal,W
00081 0161 00F9 		movwf	Param79                ;retain old value
00082 0162 0846 		movf	EncoderVal+1,W
00083 0163 00FA 		movwf	Param7A
00084 0164 	;
00085 0164 0876 		movf	Param76,W
00086 0165 00C5 		movwf	EncoderVal
00087 0166 0877 		movf	Param77,W
00088 0167 00C6 		movwf	EncoderVal+1
00089 0168 	;
00090 0168 	; handle overflow, goes from >0x3C00 to <0x0400
00091 0168 1C47 		btfss	MagEnc_HighZone
00092 0169 3206 		bra	ReadEncoder_1
00093 016A 303C 		movlw	kUpper4Bits
00094 016B 0577 		andwf	Param77,W
00095 016C 		SKPNZ		;Less than 4096?
00095 016C 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00096 016D 1777 		bsf	Param77,6	; yes, set 15th bit, aka add 0x4000
00097 016E 15C7 		bsf	MagEnc_IndexLatch	;crossed zero
00098 016F 320A 		bra	ReadEncoder_2
00099 0170 	;
00100 0170 	; handle underflow, goes from <0x0400 to <=0x3C00
00101 0170 1CC7 	ReadEncoder_1	btfss	MagEnc_LowZone
00102 0171 3208 		bra	ReadEncoder_2
00103 0172 303C 		movlw	kUpper4Bits
00104 0173 0577 		andwf	Param77,W
00105 0174 3A3C 		xorlw	kUpper4Bits
00106 0175 		SKPZ		;>=0x3C00?
00106 0175 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00107 0176 3203 		bra	ReadEncoder_2	; No
00108 0177 	;Val = value - 0x4000
00109 0177 3040 		movlw	0x40
00110 0178 02F7 		subwf	Param77,F
00111 0179 15C7 		bsf	MagEnc_IndexLatch	;crossed zero
00112 017A 	;
00113 017A 	; calculate new flag values
00114 017A 1147 	ReadEncoder_2	bcf	MagEnc_Index
00115 017B 0845 		movf	EncoderVal,W
00116 017C 0446 		iorwf	EncoderVal+1,W
00117 017D 		SKPNZ		;value is 0?
00117 017D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00118 017E 1547 		bsf	MagEnc_Index	; Yes
00119 017F 	;
00120 017F 1947 		btfsc	MagEnc_Index
00121 0180 15C7 		bsf	MagEnc_IndexLatch
00122 0181 	;
00123 0181 10C7 		bcf	MagEnc_LowZone
00124 0182 303C 		movlw	kUpper4Bits
00125 0183 0546 		andwf	EncoderVal+1,W
00126 0184 		SKPNZ		;Less than 0x0400?
00126 0184 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00127 0185 14C7 		bsf	MagEnc_LowZone	; Yes
00128 0186 	;
00129 0186 1047 		bcf	MagEnc_HighZone
00130 0187 303C 		movlw	kUpper4Bits
00131 0188 0546 		andwf	EncoderVal+1,W	;2 high bits
00132 0189 3A3C 		xorlw	kUpper4Bits
00133 018A 		SKPNZ		;both bits set, >=0x3C00
00133 018A 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00134 018B 1447 		bsf	MagEnc_HighZone	; yes
00135 018C 	;
00136 018C 	; calc change = new - old
00137 018C 0879 		movf	Param79,W	;old value
00138 018D 02F6 		subwf	Param76,F	;= new value - old value
00139 018E 087A 		movf	Param7A,W	;old value high byte
00140 018F 3BF7 		subwfb	Param77,F	;= new value - old value 
00141 0190 01F8 		clrf	Param78	;sign extend to 24 bits
00142 0191 30FF 		movlw	0xFF
00143 0192 1BF7 		btfsc	Param77,7	;sign bit set?
00144 0193 00F8 		movwf	Param78	; Yes
00145 0194 	;
00146 0194 	; add the change to the accumulated value
SerialServo.asm                                                       Page: 14
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00147 0194 0876 		movf	Param76,W
00148 0195 07C2 		addwf	EncoderAccum,F
00149 0196 0877 		movf	Param77,W
00150 0197 3DC3 		addwfc	EncoderAccum+1,F
00151 0198 0878 		movf	Param78,W
00152 0199 3DC4 		addwfc	EncoderAccum+2,F
00153 019A 	;
00154 019A 0008 		return
00155 019B 	;
00156 019B 	;=========================================================================================
00157 019B 	; Home absolute, Set home as encoder HM absolute.
00158 019B 	; Call ReadEncoder once first.
00159 019B 	; Entry: HM = Absolute Home, EncoderVal = Current Position Absolute,
00160 019B 	;        kMaxT = Â±Max travel from HM,
00161 019B 	;        EncoderAccum = 0 = Current Position Incremental
00162 019B 	; Exit: EncoderAccum = Current Position Relitive
00163 019B 	;
00164 019B 	; The Math:
00165 019B 	;  ' tests for Current Position > HM
00166 019B 	;  if HM + kMaxT >= 4096 then 'Dual zone
00167 019B 	;    if EncoderVal > HM then 
00168 019B 	;      'Current Position is positive between HM and 4096
00169 019B 	;      EncoderAccum = EncoderVal - HM
00170 019B 	;    elseif EncoderVal < ((HM + kMaxT) mod 4096) then 
00171 019B 	;      'Current Position is positive between 0 and HM + kMaxT
00172 019B 	;      EncoderAccum = EncoderVal + 4096 - HM
00173 019B 	;  else 'Single zone
00174 019B 	;    if EncoderVal > HM and EncoderVal <= HM + kMaxT then
00175 019B 	;      'Current Position is positive between HM and HM + kMAxT
00176 019B 	;      EncoderAccum = EncoderVal - HM
00177 019B 	;
00178 019B 	;  ' test for Current Position < HM
00179 019B 	;  if HM - kMaxT < 0 then 'Dual zone
00180 019B 	;    if (EncoderVal < HM) then
00181 019B 	;      'Current Position is between HM and 0
00182 019B 	;      EncoderAccum = EncoderVal - HM
00183 019B 	;    elseif (EncoderVal > 8192 - HM - kMaxT) then
00184 019B 	;      'Current Position is between 0 and HM - kMaxT
00185 019B 	;      EncoderAccum = EncoderVal - 4096 - HM
00186 019B 	;  else 'Single zone
00187 019B 	;    if EncoderVal < HM and EncoderVal > HM - kMaxT then
00188 019B 	;      'Current Position is between HM and HM - kMaxT
00189 019B 	;      EncoderAccum = EncoderVal - HM
00190 019B 	;      
00191 019B 	;
00192 019B 076C 	kMaxT                  EQU                    .1900                  ;Less than a half turn
00193 019B 	;
00194 019B 2206 	Home_Absolute	call                   Home_Here
00195 019C 1E47 	                       btfss                  MagEnc_Homed           ;First boot?
00196 019D 324E 	                       bra                    SaveHomePos            ; Yes
00197 019E 	;
00198 019E 	;  ' tests for Current Position > HM
00199 019E 	;if HM + kMaxT >= 4096 then 'Dual zone
00200 019E 306C 	                       movlw                  low kMaxT
00201 019F 0748 	                       addwf                  EncoderHome,W
00202 01A0 00F8 	                       movwf                  Param78
00203 01A1 3007 	                       movlw                  high kMaxT
00204 01A2 3D49 	                       addwfc                 EncoderHome+1,W
00205 01A3 00F9 	                       movwf                  Param79
00206 01A4 39F0 	                       andlw                  0xF0
00207 01A5 	                       SKPNZ
00207 01A5 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00208 01A6 3207 	                       bra                    Home_Absolute_1
00209 01A7 	;    if EncoderVal > HM then 
00210 01A7 	;      'Current Position is positive between HM and 4096
00211 01A7 	;      EncoderAccum = EncoderVal - HM
00212 01A7 0845 	                       movf                   EncoderVal,W
00213 01A8 0248 	                       subwf                  EncoderHome,W
00214 01A9 0846 	                       movf                   EncoderVal+1,W
00215 01AA 3B49 	                       subwfb                 EncoderHome+1,W
00216 01AB 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > HM?
00217 01AC 324E 	                       bra                    HA_SetIt               ; Yes
00218 01AD 320C 	                       bra                    Home_Absolute_2
00219 01AE 	;        
00220 01AE 	;  else 'Single zone
00221 01AE 	;    if EncoderVal > HM and EncoderVal < HM + kMaxT then
00222 01AE 	;      'Current Position is positive between HM and HM + kMAxT
00223 01AE 	;      EncoderAccum = EncoderVal - HM
00224 01AE 0848 	Home_Absolute_1        movf                   EncoderHome,W
00225 01AF 0245 	                       subwf                  EncoderVal,W
00226 01B0 0849 	                       movf                   EncoderHome+1,W
00227 01B1 3B46 	                       subwfb                 EncoderVal+1,W
00228 01B2 1F89 	                       btfss                  WREG,7
00229 01B3 3206 	                       bra                    Home_Absolute_2
00230 01B4 0878 	                       movf                   Param78,W              ;HM + kMaxT
00231 01B5 0245 	                       subwf                  EncoderVal,W
00232 01B6 0879 	                       movf                   Param79,W
00233 01B7 3B46 	                       subwfb                 EncoderVal+1,W
00234 01B8 1B89 	                       btfsc                  WREG,7                 ;EncoderVal < HM + kMaxT?
00235 01B9 3241 	                       bra                    HA_SetIt               ; Yes
00236 01BA 	;
00237 01BA 	;  ' test for Current Position < HM
00238 01BA 	;  if HM - kMaxT < 0 then 'Dual zone
00239 01BA 306C 	Home_Absolute_2        movlw                  low kMaxT
00240 01BB 0248 	                       subwf                  EncoderHome,W
00241 01BC 3007 	                       movlw                  high kMaxT
00242 01BD 3B49 	                       subwfb                 EncoderHome+1,W
00243 01BE 1F89 	                       btfss                  WREG,7                 ;HM - kMaxT < 0?
00244 01BF 3219 	                       bra                    Home_Absolute_3        ; No, not dual zone
SerialServo.asm                                                       Page: 15
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00245 01C0 	;    if (EncoderVal < HM) then
00246 01C0 	;      'Current Position is between HM and 0
00247 01C0 	;      EncoderAccum = EncoderVal - HM
00248 01C0 0848 	                       movf                   EncoderHome,W
00249 01C1 0245 	                       subwf                  EncoderVal,W
00250 01C2 0849 	                       movf                   EncoderHome+1,W
00251 01C3 3B46 	                       subwfb                 EncoderVal+1,W
00252 01C4 1B89 	                       btfsc                  WREG,7                 ;EncoderVal < HM?
00253 01C5 3235 	                       bra                    HA_SetIt               ; Yes
00254 01C6 	;    elseif (EncoderVal > 8192 - HM - kMaxT) then
00255 01C6 	;      'Current Position is between 0 and HM - kMaxT
00256 01C6 	;      EncoderAccum = EncoderVal - 4096 - HM
00257 01C6 3000 	                       movlw                  low .8192              ;Param78:Param79 = .8192
00258 01C7 00F8 	                       movwf                  Param78
00259 01C8 3020 	                       movlw                  high .8192
00260 01C9 00F9 	                       movwf                  Param79
00261 01CA 0848 	                       movf                   EncoderHome,W          ;Param78:Param79 -= EncoderHome
00262 01CB 02F8 	                       subwf                  Param78,F
00263 01CC 0849 	                       movf                   EncoderHome+1,W
00264 01CD 3BF9 	                       subwfb                 Param79,F
00265 01CE 306C 	                       movlw                  low kMaxT              ;Param78:Param79 -= kMaxT
00266 01CF 02F8 	                       subwf                  Param78,F
00267 01D0 3007 	                       movlw                  high kMaxT
00268 01D1 3BF9 	                       subwfb                 Param79,F
00269 01D2 0845 	                       movf                   EncoderVal,W 
00270 01D3 0278 	                       subwf                  Param78,W
00271 01D4 0846 	                       movf                   EncoderVal+1,W
00272 01D5 3B79 	                       subwfb                 Param79,W
00273 01D6 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > Param78:Param79?
00274 01D7 3221 	                       bra                    HA_SetItNeg            ; Yes
00275 01D8 0008 	                       return                                        ; No, not in this zone
00276 01D9 	;
00277 01D9 	;  else 'Single zone
00278 01D9 	;    if EncoderVal < HM and EncoderVal > HM - kMaxT then
00279 01D9 	;      'Current Position is between HM and HM - kMaxT
00280 01D9 	;      EncoderAccum = EncoderVal - HM
00281 01D9 0848 	Home_Absolute_3        movf                   EncoderHome,W
00282 01DA 0245 	                       subwf                  EncoderVal,W
00283 01DB 0849 	                       movf                   EncoderHome+1,W
00284 01DC 3B46 	                       subwfb                 EncoderVal+1,W
00285 01DD 1F89 	                       btfss                  WREG,7                 ;EncoderVal < HM?
00286 01DE 0008 	                       return                                        ; No
00287 01DF 306C 	                       movlw                  low kMaxT              ;Param78:Param79 = EncoderHome - kMaxT
00288 01E0 0248 	                       subwf                  EncoderHome,W
00289 01E1 00F8 	                       movwf                  Param78
00290 01E2 3007 	                       movlw                  high kMaxT
00291 01E3 3B49 	                       subwfb                 EncoderHome+1,W
00292 01E4 00F9 	                       movwf                  Param79
00293 01E5 0845 	                       movf                   EncoderVal,W
00294 01E6 0278 	                       subwf                  Param78,W
00295 01E7 0846 	                       movf                   EncoderVal+1,W
00296 01E8 3B79 	                       subwfb                 Param79,W
00297 01E9 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > HM - kMaxT?
00298 01EA 3210 	                       bra                    HA_SetIt               ; Yes
00299 01EB 0008 	                       return                                        ; No, must be zero
00300 01EC 	;
00301 01EC 	;======================
00302 01EC 1647 	SaveHomePos            bsf                    MagEnc_Homed
00303 01ED 0845 	                       movf                   EncoderVal,W
00304 01EE 00C8 	                       movwf                  EncoderHome
00305 01EF 0846 	                       movf                   EncoderVal+1,W
00306 01F0 00C9 	                       movwf                  EncoderHome+1
00307 01F1 	                       mCall1To0              SaveParams
00307 01F1 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00307 01F2 20F6      M		CALL	SaveParams		CALL	Destination
00307 01F3 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00307 01F4 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00308 01F5 0008 	                       return
00309 01F6 	;======================
00310 01F6 	;EncoderAccum = EncoderVal + 4096 - HM
00311 01F6 	;                      movlw                  low .4096
00312 01F6 	;                      addwf                  EncoderVal,F
00313 01F6 3010 	HA_SetItPos            movlw                  high .4096
00314 01F7 3DC6 	                       addwfc                 EncoderVal+1,F
00315 01F8 3202 	                       bra                    HA_SetIt
00316 01F9 	;======================
00317 01F9 	;EncoderAccum = EncoderVal - 4096 - HM
00318 01F9 	;                      movlw                  low .4096
00319 01F9 	;                      subwf                  EncoderVal,F
00320 01F9 3010 	HA_SetItNeg            movlw                  high .4096
00321 01FA 3BC6 	                       subwfb                 EncoderVal+1,F
00322 01FB 	;======================
00323 01FB 	;EncoderAccum = EncoderVal - HM
00324 01FB 0848 	HA_SetIt               movf                   EncoderHome,W
00325 01FC 0245 	                       subwf                  EncoderVal,W
00326 01FD 00C2 	                       movwf                  EncoderAccum
00327 01FE 0849 	                       movf                   EncoderHome+1,W
00328 01FF 3B46 	                       subwfb                 EncoderVal+1,W
00329 0200 00C3 	                       movwf                  EncoderAccum+1
00330 0201 30FF 	                       movlw                  0xFF
00331 0202 1FC3 	                       btfss                  EncoderAccum+1,7
00332 0203 3000 	                       movlw                  0x00
00333 0204 00C4 	                       movwf                  EncoderAccum+2
00334 0205 0008 	                       return
00335 0206 	;
00336 0206 	;                       
00337 0206 	;=========================================================================================
00338 0206 	; Set Home as last read value
00339 0206 	; Call ReadEncoder once first.
SerialServo.asm                                                       Page: 16
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00340 0206 	;
00341 0206 0020 	Home_Here              movlb                  0
00342 0207 01C2 	                       clrf                   EncoderAccum
00343 0208 01C3 	                       clrf                   EncoderAccum+1
00344 0209 01C4 	                       clrf                   EncoderAccum+2
00345 020A 0008 	                       return
00346 020B 	;
00347 020B 	;=========================================================================================
00348 020B 	;=========================================================================================
00349 020B 		
00350 020B 		
00351 020B 		
00352 020B 		
00353 020B 		
00354 020B 		
00355 020B 		
00356 020B 		
00357 020B 		
00358 020B 		
00359 020B 		
00360 020B 		
00361 020B 		
00362 020B 		
00363 020B 		
00364 020B 		
00365 020B 		
00366 020B 		
00367 020B 		
00368 020B 		
00841 020B 		include <AS5047D_Lib.inc>
00001 020B 	;******************************************************************
00002 020B 	; AS5047D Library for PIC16F1847
00003 020B 	; Filename: AS5047D_Lib.inc
00004 020B 	; Created: 1/12/2019
00005 020B 	; Revision: 1.0d1 1/12/2019
00006 020B 	;******************************************************************
00007 020B 	; History:
00008 020B 	;   1.0d1 1/12/2019	First Code
00009 020B 	;******************************************************************
00010 020B 	; Notes:
00011 020B 	; SPI I/O for AS5047D Magnetic Shaft Angle Encoder.
00012 020B 	; CKP=0, CKE=1, SMP=1
00013 020B 	; RB0	SPI CSn
00014 020B 	; RA6	SPI MOSI  aka SDO1
00015 020B 	; RB1	SPI MISO  aka SDI1
00016 020B 	; RB4	SPI CLK
00017 020B 	;
00018 020B 	;******************************************************************
00019 020B 	; Rotines:	(Stack Words Used)
00020 020B 	; Init_AS5047D	(0) Call once to setup SSP1
00021 020B 	;
00022 020B 	; AS5047D_WrtZPOSM	(1) call AS5047_Write with AS5047_ZPOSM and Prog_AS5047_ZPOSM
00023 020B 	; AS5047D_WrtZPOSL	(1) call AS5047_Write with AS5047_ZPOSL and Prog_AS5047_ZPOSL
00024 020B 	; AS5047D_WrtSettings2 (1) call AS5047_Write with AS5047_Settings2 and Prog_AS5047_Settings2
00025 020B 	; AS5047D_WrtSettings1 (1) call AS5047_Write with AS5047_Settings1 and Prog_AS5047_Settings1
00026 020B 	;
00027 020B 	; AS5047_Write	(1) Write data to AS5047D
00028 020B 	; AS5047_ReadPos	(1) AS5047_ANGLECOM >> SPI_SendRecWord
00029 020B 	; AS5047_ReadANGLEUNCReg (1) AS5047_ANGLEUNC >> AS5047_Read
00030 020B 	; AS5047_ReadDIAAGCReg (1) AS5047_DIAAGCReg >> AS5047_Read
00031 020B 	; AS5047_ReadZPOSMReg	(1) AS5047_ZPOSM >> AS5047_Read
00032 020B 	; AS5047_ReadZPOSLReg  (1) AS5047_ZPOSL >> AS5047_Read
00033 020B 	; AS5047_ReadStgs1Reg	(1) AS5047_Settings1 >> AS5047_Read
00034 020B 	; AS5047_ReadStgs2Reg	(1) AS5047_Settings2 >> AS5047_Read
00035 020B 	; AS5047_ReadErrorReg  (1) AS5047_ErrReg >> AS5047_Read
00036 020B 	; AS5047_Read	(1) Send a read command + NOP, returns data
00037 020B 	; SPI_SendRecWord	(0) Send Param79:Param78, Receive Param79:Param78
00038 020B 	;
00039 020B 	; CalcParity	(0) Param79:Param78 = Parity Bit + 15 bit word
00040 020B 	; CheckParity	(0) Param79:Param78 = unchanged, ParityErrFlag
00041 020B 	;******************************************************************
00042 020B 	;
00043 020B 		ifndef kStandAlone
00045 020B 		endif
00046 020B 	;
00047 020B 	; Bank 0 persistant variables used by stand alone version
00048 020B 	;	Prog_AS5047_ZPOSM:2
00049 020B 	;	Prog_AS5047_ZPOSL:2
00050 020B 	;	Prog_AS5047_Settings2:2
00051 020B 	;	Prog_AS5047_Settings1:2
00052 020B 	;
00053 020B 8000 	AS5047_ParityBit	EQU	0x8000	;P
00054 020B 4000 	AS5047_ReadBit	EQU	0x4000	; R
00055 020B C000 	AS5047_NOP	EQU	0xC000	;PR+0x0000
00056 020B 	; Volatile Registers
00057 020B 0001 	AS5047_ErrReg	EQU	0x0001	; R+0x0001
00058 020B 0003 	AS5047_ProgReg	EQU	0x0003
00059 020B 3FFC 	AS5047_DIAAGCReg	EQU	0x3FFC
00060 020B 3FFD 	AS5047_MAGReg	EQU	0x3FFD
00061 020B 7FFE 	AS5047_ANGLEUNC	EQU	0x3FFE+AS5047_ReadBit
00062 020B 7FFF 	AS5047_ANGLECOM	EQU	0x3FFF+AS5047_ReadBit
00063 020B 	; Non-Volatile Registers
00064 020B 0016 	AS5047_ZPOSM	EQU	0x0016
00065 020B 0017 	AS5047_ZPOSL	EQU	0x0017
00066 020B 0018 	AS5047_Settings1	EQU	0x0018
00067 020B 0019 	AS5047_Settings2	EQU	0x0019
00068 020B 	;
00069 020B 	; ***** Add to global declarations ****
00070 020B 	;AS5047D_Flags	EQU	Param70	;Check that Param70 is OK to use
SerialServo.asm                                                       Page: 17
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00071 020B 	;
00072 020B 	;#Define	ParityErrFlag	AS5047D_Flags,0
00073 020B 	;#Define	AngleReadFlag	AS5047D_Flags,1
00074 020B 	;#define	ContinueReadFlag	AS5047D_Flags,2
00075 020B 	;#Define	CmdErrorFlag	AS5047D_Flags,3
00076 020B 	;
00077 020B 	;Diagnostics register bits
00078 020B 0003 	MagFldLowErrBit	EQU	3
00079 020B 0002 	MagFldHighErrBit	EQU	2
00080 020B 	;
00081 020B 	;******************************************************************
00082 020B 	; Initialize the MSSP
00083 020B 	; *SPI: CKP=0 Clock Idle is Low State,
00084 020B 	; SPI: CKE=1 Transmit occurs on transition from active to Idle clock state
00085 020B 	; *SPI: CKE=0 Transmit occurs on transition from Idle to active clock state
00086 020B 	; *SPI: SMP=1 Input data sampled at end of data output time
00087 020B 	; SPI master clock=Fosc/64
00088 020B 	;
00089 020B 0022 	SSP1CON1_Val	EQU	b'00100010'	;SSPEN=1, SPI Fosc/64
00090 020B 010D 	#Define	SPI_CSn	LATB,0
00091 020B 008D 	#Define	SPI_CSn_Tris	TRISB,0
00092 020B 008C 	#Define	SPI_MOSI_Tris	TRISA,6
00093 020B 008D 	#Define	SPI_MISO_Tris	TRISB,1
00094 020B 008D 	#Define	SPI_CLK_Tris	TRISB,4
00095 020B 	;
00096 020B 0022 	Init_AS5047D	movlb	2	;bank 2
00097 020C 140D 		bsf	SPI_CSn	;inactive
00098 020D 	;
00099 020D 0021 		movlb	1	;bank 1
00100 020E 100D 		bcf	SPI_CSn_Tris	;output
00101 020F 148D 		bsf	SPI_MISO_Tris	;input
00102 0210 130C 		bcf	SPI_MOSI_Tris	;output
00103 0211 120D 		bcf	SPI_CLK_Tris	;output
00104 0212 	;
00105 0212 0024 		movlb	4	;bank 4
00106 0213 3022 		movlw	SSP1CON1_Val
00107 0214 0095 		movwf	SSP1CON1
00108 0215 1794 		bsf	SSP1STAT,SMP
00109 0216 	;	bsf	SSP1STAT,CKE	;CKE=1
00110 0216 1314 		bcf	SSP1STAT,CKE	;CKE=1
00111 0217 	;
00112 0217 	;	BANKSEL	PEI1
00113 0217 	;	bsf	PIE1,SSP1	;enable interupt
00114 0217 0020 		movlb	0	;bank 0
00115 0218 0008 		return
00116 0219 	;
00117 0219 		if kStandAlone
00194 0219 		endif
00195 0219 	;*******************************************************************
00196 0219 	; Write data to AS5047D
00197 0219 	;  Write address, dicard dummy data
00198 0219 	;  Write data, save old data
00199 0219 	;  Send NOP, save new data
00200 0219 	;
00201 0219 	; Entry: Param79:Param78 = Address, Param7B:Param7A = Data
00202 0219 	; Exit: Param79:Param78 = Data read back 14 bit value, ParityErrFlag, CmdErrorFlag,
00203 0219 	;   Param7B:Param7A = old data 16 bits including error and parity bits
00204 0219 	; RAM Used: Param76..Param7A
00205 0219 	; Calls:CalcParity, SPI_SendRecWord
00206 0219 	;
00207 0219 10F0 	AS5047_Write	bcf	AngleReadFlag
00208 021A 1170 		bcf	ContinueReadFlag
00209 021B 	;
00210 021B 1379 		bcf	Param79,6	;Write Address, dicard dummy data
00211 021C 2291 		call	CalcParity
00212 021D 227C 		call	SPI_SendRecWord	;ignore rec'd word
00213 021E 	;
00214 021E 087B 		movf	Param7B,W	;Send data
00215 021F 00F9 		movwf	Param79
00216 0220 087A 		movf	Param7A,W
00217 0221 00F8 		movwf	Param78
00218 0222 1379 		bcf	Param79,6	;Write data, save old value
00219 0223 2291 		call	CalcParity
00220 0224 227C 		call	SPI_SendRecWord
00221 0225 0879 		movf	Param79,W	;store old data
00222 0226 00FB 		movwf	Param7B
00223 0227 0878 		movf	Param78,W
00224 0228 00FA 		movwf	Param7A
00225 0229 	;
00226 0229 3000 		movlw	low AS5047_NOP	;send NOP, save data for verify
00227 022A 00F8 		movwf	Param78
00228 022B 30C0 		movlw	high AS5047_NOP
00229 022C 00F9 		movwf	Param79
00230 022D 227C 		call	SPI_SendRecWord
00231 022E 22A4 		call	CheckParity	;set ParityErrFlag
00232 022F 11F0 		bcf	CmdErrorFlag
00233 0230 1B79 		btfsc	Param79,6	;Cmd Error?
00234 0231 15F0 		bsf	CmdErrorFlag
00235 0232 303F 		movlw	0x3F
00236 0233 05F9 		andwf	Param79,F
00237 0234 0008 		return
00238 0235 	;
00239 0235 	;*******************************************************************
00240 0235 	; Read the compensated position
00241 0235 	;
00242 0235 	; Entry: none
00243 0235 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00244 0235 	; RAM Used: Param76, Param77, Param78, Param79
00245 0235 	; Calls: SPI_SendRecWord, CheckParity
SerialServo.asm                                                       Page: 18
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00246 0235 	;
00247 0235 30FF 	AS5047_ReadPos	movlw	low AS5047_ANGLECOM
00248 0236 00F8 		movwf	Param78
00249 0237 307F 		movlw	high AS5047_ANGLECOM
00250 0238 00F9 		movwf	Param79
00251 0239 	;
00252 0239 2291 		call	CalcParity
00253 023A 227C 		call	SPI_SendRecWord
00254 023B 	;
00255 023B 22A4 		call	CheckParity
00256 023C 11F0 		bcf	CmdErrorFlag
00257 023D 1B79 		btfsc	Param79,6	;Cmd Error?
00258 023E 15F0 		bsf	CmdErrorFlag
00259 023F 303F 		movlw	0x3F
00260 0240 05F9 		andwf	Param79,F
00261 0241 	;
00262 0241 	; if (!ContinueReadFlag || !AngleReadFlag) then ignore data and read again
00263 0241 1D70 		btfss	ContinueReadFlag
00264 0242 3203 		bra	AS5047_ReadPos_1
00265 0243 1CF0 		btfss	AngleReadFlag
00266 0244 3201 		bra	AS5047_ReadPos_1
00267 0245 0008 		return
00268 0246 	;
00269 0246 1570 	AS5047_ReadPos_1	bsf	ContinueReadFlag
00270 0247 14F0 		bsf	AngleReadFlag
00271 0248 33EC 		bra	AS5047_ReadPos	;one more time
00272 0249 	;
00273 0249 	;*******************************************************************
00274 0249 	; Read the Angle Uncompensated Register
00275 0249 	;
00276 0249 	; Entry: none
00277 0249 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00278 0249 	; RAM Used: Param76, Param77, Param78, Param79
00279 0249 	; calls: AS5047_Read
00280 0249 	;
00281 0249 30FE 	AS5047_ReadANGLEUNCReg	movlw	low AS5047_ANGLEUNC
00282 024A 00F8 		movwf	Param78
00283 024B 307F 		movlw	high AS5047_ANGLEUNC
00284 024C 00F9 		movwf	Param79
00285 024D 2A6B 		goto	AS5047_ReadReg
00286 024E 	;
00287 024E 	;*******************************************************************
00288 024E 	; Read the Diagnostics Register
00289 024E 	;
00290 024E 	; Entry: none
00291 024E 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00292 024E 	; RAM Used: Param76, Param77, Param78, Param79
00293 024E 	; calls: AS5047_Read
00294 024E 	;
00295 024E 30FC 	AS5047_ReadDIAAGCReg	movlw	low AS5047_DIAAGCReg
00296 024F 00F8 		movwf	Param78
00297 0250 303F 		movlw	high AS5047_DIAAGCReg
00298 0251 00F9 		movwf	Param79
00299 0252 2A6B 		goto	AS5047_ReadReg
00300 0253 	;
00301 0253 	;*******************************************************************
00302 0253 	; Read the Zero position MSB Register
00303 0253 	;
00304 0253 	; Entry: none
00305 0253 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00306 0253 	; RAM Used: Param76, Param77, Param78, Param79
00307 0253 	; calls: AS5047_Read
00308 0253 	;
00309 0253 3016 	AS5047_ReadZPOSMReg	movlw	low AS5047_ZPOSM
00310 0254 00F8 		movwf	Param78
00311 0255 3000 		movlw	high AS5047_ZPOSM
00312 0256 00F9 		movwf	Param79
00313 0257 2A6B 		goto	AS5047_ReadReg
00314 0258 	;
00315 0258 	;*******************************************************************
00316 0258 	; Read the Zero position LSB Register
00317 0258 	;
00318 0258 	; Entry: none
00319 0258 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00320 0258 	; RAM Used: Param76, Param77, Param78, Param79
00321 0258 	; calls: AS5047_Read
00322 0258 	;
00323 0258 3017 	AS5047_ReadZPOSLReg	movlw	low AS5047_ZPOSL
00324 0259 00F8 		movwf	Param78
00325 025A 3000 		movlw	high AS5047_ZPOSL
00326 025B 00F9 		movwf	Param79
00327 025C 2A6B 		goto	AS5047_ReadReg
00328 025D 	;
00329 025D 	;*******************************************************************
00330 025D 	; Read the Settings1 Register
00331 025D 	;
00332 025D 	; Entry: none
00333 025D 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00334 025D 	; RAM Used: Param76, Param77, Param78, Param79
00335 025D 	; calls: AS5047_Read
00336 025D 	;
00337 025D 3018 	AS5047_ReadStgs1Reg	movlw	low AS5047_Settings1
00338 025E 00F8 		movwf	Param78
00339 025F 3000 		movlw	high AS5047_Settings1
00340 0260 00F9 		movwf	Param79
00341 0261 2A6B 		goto	AS5047_ReadReg
00342 0262 	;
00343 0262 	;*******************************************************************
00344 0262 	; Read the Settings2 Register
SerialServo.asm                                                       Page: 19
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00345 0262 	;
00346 0262 	; Entry: none
00347 0262 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00348 0262 	; RAM Used: Param76, Param77, Param78, Param79
00349 0262 	; calls: AS5047_Read
00350 0262 	;
00351 0262 3019 	AS5047_ReadStgs2Reg	movlw	low AS5047_Settings2
00352 0263 00F8 		movwf	Param78
00353 0264 3000 		movlw	high AS5047_Settings2
00354 0265 00F9 		movwf	Param79
00355 0266 2A6B 		goto	AS5047_ReadReg
00356 0267 	;
00357 0267 	;*******************************************************************
00358 0267 	; Read the Error Register
00359 0267 	;
00360 0267 	; Entry: none
00361 0267 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00362 0267 	; RAM Used: Param76, Param77, Param78, Param79
00363 0267 	; calls: AS5047_Read
00364 0267 	;
00365 0267 3001 	AS5047_ReadErrorReg	movlw	low AS5047_ErrReg
00366 0268 00F8 		movwf	Param78
00367 0269 3000 		movlw	high AS5047_ErrReg
00368 026A 00F9 		movwf	Param79
00369 026B 	;
00370 026B 	; fall through to AS5047_ReadReg
00371 026B 	;*******************************************************************
00372 026B 	; Read any Register
00373 026B 	;
00374 026B 	; Entry: Param79:Param78 = 14 bit address to read
00375 026B 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00376 026B 	; RAM Used: Param76, Param77, Param78, Param79
00377 026B 	; calls: AS5047_Read
00378 026B 	;
00379 026B 2273 	AS5047_ReadReg	call	AS5047_Read
00380 026C 	;
00381 026C 22A4 		call	CheckParity
00382 026D 11F0 		bcf	CmdErrorFlag
00383 026E 1B79 		btfsc	Param79,6	;Cmd Error?
00384 026F 15F0 		bsf	CmdErrorFlag
00385 0270 303F 		movlw	0x3F
00386 0271 05F9 		andwf	Param79,F
00387 0272 0008 		return
00388 0273 	;
00389 0273 	;*******************************************************************
00390 0273 	; Read Data
00391 0273 	;  Send a read command, dicards dummy data
00392 0273 	;  Send NOP, returns data
00393 0273 	;
00394 0273 	; Entry: Param79:Param78 = 14 bit Address
00395 0273 	; Exit: Param79:Param78 = Parity+EF+data
00396 0273 	; RAM Used: Param76,Param77,Param78, Param79
00397 0273 	; Calls: CalcParity,SPI_SendRecWord
00398 0273 	;
00399 0273 1170 	AS5047_Read	bcf	ContinueReadFlag
00400 0274 10F0 		bcf	AngleReadFlag
00401 0275 	;
00402 0275 1779 		bsf	Param79,6	;read bit
00403 0276 2291 		call	CalcParity
00404 0277 227C 		call	SPI_SendRecWord
00405 0278 3000 		movlw	low AS5047_NOP
00406 0279 00F8 		movwf	Param78
00407 027A 30C0 		movlw	high AS5047_NOP
00408 027B 00F9 		movwf	Param79
00409 027C 	;
00410 027C 	; fall through to SPI_SendRecWord
00411 027C 	;*******************************************************************
00412 027C 	; Send and Receive
00413 027C 	;
00414 027C 	; Entry: Param79:Param78 = word to send
00415 027C 	; Exit: Param79:Param78 = word received
00416 027C 	; RAM Used: Param78, Param79
00417 027C 	; Calls: none
00418 027C 	;
00419 027C 0022 	SPI_SendRecWord	movlb	2	;bank 2
00420 027D 100D 		bcf	SPI_CSn	;assert chip select
00421 027E 0024 		movlb	4	;bank 4
00422 027F 0879 		movf	Param79,W
00423 0280 0091 		movwf	SSP1BUF
00424 0281 0000 	SPI_SendRecWord_L1	nop
00425 0282 1C14 		btfss	SSP1STAT,BF
00426 0283 33FD 		bra	SPI_SendRecWord_L1
00427 0284 0811 		movf	SSP1BUF,W
00428 0285 00F9 		movwf	Param79
00429 0286 	;
00430 0286 0878 		movf	Param78,W
00431 0287 0091 		movwf	SSP1BUF
00432 0288 0000 	SPI_SendRecWord_L2	nop
00433 0289 1C14 		btfss	SSP1STAT,BF
00434 028A 33FD 		bra	SPI_SendRecWord_L2
00435 028B 0811 		movf	SSP1BUF,W
00436 028C 00F8 		movwf	Param78
00437 028D 	;
00438 028D 0022 		movlb	2
00439 028E 140D 		bsf	SPI_CSn	;disable chip select
00440 028F 0020 		movlb	0	;bank 0
00441 0290 0008 		return
00442 0291 	;
00443 0291 	;*******************************************************************
SerialServo.asm                                                       Page: 20
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00444 0291 	; Calculate Even Parity Bit for Param79:Param78
00445 0291 	;
00446 0291 	; Entry: Param79:Param78 = 15 bit word
00447 0291 	; Exit: Param79:Param78 = Parity Bit + 15 bit word
00448 0291 	; RAM Used: Param76,Param77,Param78,Param79
00449 0291 	; Calls: none
00450 0291 	;
00451 0291 01F6 	CalcParity	clrf	Param76
00452 0292 300F 		movlw	.15	;bit count
00453 0293 00F7 		movwf	Param77
00454 0294 0DF8 	CalcParity_L1	rlf	Param78,F
00455 0295 0DF9 		rlf	Param79,F
00456 0296 3080 		movlw	0x80
00457 0297 0579 		andwf	Param79,W
00458 0298 06F6 		xorwf	Param76,F
00459 0299 0BF7 		decfsz	Param77,F
00460 029A 33F9 		bra	CalcParity_L1
00461 029B 0DF8 		rlf	Param78,F
00462 029C 0DF9 		rlf	Param79,F	;LSb to _C
00463 029D 0DF8 		rlf	Param78,F	;_C to LSb
00464 029E 0DF9 		rlf	Param79,F
00465 029F 3080 		movlw	0x80
00466 02A0 0576 		andwf	Param76,W	;get parity bit
00467 02A1 13F9 		bcf	Param79,7	;force to 0 (default)
00468 02A2 04F9 		iorwf	Param79,F	;set parity bit
00469 02A3 0008 		return
00470 02A4 	;
00471 02A4 	;**********************************************************************
00472 02A4 	; Check Even Parity Bit for Param79:Param78
00473 02A4 	;
00474 02A4 	; Entry: Param79:Param78 = Parity Bit + 15 bit word
00475 02A4 	; Exit: Param79:Param78 = unchanged, ParityErrFlag
00476 02A4 	; RAM Used: Param76,Param77,Param78,Param79
00477 02A4 	; Calls: none
00478 02A4 	;
00479 02A4 01F6 	CheckParity	clrf	Param76
00480 02A5 300F 		movlw	.15	;bit count
00481 02A6 00F7 		movwf	Param77
00482 02A7 0DF8 	CheckParity_L1	rlf	Param78,F
00483 02A8 0DF9 		rlf	Param79,F
00484 02A9 3080 		movlw	0x80
00485 02AA 0579 		andwf	Param79,W
00486 02AB 06F6 		xorwf	Param76,F
00487 02AC 0BF7 		decfsz	Param77,F
00488 02AD 33F9 		bra	CheckParity_L1
00489 02AE 0DF8 		rlf	Param78,F
00490 02AF 0DF9 		rlf	Param79,F	;LSb to _C
00491 02B0 0DF8 		rlf	Param78,F	;_C to LSb
00492 02B1 0DF9 		rlf	Param79,F
00493 02B2 0876 		movf	Param76,W	;get calc'd parity bit
00494 02B3 0679 		xorwf	Param79,W	;xor w/ parity bit
00495 02B4 3980 		andlw	0x80
00496 02B5 1070 		bcf	ParityErrFlag
00497 02B6 1B89 		btfsc	WREG,7
00498 02B7 1470 		bsf	ParityErrFlag
00499 02B8 0008 		return
00500 02B9 	;
00501 02B9 	;*************************************************************************
00502 02B9 	;*************************************************************************
00842 02B9 		include <SerBuff1938.inc>
00001 02B9 	;=========================================================================================
00002 02B9 	;
00003 02B9 	;    Filename:      SerBuff.inc
00004 02B9 	;    Date:          5/24/2018                                    
00005 02B9 	;    File Version:  1.0.5
00006 02B9 	;
00007 02B9 	;    Author:        David M. Flynn
00008 02B9 	;    Company:       Oxford V.U.E., Inc.
00009 02B9 	;    E-Mail:        dflynn@oxfordvue.com
00010 02B9 	;
00011 02B9 	;=========================================================================================
00012 02B9 	;=========================================================================================
00013 02B9 	; Notes:
00014 02B9 	;
00015 02B9 	; History:
00016 02B9 	; 1.0.5    5/24/2018   Added GetSerInBytes.
00017 02B9 	; 1.0.4    5/23/2018	Added FlushInBuff.
00018 02B9 	; 1.0.3    12/15/2015	Optimized some code to be segment independent.
00019 02B9 	; 1.0.2    10/23/2015	Modified for 'F1938
00020 02B9 	; 1.0.1    12/6/2013	Modified for 'F1847
00021 02B9 	; 1.0      5/25/2008	First Rev'd version
00022 02B9 	;
00023 02B9 	;=========================================================================================
00024 02B9 	; Bank0 Variables:
00025 02B9 	;
00026 02B9 	;	cblock	0x20
00027 02B9 	;	TXByte		;Next byte to send
00028 02B9 	;	RXByte		;Last byte received
00029 02B9 	;	SerFlags
00030 02B9 	;	endc
00031 02B9 	;
00032 02B9 	;#Define	DataReceivedFlag	SerFlags,1
00033 02B9 	;#Define	DataSentFlag	SerFlags,2
00034 02B9 	;
00035 02B9 	; Bank2 Variables:
00036 02B9 	;#Define	Ser_Buff_Bank	2
00037 02B9 	;	cblock	0x120
00038 02B9 	;	Ser_In_Bytes		;Bytes in Ser_In_Buff
00039 02B9 	;	Ser_Out_Bytes		;Bytes in Ser_Out_Buff
SerialServo.asm                                                       Page: 21
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00040 02B9 	;	Ser_In_InPtr
00041 02B9 	;	Ser_In_OutPtr
00042 02B9 	;	Ser_Out_InPtr
00043 02B9 	;	Ser_Out_OutPtr
00044 02B9 	;	Ser_In_Buff:20
00045 02B9 	;	Ser_Out_Buff:20
00046 02B9 	;	endc
00047 02B9 	;
00048 02B9 	;=========================================================================================
00049 02B9 	; Routines	(Bank In/Bank Out)
00050 02B9 	;
00051 02B9 	; TX_TheByte	(0+0) Send one byte to UART
00052 02B9 	; RX_TheByte	(0+0) Receive one byte from UART
00053 02B9 	; StoreSerIn	(X/0) Put the byte in W into the serial input buffer, FSR0
00054 02B9 	; GetSerIn	(X/0) Get a byte from the serial input buffer, FSR0
00055 02B9 	; FlushInBuff	(X/0) Flush the serial incoming buffer.
00056 02B9 	; GetSerInBytes	(X/0) Get the number of bytes in the serial input buffer
00057 02B9 	; GetSerOutBytes	(X/0) Get the number of bytes in the serial ouput buffer
00058 02B9 	; StoreSerOut	(X/0) Put the byte in W into the serial output buffer, FSR0
00059 02B9 	; POP_SerOut	(X/0) Remove the last char stored in the output buffer
00060 02B9 	; GetSerOut	(X/0) Get a byte from the serial Output buffer, FSR0
00061 02B9 	;	       W=Byte, Param78:0=ValidFlag
00062 02B9 	;=========================================================================================
00063 02B9 	;=========================================================================================
00064 02B9 	; *** Put in main loop ***
00065 02B9 	;
00066 02B9 	; Handle Serial Communications
00067 02B9 	;	BTFSC	PIR1,TXIF	;TX done?
00068 02B9 	;	CALL	TX_TheByte	; Yes
00069 02B9 	;
00070 02B9 	; move any serial data received into the 32 byte input buffer
00071 02B9 	;	BTFSS	DataReceivedFlag
00072 02B9 	;	BRA	ML_Ser_Out
00073 02B9 	;	MOVF	RXByte,W
00074 02B9 	;	BCF	DataReceivedFlag
00075 02B9 	;	CALL	StoreSerIn
00076 02B9 	;
00077 02B9 	;=========================================================================================
00078 02B9 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00079 02B9 	;
00080 02B9 	;ML_Ser_Out	BTFSS	DataSentFlag
00081 02B9 	;	BRA	ML_Ser_End
00082 02B9 	;	CALL	GetSerOut
00083 02B9 	;	BTFSS	Param78,0
00084 02B9 	;	BRA	ML_Ser_End
00085 02B9 	;	MOVWF	TXByte
00086 02B9 	;	BCF	DataSentFlag
00087 02B9 	;ML_Ser_End
00088 02B9 	;
00089 02B9 	;=========================================================================================
00090 02B9 	; *** Put in Init section ***
00091 02B9 	;BAUDCON_Value	EQU	b'00001000'
00092 02B9 	;TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, High speed
00093 02B9 	;RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00094 02B9 	;; 8MHz clock low speed (BRGH=0,BRG16=1)
00095 02B9 	;;Baud_300	EQU	d'1666'	;0.299, -0.02%
00096 02B9 	;;Baud_1200	EQU	d'416'	;1.199, -0.08%
00097 02B9 	;;Baud_2400	EQU	d'207'	;2.404, +0.16%
00098 02B9 	;;Baud_9600	EQU	d'51'	;9.615, +0.16%
00099 02B9 	;; 8MHz clock high speed (BRGH=1,BRG16=1)
00100 02B9 	;Baud_300	EQU	d'6666'	;0.299, -0.02%
00101 02B9 	;Baud_1200	EQU	d'1666'	;1.199, -0.08%
00102 02B9 	;Baud_2400	EQU	d'832'	;2.404, +0.16%
00103 02B9 	;Baud_9600	EQU	d'207'	;9.615, +0.16%
00104 02B9 	;Baud_19_2	EQU	d'103'	;19.23k, +0.16
00105 02B9 	;Baud_57_6	EQU	d'34'	;57.14k, -0.79
00106 02B9 	;BaudRate	EQU	Baud_9600
00107 02B9 	;-------------
00108 02B9 	;
00109 02B9 	; setup serial I/O
00110 02B9 	;	movlb	0x03	; bank 3
00111 02B9 	;	MOVLW	TXSTA_Value
00112 02B9 	;	MOVWF	TXSTA
00113 02B9 	;	MOVLW	low BaudRate
00114 02B9 	;	MOVWF	SPBRGL
00115 02B9 	;	MOVLW	high BaudRate
00116 02B9 	;	MOVWF	SPBRGH
00117 02B9 	;	MOVLW	RCSTA_Value
00118 02B9 	;	MOVWF	RCSTA
00119 02B9 	;
00120 02B9 	;	movlb	0x01	; bank 1
00121 02B9 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00122 02B9 	;	movlb	0x00	; bank 0
00123 02B9 	;	BSF	INTCON,PEIE	;Peripheral IRQ Enable
00124 02B9 	;	BSF	INTCON,GIE
00125 02B9 	;
00126 02B9 	;=========================================================================================
00127 02B9 	; *** Put in ISR ***
00128 02B9 	;-----------------------------------------------------------------------------------------
00129 02B9 	;AUSART Serial ISR
00130 02B9 	;
00131 02B9 	;IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00132 02B9 	;	BRA	IRQ_Ser_End
00133 02B9 	;	CALL	RX_TheByte
00134 02B9 	;
00135 02B9 	;IRQ_Ser_End
00136 02B9 	;
00137 02B9 	;=========================================================================================
00138 02B9 	; Send one byte
SerialServo.asm                                                       Page: 22
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00139 02B9 	; Entry: Bank0
00140 02B9 	; Exit: Bank0
00141 02B9 	;
00142 02B9 	;
00143 02B9 1936 	TX_TheByte	BTFSC	DataSentFlag
00144 02BA 0008 		RETURN
00145 02BB 0834 		MOVF	TXByte,W	
00146 02BC 0023  a		MOVLB	TXREG	;banksel
00145 02BD 		BANKSEL	TXREG
00147 02BD 009A 		MOVWF	TXREG
00148 02BE 0020 		MOVLB	0
00149 02BF 1536 		BSF	DataSentFlag
00150 02C0 0008 		RETURN
00151 02C1 	;
00152 02C1 	;=========================================================================================
00153 02C1 	;
00154 02C1 	RX_TheByte:
00155 02C1 0023  a		MOVLB	RCSTA	;banksel
00154 02C2 		BANKSEL	RCSTA	; bank 3
00156 02C2 081D 		MOVF	RCSTA,W
00157 02C3 3906 		ANDLW	0x06
00158 02C4 		SKPZ		;Frame or Overrun Err?
00158 02C4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00159 02C5 3205 		BRA	RX_TheByte_Err	; yes
00160 02C6 0819 		MOVF	RCREG,W
00161 02C7 	;
00162 02C7 0020 		movlb	0x00	; bank 0
00163 02C8 00B5 		MOVWF	RXByte
00164 02C9 14B6 		BSF	DataReceivedFlag
00165 02CA 0008 		RETURN
00166 02CB 	;
00167 02CB 0819 	RX_TheByte_Err	MOVF	RCREG,W	;bad byte so drop it
00168 02CC 01B5 		CLRF	RXByte
00169 02CD 121D 		BCF	RCSTA,CREN
00170 02CE 111D 		BCF	RCSTA,FERR
00171 02CF 109D 		BCF	RCSTA,OERR
00172 02D0 161D 		BSF	RCSTA,CREN
00173 02D1 0020 		movlb	0x00
00174 02D2 0008 		RETURN
00175 02D3 	;
00176 02D3 	;=========================================================================================
00177 02D3 	;=========================================================================================
00178 02D3 	; Put the byte in W into the serial input buffer
00179 02D3 	;
00180 02D3 	; Entry: W = byte to store
00181 02D3 	; Exit: none
00182 02D3 	; Ram Used: Param78, FSR
00183 02D3 	;
00184 02D3 00F8 	StoreSerIn	MOVWF	Param78
00185 02D4 0022 		MOVLB	Ser_Buff_Bank
00186 02D5 0AA0 		INCF	Ser_In_Bytes,F
00187 02D6 	;	
00188 02D6 0822 		MOVF	Ser_In_InPtr,W
00189 02D7 391F 		ANDLW	0x1F
00190 02D8 0AA2 		INCF	Ser_In_InPtr,F
00191 02D9 3E26 		ADDLW	low Ser_In_Buff
00192 02DA 0084 		MOVWF	FSR0
00193 02DB 3001 		MOVLW	high Ser_In_Buff
00194 02DC 0085 		MOVWF	FSR0H
00195 02DD 0878 		MOVF	Param78,W
00196 02DE 0080 		MOVWF	INDF0
00197 02DF 0020 		MOVLB	0x00
00198 02E0 0008 		RETURN
00199 02E1 	;
00200 02E1 	;=========================================================================================
00201 02E1 	; Get a byte from the serial input buffer
00202 02E1 	;
00203 02E1 	; Entry: none
00204 02E1 	; Exit: W=byte from buffer, Param78,0=valid
00205 02E1 	;
00206 02E1 0022 	GetSerIn	MOVLB	Ser_Buff_Bank
00207 02E2 1078 		BCF	Param78,0	;no data
00208 02E3 08A0 		MOVF	Ser_In_Bytes,F
00209 02E4 		SKPNZ
00209 02E4 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00210 02E5 320A 		bra	GetSerIn_End
00211 02E6 1478 		BSF	Param78,0
00212 02E7 03A0 		DECF	Ser_In_Bytes,F
00213 02E8 0823 		MOVF	Ser_In_OutPtr,W
00214 02E9 391F 		ANDLW	0x1F
00215 02EA 0AA3 		INCF	Ser_In_OutPtr,F
00216 02EB 3E26 		ADDLW	low Ser_In_Buff
00217 02EC 0084 		MOVWF	FSR0L
00218 02ED 3001 		MOVLW	high Ser_In_Buff
00219 02EE 0085 		MOVWF	FSR0H
00220 02EF 0800 		MOVF	INDF0,W
00221 02F0 0020 	GetSerIn_End	movlb	0
00222 02F1 0008 		return
00223 02F2 	;
00224 02F2 	;=========================================================================================
00225 02F2 	; Flush the serial incoming buffer
00226 02F2 	; Entry: none
00227 02F2 	; Exit: bank 0
00228 02F2 	;
00229 02F2 0022 	FlushInBuff	movlb	Ser_Buff_Bank
00230 02F3 01A0 		clrf	Ser_In_Bytes
00231 02F4 01A3 		clrf	Ser_In_OutPtr
00232 02F5 01A2 		clrf	Ser_In_InPtr
00233 02F6 0020 		movlb	0
SerialServo.asm                                                       Page: 23
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00234 02F7 0008 		return
00235 02F8 	;
00236 02F8 	;=========================================================================================
00237 02F8 	; Get the number of bytes in the serial input buffer
00238 02F8 	;
00239 02F8 	; Entry: none
00240 02F8 	; Exit: W=bytes in buffer, Z
00241 02F8 	;
00242 02F8 0022 	GetSerInBytes	MOVLB	Ser_Buff_Bank
00243 02F9 0820 		MOVF	Ser_In_Bytes,W
00244 02FA 0020 		movlb	0
00245 02FB 0008 		return
00246 02FC 	;
00247 02FC 	;=========================================================================================
00248 02FC 	; Get the number of bytes in the serial ouput buffer
00249 02FC 	;
00250 02FC 	; Entry: none
00251 02FC 	; Exit: W=bytes in buffer, Z
00252 02FC 	;
00253 02FC 0022 	GetSerOutBytes	MOVLB	Ser_Buff_Bank
00254 02FD 0821 		MOVF	Ser_Out_Bytes,W
00255 02FE 0020 		movlb	0
00256 02FF 0008 		return
00257 0300 	;
00258 0300 	;=========================================================================================
00259 0300 	; Put the byte in W into the serial output buffer
00260 0300 	;
00261 0300 	; Entry: W = byte to store
00262 0300 	; Exit: Param78 & W = byte stored, Bank 0
00263 0300 	; Ram used: Param78, FSR0
00264 0300 	; Calls: (0) none
00265 0300 	;
00266 0300 00F8 	StoreSerOut	MOVWF	Param78
00267 0301 0022 		MOVLB	Ser_Buff_Bank
00268 0302 0AA1 		INCF	Ser_Out_Bytes,F
00269 0303 	;	
00270 0303 0824 		MOVF	Ser_Out_InPtr,W
00271 0304 391F 		ANDLW	0x1F
00272 0305 0AA4 		INCF	Ser_Out_InPtr,F
00273 0306 3E46 		ADDLW	low Ser_Out_Buff
00274 0307 0084 		MOVWF	FSR0
00275 0308 3001 		MOVLW	high Ser_In_Buff
00276 0309 0085 		MOVWF	FSR0H
00277 030A 0878 		MOVF	Param78,W
00278 030B 0080 		MOVWF	INDF0
00279 030C 0020 		movlb	0
00280 030D 0008 		return
00281 030E 	;
00282 030E 	;=========================================================================================
00283 030E 	; Remove the last char stored in the output buffer
00284 030E 	;
00285 030E 0022 	POP_SerOut	MOVLB	Ser_Buff_Bank
00286 030F 08A1 		MOVF	Ser_Out_Bytes,F
00287 0310 		SKPNZ
00287 0310 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00288 0311 3202 		bra	POP_SerOut_End
00289 0312 03A1 		DECF	Ser_Out_Bytes,F
00290 0313 03A4 		DECF	Ser_Out_InPtr,F
00291 0314 0020 	POP_SerOut_End	movlb	0
00292 0315 0008 		return
00293 0316 	;
00294 0316 	;=========================================================================================
00295 0316 	; Get a byte from the serial Output buffer
00296 0316 	;
00297 0316 	; Entry: none
00298 0316 	; Exit: W=byte from buffer, Param78,0=valid
00299 0316 	;
00300 0316 0022 	GetSerOut	MOVLB	Ser_Buff_Bank
00301 0317 1078 		BCF	Param78,0	;no data
00302 0318 08A1 		MOVF	Ser_Out_Bytes,F
00303 0319 		SKPNZ
00303 0319 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00304 031A 320A 		bra	GetSerOut_End
00305 031B 1478 		BSF	Param78,0
00306 031C 03A1 		DECF	Ser_Out_Bytes,F
00307 031D 0825 		MOVF	Ser_Out_OutPtr,W
00308 031E 391F 		ANDLW	0x1F
00309 031F 0AA5 		INCF	Ser_Out_OutPtr,F
00310 0320 3E46 		ADDLW	low Ser_Out_Buff
00311 0321 0084 		MOVWF	FSR0L
00312 0322 3001 		MOVLW	high Ser_In_Buff
00313 0323 0085 		MOVWF	FSR0H
00314 0324 0800 		MOVF	INDF0,W
00315 0325 0020 	GetSerOut_End	movlb	0
00316 0326 0008 		return
00317 0327 	;
00318 0327 	;=========================================================================================
00319 0327 	;
00320 0327 	;
00321 0327 	;
00322 0327 	;
00323 0327 	;
00324 0327 	;
00325 0327 	;
00326 0327 	;
00327 0327 	;
00328 0327 	;
00329 0327 	;
00330 0327 	;
SerialServo.asm                                                       Page: 24
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00331 0327 	;
00332 0327 	;
00333 0327 	;
00334 0327 	;
00335 0327 	;
00336 0327 	;
00337 0327 	;
00338 0327 	;
00843 0327 		include <RS232_Parse.inc>
00001 0327 	;=========================================================================================
00002 0327 	;
00003 0327 	;    Filename:      RS232_Parse.inc
00004 0327 	;    Date:          5/25/2018
00005 0327 	;    File Version:  1.0d5
00006 0327 	;
00007 0327 	;    Author:        David M. Flynn
00008 0327 	;    Company:       Oxford V.U.E., Inc.
00009 0327 	;    E-Mail:        dflynn@oxfordvue.com
00010 0327 	;
00011 0327 	;=========================================================================================
00012 0327 	; Routines:
00013 0327 	;
00014 0327 	; RS232_Parse	Call from main loop
00015 0327 	; RS232_ClearTXData	Clear the TX data, FSR1
00016 0327 	; RS232_Send	Send the data at TX_data, FSR0, FSR1
00017 0327 	;
00018 0327 	;=========================================================================================
00019 0327 	; Notes:
00020 0327 	;
00021 0327 	; History:
00022 0327 	; 1.0b5  5/25/2018	RS232_MasterAddr, RS232_SlaveAddr now in ram
00023 0327 	; 1.0d4  5/18/2018	Added RS232_ClearTXData, RS232_Send.
00024 0327 	; 1.0d3  5/17/2018	Used Timer1Lo for RXTimeout.
00025 0327 	; 1.0d2  4/26/2018	Comments, used in robot arm project.
00026 0327 	; 1.0d1  1/12/2016	Modified for I2C to RS-232 8 byte packets.
00027 0327 	; 1.0d1  11/9/2015	Adapted for QD Tester
00028 0327 	; 1.0    12/6/2013	First Rev'd version
00029 0327 	;
00030 0327 	; RS232_Parse	(X/0) Parse any bytes received by the serial port
00031 0327 	; Packet format: (FF FF) SA0 (SA1) DA0 (DA1) D0 D1 D2 D3 D4 D5 D6 D7 (CS)
00032 0327 	;  FF = Sync byte, SAn = Source Address, DA = Destination Address,
00033 0327 	;       Dn = Data, CS Check Sum (xor of Address and Data bytes)
00034 0327 	;  SA must be RS232_RAddr ( the boss )
00035 0327 	;  DA must be RS232_MyAddr ( this program )
00036 0327 	;  If the checksum matches put the data bytes in the RX_Data buffer,
00037 0327 	;   set RXDataValidFlag and RXDataIsNew.
00038 0327 	;=========================================================================================
00039 0327 	;	constant RP_LongAddr=1		;16 bit addresses
00040 0327 	; default to a 6 byte packet SA DA D0 D1 D2 D3
00041 0327 	;
00042 0327 		ifndef UseRS232SyncBytes
00044 0327 		endif
00045 0327 	;
00046 0327 		ifndef UseRS232SendSyncBytes
00048 0327 		endif
00049 0327 	;
00050 0327 		ifndef RP_LongAddr
00052 0327 		endif
00053 0327 	;
00054 0327 		ifndef RP_DataBytes
00056 0327 		endif
00057 0327 	;
00058 0327 		ifndef UseRS232Chksum
00060 0327 		endif
00061 0327 	;
00062 0327 		constant RXTimeout=5		;50 mS max between incoming bytes
00063 0327 	;=========================================================================================
00064 0327 	; Bank0 variable used by RS232_Parse:
00065 0327 	;
00066 0327 	;	cblock
00067 0327 	;	RS232_MasterAddr
00068 0327 	;	RS232_SlaveAddr
00069 0327 	;	endc
00070 0327 	;
00071 0327 	; Bank1 variable used by RS232_Parse:
00072 0327 	;
00073 0327 	;	cblock
00074 0327 	;	RX_ParseFlags
00075 0327 	;	RX_Flags
00076 0327 	;	RX_DataCount
00077 0327 	;	RX_CSUM
00078 0327 	;	RX_TempData:RP_DataBytes
00079 0327 	;	RX_Data:RP_DataBytes
00080 0327 	;	TX_Data:RP_DataBytes
00081 0327 	;	endc
00082 0327 	;RX_ParseFlags Bits
00083 0327 00A0 	#Define	SyncByte1RXd	RX_ParseFlags,0
00084 0327 00A0 	#Define	SyncByte2RXd	RX_ParseFlags,1
00085 0327 00A0 	#Define	SourceAddLoRXd	RX_ParseFlags,2
00086 0327 00A0 	#Define	SourceAddHiRXd	RX_ParseFlags,3
00087 0327 00A0 	#Define	DestAddLoRXd	RX_ParseFlags,4
00088 0327 00A0 	#Define	DestAddHiRXd	RX_ParseFlags,5
00089 0327 00A0 	#Define	AllDataRXd	RX_ParseFlags,6
00090 0327 	;
00091 0327 	;RX_Flags Bits
00092 0327 00A1 	#Define	RXDataValidFlag	RX_Flags,0
00093 0327 00A1 	#Define	RXDataIsNew	RX_Flags,1
00094 0327 00A1 	#Define	RXSrcIsMaster	RX_Flags,2
00095 0327 00A1 	#Define	RXDstIsMe	RX_Flags,3
SerialServo.asm                                                       Page: 25
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00096 0327 	;
00097 0327 	;
00098 0327 	; *** put in main loop
00099 0327 	;	CALL	RS232_Parse
00100 0327 	; if RXDataValidFlag is set data may be used
00101 0327 	;
00102 0327 	;=========================================================================================
00103 0327 	; Parse any bytes received by the serial port
00104 0327 	;
00105 0327 	; Receive 0xFF,0xFF,SA0,(SA1),DA0,(DA1),Cmd,Data0,Data1,Data2,CS
00106 0327 	;
00107 0327 	;
00108 0327 	; Entry: none
00109 0327 	; Exit: none
00110 0327 	; Ram Used: Param78, FSR
00111 0327 	; Calls (1+0): GetSerIn
00112 0327 	;
00113 0327 0021 	RS232_Parse	movlb	0x01	;bank 1
00114 0328 08A0 		movf	RX_ParseFlags,F
00115 0329 		SKPNZ		;Receive in process?
00115 0329 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00116 032A 3207 		bra	RS232_Parse_Byte	; no
00117 032B 	;
00118 032B 0020 		movlb	0	;bank 0
00119 032C 08AC 		movf	Timer1Lo,F
00120 032D 		SKPZ		;Timed out?
00120 032D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00121 032E 3203 		bra	RS232_Parse_Byte	; no
00122 032F 	;timed out
00123 032F 15BE 		bsf	ssRX_Timeout
00124 0330 0021 		movlb	0x01	;bank 1
00125 0331 01A0 		clrf	RX_ParseFlags
00126 0332 	;
00127 0332 22E1 	RS232_Parse_Byte	CALL	GetSerIn
00128 0333 1C78 		BTFSS	Param78,0	;Got a byte?
00129 0334 0008 		RETURN		; No
00130 0335 	;
00131 0335 00F8 		MOVWF	Param78	;Data Byte RXd
00132 0336 3005 		movlw	RXTimeout	;Reset time-out timer
00133 0337 00AC 		movwf	Timer1Lo
00134 0338 	; Command inturpreter
00135 0338 		if UseRS232SyncBytes
00136 0338 	;
00137 0338 0021 		movlb	0x01	;bank 1
00138 0339 08A0 		MOVF	RX_ParseFlags,F
00139 033A 		SKPZ		;Beginning new packet?
00139 033A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00140 033B 3205 		BRA	RS232_Parse_Sync2	; No
00141 033C 30DD 		MOVLW	kRS232SyncByteValue
00142 033D 0278 		SUBWF	Param78,W
00143 033E 		SKPNZ		;Sync byte OK?
00143 033E 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00144 033F 1420 		BSF	SyncByte1RXd	; Yes
00145 0340 3218 		bra	RS232_Parse_Rtn
00146 0341 	;
00147 0341 18A0 	RS232_Parse_Sync2	btfsc	SyncByte2RXd
00148 0342 3206 		bra	RS232_Parse_SALo
00149 0343 30DD 		movlw	kRS232SyncByteValue
00150 0344 0278 		subwf	Param78,W
00151 0345 		SKPZ
00151 0345 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00152 0346 2B95 		goto	RS232_Parse_Error
00153 0347 14A0 		bsf	SyncByte2RXd
00154 0348 3210 		bra	RS232_Parse_Rtn
00155 0349 	;
00156 0349 		endif
00157 0349 	;
00158 0349 	; LSB of Source Address
00159 0349 0021 	RS232_Parse_SALo	movlb	0x01	;bank 1
00160 034A 1920 		btfsc	SourceAddLoRXd
00161 034B 320F 		bra	RS232_Parse_SALo_end
00162 034C 	;
00163 034C 01A3 		clrf	RX_CSUM
00164 034D 01A2 		clrf	RX_DataCount
00165 034E 1521 		bsf	RXSrcIsMaster
00166 034F 0020 		movlb	0
00167 0350 0858 		movf	RS232_MasterAddr,W
00168 0351 0021 		movlb	1
00169 0352 0278 		subwf	Param78,W
00170 0353 		SKPZ
00170 0353 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00171 0354 1121 		bcf	RXSrcIsMaster
00172 0355 1520 		bsf	SourceAddLoRXd
00173 0356 0878 		movf	Param78,W
00174 0357 00A4 		movwf	RX_SrcAdd
00175 0358 06A3 		xorwf	RX_CSUM,F
00176 0359 0020 	RS232_Parse_Rtn	movlb	0x00	;bank 0
00177 035A 0008 		return
00178 035B 	RS232_Parse_SALo_end:
00179 035B 	;
00180 035B 	; MSB of Source Address
00181 035B 		if RP_LongAddr
00196 035B 		endif
00197 035B 	;
00198 035B 	; LSB of Destination Address
00199 035B 1A20 	RS232_Parse_DALo	btfsc	DestAddLoRXd
00200 035C 320C 		bra	RS232_Parse_DALo_End
00201 035D 15A1 		bsf	RXDstIsMe
00202 035E 0020 		movlb	0
SerialServo.asm                                                       Page: 26
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00203 035F 0859 		movf	RS232_SlaveAddr,W
00204 0360 0021 		movlb	1
00205 0361 0278 		subwf	Param78,W
00206 0362 		SKPZ
00206 0362 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00207 0363 11A1 		bcf	RXDstIsMe
00208 0364 1620 		bsf	DestAddLoRXd
00209 0365 0878 		movf	Param78,W
00210 0366 00A5 		movwf	RX_DstAdd
00211 0367 06A3 		xorwf	RX_CSUM,F
00212 0368 33F0 		bra	RS232_Parse_Rtn
00213 0369 	RS232_Parse_DALo_End:
00214 0369 	;
00215 0369 	; MSB of Destination Address
00216 0369 		if RP_LongAddr
00231 0369 		endif
00232 0369 	;
00233 0369 1B20 	RS232_Parse_Data	btfsc	AllDataRXd
00234 036A 320F 		bra	RS232_Parse_Data_end
00235 036B 0822 		movf	RX_DataCount,W
00236 036C 3EA6 		addlw	low RX_TempData
00237 036D 0084 		movwf	FSR0L
00238 036E 3000 		movlw	high RX_TempData
00239 036F 0085 		movwf	FSR0H
00240 0370 0878 		movf	Param78,W
00241 0371 06A3 		xorwf	RX_CSUM,F
00242 0372 0080 		movwf	INDF0
00243 0373 0AA2 		incf	RX_DataCount,F
00244 0374 3004 		movlw	RP_DataBytes
00245 0375 0222 		subwf	RX_DataCount,W
00246 0376 		SKPZ
00246 0376 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00247 0377 33E1 		bra	RS232_Parse_Rtn
00248 0378 1720 		bsf	AllDataRXd
00249 0379 	;
00250 0379 		if UseRS232Chksum
00251 0379 33DF 		bra	RS232_Parse_Rtn
00252 037A 		endif
00253 037A 	RS232_Parse_Data_end
00254 037A 	;
00255 037A 		if UseRS232Chksum
00256 037A 	; checksum
00257 037A 0878 		movf	Param78,W
00258 037B 0223 		subwf	RX_CSUM,W
00259 037C 		SKPZ		;Checksum matches?
00259 037C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00260 037D 3217 		bra	RS232_Parse_Error	; No
00261 037E 	;
00262 037E 		endif
00263 037E 	;
00264 037E 30A6 		movlw	low RX_TempData
00265 037F 0084 		movwf	FSR0L
00266 0380 3000 		movlw	high RX_TempData
00267 0381 0085 		movwf	FSR0H
00268 0382 	;
00269 0382 30AA 		movlw	low RX_Data
00270 0383 0086 		movwf	FSR1L
00271 0384 3000 		movlw	high RX_Data
00272 0385 0087 		movwf	FSR1H
00273 0386 	;
00274 0386 3004 		movlw	RP_DataBytes
00275 0387 00F8 		movwf	Param78
00276 0388 0012 	RS232_Parse_L1	moviw	FSR0++
00277 0389 001E 		movwi	FSR1++
00278 038A 0BF8 		decfsz	Param78,F
00279 038B 33FC 		bra	RS232_Parse_L1
00280 038C 	;
00281 038C 14A1 		bsf	RXDataIsNew	;good packet rx'd
00282 038D 1421 		bsf	RXDataValidFlag
00283 038E 1D21 		btfss	RXSrcIsMaster	;from master?
00284 038F 1021 		bcf	RXDataValidFlag	; no
00285 0390 1DA1 		btfss	RXDstIsMe	;to me?
00286 0391 1021 		bcf	RXDataValidFlag	; no
00287 0392 	;
00288 0392 01A0 		clrf	RX_ParseFlags
00289 0393 0020 		movlb	0x00
00290 0394 0008 		return
00291 0395 	;
00292 0395 	;
00293 0395 	; We didn't get the sync byte we were expecting so restart the parser
00294 0395 01A0 	RS232_Parse_Error	CLRF	RX_ParseFlags
00295 0396 2AF2 		goto	FlushInBuff
00296 0397 	;
00297 0397 	;=========================================================================================
00298 0397 	; Clear the TX data, unused bytes are sent as 0x00
00299 0397 	; Entry: none
00300 0397 	; Exit: Bank 0
00301 0397 	; Ram used: Param78, FSR1
00302 0397 	; Calls: none
00303 0397 3001 	RS232_ClearTXData	movlw	1	;bank 1
00304 0398 3004 		movlw	RP_DataBytes
00305 0399 00F8 		movwf	Param78
00306 039A 30AE 		movlw	low TX_Data
00307 039B 0086 		movwf	FSR1L
00308 039C 3000 		movlw	high TX_Data
00309 039D 0087 		movwf	FSR1H
00310 039E 3000 		movlw	0x00
00311 039F 001E 	RS232_ClearTXData_L1	movwi	FSR1++
00312 03A0 0BF8 		decfsz	Param78,F
SerialServo.asm                                                       Page: 27
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00313 03A1 33FD 		bra	RS232_ClearTXData_L1
00314 03A2 0020 		movlb	0x00
00315 03A3 0008 		return
00316 03A4 	;
00317 03A4 	;=========================================================================================
00318 03A4 	; Send a data packet
00319 03A4 	;
00320 03A4 	;Entry: TX_Data = Data to send 
00321 03A4 	;Exit: TX_Data is cleared
00322 03A4 	;Ram used: Param78,Param79,Param7A,FSR0,FSR1
00323 03A4 	;Calls: (1+0) StoreSerOut
00324 03A4 	;
00325 03A4 	RS232_Send:
00326 03A4 	;
00327 03A4 		if UseRS232SendSyncBytes
00334 03A4 		endif
00335 03A4 	;
00336 03A4 0020 		movlb	0x00	;bank 0
00337 03A5 01FA 		clrf	Param7A	;CSum
00338 03A6 0859 		movf	RS232_SlaveAddr,W	;source address
00339 03A7 06FA 		xorwf	Param7A,F
00340 03A8 2300 		call	StoreSerOut
00341 03A9 	;
00342 03A9 		if RP_LongAddr
00346 03A9 		endif
00347 03A9 	;
00348 03A9 0858 		movf	RS232_MasterAddr,W	;destination address
00349 03AA 06FA 		xorwf	Param7A,F
00350 03AB 2300 		call	StoreSerOut
00351 03AC 	;
00352 03AC 		if RP_LongAddr
00356 03AC 		endif
00357 03AC 	;
00358 03AC 0021 		movlb	1	;bank 1
00359 03AD 3004 		movlw	RP_DataBytes
00360 03AE 00F9 		movwf	Param79
00361 03AF 30AE 		movlw	low TX_Data
00362 03B0 0086 		movwf	FSR1L
00363 03B1 3000 		movlw	high TX_Data
00364 03B2 0087 		movwf	FSR1H
00365 03B3 	;
00366 03B3 0016 	RS232_Send_L1	moviw	FSR1++
00367 03B4 06FA 		xorwf	Param7A,F
00368 03B5 2300 		call	StoreSerOut
00369 03B6 0BF9 		decfsz	Param79,F
00370 03B7 33FB 		bra	RS232_Send_L1
00371 03B8 	;
00372 03B8 		if UseRS232Chksum
00373 03B8 087A 		movf	Param7A,W
00374 03B9 2300 		call	StoreSerOut
00375 03BA 		endif
00376 03BA 	;
00377 03BA 2B97 		goto	RS232_ClearTXData
00378 03BB 	;
00379 03BB 	;=========================================================================================
00380 03BB 	;
00381 03BB 	;
00382 03BB 	;
00383 03BB 	;
00384 03BB 	;
00385 03BB 	;
00386 03BB 	;
00387 03BB 	;
00388 03BB 	;
00389 03BB 	;
00390 03BB 	;
00391 03BB 	;
00392 03BB 	;
00393 03BB 	;
00394 03BB 	;
00395 03BB 	;
00396 03BB 	;
00397 03BB 	;
00398 03BB 	;
00399 03BB 	;
00400 03BB 	;
00401 03BB 	;
00402 03BB 	;
00403 03BB 	;
00844 03BB 	;
00845 03BB 	;=========================================================================================
00846 03BB 	;
00847 03BB 264F 	start	call	InitializeIO
00848 03BC 	;
00849 03BC 2605 		CALL	StartServo
00850 03BD 25E6 		CALL	ReadAN0_ColdStart
00851 03BE 	;
00852 03BE 	;=========================================================================================
00853 03BE 	;*****************************************************************************************
00854 03BE 	;=========================================================================================
00855 03BE 0064 	MainLoop	CLRWDT
00856 03BF 	;
00857 03BF 22F8 		call	GetSerInBytes
00858 03C0 		SKPZ		;Any data?
00858 03C0 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00859 03C1 2327 		CALL	RS232_Parse	; yes
00860 03C2 	;
00861 03C2 0021 		movlb	1
00862 03C3 1CA1 		btfss	RXDataIsNew
SerialServo.asm                                                       Page: 28
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00863 03C4 3203 		bra	ML_1
00864 03C5 		mCall0To1	HandleRXData
00864 03C5 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00864 03C6 2005      M		CALL	HandleRXData		CALL	Destination
00864 03C7 018A      M		CLRF	PCLATH		CLRF	PCLATH
00865 03C8 	ML_1:
00866 03C8 	;
00867 03C8 	; Fast blink the system LED is the servo is stopped because of an error
00868 03C8 0020 		MOVLB	0x00
00869 03C9 3064 		MOVLW	LEDTIME
00870 03CA 193E 		btfsc	ssio_OverCurSD
00871 03CB 300A 		movlw	LEDErrorTime
00872 03CC 00A0 		MOVWF	SysLED_Time
00873 03CD 	;
00874 03CD 258A 		CALL	ReadAN
00875 03CE 	;
00876 03CE 	; Average AN0
00877 03CE 0021  a		MOVLB	Cur_AN0	;banksel
00876 03CF 		BankSel	Cur_AN0
00878 03CF 1C32 		btfss	NewDataAN0
00879 03D0 320B 		bra	No_NewDataAN0
00880 03D1 1032 		bcf	NewDataAN0
00881 03D2 083B 		movf	OldAN0Value,W
00882 03D3 07B3 		addwf	Cur_AN0,F
00883 03D4 083C 		movf	OldAN0Value+1,W
00884 03D5 3DB4 		addwfc	Cur_AN0+1,F
00885 03D6 3634 		lsrf	Cur_AN0+1,W
00886 03D7 00B4 		movwf	Cur_AN0+1
00887 03D8 00BC 		movwf	OldAN0Value+1
00888 03D9 0C33 		rrf	Cur_AN0,W
00889 03DA 00B3 		movwf	Cur_AN0
00890 03DB 00BB 		movwf	OldAN0Value
00891 03DC 	;
00892 03DC 	No_NewDataAN0:
00893 03DC 2156 		call	ReadEncoder
00894 03DD 	;
00895 03DD 256E 		call	HandleButtons
00896 03DE 	;
00897 03DE 	;---------------------
00898 03DE 	; Handle Serial Communications
00899 03DE 1A11 		BTFSC	PIR1,TXIF	;TX done?
00900 03DF 22B9 		CALL	TX_TheByte	; Yes
00901 03E0 	;
00902 03E0 	; move any serial data received into the 32 byte input buffer
00903 03E0 1CB6 		BTFSS	DataReceivedFlag
00904 03E1 3203 		BRA	ML_Ser_Out
00905 03E2 0835 		MOVF	RXByte,W
00906 03E3 10B6 		BCF	DataReceivedFlag
00907 03E4 22D3 		CALL	StoreSerIn
00908 03E5 	;
00909 03E5 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00910 03E5 	;
00911 03E5 1D36 	ML_Ser_Out	BTFSS	DataSentFlag
00912 03E6 3205 		BRA	ML_Ser_End
00913 03E7 2316 		CALL	GetSerOut
00914 03E8 1C78 		BTFSS	Param78,0
00915 03E9 3202 		BRA	ML_Ser_End
00916 03EA 00B4 		MOVWF	TXByte
00917 03EB 1136 		BCF	DataSentFlag
00918 03EC 	ML_Ser_End:
00919 03EC 	;----------------------
00920 03EC 	;
00921 03EC 0020 		movlb	0x00	;bank 0
00922 03ED 0857 		movf	SysMode,W
00923 03EE 000B 		brw
00924 03EF 2BF5 		goto	DoModeZero
00925 03F0 2C01 		goto	DoModeOne
00926 03F1 2C63 		goto	DoModeTwo
00927 03F2 2CA5 		goto	DoModeThree
00928 03F3 2D22 		goto	DoMode4
00929 03F4 	;
00930 03F4 	ModeReturn:
00931 03F4 	;
00932 03F4 2BBE 		goto	MainLoop
00933 03F5 	;=========================================================================================
00934 03F5 	;*****************************************************************************************
00935 03F5 	;=========================================================================================
00936 03F5 	;Simple servo testing
00937 03F5 	; copy AN4 value x2 + .1976 to servo value
00938 03F5 	;
00939 03F5 	DoModeZero:
00940 03F5 0021  a		MOVLB	ModeZeroPot	;banksel
00939 03F6 		BankSel	ModeZeroPot
00941 03F6 3537 		lslf	ModeZeroPot,W
00942 03F7 00FC 		movwf	Param7C
00943 03F8 0D38 		rlf	ModeZeroPot+1,W
00944 03F9 00FD 		movwf	Param7D
00945 03FA 30B8 		movlw	low .1976
00946 03FB 07FC 		addwf	Param7C,F
00947 03FC 3007 		movlw	high .1976
00948 03FD 3DFD 		addwfc	Param7D,F
00949 03FE 	;
00950 03FE 262D 		call	ClampInt
00951 03FF 25F1 		call	Copy7CToSig
00952 0400 	;
00953 0400 2BF4 		goto	ModeReturn
00954 0401 	;=========================================================================================
00955 0401 	;Testing servo and encoder
00956 0401 	; if AN4 + .950 > EncoderVal set servo to ServoFastForward
SerialServo.asm                                                       Page: 29
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00957 0401 	; elseif AN4 + .1050 < EncoderVal set servo to ServoFastReverse
00958 0401 	; else Set ServoIdle
00959 0401 	;
00960 0401 	DoModeOne:
00961 0401 0021  a		MOVLB	ModeZeroPot	;banksel
00960 0402 		BankSel	ModeZeroPot
00962 0402 	;
00963 0402 	;Param7A:Param79 = Cur_AN4 + .950
00964 0402 30B6 		movlw	low .950
00965 0403 0737 		addwf	ModeZeroPot,W
00966 0404 00F9 		movwf	Param79
00967 0405 3003 		movlw	high .950
00968 0406 3D38 		addwfc	ModeZeroPot+1,W
00969 0407 00FA 		movwf	Param7A
00970 0408 	;
00971 0408 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
00972 0408 0020  a		MOVLB	EncoderVal	;banksel
00971 0409 		BankSel	EncoderVal
00973 0409 0845 		movf	EncoderVal,W
00974 040A 02F9 		subwf	Param79,F
00975 040B 0846 		movf	EncoderVal+1,W
00976 040C 3BFA 		subwfb	Param7A,F
00977 040D 	;
00978 040D 1FFA 		btfss	Param7A,7	;Param7A:Param79 < 0?
00979 040E 3210 		bra	DM1_FF	; No, EncoderVal <= (AN4 + .950)
00980 040F 	;
00981 040F 	;Param7A:Param79 = Cur_AN4 + .1050
00982 040F 0021  a		MOVLB	ModeZeroPot	;banksel
00981 0410 		BankSel	ModeZeroPot
00983 0410 301A 		movlw	low .1050
00984 0411 0737 		addwf	ModeZeroPot,W
00985 0412 00F9 		movwf	Param79
00986 0413 3004 		movlw	high .1050
00987 0414 3D38 		addwfc	ModeZeroPot+1,W
00988 0415 00FA 		movwf	Param7A
00989 0416 	;
00990 0416 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
00991 0416 0020  a		MOVLB	EncoderVal	;banksel
00990 0417 		BankSel	EncoderVal
00992 0417 0845 		movf	EncoderVal,W
00993 0418 02F9 		subwf	Param79,F
00994 0419 0846 		movf	EncoderVal+1,W
00995 041A 3BFA 		subwfb	Param7A,F
00996 041B 	;
00997 041B 1BFA 		btfsc	Param7A,7	;Param7A:Param79 < 0?
00998 041C 3208 		bra	DM1_FR	; Yes, EncoderVal > (AN4 + .1050)
00999 041D 	;
01000 041D 	; EncoderVal > (ModeZeroPot + .950) && EncoderVal <= (ModeZeroPot + .1050)
01001 041D 153D 		bsf	ServoIdle
01002 041E 2BF4 		goto	ModeReturn
01003 041F 	;
01004 041F 084C 	DM1_FF	movf	ServoFastForward,W
01005 0420 00FC 		movwf	Param7C
01006 0421 084D 		movf	ServoFastForward+1,W
01007 0422 00FD 		movwf	Param7D
01008 0423 25F1 		call	Copy7CToSig
01009 0424 2BF4 		goto	ModeReturn
01010 0425 	;
01011 0425 084E 	DM1_FR	movf	ServoFastReverse,W
01012 0426 00FC 		movwf	Param7C
01013 0427 084F 		movf	ServoFastReverse+1,W
01014 0428 00FD 		movwf	Param7D
01015 0429 25F1 		call	Copy7CToSig
01016 042A 2BF4 		goto	ModeReturn
01017 042B 	;
01018 042B 	;=========================================================================================
01019 042B 	; if ssEnableOverCur and Cur_AN0>ssMaxI*4 then
01020 042B 	;   OverCurrentFlag=true
01021 042B 0020 	CheckCurrent	movlb	0x00	;Bank 0
01022 042C 1C5A 		btfss	ssEnableOverCur
01023 042D 0008 		return
01024 042E 	;Param79:Param78 = ssMaxI * 4
01025 042E 01F9 		clrf	Param79
01026 042F 355B 		lslf	ssMaxI,W
01027 0430 00F8 		movwf	Param78
01028 0431 0DF9 		rlf	Param79,F
01029 0432 35F8 		lslf	Param78,F
01030 0433 0DF9 		rlf	Param79,F
01031 0434 	;Param79:Param78 -= Cur_AN0
01032 0434 0021  a		MOVLB	ServoCurrent	;banksel
01031 0435 		BankSel	ServoCurrent
01033 0435 0833 		movf	ServoCurrent,W
01034 0436 02F8 		subwf	Param78,F
01035 0437 0834 		movf	ServoCurrent+1,W
01036 0438 3BF9 		subwfb	Param79,F
01037 0439 0020 		movlb	0x00	;Bank 0
01038 043A 	;
01039 043A 1BF9 		btfsc	Param79,7	;Cur_AN0>ssMaxI*4?
01040 043B 15BD 		bsf	OverCurrentFlag
01041 043C 0008 		return
01042 043D 	;
01043 043D 	;=========================================================================================
01044 043D 	; if Cur_AN0>ssGripI*4 then
01045 043D 	;   GripIMet=true
01046 043D 	; if Cur_AN0>(ssGripI+0x10)*4 then
01047 043D 	;   GripIOver=true
01048 043D 0020 	CheckGripCurrent	movlb	0x00	;Bank 0
01049 043E 	;Param79:Param78 = ssGripI * 4
01050 043E 01F9 		clrf	Param79
SerialServo.asm                                                       Page: 30
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

01051 043F 355D 		lslf	ssGripI,W
01052 0440 00F8 		movwf	Param78
01053 0441 0DF9 		rlf	Param79,F
01054 0442 35F8 		lslf	Param78,F
01055 0443 0DF9 		rlf	Param79,F
01056 0444 	;Param79:Param78 -= Cur_AN0
01057 0444 0021  a		MOVLB	ServoCurrent	;banksel
01056 0445 		BankSel	ServoCurrent
01058 0445 0833 		movf	ServoCurrent,W
01059 0446 02F8 		subwf	Param78,F
01060 0447 0834 		movf	ServoCurrent+1,W
01061 0448 3BF9 		subwfb	Param79,F
01062 0449 0020 		movlb	0x00	;Bank 0
01063 044A 	;
01064 044A 1BF9 		btfsc	Param79,7	;Cur_AN0>ssGripI*4?
01065 044B 163D 		bsf	GripIMet	; Yes
01066 044C 1BF9 		btfsc	Param79,7	;Cur_AN0>ssGripI*4?
01067 044D 16BE 		bsf	ssGripMCur
01068 044E 	;Param79:Param78 = (ssGripI+0x10) * 4
01069 044E 01F9 		clrf	Param79
01070 044F 3004 		movlw	kGripperHC
01071 0450 075D 		addwf	ssGripI,W
01072 0451 00F8 		movwf	Param78
01073 0452 3000 		movlw	0x00
01074 0453 3DF9 		addwfc	Param79,F
01075 0454 35F8 		lslf	Param78,F
01076 0455 0DF9 		rlf	Param79,F
01077 0456 35F8 		lslf	Param78,F
01078 0457 0DF9 		rlf	Param79,F
01079 0458 	;Param79:Param78 -= Cur_AN0
01080 0458 0021  a		MOVLB	ServoCurrent	;banksel
01079 0459 		BankSel	ServoCurrent
01081 0459 0833 		movf	ServoCurrent,W
01082 045A 02F8 		subwf	Param78,F
01083 045B 0834 		movf	ServoCurrent+1,W
01084 045C 3BF9 		subwfb	Param79,F
01085 045D 0020 		movlb	0x00	;Bank 0
01086 045E 	;
01087 045E 1BF9 		btfsc	Param79,7	;Cur_AN0>(ssGripI+10)*4?
01088 045F 16BD 		bsf	GripIOver
01089 0460 1BF9 		btfsc	Param79,7	;Cur_AN0>(ssGripI+10)*4?
01090 0461 163E 		bsf	ssGripOCur
01091 0462 0008 		return
01092 0463 	;
01093 0463 	;=========================================================================================
01094 0463 	;Idle routine for Basic Serial Servo mode
01095 0463 	;
01096 0463 0020 	DoModeTwo	movlb	0
01097 0464 1BB8 		btfsc	ssCmdPos+1,7	;Any command issued?
01098 0465 323D 		bra	DoModeTwo_1	; No, Idle the servo
01099 0466 	;
01100 0466 	;Check for over current, kill position command if over current is detected.
01101 0466 242B 		call	CheckCurrent
01102 0467 1DBD 		btfss	OverCurrentFlag
01103 0468 3206 		bra	DM2_NotOverCurrent
01104 0469 01B7 		clrf	ssCmdPos
01105 046A 01B8 		clrf	ssCmdPos+1
01106 046B 17B8 		bsf	ssCmdPos+1,7
01107 046C 153E 		bsf	ssio_OverCurSD
01108 046D 11BD 		bcf	OverCurrentFlag
01109 046E 3234 		bra	DoModeTwo_1
01110 046F 	;
01111 046F 	DM2_NotOverCurrent:
01112 046F 113E 		bcf	ssio_OverCurSD
01113 0470 08D6 		movf	ServoSpeed,F
01114 0471 		SKPNZ		;Speed = 0?
01114 0471 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01115 0472 3225 		bra	DoModeTwo_NoSpeed	; yes
01116 0473 1C3D 		btfss	PulseSent	;Time to update?
01117 0474 2BF4 		goto	ModeReturn	; No
01118 0475 103D 		bcf	PulseSent
01119 0476 	;Param7D:Param7C = Cmd-Cur
01120 0476 0839 		movf	ssCurPos,W
01121 0477 0237 		subwf	ssCmdPos,W
01122 0478 00FC 		movwf	Param7C
01123 0479 083A 		movf	ssCurPos+1,W
01124 047A 3B38 		subwfb	ssCmdPos+1,W
01125 047B 00FD 		movwf	Param7D
01126 047C 	; if Param7D:Param7C = 0 then we are In Position
01127 047C 047C 		iorwf	Param7C,W
01128 047D 		SKPNZ
01128 047D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01129 047E 321D 		bra	DoModeTwo_Go	; if Cmd = Cur Go
01130 047F 	;
01131 047F 	;
01132 047F 1FFD 		BTFSS	Param7D,7	;Cmd<Cur? Set if Cur>Cmd
01133 0480 2C8C 		GOTO	DoModeTwo_MovPlus	; Yes
01134 0481 	;Move minus
01135 0481 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01136 0482 2C87 		GOTO	DoModeTwo_Minus	; No
01137 0483 0856 		MOVF	ServoSpeed,W
01138 0484 077C 		ADDWF	Param7C,W
01139 0485 1803 		BTFSC	_C	;Dist<Speed?
01140 0486 3211 		bra	DoModeTwo_NoSpeed	; No
01141 0487 	;
01142 0487 	; Subtract speed from current position
01143 0487 0856 	DoModeTwo_Minus	MOVF	ServoSpeed,W
01144 0488 02B9 		SUBWF	ssCurPos,F	;SigOutTime
01145 0489 3000 		MOVLW	0x00
SerialServo.asm                                                       Page: 31
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

01146 048A 3BBA 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01147 048B 3210 		bra	DoModeTwo_Go
01148 048C 	;
01149 048C 	;=============================
01150 048C 	; 7D:7C = distance to go
01151 048C 	;
01152 048C 08FD 	DoModeTwo_MovPlus	MOVF	Param7D,F
01153 048D 		SKPZ		;Dist>255 to go?
01153 048D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01154 048E 3204 		bra	DoModeTwo_Plus	; Yes
01155 048F 0856 		MOVF	ServoSpeed,W
01156 0490 027C 		SUBWF	Param7C,W	;Dist-Speed
01157 0491 		SKPNB		;Speed>Dist?
01157 0491 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01158 0492 3205 		bra	DoModeTwo_NoSpeed	; Yes
01159 0493 	;
01160 0493 0856 	DoModeTwo_Plus	MOVF	ServoSpeed,W	;7D:7C = CurPos + Speed
01161 0494 07B9 		ADDWF	ssCurPos,F
01162 0495 0103 		CLRW
01163 0496 3DBA 		ADDWFC	ssCurPos+1,F
01164 0497 3204 		bra	DoModeTwo_Go
01165 0498 	;
01166 0498 	;
01167 0498 	; set current position at command position
01168 0498 0837 	DoModeTwo_NoSpeed	movf	ssCmdPos,W
01169 0499 00B9 		movwf	ssCurPos
01170 049A 0838 		movf	ssCmdPos+1,W
01171 049B 00BA 		movwf	ssCurPos+1
01172 049C 	; make it so
01173 049C 0839 	DoModeTwo_Go	movf	ssCurPos,W
01174 049D 00FC 		movwf	Param7C
01175 049E 083A 		movf	ssCurPos+1,W
01176 049F 00FD 		movwf	Param7D
01177 04A0 262D 		call	ClampInt
01178 04A1 25F1 		call	Copy7CToSig
01179 04A2 2BF4 		goto	ModeReturn
01180 04A3 	;
01181 04A3 	DoModeTwo_1:
01182 04A3 153D 		bsf	ServoIdle	;power down servo
01183 04A4 2BF4 		goto	ModeReturn
01184 04A5 	;
01185 04A5 	;=========================================================================================
01186 04A5 	;Idle routine for Absolute encoder position control.
01187 04A5 	; if ssCmdPos > EncoderVal set servo to ServoFastForward
01188 04A5 	; elseif ssCmdPos + DeadBand < EncoderVal set servo to ServoFastReverse
01189 04A5 	; else Set ServoIdle
01190 04A5 	;
01191 04A5 	; Ram Used:Param79,Param7A,Param7C,Param7D
01192 04A5 	;
01193 04A5 0020 	DoModeThree	movlb	0	;bank 0
01194 04A6 1BB8 		btfsc	ssCmdPos+1,7
01195 04A7 3227 		bra	DM3_IdleServo
01196 04A8 	;
01197 04A8 	;Check for over current, kill position command if over current is detected.
01198 04A8 242B 		call	CheckCurrent
01199 04A9 1DBD 		btfss	OverCurrentFlag
01200 04AA 3206 		bra	DM3_NotOverCurrent
01201 04AB 01B7 		clrf	ssCmdPos
01202 04AC 01B8 		clrf	ssCmdPos+1
01203 04AD 17B8 		bsf	ssCmdPos+1,7
01204 04AE 153E 		bsf	ssio_OverCurSD
01205 04AF 11BD 		bcf	OverCurrentFlag
01206 04B0 321E 		bra	DM3_IdleServo
01207 04B1 	;
01208 04B1 	DM3_NotOverCurrent:
01209 04B1 	;Param7A:Param79 = ssCmdPos
01210 04B1 113E 		bcf	ssio_OverCurSD
01211 04B2 0837 		movf	ssCmdPos,W
01212 04B3 00F9 		movwf	Param79
01213 04B4 0838 		movf	ssCmdPos+1,W
01214 04B5 00FA 		movwf	Param7A
01215 04B6 	;
01216 04B6 	;Param7A:Param79 = Param7A:Param79 - ((EncoderVal + EncoderOffset) mod 16384)
01217 04B6 0845 		movf	EncoderVal,W
01218 04B7 074A 		addwf	EncoderOffset,W
01219 04B8 00FC 		movwf	Param7C
01220 04B9 0846 		movf	EncoderVal+1,W
01221 04BA 3D4B 		addwfc	EncoderOffset+1,W
01222 04BB 393F 		andlw	0x3F
01223 04BC 00FD 		movwf	Param7D
01224 04BD 087C 		movf	Param7C,W	;(EncoderVal + EncoderOffset) mod 16384
01225 04BE 02F9 		subwf	Param79,F
01226 04BF 087D 		movf	Param7D,W
01227 04C0 3BFA 		subwfb	Param7A,F
01228 04C1 	;
01229 04C1 1FFA 		btfss	Param7A,7	;Param7A:Param79 < 0?
01230 04C2 3219 		bra	DM3_FF	; No, EncoderVal <= ssCmdPos
01231 04C3 	;
01232 04C3 	;Param7A:Param79 = ssCmdPos + DeadBand
01233 04C3 085C 		movf	DeadBand,W
01234 04C4 0737 		addwf	ssCmdPos,W
01235 04C5 00F9 		movwf	Param79
01236 04C6 3000 		movlw	0x00
01237 04C7 3D38 		addwfc	ssCmdPos+1,W
01238 04C8 00FA 		movwf	Param7A
01239 04C9 	;
01240 04C9 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
01241 04C9 087C 		movf	Param7C,W	;(EncoderVal + EncoderOffset) mod 4096
01242 04CA 02F9 		subwf	Param79,F
SerialServo.asm                                                       Page: 32
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

01243 04CB 087D 		movf	Param7D,W
01244 04CC 3BFA 		subwfb	Param7A,F
01245 04CD 	;
01246 04CD 1BFA 		btfsc	Param7A,7	;Param7A:Param79 < 0?
01247 04CE 3217 		bra	DM3_FR	; Yes, EncoderVal > (ssCmdPos + DeadBand)
01248 04CF 	;
01249 04CF 	; EncoderVal > ssCmdPos && EncoderVal <= (ssCmdPos + DeadBand)
01250 04CF 103E 	DM3_IdleServo	bcf	MD3_FFwd
01251 04D0 10BE 		bcf	MD3_FRev
01252 04D1 1DDA 		btfss	ssMode3IdleCenter
01253 04D2 3207 		bra	DM3_IdleInactive
01254 04D3 0850 		movf	ServoStopCenter,W
01255 04D4 00BB 		movwf	ssMD3_Dest
01256 04D5 00B9 		movwf	ssCurPos
01257 04D6 0851 		movf	ServoStopCenter+1,W
01258 04D7 00BC 		movwf	ssMD3_Dest+1
01259 04D8 00BA 		movwf	ssCurPos+1
01260 04D9 3215 		bra	DM3_UpdatePos
01261 04DA 	;
01262 04DA 153D 	DM3_IdleInactive	bsf	ServoIdle
01263 04DB 2BF4 		goto	ModeReturn
01264 04DC 	;
01265 04DC 18DA 	DM3_FF	btfsc	ssReverseDir
01266 04DD 320A 		bra	DM3_FR_1
01267 04DE 18BE 	DM3_FF_1	btfsc	MD3_FRev	;Moving Reverse dir?
01268 04DF 33EF 		bra	DM3_IdleServo	; Yes
01269 04E0 143E 		bsf	MD3_FFwd
01270 04E1 084C 		movf	ServoFastForward,W
01271 04E2 00BB 		movwf	ssMD3_Dest
01272 04E3 084D 		movf	ServoFastForward+1,W
01273 04E4 00BC 		movwf	ssMD3_Dest+1
01274 04E5 3209 		bra	DM3_UpdatePos
01275 04E6 	;
01276 04E6 18DA 	DM3_FR	btfsc	ssReverseDir
01277 04E7 33F6 		bra	DM3_FF_1
01278 04E8 183E 	DM3_FR_1	btfsc	MD3_FFwd	;Moving Forward dir?
01279 04E9 33E5 		bra	DM3_IdleServo	; Yes
01280 04EA 14BE 		bsf	MD3_FRev
01281 04EB 084E 		movf	ServoFastReverse,W
01282 04EC 00BB 		movwf	ssMD3_Dest
01283 04ED 084F 		movf	ServoFastReverse+1,W
01284 04EE 00BC 		movwf	ssMD3_Dest+1
01285 04EF 	;
01286 04EF 08D6 	DM3_UpdatePos	movf	ServoSpeed,F
01287 04F0 		SKPNZ		;Speed = 0?
01287 04F0 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01288 04F1 3225 		bra	DM3_NoSpeed	; yes
01289 04F2 1C3D 		btfss	PulseSent	;Time to update?
01290 04F3 2BF4 		goto	ModeReturn	; No
01291 04F4 103D 		bcf	PulseSent
01292 04F5 	;Param7D:Param7C = Dest-Cur
01293 04F5 0839 		movf	ssCurPos,W
01294 04F6 023B 		subwf	ssMD3_Dest,W
01295 04F7 00FC 		movwf	Param7C
01296 04F8 083A 		movf	ssCurPos+1,W
01297 04F9 3B3C 		subwfb	ssMD3_Dest+1,W
01298 04FA 00FD 		movwf	Param7D
01299 04FB 	; if Param7D:Param7C = 0 then we are In Position
01300 04FB 047C 		iorwf	Param7C,W
01301 04FC 		SKPNZ
01301 04FC 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01302 04FD 321D 		bra	DM3_Go	; if Cmd = Cur Go
01303 04FE 	;
01304 04FE 	;
01305 04FE 1FFD 		BTFSS	Param7D,7	;Cmd<Cur? Set if Cur>Cmd
01306 04FF 2D0B 		GOTO	DM3_MovPlus	; Yes
01307 0500 	;Move minus
01308 0500 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01309 0501 2D06 		GOTO	DM3_Minus	; No
01310 0502 0856 		MOVF	ServoSpeed,W
01311 0503 077C 		ADDWF	Param7C,W
01312 0504 1803 		BTFSC	_C	;Dist<Speed?
01313 0505 3211 		bra	DM3_NoSpeed	; No
01314 0506 	;
01315 0506 	; Subtract speed from current position
01316 0506 0856 	DM3_Minus	MOVF	ServoSpeed,W
01317 0507 02B9 		SUBWF	ssCurPos,F	;SigOutTime
01318 0508 3000 		MOVLW	0x00
01319 0509 3BBA 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01320 050A 3210 		bra	DM3_Go
01321 050B 	;
01322 050B 	;=============================
01323 050B 	; 7D:7C = distance to go
01324 050B 	;
01325 050B 08FD 	DM3_MovPlus	MOVF	Param7D,F
01326 050C 		SKPZ		;Dist>255 to go?
01326 050C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01327 050D 3204 		bra	DM3_Plus	; Yes
01328 050E 0856 		MOVF	ServoSpeed,W
01329 050F 027C 		SUBWF	Param7C,W	;Dist-Speed
01330 0510 		SKPNB		;Speed>Dist?
01330 0510 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01331 0511 3205 		bra	DM3_NoSpeed	; Yes
01332 0512 	;
01333 0512 0856 	DM3_Plus	MOVF	ServoSpeed,W	;7D:7C = CurPos + Speed
01334 0513 07B9 		ADDWF	ssCurPos,F
01335 0514 0103 		CLRW
01336 0515 3DBA 		ADDWFC	ssCurPos+1,F
01337 0516 3204 		bra	DM3_Go
SerialServo.asm                                                       Page: 33
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

01338 0517 	;
01339 0517 	;
01340 0517 	; set current position at destination position
01341 0517 083B 	DM3_NoSpeed	movf	ssMD3_Dest,W
01342 0518 00B9 		movwf	ssCurPos
01343 0519 083C 		movf	ssMD3_Dest+1,W
01344 051A 00BA 		movwf	ssCurPos+1
01345 051B 	;
01346 051B 0839 	DM3_Go	movf	ssCurPos,W
01347 051C 00FC 		movwf	Param7C
01348 051D 083A 		movf	ssCurPos+1,W
01349 051E 00FD 		movwf	Param7D
01350 051F 262D 		call	ClampInt
01351 0520 25F1 		call	Copy7CToSig
01352 0521 2BF4 		goto	ModeReturn
01353 0522 	;
01354 0522 	;=========================================================================================
01355 0522 	;Idle routine for Gripper Serial Servo mode
01356 0522 	; Servo is set to idle only is no command or over current.
01357 0522 	;
01358 0522 0020 	DoMode4	movlb	0
01359 0523 1BB8 		btfsc	ssCmdPos+1,7	;Any command issued?
01360 0524 3245 		bra	DoMode4_1	; No, Idle the servo
01361 0525 	;
01362 0525 	;Check for over current, kill position command if over current is detected.
01363 0525 242B 		call	CheckCurrent
01364 0526 243D 		call	CheckGripCurrent
01365 0527 1DBD 		btfss	OverCurrentFlag
01366 0528 3206 		bra	DM4_NotOverCurrent
01367 0529 01B7 		clrf	ssCmdPos	;kill the command
01368 052A 01B8 		clrf	ssCmdPos+1
01369 052B 17B8 		bsf	ssCmdPos+1,7
01370 052C 153E 		bsf	ssio_OverCurSD
01371 052D 11BD 		bcf	OverCurrentFlag
01372 052E 323B 		bra	DoMode4_1	;Idle the servo
01373 052F 	;
01374 052F 	DM4_NotOverCurrent:
01375 052F 	; Speed cannot be 0, if 0 set to 1 (slow)
01376 052F 113E 		bcf	ssio_OverCurSD
01377 0530 08D6 		movf	ServoSpeed,F
01378 0531 		SKPNZ		;Speed = 0?
01378 0531 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01379 0532 0AD6 		incf	ServoSpeed,F	; yes, make it 1
01380 0533 1C3D 		btfss	PulseSent	;Time to update?
01381 0534 2BF4 		goto	ModeReturn	; No
01382 0535 103D 		bcf	PulseSent
01383 0536 	;Param7D:Param7C = Cmd-Cur
01384 0536 0839 		movf	ssCurPos,W
01385 0537 0237 		subwf	ssCmdPos,W
01386 0538 00FC 		movwf	Param7C
01387 0539 083A 		movf	ssCurPos+1,W
01388 053A 3B38 		subwfb	ssCmdPos+1,W
01389 053B 00FD 		movwf	Param7D
01390 053C 	; if Param7D:Param7C = 0 then we are In Position
01391 053C 047C 		iorwf	Param7C,W
01392 053D 		SKPNZ
01392 053D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01393 053E 320F 		bra	DoMode4_Hold	; if Cmd = Cur Go
01394 053F 	;
01395 053F 	;Sign bit set if Cur>Cmd
01396 053F 1FFD 		BTFSS	Param7D,7	;Cmd>Cur?
01397 0540 3211 		bra	DoMode4_MovPlus	; Yes
01398 0541 	;Move minus
01399 0541 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01400 0542 2D49 		GOTO	DoMode4_Minus	; No
01401 0543 0856 		MOVF	ServoSpeed,W
01402 0544 077C 		ADDWF	Param7C,W
01403 0545 1C03 		BTFSS	_C	;Dist<Speed?
01404 0546 3202 		bra	DoMode4_Minus	; Yes
01405 0547 3001 		movlw	0x01	; No, use 1 as speed
01406 0548 3201 		bra	DoMode4_Minus_1
01407 0549 	;
01408 0549 	; Subtract speed from current position
01409 0549 0856 	DoMode4_Minus	MOVF	ServoSpeed,W
01410 054A 02B9 	DoMode4_Minus_1	SUBWF	ssCurPos,F	;SigOutTime
01411 054B 3000 		MOVLW	0x00
01412 054C 3BBA 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01413 054D 3213 		bra	DoMode4_Go
01414 054E 	;
01415 054E 	;=============================
01416 054E 	; if Cur_AN0>(ssGripI+0x10)*4 then move minus 1
01417 054E 1EBD 	DoMode4_Hold	btfss	GripIOver	;Gripping too hard?
01418 054F 2D61 		goto	DoMode4_Go	; No
01419 0550 3001 		movlw	0x01	; No, use 2 as speed
01420 0551 33F8 		bra	DoMode4_Minus_1
01421 0552 	;
01422 0552 	;=============================
01423 0552 	; 7D:7C = distance to go
01424 0552 	;
01425 0552 1A3D 	DoMode4_MovPlus	btfsc	GripIMet	;Servo Current > ssGripI?
01426 0553 33FA 		bra	DoMode4_Hold	; Yes, don't move more closed.
01427 0554 	;
01428 0554 08FD 		MOVF	Param7D,F
01429 0555 		SKPZ		;Dist>255 to go?
01429 0555 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01430 0556 3206 		bra	DoMode4_Plus	; Yes
01431 0557 0856 		MOVF	ServoSpeed,W
01432 0558 027C 		SUBWF	Param7C,W	;Dist-Speed
01433 0559 		SKPB		;Speed>Dist?
SerialServo.asm                                                       Page: 34
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

01433 0559 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01434 055A 3202 		bra	DoMode4_Plus	; No
01435 055B 3001 		movlw	0x01	;Use 1 as speed
01436 055C 3201 		bra	DoMode4_Plus_1
01437 055D 	;
01438 055D 0856 	DoMode4_Plus	MOVF	ServoSpeed,W	;CurPos += Speed
01439 055E 07B9 	DoMode4_Plus_1	ADDWF	ssCurPos,F
01440 055F 0103 		CLRW
01441 0560 3DBA 		ADDWFC	ssCurPos+1,F
01442 0561 	;
01443 0561 	; make it so
01444 0561 0839 	DoMode4_Go	movf	ssCurPos,W	;7D:7C = CurPos
01445 0562 00FC 		movwf	Param7C
01446 0563 083A 		movf	ssCurPos+1,W
01447 0564 00FD 		movwf	Param7D
01448 0565 262D 		call	ClampInt
01449 0566 25F1 		call	Copy7CToSig
01450 0567 123D 		bcf	GripIMet
01451 0568 12BD 		bcf	GripIOver
01452 0569 2BF4 		goto	ModeReturn
01453 056A 	;
01454 056A 	DoMode4_1:
01455 056A 153D 		bsf	ServoIdle	;power down servo
01456 056B 123D 		bcf	GripIMet
01457 056C 12BD 		bcf	GripIOver
01458 056D 2BF4 		goto	ModeReturn
01459 056E 	;
01460 056E 	;=========================================================================================
01461 056E 	;=========================================================================================
01462 056E 	;DebounceTime,kMaxMode
01463 056E 	;Timer4Lo,SysMode
01464 056E 0020 	HandleButtons	movlb	0x00	;bank 0
01465 056F 08B2 		movf	Timer4Lo,F
01466 0570 		SKPNZ		;Debounced?
01466 0570 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01467 0571 320B 		bra	HdlBtn_1	; Yes
01468 0572 	;
01469 0572 1861 		btfsc	SW1_Flag
01470 0573 3206 		bra	HdlBtn_DB
01471 0574 18E1 		btfsc	SW2_Flag
01472 0575 3204 		bra	HdlBtn_DB
01473 0576 1961 		btfsc	SW3_Flag
01474 0577 3202 		bra	HdlBtn_DB
01475 0578 1DE1 		btfss	SW4_Flag
01476 0579 0008 		return
01477 057A 	;
01478 057A 300A 	HdlBtn_DB	movlw	DebounceTime
01479 057B 00B2 		movwf	Timer4Lo
01480 057C 0008 		return
01481 057D 	; we are de-bounced
01482 057D 1861 	HdlBtn_1	btfsc	SW1_Flag
01483 057E 3207 		bra	HdlBtn_Btn1
01484 057F 18E1 		btfsc	SW2_Flag
01485 0580 3206 		bra	HdlBtn_Btn2
01486 0581 1961 		btfsc	SW3_Flag
01487 0582 3205 		bra	HdlBtn_Btn3
01488 0583 19E1 		btfsc	SW4_Flag
01489 0584 3204 		bra	HdlBtn_Btn4
01490 0585 0008 		return
01491 0586 	;
01492 0586 	; Mode
01493 0586 	HdlBtn_Btn1:
01494 0586 2D7A 		goto	HdlBtn_DB
01495 0587 	;
01496 0587 	HdlBtn_Btn2:
01497 0587 2D7A 		goto	HdlBtn_DB
01498 0588 	;
01499 0588 	HdlBtn_Btn3:
01500 0588 2D7A 		goto	HdlBtn_DB
01501 0589 	; not used
01502 0589 	HdlBtn_Btn4:
01503 0589 2D7A 		goto	HdlBtn_DB
01504 058A 	;
01505 058A 	;=========================================================================================
01506 058A 	; Setup or Read AN0 or Read AN4
01507 058A 007C 	ANNumMask	EQU	0x7C
01508 058A 0000 	AN0_Val	EQU	0x00
01509 058A 0004 	AN1_Val	EQU	0x04
01510 058A 0008 	AN2_Val	EQU	0x08
01511 058A 000C 	AN3_Val	EQU	0x0C
01512 058A 	;AN4_Val	EQU	0x10
01513 058A 	;AN7_Val	EQU	0x1C
01514 058A 	;
01515 058A 0021 	ReadAN	MOVLB	1	;bank 1
01516 058B 1C1D 		BTFSS	ADCON0,ADON	;Is the Analog input ON?
01517 058C 3259 		BRA	ReadAN0_ColdStart	; No, go start it
01518 058D 	;
01519 058D 189D 		BTFSC	ADCON0,GO_NOT_DONE	;Conversion done?
01520 058E 3260 		BRA	ReadAN_Rtn	; No
01521 058F 	;
01522 058F 3000 		movlw	HIGH Cur_AN0
01523 0590 0085 		movwf	FSR0H
01524 0591 081D 		movf	ADCON0,W
01525 0592 0020 		movlb	0x00	;bank 0
01526 0593 397C 		andlw	ANNumMask
01527 0594 		SKPNZ
01527 0594 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01528 0595 321E 		bra	ReadAN_AN0
01529 0596 	;
SerialServo.asm                                                       Page: 35
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

01530 0596 00F8 		movwf	Param78	;AN select bits
01531 0597 	;Aux0 SW1_LED1
01532 0597 085E 		movf	ssAux0Config,W
01533 0598 390F 		andlw	0x0F
01534 0599 3C04 		sublw	kAuxIOAnalogIn
01535 059A 		SKPZ
01535 059A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01536 059B 3204 		bra	ReadAN_TryAN2
01537 059C 3008 		movlw	AN2_Val
01538 059D 0278 		subwf	Param78,W	;AN select bits
01539 059E 		SKPNZ
01539 059E 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01540 059F 3233 		bra	ReadAN_AN2
01541 05A0 	;Aux1 SW2_LED2
01542 05A0 085F 	ReadAN_TryAN2	movf	ssAux1Config,W
01543 05A1 390F 		andlw	0x0F
01544 05A2 3C04 		sublw	kAuxIOAnalogIn
01545 05A3 		SKPZ
01545 05A3 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01546 05A4 3204 		bra	ReadAN_TryAN0
01547 05A5 3008 		movlw	AN2_Val
01548 05A6 0278 		subwf	Param78,W	;AN select bits
01549 05A7 		SKPNZ
01549 05A7 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01550 05A8 322A 		bra	ReadAN_AN2
01551 05A9 	;IServo
01552 05A9 3000 	ReadAN_TryAN0	movlw	AN0_Val
01553 05AA 0278 		subwf	Param78,W
01554 05AB 		SKPNZ
01554 05AB 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01555 05AC 3207 		bra	ReadAN_AN0
01556 05AD 	;
01557 05AD 3000 		movlw	AN0_Val	;next to read
01558 05AE 00F8 		movwf	Param78
01559 05AF 30B3 		movlw	LOW Cur_AN0
01560 05B0 0084 		movwf	FSR0L
01561 05B1 0021  a		MOVLB	Cur_AN0	;banksel
01560 05B2 		BankSel	Cur_AN0	;where the analog stuff is
01562 05B2 1432 		bsf	NewDataAN0
01563 05B3 3225 		bra	ReadAN_1
01564 05B4 	;
01565 05B4 30B3 	ReadAN_AN0	movlw	low Cur_AN0
01566 05B5 0084 		movwf	FSR0L
01567 05B6 0021  a		MOVLB	Cur_AN0	;banksel
01566 05B7 		BankSel	Cur_AN0	;where the analog stuff is
01568 05B7 1432 		bsf	NewDataAN0
01569 05B8 3004 		movlw	AN1_Val	;next to read
01570 05B9 00F8 		movwf	Param78
01571 05BA 085E 		movf	ssAux0Config,W
01572 05BB 390F 		andlw	0x0F
01573 05BC 3C04 		sublw	kAuxIOAnalogIn
01574 05BD 		SKPNZ
01574 05BD 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01575 05BE 321A 		bra	ReadAN_1
01576 05BF 	;
01577 05BF 3008 	ReadAN_AN0_1	movlw	AN2_Val	;next to read
01578 05C0 00F8 		movwf	Param78
01579 05C1 085F 		movf	ssAux1Config,W
01580 05C2 390F 		andlw	0x0F
01581 05C3 3C04 		sublw	kAuxIOAnalogIn
01582 05C4 		SKPNZ
01582 05C4 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01583 05C5 3213 		bra	ReadAN_1
01584 05C6 	;
01585 05C6 300C 	ReadAN_AN0_2	movlw	AN3_Val	;next to read
01586 05C7 00F8 		movwf	Param78
01587 05C8 0860 		movf	ssAux2Config,W
01588 05C9 390F 		andlw	0x0F
01589 05CA 3C04 		sublw	kAuxIOAnalogIn
01590 05CB 		SKPNZ
01590 05CB 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01591 05CC 320C 		bra	ReadAN_1
01592 05CD 	;
01593 05CD 3000 	ReadAN_AN0_3	movlw	AN0_Val	;next to read
01594 05CE 00F8 		movwf	Param78
01595 05CF 3209 		bra	ReadAN_1
01596 05D0 	;
01597 05D0 30B5 	ReadAN_AN1	movlw	low Cur_AN1
01598 05D1 0084 		movwf	FSR0L
01599 05D2 33EC 		bra	ReadAN_AN0_1
01600 05D3 	;
01601 05D3 30B7 	ReadAN_AN2	movlw	low Cur_AN2
01602 05D4 0084 		movwf	FSR0L
01603 05D5 33F0 		bra	ReadAN_AN0_2
01604 05D6 	;
01605 05D6 30B9 	ReadAN_AN3	movlw	low Cur_AN3
01606 05D7 0084 		movwf	FSR0L
01607 05D8 33F4 		bra	ReadAN_AN0_3
01608 05D9 	;
01609 05D9 0021 	ReadAN_1	movlb	0x01	;bank 1
01610 05DA 081B 		MOVF	ADRESL,W
01611 05DB 001A 		MOVWI	FSR0++
01612 05DC 081C 		MOVF	ADRESH,W
01613 05DD 001A 		MOVWI	FSR0++
01614 05DE 	;
01615 05DE 0878 		movf	Param78,W
01616 05DF 1409 		BSF	WREG,0	;ADC ON
01617 05E0 009D 		MOVWF	ADCON0
01618 05E1 3004 		movlw	0x04	;Acquisition time 5uS
SerialServo.asm                                                       Page: 36
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

01619 05E2 212D 		call	DelayWuS
01620 05E3 149D 		BSF	ADCON0,ADGO	;Start next conversion.
01621 05E4 0020 		movlb	0x00	; bank 0
01622 05E5 0008 		return
01623 05E6 	;
01624 05E6 0021 	ReadAN0_ColdStart	MOVLB	1
01625 05E7 30E0 		MOVLW	b'11100000'	;Right Just, fosc/64
01626 05E8 	;	MOVLW	b'11110000'	;Right Just, Frc
01627 05E8 009E 		MOVWF	ADCON1
01628 05E9 3000 		MOVLW	AN0_Val	;Select AN0
01629 05EA 1409 		BSF	WREG,0	;ADC ON
01630 05EB 009D 		MOVWF	ADCON0
01631 05EC 3004 		movlw	0x04	;Acquisition time 5uS
01632 05ED 212D 		call	DelayWuS
01633 05EE 149D 	ReadAN_3	BSF	ADCON0,GO
01634 05EF 	ReadAN_Rtn:
01635 05EF 0020 	Bank0_Rtn	MOVLB	0
01636 05F0 0008 		Return
01637 05F1 	;
01638 05F1 	;=========================================================================================
01639 05F1 	;
01640 05F1 	; Don't disable interrupts if you don't need to...
01641 05F1 0025 	Copy7CToSig	MOVLB	0x05	;bank 5
01642 05F2 087C 		MOVF	Param7C,W
01643 05F3 0220 		SUBWF	SigOutTime,W
01644 05F4 		SKPZ
01644 05F4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01645 05F5 3204 		bra	Copy7CToSig_1
01646 05F6 087D 		MOVF	Param7D,W
01647 05F7 0221 		SUBWF	SigOutTimeH,W
01648 05F8 		SKPNZ
01648 05F8 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01649 05F9 3208 		bra	Copy7CToSig_Done
01650 05FA 	;
01651 05FA 138B 	Copy7CToSig_1	bcf	INTCON,GIE
01652 05FB 1B8B 		btfsc	INTCON,GIE
01653 05FC 33FD 		bra	Copy7CToSig_1
01654 05FD 087C 		MOVF	Param7C,W
01655 05FE 00A0 		MOVWF	SigOutTime
01656 05FF 087D 		MOVF	Param7D,W
01657 0600 00A1 		MOVWF	SigOutTimeH
01658 0601 178B 		bsf	INTCON,GIE
01659 0602 0020 	Copy7CToSig_Done	movlb	0	;bank 0
01660 0603 113D 		BCF	ServoIdle
01661 0604 0008 		return
01662 0605 	;
01663 0605 	;=========================================================================================
01664 0605 	;=========================================================================================
01665 0605 	; Set CCP1 to go high is 0x100 clocks
01666 0605 	;
01667 0605 0020 	StartServo	MOVLB	0	;bank 0
01668 0606 1CBD 		BTFSS	ServoOff
01669 0607 0008 		RETURN
01670 0608 10BD 		BCF	ServoOff
01671 0609 	;
01672 0609 261C 		CALL	SetMiddlePosition
01673 060A 25F1 		CALL	Copy7CToSig
01674 060B 	;
01675 060B 0025 		movlb	0x05	;bank 5
01676 060C 3040 		MOVLW	LOW kServoDwellTime
01677 060D 00A2 		MOVWF	CalcdDwell
01678 060E 309C 		MOVLW	HIGH kServoDwellTime
01679 060F 00A3 		MOVWF	CalcdDwellH
01680 0610 0020 		movlb	0	;bank 0
01681 0611 	;
01682 0611 3000 		MOVLW	0x00	;start in 0x100 clocks
01683 0612 0096 		MOVWF	TMR1L
01684 0613 30FF 		MOVLW	0xFF
01685 0614 0097 		MOVWF	TMR1H
01686 0615 	;
01687 0615 0025 		MOVLB	0x05
01688 0616 0192 		CLRF	CCPR1H
01689 0617 0191 		CLRF	CCPR1L
01690 0618 3008 		MOVLW	CCP1CON_Set
01691 0619 0093 		MOVWF	CCP1CON	;go high on match
01692 061A 0020 		MOVLB	0x00	;Bank 0
01693 061B 0008 		RETURN
01694 061C 	;
01695 061C 	;=========
01696 061C 	;
01697 061C 30B8 	SetMiddlePosition	MOVLW	LOW kMidPulseWidth
01698 061D 00FC 		MOVWF	Param7C
01699 061E 300B 		MOVLW	HIGH kMidPulseWidth
01700 061F 00FD 		MOVWF	Param7D
01701 0620 0008 		Return
01702 0621 	;
01703 0621 	;=========================================================================================
01704 0621 0020 	StopServo	movlb	0	;bank 0
01705 0622 18BD 		BTFSC	ServoOff
01706 0623 0008 		RETURN
01707 0624 	;
01708 0624 0025 		movlb	0x05	;bank 5
01709 0625 3040 		MOVLW	LOW kServoDwellTime
01710 0626 00A2 		MOVWF	CalcdDwell
01711 0627 309C 		MOVLW	HIGH kServoDwellTime
01712 0628 00A3 		MOVWF	CalcdDwellH
01713 0629 0020 		movlb	0	;bank 0
01714 062A 153D 		BSF	ServoIdle
01715 062B 14BD 		BSF	ServoOff
SerialServo.asm                                                       Page: 37
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

01716 062C 0008 		return
01717 062D 	;
01718 062D 	;=========================================================================================
01719 062D 	; ClampInt(Param7D:Param7C,ServoMin_uS,ServoMax_uS)
01720 062D 	;
01721 062D 	; Entry: Param7D:Param7C
01722 062D 	; Exit: Param7D:Param7C=ClampInt(Param7D:Param7C,ServoMin_uS,ServoMax_uS)
01723 062D 	;
01724 062D 0020 	ClampInt	movlb	0
01725 062E 0855 		MOVF	ServoMax_uS+1,W
01726 062F 027D 		SUBWF	Param7D,W	;7D-ServoMax_uS
01727 0630 		SKPNB		;7D<Max?
01727 0630 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01728 0631 2E3B 		GOTO	ClampInt_1	; Yes
01729 0632 		SKPZ		;7D=Max?
01729 0632 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01730 0633 2E4A 		GOTO	ClampInt_tooHigh	; No, its greater.
01731 0634 0854 		MOVF	ServoMax_uS,W	; Yes, MSB was equal check LSB
01732 0635 027C 		SUBWF	Param7C,W	;7C-ServoMax_uS
01733 0636 		SKPNZ		;=ServoMax_uS
01733 0636 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01734 0637 0008 		RETURN		;Yes
01735 0638 		SKPB		;7C<Max?
01735 0638 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01736 0639 2E4A 		GOTO	ClampInt_tooHigh	; No
01737 063A 0008 		RETURN		; Yes
01738 063B 	;
01739 063B 0853 	ClampInt_1	MOVF	ServoMin_uS+1,W
01740 063C 027D 		SUBWF	Param7D,W	;7D-ServoMin_uS
01741 063D 		SKPNB		;7D<Min?
01741 063D 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01742 063E 2E45 		GOTO	ClampInt_tooLow	; Yes
01743 063F 		SKPZ		;=Min?
01743 063F 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01744 0640 0008 		RETURN		; No, 7D>ServoMin_uS
01745 0641 08D2 		MOVF	ServoMin_uS,F	; Yes, MSB is a match
01746 0642 027C 		SUBWF	Param7C,W	;7C-ServoMin_uS
01747 0643 		SKPB		;7C>=Min?
01747 0643 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01748 0644 0008 		RETURN		; Yes
01749 0645 	;
01750 0645 0852 	ClampInt_tooLow	MOVF	ServoMin_uS,W
01751 0646 00FC 		MOVWF	Param7C
01752 0647 0853 		MOVF	ServoMin_uS+1,W
01753 0648 00FD 		MOVWF	Param7D
01754 0649 0008 		RETURN
01755 064A 	;
01756 064A 0854 	ClampInt_tooHigh	MOVF	ServoMax_uS,W
01757 064B 00FC 		MOVWF	Param7C
01758 064C 0855 		MOVF	ServoMax_uS+1,W
01759 064D 00FD 		MOVWF	Param7D
01760 064E 0008 		RETURN
01761 064F 	;
01762 064F 	;=========================================================================================
01763 064F 	; call once
01764 064F 	;=========================================================================================
01765 064F 	;
01766 064F 0021 	InitializeIO	MOVLB	0x01	; select bank 1
01767 0650 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
01768 0651 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
01769 0652 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
01770 0653 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
01771 0654 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
01772 0655 1515 		bsf	OPTION_REG,PS2
01773 0656 	;
01774 0656 30F0 		MOVLW	OSCCON_Value
01775 0657 0099 		MOVWF	OSCCON
01776 0658 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
01777 0659 0097 		movwf	WDTCON
01778 065A 	;
01779 065A 0024 		movlb	4	; bank 4
01780 065B 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
01781 065C 	;
01782 065C 0023 		MOVLB	0x03	; bank 3
01783 065D 3003 		movlw	ANSELA_Val
01784 065E 008C 		movwf	ANSELA
01785 065F 3000 		movlw	ANSELB_Val
01786 0660 008D 		movwf	ANSELB
01787 0661 	;
01788 0661 	;Setup T2 for 100/s
01789 0661 0020 		movlb	0	; bank 0
01790 0662 304F 		MOVLW	T2CON_Value
01791 0663 009C 		MOVWF	T2CON
01792 0664 307D 		MOVLW	PR2_Value
01793 0665 009B 		MOVWF	PR2
01794 0666 0021 		movlb	1	; bank 1
01795 0667 1491 		bsf	PIE1,TMR2IE	; enable Timer 2 interupt
01796 0668 	;
01797 0668 	; setup timer 1 for 0.5uS/count
01798 0668 	;
01799 0668 0020 		MOVLB	0x00	; bank 0
01800 0669 3021 		MOVLW	T1CON_Val
01801 066A 0098 		MOVWF	T1CON
01802 066B 1399 		bcf	T1GCON,TMR1GE	;always count
01803 066C 	;
01804 066C 	;SPI MISO >> SDI1 RB1, default
01805 066C 	;SPI CLK >> RB4, default
01806 066C 0022 		movlb	2	;bank 2
01807 066D 179D 		bsf	APFCON0,RXDTSEL	;RX >> RB2
SerialServo.asm                                                       Page: 38
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

01808 066E 141E 		bsf	APFCON1,TXCKSEL	;TX >> RB5
01809 066F 171D 		bsf	APFCON0,SDO1SEL	;SPI MOSI >> SDO1 RA6
01810 0670 	;	
01811 0670 	; clear memory to zero
01812 0670 20CA 		CALL	ClearRam
01813 0671 0064 		CLRWDT
01814 0672 20E9 		CALL	CopyToRam
01815 0673 	;
01816 0673 	; setup ccp1
01817 0673 	;
01818 0673 14BD 		BSF	ServoOff
01819 0674 	;	BANKSEL	APFCON
01820 0674 	;	BSF	APFCON,CCP1SEL	;CCP1 on RA5
01821 0674 0025  a		MOVLB	CCP1CON	;banksel
01820 0675 		BANKSEL	CCP1CON
01822 0675 0193 		CLRF	CCP1CON
01823 0676 	;
01824 0676 0021 		MOVLB	0x01	;Bank 1
01825 0677 1511 		bsf	PIE1,CCP1IE
01826 0678 	;
01827 0678 	;
01828 0678 0020 		MOVLB	0x00	;Bank 0
01829 0679 	; setup data ports
01830 0679 3011 		movlw	PortBValue
01831 067A 008D 		movwf	PORTB	;init port B
01832 067B 3000 		movlw	PortAValue
01833 067C 008C 		movwf	PORTA
01834 067D 0021 		MOVLB	0x01	; bank 1
01835 067E 30BF 		movlw	PortADDRBits
01836 067F 008C 		movwf	TRISA
01837 0680 30C6 		movlw	PortBDDRBits	;setup for programer
01838 0681 008D 		movwf	TRISB
01839 0682 	;
01840 0682 		if useRS232
01841 0682 	; setup serial I/O
01842 0682 0023  a		MOVLB	BAUDCON	;banksel
01841 0683 		BANKSEL	BAUDCON	; bank 3
01843 0683 3008 		movlw	BAUDCON_Value
01844 0684 009F 		movwf	BAUDCON
01845 0685 30CF 		MOVLW	low BaudRate
01846 0686 009B 		MOVWF	SPBRGL
01847 0687 3000 		MOVLW	high BaudRate
01848 0688 009C 		MOVWF	SPBRGH
01849 0689 3024 		MOVLW	TXSTA_Value
01850 068A 009E 		MOVWF	TXSTA
01851 068B 3090 		MOVLW	RCSTA_Value
01852 068C 009D 		MOVWF	RCSTA
01853 068D 0021 		movlb	0x01	; bank 1
01854 068E 1691 		BSF	PIE1,RCIE	; Serial Receive interupt
01855 068F 0020 		movlb	0x00	; bank 0
01856 0690 	;
01857 0690 		endif
01858 0690 	;
01859 0690 0064 		CLRWDT
01860 0691 	;-----------------------
01861 0691 	;
01862 0691 0020 		MOVLB	0x00
01863 0692 3064 		MOVLW	LEDTIME
01864 0693 00A0 		MOVWF	SysLED_Time
01865 0694 3001 		movlw	0x01
01866 0695 00A3 		movwf	SysLEDCount	;start blinking right away
01867 0696 3064 		movlw	.100
01868 0697 00B2 		movwf	Timer4Lo	;ignor buttons for 1st second
01869 0698 	;
01870 0698 0857 		movf	SysMode,W
01871 0699 00A4 		movwf	LED1_Blinks
01872 069A 	;
01873 069A 	;if mode 3 don't move
01874 069A 17B8 		bsf	ssCmdPos+1,7
01875 069B 	;
01876 069B 0064 		CLRWDT
01877 069C 	;
01878 069C 220B 		call	Init_AS5047D	;initialize the SPI encoder I/O
01879 069D 	;
01880 069D 	;
01881 069D 170B 		bsf	INTCON,PEIE	; enable periferal interupts
01882 069E 178B 		bsf	INTCON,GIE	; enable interupts
01883 069F 	;
01884 069F 0008 		return
01885 06A0 	;
01886 06A0 	;=========================================================================================
01887 06A0 	;=========================================================================================
01888 06A0 	;
01889 06A0 	;
01890 06A0 		org 0x800
01891 0800 		include <SerialServoCmds.inc>
00001 0800 	;=========================================================================================
00002 0800 	;
00003 0800 	;    Filename:      SerialServoCmds.inc
00004 0800 	;    Date:          6/1/2018
00005 0800 	;    File Version:  1.1
00006 0800 	;
00007 0800 	;    Author:        David M. Flynn
00008 0800 	;    Company:       Oxford V.U.E., Inc.
00009 0800 	;    E-Mail:        dflynn@oxfordvue.com
00010 0800 	;    Web Site:      http://www.oxfordvue.com/
00011 0800 	;
00012 0800 	;=========================================================================================
00013 0800 	; Notes:
SerialServo.asm                                                       Page: 39
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00014 0800 	;  Command interpreter for SerialServo
00015 0800 	;
00016 0800 	; History
00017 0800 	; 1.1    6/1/2018	All commands are here now.
00018 0800 	; 1.0    5/25/2018	Moved out of SerialServo.asm
00019 0800 	;=========================================================================================
00020 0800 	;
00021 0800 0081 	kCmd_SetMode	EQU	0x81	;+1 data (SysMode), return ACK
00022 0800 0001 	kCmd_GetMode	EQU	0x01
00023 0800 0082 	kCmd_SetCmdPos	EQU	0x82	;+2 data (ssCmdPos), return ACK
00024 0800 0002 	kCmd_GetCmdPos	EQU	0x02
00025 0800 0083 	kCmd_SetMaxI	EQU	0x83	;+1 data (ssMaxI), return ACK
00026 0800 0003 	kCmd_GetMaxI	EQU	0x03
00027 0800 0084 	kCmd_SetFFwd	EQU	0x84	;+2 data (ServoFastForward), return ACK
00028 0800 0004 	kCmd_GetFFwd	EQU	0x04
00029 0800 0085 	kCmd_SetFRev	EQU	0x85	;+2 data (ServoFastReverse), return ACK
00030 0800 0005 	kCmd_GetFRev	EQU	0x05
00031 0800 0086 	kCmd_SetMin_uS	EQU	0x86	;+2 data (ServoMin_uS), return ACK
00032 0800 0006 	kCmd_GetMin_uS	EQU	0x06
00033 0800 0087 	kCmd_SetMax_uS	EQU	0x87	;+2 data (ServoMax_uS), return ACK
00034 0800 0007 	kCmd_GetMax_uS	EQU	0x07
00035 0800 0088 	kCmd_SetRevDir	EQU	0x88	;+1 data (ssReverseDir), return ACK
00036 0800 0008 	kCmd_GetRevDir	EQU	0x08
00037 0800 0089 	kCmd_SetEnaOvrCur	EQU	0x89	;+1 data (ssEnableOverCur), return ACK
00038 0800 0009 	kCmd_GetEnaOvrCur	EQU	0x09
00039 0800 	;
00040 0800 008B 	kCmd_SetStopCenter	EQU	0x8B	;+2 data (ServoStopCenter), return ACK
00041 0800 000B 	kCmd_GetStopCenter	EQU	0x0B
00042 0800 008C 	kCmd_SetSpeed	EQU	0x8C	;+1 data (ServoSpeed), return ACK
00043 0800 000C 	kCmd_GetSpeed	EQU	0x0C
00044 0800 008D 	kCmd_SetUseIdleCenter	EQU	0x8D	;+1 data (ssMode3IdleCenter), return ACK
00045 0800 000D 	kCmd_GetUseIdleCenter	EQU	0x0D
00046 0800 008E 	kCmd_SetDeadBand	EQU	0x8E	;+1 data (DeadBand), return ACK
00047 0800 000E 	kCmd_GetDeadBand	EQU	0x0E
00048 0800 008F 	kCmd_SetUseFastPWM	EQU	0x8F	;+1 data (ssEnableFastPWM), return ACK
00049 0800 000F 	kCmd_GetUseFastPWM	EQU	0x0F
00050 0800 00B1 	kCmd_SetGripI	EQU	0xB1	;+1 data (ssGripI), return ACK
00051 0800 0021 	kCmd_GetGripI	EQU	0x21
00052 0800 00B2 	kCmd_SetAuxConfig	EQU	0xB2	;+2 data (AuxNum,Value), return ACK
00053 0800 0022 	kCmd_GetAuxConfig	EQU	0x22	;+1 data (AuxNum)
00054 0800 00B3 	kCmd_SetAuxNValue	EQU	0xB3	;+2 data (AuxNum,Value), return ACK
00055 0800 0023 	kCmd_GetAuxNValue	EQU	0x23	;(AuxN,ValueL,ValueH)
00056 0800 00B4 	kCmd_SetEncoderOffset	EQU	0xB4	;+2 data (EncoderOffset), return ACK
00057 0800 0024 	kCmd_GetEncoderOffset	EQU	0x24
00058 0800 	;
00059 0800 0091 	kCmd_GetI	EQU	0x91	;return Cur_AN0
00060 0800 0092 	kCmd_GetEnc	EQU	0x92	;return EncoderVal
00061 0800 0093 	kCmd_GetEncAbs	EQU	0x93	;return EncoderAccum
00062 0800 0094 	kCmd_SaveParams	EQU	0x94	;Save all eeprom params, return ACK
00063 0800 0095 	kCmd_RestoreParams	EQU	0x95	;Copy to ram, return ACK
00064 0800 0096 	kCmd_GetBattVolts	EQU	0x96	;return Cur_AN7
00065 0800 0097 	kCmd_GetCalPot	EQU	0x97	;return Cur_AN4
00066 0800 0098 	kCmd_GetStatus	EQU	0x98	;return ssStatus
00067 0800 0099 	kCmd_ReBoot	EQU	0x99	;ReBoot the controller
00068 0800 009A 	kCmd_RunBootloader	EQU	0x9A	;Set EEPROM (0xFF) = 0xFF and reboot
00069 0800 	;
00070 0800 	; these commands save params and return a 0,0,0,0 packet with the new address
00071 0800 00A1 	kCmd_SetMasterAddr	EQU	0xA1	;+1 data, return a zero packet
00072 0800 00A2 	kCmd_SetSlaveAddr	EQU	0xA2	;+1 data, return a zero packet
00073 0800 	;
00074 0800 	;Special packet (0xDD, 0xDD, 0x01, 0x02, 0xAA, 0x00, 0x00, 0x00, checksum)
00075 0800 00AA 	kCmd_SendIDString	EQU	0xAA	; returns "DMFE Serial Servo\n"
00076 0800 	;
00077 0800 	;=========================================================================================
00078 0800 	;
00079 0800 	RS232_Send_S0	mCall1To0	RS232_Send
00079 0800 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00079 0801 23A4      M		CALL	RS232_Send		CALL	Destination
00079 0802 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00079 0803 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00080 0804 0008 		return
00081 0805 	;
00082 0805 	;=========================================================================================
00083 0805 	; Entry: RXDataIsNew=1, data in RX_Data
00084 0805 	;
00085 0805 0021 	HandleRXData	movlb	1	;bank 1
00086 0806 10A1 		bcf	RXDataIsNew
00087 0807 1821 		btfsc	RXDataValidFlag	;from master to me?
00088 0808 3202 		bra	HandleRXData_1
00089 0809 0020 	HandleRXData_Rtn	movlb	0	;bank 0
00090 080A 0008 		return		; no, ignore this packet
00091 080B 	;---kCmd_SetMode-------------------
00092 080B 0020 	HandleRXData_1	movlb	0	;bank 0
00093 080C 30AA 		movlw	low RX_Data
00094 080D 0086 		movwf	FSR1L
00095 080E 3000 		movlw	high RX_Data
00096 080F 0087 		movwf	FSR1H
00097 0810 	;
00098 0810 30AE 		movlw	low TX_Data
00099 0811 0084 		movwf	FSR0L
00100 0812 3000 		movlw	high TX_Data
00101 0813 0085 		movwf	FSR0H
00102 0814 	;
00103 0814 0016 		moviw	FSR1++
00104 0815 00F8 		movwf	Param78	;aka RX_Data
00105 0816 3081 		movlw	kCmd_SetMode
00106 0817 0278 		subwf	Param78,W	;aka RX_Data
00107 0818 		SKPZ
00107 0818 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
SerialServo.asm                                                       Page: 40
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00108 0819 3208 		bra	Cmd_SetMode_end
00109 081A 	; Set Mode
00110 081A 3005 		movlw	kMaxMode+1
00111 081B 0201 		subwf	INDF1,W
00112 081C 		SKPB		;kMaxMode+1>Data
00112 081C 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00113 081D 33EB 		bra	HandleRXData_Rtn
00114 081E 	;
00115 081E 0016 		moviw	FSR1++
00116 081F 00D7 		movwf	SysMode
00117 0820 00A4 		movwf	LED1_Blinks
00118 0821 2A3B 		goto	TX_ACK
00119 0822 	;
00120 0822 	Cmd_SetMode_end:
00121 0822 	;---kCmd_GetMode------------------
00122 0822 3001 		movlw	kCmd_GetMode
00123 0823 0278 		subwf	Param78,W	;aka RX_Data
00124 0824 		SKPZ
00124 0824 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00125 0825 3203 		bra	Cmd_GetMode_end
00126 0826 	; Get Mode
00127 0826 0857 		movf	SysMode,W
00128 0827 001A 		movwi	FSR0++
00129 0828 2800 		goto	RS232_Send_S0
00130 0829 	;
00131 0829 	Cmd_GetMode_end:
00132 0829 	;---kCmd_SetCmdPos-------------------
00133 0829 3082 		movlw	kCmd_SetCmdPos
00134 082A 0278 		subwf	Param78,W	;aka RX_Data
00135 082B 		SKPZ
00135 082B 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00136 082C 3205 		bra	Cmd_SetCmdPos_end
00137 082D 	; Set Command Position
00138 082D 0016 		moviw	FSR1++
00139 082E 00B7 		movwf	ssCmdPos
00140 082F 0016 		moviw	FSR1++
00141 0830 00B8 		movwf	ssCmdPos+1
00142 0831 2A3B 		goto	TX_ACK
00143 0832 	;
00144 0832 	Cmd_SetCmdPos_end:
00145 0832 	;---kCmd_GetCmdPos------------------
00146 0832 3002 		movlw	kCmd_GetCmdPos
00147 0833 0278 		subwf	Param78,W	;aka RX_Data
00148 0834 		SKPZ
00148 0834 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00149 0835 3205 		bra	Cmd_GetCmdPos_end
00150 0836 	; Get Command Position
00151 0836 0837 		movf	ssCmdPos,W
00152 0837 001A 		movwi	FSR0++
00153 0838 0838 		movf	ssCmdPos+1,W
00154 0839 001A 		movwi	FSR0++
00155 083A 2800 		goto	RS232_Send_S0
00156 083B 	;
00157 083B 	Cmd_GetCmdPos_end:
00158 083B 	;---kCmd_SetMaxI-------------------
00159 083B 3083 		movlw	kCmd_SetMaxI
00160 083C 0278 		subwf	Param78,W	;aka RX_Data
00161 083D 		SKPZ
00161 083D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00162 083E 3203 		bra	Cmd_SetMaxI_end
00163 083F 	; Set Max Current
00164 083F 0016 		moviw	FSR1++
00165 0840 00DB 		movwf	ssMaxI
00166 0841 2A3B 		goto	TX_ACK
00167 0842 	;
00168 0842 	Cmd_SetMaxI_end:
00169 0842 	;---kCmd_GetMaxI-------------------
00170 0842 3003 		movlw	kCmd_GetMaxI
00171 0843 0278 		subwf	Param78,W	;aka RX_Data
00172 0844 		SKPZ
00172 0844 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00173 0845 3203 		bra	Cmd_GetMaxI_end
00174 0846 	; Get Max Current
00175 0846 085B 		movf	ssMaxI,W
00176 0847 001A 		movwi	FSR0++
00177 0848 2800 		goto	RS232_Send_S0
00178 0849 	;
00179 0849 	Cmd_GetMaxI_end:
00180 0849 	;---kCmd_SetFFwd-------------------
00181 0849 3084 		movlw	kCmd_SetFFwd
00182 084A 0278 		subwf	Param78,W	;aka RX_Data
00183 084B 		SKPZ
00183 084B 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00184 084C 3205 		bra	Cmd_SetFFwd_end
00185 084D 	; Set ServoFastForward
00186 084D 0016 		moviw	FSR1++
00187 084E 00CC 		movwf	ServoFastForward
00188 084F 0016 		moviw	FSR1++
00189 0850 00CD 		movwf	ServoFastForward+1
00190 0851 2A3B 		goto	TX_ACK
00191 0852 	;
00192 0852 	Cmd_SetFFwd_end:
00193 0852 	;---kCmd_GetFFwd-------------------
00194 0852 3004 		movlw	kCmd_GetFFwd
00195 0853 0278 		subwf	Param78,W	;aka RX_Data
00196 0854 		SKPZ
00196 0854 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00197 0855 3205 		bra	Cmd_GetFFwd_end
00198 0856 	; Get ServoFastForward
SerialServo.asm                                                       Page: 41
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00199 0856 084C 		movf	ServoFastForward,W
00200 0857 001A 		movwi	FSR0++
00201 0858 084D 		movf	ServoFastForward+1,W
00202 0859 001A 		movwi	FSR0++
00203 085A 2800 		goto	RS232_Send_S0
00204 085B 	;
00205 085B 	Cmd_GetFFwd_end:
00206 085B 	;---kCmd_SetFRev-------------------
00207 085B 3085 		movlw	kCmd_SetFRev
00208 085C 0278 		subwf	Param78,W	;aka RX_Data
00209 085D 		SKPZ
00209 085D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00210 085E 3205 		bra	Cmd_SetFRev_end
00211 085F 	; Set ServoFastReverse
00212 085F 0016 		moviw	FSR1++
00213 0860 00CE 		movwf	ServoFastReverse
00214 0861 0016 		moviw	FSR1++
00215 0862 00CF 		movwf	ServoFastReverse+1
00216 0863 2A3B 		goto	TX_ACK
00217 0864 	;
00218 0864 	Cmd_SetFRev_end:
00219 0864 	;---kCmd_GetFRev------------------
00220 0864 3005 		movlw	kCmd_GetFRev
00221 0865 0278 		subwf	Param78,W	;aka RX_Data
00222 0866 		SKPZ
00222 0866 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00223 0867 3205 		bra	Cmd_GetFRev_end
00224 0868 	; Get ServoFastReverse
00225 0868 084E 		movf	ServoFastReverse,W
00226 0869 001A 		movwi	FSR0++
00227 086A 084F 		movf	ServoFastReverse+1,W
00228 086B 001A 		movwi	FSR0++
00229 086C 2800 		goto	RS232_Send_S0
00230 086D 	;
00231 086D 	Cmd_GetFRev_end:
00232 086D 	;---kCmd_SetMin_uS-------------------
00233 086D 3086 		movlw	kCmd_SetMin_uS
00234 086E 0278 		subwf	Param78,W	;aka RX_Data
00235 086F 		SKPZ
00235 086F 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00236 0870 3205 		bra	Cmd_SetMin_uS_end
00237 0871 	; Set ServoMin_uS
00238 0871 0016 		moviw	FSR1++
00239 0872 00D2 		movwf	ServoMin_uS
00240 0873 0016 		moviw	FSR1++
00241 0874 00D3 		movwf	ServoMin_uS+1
00242 0875 2A3B 		goto	TX_ACK
00243 0876 	;
00244 0876 	Cmd_SetMin_uS_end:
00245 0876 	;---kCmd_GetMin_uS----------------
00246 0876 3006 		movlw	kCmd_GetMin_uS
00247 0877 0278 		subwf	Param78,W	;aka RX_Data
00248 0878 		SKPZ
00248 0878 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00249 0879 3205 		bra	Cmd_GetMin_uS_end
00250 087A 	; Get ServoMin_uS
00251 087A 0852 		movf	ServoMin_uS,W
00252 087B 001A 		movwi	FSR0++
00253 087C 0853 		movf	ServoMin_uS+1,W
00254 087D 001A 		movwi	FSR0++
00255 087E 2800 		goto	RS232_Send_S0
00256 087F 	;
00257 087F 	Cmd_GetMin_uS_end:
00258 087F 	;---kCmd_SetMax_uS-------------------
00259 087F 3087 		movlw	kCmd_SetMax_uS
00260 0880 0278 		subwf	Param78,W	;aka RX_Data
00261 0881 		SKPZ
00261 0881 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00262 0882 3205 		bra	Cmd_SetMax_uS_end
00263 0883 	; Set ServoMax_uS
00264 0883 0016 		moviw	FSR1++
00265 0884 00D4 		movwf	ServoMax_uS
00266 0885 0016 		moviw	FSR1++
00267 0886 00D5 		movwf	ServoMax_uS+1
00268 0887 2A3B 		goto	TX_ACK
00269 0888 	;
00270 0888 	Cmd_SetMax_uS_end:
00271 0888 	;---kCmd_GetMax_uS-----------------
00272 0888 3007 		movlw	kCmd_GetMax_uS
00273 0889 0278 		subwf	Param78,W	;aka RX_Data
00274 088A 		SKPZ
00274 088A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00275 088B 3205 		bra	Cmd_GetMax_uS_end
00276 088C 	; Get ServoMax_uS
00277 088C 0854 		movf	ServoMax_uS,W
00278 088D 001A 		movwi	FSR0++
00279 088E 0855 		movf	ServoMax_uS+1,W
00280 088F 001A 		movwi	FSR0++
00281 0890 2800 		goto	RS232_Send_S0
00282 0891 	;
00283 0891 	Cmd_GetMax_uS_end:
00284 0891 	;---kCmd_SetRevDir---------------
00285 0891 3088 		movlw	kCmd_SetRevDir
00286 0892 0278 		subwf	Param78,W	;aka RX_Data
00287 0893 		SKPZ
00287 0893 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00288 0894 3206 		bra	Cmd_SetRevDir_End
00289 0895 10DA 		bcf	ssReverseDir
00290 0896 3001 		movlw	0x01
SerialServo.asm                                                       Page: 42
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00291 0897 0601 		xorwf	INDF1,W
00292 0898 		SKPNZ		;01h?
00292 0898 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00293 0899 14DA 		bsf	ssReverseDir	; Yes
00294 089A 2A3B 		goto	TX_ACK
00295 089B 	Cmd_SetRevDir_End:
00296 089B 	;---kCmd_GetRevDir---------------
00297 089B 3008 		movlw	kCmd_GetRevDir
00298 089C 0278 		subwf	Param78,W	;aka RX_Data
00299 089D 		SKPZ
00299 089D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00300 089E 3203 		bra	Cmd_GetRevDir_End
00301 089F 18DA 		btfsc	ssReverseDir
00302 08A0 1400 		bsf	INDF0,0
00303 08A1 2800 		goto	RS232_Send_S0
00304 08A2 	Cmd_GetRevDir_End:
00305 08A2 	;---kCmd_SetEnaOvrCur------------
00306 08A2 3089 		movlw	kCmd_SetEnaOvrCur
00307 08A3 0278 		subwf	Param78,W	;aka RX_Data
00308 08A4 		SKPZ
00308 08A4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00309 08A5 3206 		bra	Cmd_SetEnaOvrCur_End
00310 08A6 105A 		bcf	ssEnableOverCur
00311 08A7 3001 		movlw	0x01
00312 08A8 0601 		xorwf	INDF1,W
00313 08A9 		SKPNZ
00313 08A9 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00314 08AA 145A 		bsf	ssEnableOverCur
00315 08AB 2A3B 		goto	TX_ACK
00316 08AC 	Cmd_SetEnaOvrCur_End:
00317 08AC 	;---kCmd_GetEnaOvrCur------------
00318 08AC 3009 		movlw	kCmd_GetEnaOvrCur
00319 08AD 0278 		subwf	Param78,W	;aka RX_Data
00320 08AE 		SKPZ
00320 08AE 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00321 08AF 3203 		bra	Cmd_GetEnaOvrCur_End
00322 08B0 185A 		btfsc	ssEnableOverCur
00323 08B1 1400 		bsf	INDF0,0
00324 08B2 2800 		goto	RS232_Send_S0
00325 08B3 	Cmd_GetEnaOvrCur_End:
00326 08B3 	;
00327 08B3 	;---kCmd_SetStopCenter---------
00328 08B3 308B 		movlw	kCmd_SetStopCenter
00329 08B4 0278 		subwf	Param78,W	;aka RX_Data
00330 08B5 		SKPZ
00330 08B5 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00331 08B6 3205 		bra	Cmd_SetStopCenter_End
00332 08B7 0016 		moviw	FSR1++
00333 08B8 00D0 		movwf	ServoStopCenter
00334 08B9 0016 		moviw	FSR1++
00335 08BA 00D1 		movwf	ServoStopCenter+1
00336 08BB 2A3B 		goto	TX_ACK
00337 08BC 	Cmd_SetStopCenter_End:
00338 08BC 	;---kCmd_GetStopCenter---------
00339 08BC 300B 		movlw	kCmd_GetStopCenter
00340 08BD 0278 		subwf	Param78,W	;aka RX_Data
00341 08BE 		SKPZ
00341 08BE 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00342 08BF 3205 		bra	Cmd_GetStopCenter_End
00343 08C0 0850 		movf	ServoStopCenter,W
00344 08C1 001A 		movwi	FSR0++
00345 08C2 0851 		movf	ServoStopCenter+1,W
00346 08C3 001A 		movwi	FSR0++
00347 08C4 2800 		goto	RS232_Send_S0
00348 08C5 	Cmd_GetStopCenter_End:
00349 08C5 	;---kCmd_SetSpeed--------------
00350 08C5 308C 		movlw	kCmd_SetSpeed
00351 08C6 0278 		subwf	Param78,W	;aka RX_Data
00352 08C7 		SKPZ
00352 08C7 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00353 08C8 3204 		bra	Cmd_SetSpeed_End
00354 08C9 0016 		moviw	FSR1++
00355 08CA 393F 		andlw	0x3F	;0..63
00356 08CB 00D6 		movwf	ServoSpeed
00357 08CC 2A3B 		goto	TX_ACK
00358 08CD 	Cmd_SetSpeed_End:
00359 08CD 	;---kCmd_GetSpeed--------------
00360 08CD 300C 		movlw	kCmd_GetSpeed
00361 08CE 0278 		subwf	Param78,W	;aka RX_Data
00362 08CF 		SKPZ
00362 08CF 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00363 08D0 3203 		bra	Cmd_GetSpeed_End
00364 08D1 0856 		movf	ServoSpeed,W
00365 08D2 001A 		movwi	FSR0++
00366 08D3 2800 		goto	RS232_Send_S0
00367 08D4 	Cmd_GetSpeed_End:
00368 08D4 	;---kCmd_SetUseIdleCenter------
00369 08D4 308D 		movlw	kCmd_SetUseIdleCenter
00370 08D5 0278 		subwf	Param78,W	;aka RX_Data
00371 08D6 		SKPZ
00371 08D6 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00372 08D7 3206 		bra	Cmd_SetUseIdleCenter_End
00373 08D8 11DA 		bcf	ssMode3IdleCenter
00374 08D9 3001 		movlw	0x01
00375 08DA 0601 		xorwf	INDF1,W
00376 08DB 		SKPNZ
00376 08DB 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00377 08DC 15DA 		bsf	ssMode3IdleCenter
00378 08DD 2A3B 		goto	TX_ACK
SerialServo.asm                                                       Page: 43
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00379 08DE 	Cmd_SetUseIdleCenter_End:
00380 08DE 	;---kCmd_GetUseIdleCenter------
00381 08DE 300D 		movlw	kCmd_GetUseIdleCenter
00382 08DF 0278 		subwf	Param78,W	;aka RX_Data
00383 08E0 		SKPZ
00383 08E0 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00384 08E1 3203 		bra	Cmd_GetUseIdleCenter_End
00385 08E2 19DA 		btfsc	ssMode3IdleCenter
00386 08E3 1400 		bsf	INDF0,0
00387 08E4 2800 		goto	RS232_Send_S0
00388 08E5 	Cmd_GetUseIdleCenter_End:
00389 08E5 	;---kCmd_SetDeadBand------------
00390 08E5 308E 		movlw	kCmd_SetDeadBand
00391 08E6 0278 		subwf	Param78,W	;aka RX_Data
00392 08E7 		SKPZ
00392 08E7 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00393 08E8 3203 		bra	Cmd_SetDeadBand_End
00394 08E9 0016 		moviw	FSR1++
00395 08EA 00DC 		movwf	DeadBand
00396 08EB 2A3B 		goto	TX_ACK	
00397 08EC 	Cmd_SetDeadBand_End:
00398 08EC 	;---kCmd_GetDeadBand------------
00399 08EC 300E 		movlw	kCmd_GetDeadBand
00400 08ED 0278 		subwf	Param78,W	;aka RX_Data
00401 08EE 		SKPZ
00401 08EE 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00402 08EF 3203 		bra	Cmd_GetDeadBand_End
00403 08F0 085C 		movf	DeadBand,W
00404 08F1 001A 		movwi	FSR0++
00405 08F2 2800 		goto	RS232_Send_S0
00406 08F3 	Cmd_GetDeadBand_End:
00407 08F3 	;---kCmd_SetUseFastPWM----------	;+1 data (ssEnableFastPWM), return ACK
00408 08F3 308F 		movlw	kCmd_SetUseFastPWM
00409 08F4 0278 		subwf	Param78,W	;aka RX_Data
00410 08F5 		SKPZ
00410 08F5 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00411 08F6 3206 		bra	Cmd_SetUseFastPWM_End
00412 08F7 125A 		bcf	ssEnableFastPWM
00413 08F8 3001 		movlw	0x01
00414 08F9 0601 		xorwf	INDF1,W
00415 08FA 		SKPNZ
00415 08FA 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00416 08FB 165A 		bsf	ssEnableFastPWM
00417 08FC 2A3B 		goto	TX_ACK
00418 08FD 	Cmd_SetUseFastPWM_End:
00419 08FD 	;---kCmd_GetUseFastPWM----------
00420 08FD 300F 		movlw	kCmd_GetUseFastPWM
00421 08FE 0278 		subwf	Param78,W	;aka RX_Data
00422 08FF 		SKPZ
00422 08FF 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00423 0900 3203 		bra	Cmd_GetUseFastPWM_End
00424 0901 1A5A 		btfsc	ssEnableFastPWM
00425 0902 1400 		bsf	INDF0,0
00426 0903 2800 		goto	RS232_Send_S0
00427 0904 	Cmd_GetUseFastPWM_End:
00428 0904 	;---kCmd_SetGripI-------------------
00429 0904 30B1 		movlw	kCmd_SetGripI
00430 0905 0278 		subwf	Param78,W	;aka RX_Data
00431 0906 		SKPZ
00431 0906 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00432 0907 3203 		bra	Cmd_SetGripI_end
00433 0908 	; Set Grip Current
00434 0908 0016 		moviw	FSR1++
00435 0909 00DD 		movwf	ssGripI
00436 090A 2A3B 		goto	TX_ACK
00437 090B 	;
00438 090B 	Cmd_SetGripI_end:
00439 090B 	;---kCmd_GetGripI-------------------
00440 090B 3021 		movlw	kCmd_GetGripI
00441 090C 0278 		subwf	Param78,W	;aka RX_Data
00442 090D 		SKPZ
00442 090D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00443 090E 3203 		bra	Cmd_GetGripI_end
00444 090F 	; Get Grip Current
00445 090F 085D 		movf	ssGripI,W
00446 0910 001A 		movwi	FSR0++
00447 0911 2800 		goto	RS232_Send_S0
00448 0912 	;
00449 0912 	Cmd_GetGripI_end:
00450 0912 	;---kCmd_SetAuxConfig-----------	;+3 data (Aux0Config,Aux1Config,Aux2Config), return ACK
00451 0912 30B2 		movlw	kCmd_SetAuxConfig
00452 0913 0278 		subwf	Param78,W	;aka RX_Data
00453 0914 		SKPZ
00453 0914 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00454 0915 320C 		bra	Cmd_SetAuxConfig_end
00455 0916 	; Set Aux N Config
00456 0916 0801 		movf	INDF1,W
00457 0917 3C02 		sublw	0x02	;2-AuxNum
00458 0918 		SKPNB		;<=2?
00458 0918 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00459 0919 2809 		goto	HandleRXData_Rtn	; no
00460 091A 	;
00461 091A 0016 		moviw	FSR1++
00462 091B 3E5E 		addlw	low ssAux0Config
00463 091C 0084 		movwf	FSR0L
00464 091D 3000 		movlw	high ssAux0Config
00465 091E 0085 		movwf	FSR0H
00466 091F 0016 		moviw	FSR1++	;New Config Value
00467 0920 001A 		movwi	FSR0++
SerialServo.asm                                                       Page: 44
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00468 0921 2A3B 		goto	TX_ACK
00469 0922 	;
00470 0922 	Cmd_SetAuxConfig_end:
00471 0922 	;---kCmd_GetAuxConfig-----------
00472 0922 3022 		movlw	kCmd_GetAuxConfig
00473 0923 0278 		subwf	Param78,W	;aka RX_Data
00474 0924 		SKPZ
00474 0924 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00475 0925 320C 		bra	Cmd_GetAuxConfig_end
00476 0926 	; Get Aux N Config
00477 0926 0801 		movf	INDF1,W
00478 0927 3C02 		sublw	0x02	;2-AuxNum
00479 0928 		SKPNB		;<=2?
00479 0928 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00480 0929 2809 		goto	HandleRXData_Rtn	; no
00481 092A 	;
00482 092A 0801 		movf	INDF1,W
00483 092B 3E5E 		addlw	low ssAux0Config
00484 092C 0086 		movwf	FSR1L
00485 092D 3000 		movlw	high ssAux0Config
00486 092E 0087 		movwf	FSR1H
00487 092F 	;
00488 092F 0801 		movf	INDF1,W
00489 0930 001A 		movwi	FSR0++
00490 0931 2800 		goto	RS232_Send_S0
00491 0932 	;
00492 0932 	Cmd_GetAuxConfig_end:	
00493 0932 	;---kCmd_SetAuxNValue-----------	;+2 data (AuxNum,Value), return ACK
00494 0932 30B3 		movlw	kCmd_SetAuxNValue
00495 0933 0278 		subwf	Param78,W	;aka RX_Data
00496 0934 		SKPZ
00496 0934 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00497 0935 321D 		bra	Cmd_SetAuxNValue_end
00498 0936 	; Set Aux N Value
00499 0936 0016 		moviw	FSR1++
00500 0937 00F8 		movwf	Param78	;AuxNum
00501 0938 3C02 		sublw	0x02	;2-AuxNum
00502 0939 		SKPNB		;<=2?
00502 0939 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00503 093A 2809 		goto	HandleRXData_Rtn	; no
00504 093B 	;
00505 093B 0878 		movf	Param78,W	;AuxNum
00506 093C 3E5E 		addlw	low ssAux0Config
00507 093D 0084 		movwf	FSR0L
00508 093E 3000 		movlw	high ssAux0Config
00509 093F 0085 		movwf	FSR0H
00510 0940 	;
00511 0940 0800 		movf	INDF0,W	;ssAuxXConfig
00512 0941 3907 		andlw	0x07
00513 0942 000B 		brw
00514 0943 2A3B 		goto	TX_ACK	;kAuxIOnone
00515 0944 3206 		bra	Cmd_SetAuxNLED	;kAuxIOLEDBtn
00516 0945 2A3B 		goto	TX_ACK	;kAuxIODigitalIn
00517 0946 3204 		bra	Cmd_SetAuxNDigOut	;kAuxIODigitalOut
00518 0947 2A3B 		goto	TX_ACK	;kAuxIOAnalogIn
00519 0948 2A3B 		goto	TX_ACK	;kAuxIOHomeSw
00520 0949 2A3B 		goto	TX_ACK	;kAuxIOFwdLimit
00521 094A 2A3B 		goto	TX_ACK	;kAuxIORevLimit
00522 094B 	;
00523 094B 	Cmd_SetAuxNDigOut:
00524 094B 0878 	Cmd_SetAuxNLED	movf	Param78,W	;AuxNum
00525 094C 3E24 		addlw	low LED1_Blinks
00526 094D 0084 		movwf	FSR0L
00527 094E 3000 		movlw	high LED1_Blinks
00528 094F 0085 		movwf	FSR0H
00529 0950 0016 		moviw	FSR1++	;AuxVal
00530 0951 001A 		movwi	FSR0++
00531 0952 2A3B 		goto	TX_ACK
00532 0953 	;
00533 0953 	Cmd_SetAuxNValue_end:
00534 0953 	;---kCmd_GetAuxNValue-----------	;(AuxN,ValueL,ValueH)
00535 0953 3023 		movlw	kCmd_GetAuxNValue
00536 0954 0278 		subwf	Param78,W	;aka RX_Data
00537 0955 		SKPZ
00537 0955 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00538 0956 323B 		bra	Cmd_GetAuxNValue_end
00539 0957 	; Get Aux N Value
00540 0957 0801 		movf	INDF1,W
00541 0958 00F8 		movwf	Param78	;AuxNum
00542 0959 3C02 		sublw	0x02	;2-AuxNum
00543 095A 		SKPNB		;<=2?
00543 095A 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00544 095B 2809 		goto	HandleRXData_Rtn	; no
00545 095C 	;
00546 095C 0878 		movf	Param78,W	;AuxNum
00547 095D 3E5E 		addlw	low ssAux0Config
00548 095E 0086 		movwf	FSR1L
00549 095F 3000 		movlw	high ssAux0Config
00550 0960 0087 		movwf	FSR1H
00551 0961 	;
00552 0961 0801 		movf	INDF1,W	;ssAuxXConfig
00553 0962 3907 		andlw	0x07
00554 0963 000B 		brw
00555 0964 2809 		goto	HandleRXData_Rtn	;kAuxIOnone, not valid
00556 0965 321C 		bra	Cmd_GetAuxNValue_Btn	;kAuxIOLEDBtn
00557 0966 320F 		bra	Cmd_GetAuxNValue_Dig	;kAuxIODigitalIn
00558 0967 320E 		bra	Cmd_GetAuxNValue_Dig	;kAuxIODigitalOut
00559 0968 3203 		bra	Cmd_GetAuxNValue_Ana	;kAuxIOAnalogIn
00560 0969 320C 		bra	Cmd_GetAuxNValue_Dig	;kAuxIOHomeSw
SerialServo.asm                                                       Page: 45
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00561 096A 320B 		bra	Cmd_GetAuxNValue_Dig	;kAuxIOFwdLimit
00562 096B 320A 		bra	Cmd_GetAuxNValue_Dig	;kAuxIORevLimit
00563 096C 	;
00564 096C 3578 	Cmd_GetAuxNValue_Ana	lslf	Param78,W	;AuxNum X2
00565 096D 3EB5 		addlw	low Cur_AN1
00566 096E 0086 		movwf	FSR1L
00567 096F 3000 		movlw	high Cur_AN1
00568 0970 0087 		movwf	FSR1H
00569 0971 0016 		moviw	FSR1++
00570 0972 001A 		movwi	FSR0++
00571 0973 0016 		moviw	FSR1++
00572 0974 001A 		movwi	FSR0++
00573 0975 2800 		goto	RS232_Send_S0
00574 0976 	;
00575 0976 	; Send the value of the port bit 0x00 or 0x01
00576 0976 0878 	Cmd_GetAuxNValue_Dig	movf	Param78,W	;AuxNum
00577 0977 		SKPZ
00577 0977 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00578 0978 3204 		bra	Cmd_GetAuxNValue_Dig1
00579 0979 190C 		btfsc	SW1_In
00580 097A 3001 		movlw	0x01
00581 097B 001A 		movwi	FSR0++
00582 097C 2800 		goto	RS232_Send_S0
00583 097D 	;
00584 097D 0103 	Cmd_GetAuxNValue_Dig1	clrw
00585 097E 198C 		btfsc	SW2_In
00586 097F 3001 		movlw	0x01
00587 0980 001A 		movwi	FSR0++
00588 0981 2800 		goto	RS232_Send_S0
00589 0982 	;
00590 0982 	; Send the Button value
00591 0982 0878 	Cmd_GetAuxNValue_Btn	movf	Param78,W	;AuxNum
00592 0983 		SKPZ
00592 0983 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00593 0984 3204 		bra	Cmd_GetAuxNValue_Btn1
00594 0985 1861 		btfsc	SW1_Flag
00595 0986 3001 		movlw	0x01
00596 0987 001A 		movwi	FSR0++
00597 0988 2800 		goto	RS232_Send_S0
00598 0989 	;
00599 0989 3C01 	Cmd_GetAuxNValue_Btn1	sublw	0x01
00600 098A 		SKPZ
00600 098A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00601 098B 3204 		bra	Cmd_GetAuxNValue_Btn2
00602 098C 18E1 		btfsc	SW2_Flag
00603 098D 3001 		movlw	0x01
00604 098E 001A 		movwi	FSR0++
00605 098F 2800 		goto	RS232_Send_S0
00606 0990 	;
00607 0990 0103 	Cmd_GetAuxNValue_Btn2	clrw
00608 0991 	;	btfsc	SW3_Flag
00609 0991 	;	movlw	0x01
00610 0991 	;	movwi	FSR0++
00611 0991 2800 		goto	RS232_Send_S0
00612 0992 	;
00613 0992 	;
00614 0992 	Cmd_GetAuxNValue_end:
00615 0992 	;---kCmd_SetEncoderOffset-------  +2 data (EncoderOffset), return ACK
00616 0992 30B4 		movlw	kCmd_SetEncoderOffset
00617 0993 0278 		subwf	Param78,W	;aka RX_Data
00618 0994 		SKPZ
00618 0994 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00619 0995 3205 		bra	Cmd_SetEncoderOffset_End
00620 0996 	;
00621 0996 0016 		moviw	FSR1++
00622 0997 00CA 		movwf	EncoderOffset
00623 0998 0016 		moviw	FSR1++
00624 0999 00CB 		movwf	EncoderOffset+1
00625 099A 2A3B 		goto	TX_ACK
00626 099B 	Cmd_SetEncoderOffset_End:
00627 099B 	;---kCmd_GetEncoderOffset-------
00628 099B 3024 		movlw	kCmd_GetEncoderOffset
00629 099C 0278 		subwf	Param78,W	;aka RX_Data
00630 099D 		SKPZ
00630 099D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00631 099E 3205 		bra	Cmd_GetEncoderOffset_End
00632 099F 	;
00633 099F 084A 		movf	EncoderOffset,W
00634 09A0 001A 		movwi	FSR0++
00635 09A1 084B 		movf	EncoderOffset+1,W
00636 09A2 001A 		movwi	FSR0++
00637 09A3 2800 		goto	RS232_Send_S0
00638 09A4 	Cmd_GetEncoderOffset_End:
00639 09A4 	;---kCmd_GetI-------------------
00640 09A4 3091 		movlw	kCmd_GetI
00641 09A5 0278 		subwf	Param78,W	;aka RX_Data
00642 09A6 		SKPZ
00642 09A6 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00643 09A7 3206 		bra	Cmd_GetI_end
00644 09A8 	; Get servo current
00645 09A8 0021  a		MOVLB	Cur_AN0	;banksel
00644 09A9 		BankSel	Cur_AN0
00646 09A9 0833 		movf	Cur_AN0,W
00647 09AA 001A 		movwi	FSR0++
00648 09AB 0834 		movf	Cur_AN0+1,W
00649 09AC 001A 		movwi	FSR0++
00650 09AD 2800 		goto	RS232_Send_S0
00651 09AE 	;
00652 09AE 	Cmd_GetI_end:
SerialServo.asm                                                       Page: 46
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00653 09AE 	;---kCmd_GetEnc-------------------
00654 09AE 3092 		movlw	kCmd_GetEnc
00655 09AF 0278 		subwf	Param78,W	;aka RX_Data
00656 09B0 		SKPZ
00656 09B0 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00657 09B1 3205 		bra	Cmd_GetEnc_end
00658 09B2 	; Get Encoder Raw Position
00659 09B2 0845 		movf	EncoderVal,W
00660 09B3 001A 		movwi	FSR0++
00661 09B4 0846 		movf	EncoderVal+1,W
00662 09B5 001A 		movwi	FSR0++
00663 09B6 2800 		goto	RS232_Send_S0
00664 09B7 	;
00665 09B7 	Cmd_GetEnc_end:
00666 09B7 	;---kCmd_GetEncAbs-------------------
00667 09B7 3093 		movlw	kCmd_GetEncAbs
00668 09B8 0278 		subwf	Param78,W	;aka RX_Data
00669 09B9 		SKPZ
00669 09B9 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00670 09BA 320B 		bra	Cmd_GetEncAbs_end
00671 09BB 	; Get Encoder Accumulated Position
00672 09BB 0842 		movf	EncoderAccum,W
00673 09BC 001A 		movwi	FSR0++
00674 09BD 0843 		movf	EncoderAccum+1,W
00675 09BE 001A 		movwi	FSR0++
00676 09BF 0844 		movf	EncoderAccum+2,W
00677 09C0 001A 		movwi	FSR0++
00678 09C1 3000 		movlw	0x00
00679 09C2 1BC4 		btfsc	EncoderAccum+2,7
00680 09C3 30FF 		movlw	0xFF
00681 09C4 001A 		movwi	FSR0++	;sign extrnded Int24
00682 09C5 2800 		goto	RS232_Send_S0
00683 09C6 	;
00684 09C6 	Cmd_GetEncAbs_end:
00685 09C6 	;---kCmd_SaveParams-----------------
00686 09C6 3094 		movlw	kCmd_SaveParams
00687 09C7 0278 		subwf	Param78,W	;aka RX_Data
00688 09C8 		SKPZ
00688 09C8 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00689 09C9 3205 		bra	Cmd_SaveParams_end
00690 09CA 		mCall1To0	SaveParams
00690 09CA 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00690 09CB 20F6      M		CALL	SaveParams		CALL	Destination
00690 09CC 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00690 09CD 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00691 09CE 2A3B 		goto	TX_ACK
00692 09CF 	Cmd_SaveParams_end:
00693 09CF 	;---kCmd_RestoreParams--------------
00694 09CF 3095 		movlw	kCmd_RestoreParams
00695 09D0 0278 		subwf	Param78,W	;aka RX_Data
00696 09D1 		SKPZ
00696 09D1 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00697 09D2 3205 		bra	Cmd_RestoreParams_end
00698 09D3 		mCall1To0	CopyToRam
00698 09D3 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00698 09D4 20E9      M		CALL	CopyToRam		CALL	Destination
00698 09D5 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00698 09D6 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00699 09D7 2A3B 		goto	TX_ACK
00700 09D8 	Cmd_RestoreParams_end:
00701 09D8 	;---kCmd_GetBattVolts---------------
00702 09D8 3096 		movlw	kCmd_GetBattVolts
00703 09D9 0278 		subwf	Param78,W	;aka RX_Data
00704 09DA 		SKPZ
00704 09DA 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00705 09DB 3206 		bra	Cmd_GetBattVolts_end
00706 09DC 	; Get battery volts
00707 09DC 0021  a		MOVLB	BattVolts	;banksel
00706 09DD 		BankSel	BattVolts
00708 09DD 0835 		movf	BattVolts,W
00709 09DE 001A 		movwi	FSR0++
00710 09DF 0836 		movf	BattVolts+1,W
00711 09E0 001A 		movwi	FSR0++
00712 09E1 2800 		goto	RS232_Send_S0
00713 09E2 	Cmd_GetBattVolts_end:
00714 09E2 	;---kCmd_GetCalPot------------------
00715 09E2 	;	movlw	kCmd_GetCalPot
00716 09E2 	;	subwf	Param78,W	;aka RX_Data
00717 09E2 	;	SKPZ
00718 09E2 	;	bra	Cmd_GetCalPot_end
00719 09E2 	; Get calibration pot
00720 09E2 	;	BankSel	Cur_AN4
00721 09E2 	;	movf	Cur_AN4,W
00722 09E2 	;	movwi	FSR0++
00723 09E2 	;	movf	Cur_AN4+1,W
00724 09E2 	;	movwi	FSR0++
00725 09E2 	;	goto	RS232_Send_S0
00726 09E2 	Cmd_GetCalPot_end:
00727 09E2 	;---kCmd_GetStatus----------------
00728 09E2 3098 		movlw	kCmd_GetStatus
00729 09E3 0278 		subwf	Param78,W	;aka RX_Data
00730 09E4 		SKPZ
00730 09E4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00731 09E5 320D 		bra	Cmd_GetStatus_end
00732 09E6 083E 		movf	ssStatus,W
00733 09E7 001A 		movwi	FSR0++
00734 09E8 083F 		movf	ssStatus+1,W
00735 09E9 001A 		movwi	FSR0++
00736 09EA 0840 		movf	ssStatus+2,W
SerialServo.asm                                                       Page: 47
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00737 09EB 001A 		movwi	FSR0++
00738 09EC 0840 		movf	ssStatus+2,W
00739 09ED 001A 		movwi	FSR0++
00740 09EE 	;reset flags
00741 09EE 11BE 		bcf	ssRX_Timeout
00742 09EF 12BE 		bcf	ssGripMCur
00743 09F0 123E 		bcf	ssGripOCur
00744 09F1 	;
00745 09F1 01BF 		clrf	ssStatus+1
00746 09F2 	;	
00747 09F2 2800 		goto	RS232_Send_S0
00748 09F3 	Cmd_GetStatus_end:
00749 09F3 	;---kCmd_ReBoot---------------------
00750 09F3 3099 		movlw	kCmd_ReBoot
00751 09F4 0278 		subwf	Param78,W	;aka RX_Data
00752 09F5 		SKPZ
00752 09F5 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00753 09F6 3201 		bra	Cmd_ReBoot_end
00754 09F7 0001 		reset		;Does not return anything
00755 09F8 	Cmd_ReBoot_end:
00756 09F8 	;---kCmd_RunBootloader--------------
00757 09F8 309A 		movlw	kCmd_RunBootloader
00758 09F9 0278 		subwf	Param78,W
00759 09FA 		SKPZ
00759 09FA 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00760 09FB 3207 		bra	Cmd_RunBootloader_end
00761 09FC 30FF 		movlw	0xFF
00762 09FD 00AB 		movwf	EEDataTemp
00763 09FE 		mCall1To0	EEWriteW	;Write EEPROM address in W
00763 09FE 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00763 09FF 213D      M		CALL	EEWriteW		CALL	Destination
00763 0A00 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00763 0A01 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00764 0A02 0001 		reset
00765 0A03 	Cmd_RunBootloader_end:
00766 0A03 	;---kCmd_SetMasterAddr------------
00767 0A03 30A1 		movlw	kCmd_SetMasterAddr
00768 0A04 0278 		subwf	Param78,W	;aka RX_Data
00769 0A05 		SKPZ
00769 0A05 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00770 0A06 3207 		bra	Cmd_SetMasterAddr_end
00771 0A07 0016 		moviw	FSR1++
00772 0A08 00D8 		movwf	RS232_MasterAddr
00773 0A09 		mCall1To0	SaveParams
00773 0A09 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00773 0A0A 20F6      M		CALL	SaveParams		CALL	Destination
00773 0A0B 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00773 0A0C 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00774 0A0D 2800 		goto	RS232_Send_S0
00775 0A0E 	Cmd_SetMasterAddr_end:
00776 0A0E 	;---kCmd_SetSlaveAddr-------------
00777 0A0E 30A2 		movlw	kCmd_SetSlaveAddr
00778 0A0F 0278 		subwf	Param78,W	;aka RX_Data
00779 0A10 		SKPZ
00779 0A10 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00780 0A11 3207 		bra	Cmd_SetSlaveAddr_end
00781 0A12 0016 		moviw	FSR1++
00782 0A13 00D9 		movwf	RS232_SlaveAddr
00783 0A14 		mCall1To0	SaveParams
00783 0A14 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00783 0A15 20F6      M		CALL	SaveParams		CALL	Destination
00783 0A16 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00783 0A17 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00784 0A18 2800 		goto	RS232_Send_S0
00785 0A19 	Cmd_SetSlaveAddr_end:
00786 0A19 	;---kCmd_SendIDString------------
00787 0A19 30AA 		movlw	kCmd_SendIDString
00788 0A1A 0278 		subwf	Param78,W	;aka RX_Data
00789 0A1B 		SKPZ
00789 0A1B 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00790 0A1C 321D 		bra	Cmd_SendIDString_end
00791 0A1D 01F9 		clrf	Param79
00792 0A1E 0879 	Cmd_SendIDString_L1	movf	Param79,W
00793 0A1F 2226 		call	IDString
00794 0A20 3800 		iorlw	0x00
00795 0A21 		SKPNZ
00795 0A21 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00796 0A22 0008 		return
00797 0A23 223C 		call	StoreSerOut_S0
00798 0A24 0AF9 		incf	Param79,F
00799 0A25 33F8 		bra	Cmd_SendIDString_L1
00800 0A26 	;
00801 0A26 000B 	IDString	brw
00802 0A27 3444 		retlw	'D'
00803 0A28 344D 		retlw	'M'
00804 0A29 3446 		retlw	'F'
00805 0A2A 3445 		retlw	'E'
00806 0A2B 3420 		retlw	' '
00807 0A2C 3453 		retlw	'S'
00808 0A2D 3465 		retlw	'e'
00809 0A2E 3472 		retlw	'r'
00810 0A2F 3469 		retlw	'i'
00811 0A30 3461 		retlw	'a'
00812 0A31 346C 		retlw	'l'
00813 0A32 3420 		retlw	' '
00814 0A33 3453 		retlw	'S'
00815 0A34 3465 		retlw	'e'
00816 0A35 3472 		retlw	'r'
00817 0A36 3476 		retlw	'v'
SerialServo.asm                                                       Page: 48
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00818 0A37 346F 		retlw	'o'
00819 0A38 340A 		retlw	'\n'
00820 0A39 3400 		retlw	0x00
00821 0A3A 	;
00822 0A3A 	Cmd_SendIDString_end:
00823 0A3A 	;--------------------------------
00824 0A3A 0008 		return
00825 0A3B 	;
00826 0A3B 30FF 	TX_ACK	movlw	0xFF
00827 0A3C 	StoreSerOut_S0	mCall1To0	StoreSerOut
00827 0A3C 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00827 0A3D 2300      M		CALL	StoreSerOut		CALL	Destination
00827 0A3E 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00827 0A3F 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00828 0A40 0008 		return
00829 0A41 	;
00830 0A41 	;=========================================================================================
00831 0A41 	;=========================================================================================
01892 0A41 	;
01893 0A41 		org BootLoaderStart
01894 1E00 		include <BootLoader.inc>
00001 1E00 	;************************************************
00002 1E00 	; BootLoader for PIC16F1847
00003 1E00 	; filename: Bootloader1847.inc
00004 1E00 	; Created: 3/21/2019
00005 1E00 	; Revision: 1.0a1 4/7/2019
00006 1E00 	;************************************************
00007 1E00 	; History
00008 1E00 	; 1.0a1 4/7/2019	First working version.
00009 1E00 	; 1.0d1 3/21/2019	first code
00010 1E00 	;************************************************
00011 1E00 	; Notes:
00012 1E00 	;
00013 1E00 	;  Does not program data EEProm, or other than prog mem 0..BootLoaderStart-1
00014 1E00 	;
00015 1E00 	; Must be the last thing in prog mem, will not overwrite itself or anything after it.
00016 1E00 	;
00017 1E00 	;BootLoaderStart	EQU	0x1E00
00018 1E00 	;	org BootLoaderStart
00019 1E00 	;	include <Bootloader1847.inc>
00020 1E00 	;
00021 1E00 	;  Reset vector:
00022 1E00 	;  	movlp	high BootLoaderStart
00023 1E00 	;    	goto	BootLoaderStart
00024 1E00 	;  ProgStartVector	CLRF	PCLATH
00025 1E00 	;	goto	Start
00026 1E00 	;
00027 1E00 	;  DataEEProm (0xFF) = 0xFF = run bootloader
00028 1E00 	;
00029 1E00 	; What happens next:
00030 1E00 	;  If Data EEProm address (0xFF) <> 0xFF then goto ProgStartVector
00031 1E00 	;  Setup  UART for 38.4KBaud
00032 1E00 	;  Parse incoming text as .hex file
00033 1E00 	;   if program memory address > 0 and < BootLoader then
00034 1E00 	;    read block from prog mem
00035 1E00 	;    if compare blocks then
00036 1E00 	;      if prog mem is not blank then erase block
00037 1E00 	;    write block
00038 1E00 	;
00039 1E00 	;  DataEEProm (0xFF) = 0x00
00040 1E00 	;
00041 1E00 	;  reset
00042 1E00 	;************************************************
00043 1E00 	; .hex
00044 1E00 	;:020000040000FA 
00045 1E00 	;       ^^^^^^ Set high word of address to 0x0000
00046 1E00 	;:100010005A23582356235423422021000C16200033
00047 1E00 	;:100020003A100C1E3A14A10B053221000C122000CC
00048 1E00 	;^ Start code                             ^^ Checksum
00049 1E00 	; ^^ Bytes of data (0x10)
00050 1E00 	;   ^^^^ Address low word (0x0020)
00051 1E00 	;       ^^ Record type 0x00 = Data
00052 1E00 	;         ^^^^ LSB MSB of data for Addr / 2
00053 1E00 	;                                         
00054 1E00 	; Checksum is 2's complement of all other bytes added together
00055 1E00 	; Valid address range 0000 0000 .. 0000 3BFE (bootloader is at 0000 3C00 .. 0000 3FFF, 512 words)
00056 1E00 	;************************************************
00057 1E00 	;
00058 1E00 	;
00059 1E00 		cblock 0x20
00060 1E00 0020 		PROG_ADDR_LO
00061 1E00 0021 		PROG_ADDR_HI
00062 1E00 0022 		ProgWordCount
00063 1E00 		
00064 1E00 0023 		IH_Addr_Lo:2		;
00065 1E00 0025 		IH_Addr_Hi:2		;extended linear address, alway 0x0000 for Prog mem
00066 1E00 0027 		IH_Bytes
00067 1E00 0028 		IH_ByteCount
00068 1E00 0029 		IH_Type		;Record Type 0..5
00069 1E00 002A 		IH_State
00070 1E00 002B 		IH_TempVal
00071 1E00 002C 		IH_Flags
00072 1E00 002D 		ChkSum
00073 1E00 		endc
00074 1E00 	;
00075 1E00 002C 	#Define	MSN_Done	IH_Flags,0	;Most Significant Nibble
00076 1E00 002C 	#Define	DataInBuffer	IH_Flags,1
00077 1E00 	;
00078 1E00 	;IH_Type Types
SerialServo.asm                                                       Page: 49
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00079 1E00 0000 	IHT_Data	EQU	0x00
00080 1E00 0001 	IHT_End	EQU	0x01	;ie :00000001FF
00081 1E00 0002 	IHT_XSA	EQU	0x02	;extended segment address, not supported
00082 1E00 0003 	IHT_SSA	EQU	0x03	;start segment address, not supported
00083 1E00 0004 	IHT_HighAddr	EQU	0x04	;extended linear address, :02000004FFFFFC
00084 1E00 0005 	IHT_SLA	EQU	0x05	;start linear address, not supported, :04000005000000CD2A
00085 1E00 	;
00086 1E00 	;IH_State values
00087 1E00 0000 	IHS_WaitForColon	EQU	0x00
00088 1E00 0001 	IHS_Length	EQU	0x01
00089 1E00 0002 	IHS_AddrMSB	EQU	0x02
00090 1E00 0003 	IHS_AddrLSB	EQU	0x03
00091 1E00 0004 	IHS_DataType	EQU	0x04
00092 1E00 0005 	IHS_Data	EQU	0x05
00093 1E00 0006 	IHS_CSum	EQU	0x06	;waiting for check sum
00094 1E00 	;
00095 1E00 002B 	IH_ErrorBadLen	EQU	'+'	;>64 Too big
00096 1E00 002D 	IH_ErrorBadCSum	EQU	'-'	;Checksum didn't match
00097 1E00 002A 	IH_Ack	EQU	'*'	;We got a good Intel Hex line
00098 1E00 	;
00099 1E00 0040 	BlockSize	EQU	0x40
00100 1E00 0020 	BlockWords	EQU	BlockSize/2	;0x20
00101 1E00 00E0 	AddressMask	EQU	0xE0
00102 1E00 	;
00103 1E00 	;Contiguous ram 0x2000..0x23EF
00104 1E00 		cblock 0x2100		;0x0100 after start of ram
00105 1E00 2100 		SourceBuffer:BlockSize
00106 1E00 2140 		DestBuffer:BlockSize
00107 1E00 2180 		SerialBuffer:BlockSize
00108 1E00 		endc
00109 1E00 	;================================================
00110 1E00 	;
00111 1E00 	; Entry: DataEEProm255
00112 1E00 	; Exit: goto ProgStartVector
00113 1E00 	; Calls: none
00114 1E00 	; RAM used: ALL
00115 1E00 	;
00116 1E00 	BootLoader:
00117 1E00 27B6 		call	InitializeBLIO	;returns w/ bank 0 selected
00118 1E01 	;
00119 1E01 271A 		call	ReadEEData	;Get Data from EEPROM (0xFF) 
00120 1E02 3AFF 		xorlw	0xFF
00121 1E03 		SKPZ		;0xFF xor 0xFF = 0
00121 1E03 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00122 1E04 320B 		bra	BootLoader_End
00123 1E05 	;
00124 1E05 	; Bootloader is active send "**"
00125 1E05 302A 		movlw	IH_Ack
00126 1E06 2714 		call	SendChar
00127 1E07 302A 		movlw	IH_Ack
00128 1E08 2714 		call	SendChar
00129 1E09 	;
00130 1E09 	;Initialize
00131 1E09 01A0 		clrf	PROG_ADDR_LO
00132 1E0A 01A1 		clrf	PROG_ADDR_HI
00133 1E0B 01A5 		clrf	IH_Addr_Hi
00134 1E0C 01A6 		clrf	IH_Addr_Hi+1
00135 1E0D 275C 		call	EraseSourceBuffer
00136 1E0E 	;
00137 1E0E 2612 		call	BL_Parse
00138 1E0F 	;	
00139 1E0F 	;if successful then clear EEProm(255)
00140 1E0F 2723 		call	WriteEEData
00141 1E10 	;
00142 1E10 3180 	BootLoader_End	movlp	0x00
00143 1E11 2802 		goto	ProgStartVector
00144 1E12 	;
00145 1E12 	;==============================================
00146 1E12 	; Parse incoming data and do stuff
00147 1E12 	;
00148 1E12 10AC 	BL_Parse	bcf	DataInBuffer
00149 1E13 01AA 	BL_ParseNextLine	clrf	IH_State
00150 1E14 01A8 		clrf	IH_ByteCount
00151 1E15 01AD 		clrf	ChkSum
00152 1E16 3080 		movlw	low SerialBuffer
00153 1E17 0084 		movwf	FSR0L
00154 1E18 3021 		movlw	high SerialBuffer
00155 1E19 0085 		movwf	FSR0H
00156 1E1A 	;
00157 1E1A 102C 	BLP_L1	bcf	MSN_Done
00158 1E1B 	;
00159 1E1B 2703 	BLP_L2	call	GetChar
00160 1E1C 00F8 		movwf	Param78
00161 1E1D 303A 		movlw	':'
00162 1E1E 0278 		subwf	Param78,W
00163 1E1F 		SKPZ		;Char=":"
00163 1E1F 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00164 1E20 3203 		bra	BLP_TestNum	; No
00165 1E21 	; It's a ":" so set state=1, wait for length
00166 1E21 3001 		movlw	IHS_Length
00167 1E22 00AA 		movwf	IH_State
00168 1E23 33F6 		bra	BLP_L1
00169 1E24 	;
00170 1E24 08AA 	BLP_TestNum	movf	IH_State,F
00171 1E25 		SKPNZ		;Are we waiting for a number?
00171 1E25 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00172 1E26 33F4 		bra	BLP_L2	; No
00173 1E27 	;
00174 1E27 3030 		movlw	0x30	;'0'
SerialServo.asm                                                       Page: 50
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00175 1E28 0278 		subwf	Param78,W
00176 1E29 		SKPNB		;Char>="0"?
00176 1E29 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00177 1E2A 33E8 		bra	BL_ParseNextLine	; No start over
00178 1E2B 303A 		movlw	0x3A	;':'
00179 1E2C 0278 		subwf	Param78,W
00180 1E2D 		SKPNB
00180 1E2D 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00181 1E2E 320A 		bra	BLP_TestNum_1
00182 1E2F 3041 		movlw	0x41	;'A'
00183 1E30 0278 		subwf	Param78,W
00184 1E31 		SKPNB		;Char>="A"?
00184 1E31 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00185 1E32 33E0 		bra	BL_ParseNextLine	; No start over
00186 1E33 3047 		movlw	0x47	;'G'
00187 1E34 0278 		subwf	Param78,W
00188 1E35 		SKPB		;Char<"G"
00188 1E35 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00189 1E36 33DC 		bra	BL_ParseNextLine	; No, start over
00190 1E37 3007 		movlw	0x07	; Yes, A..F
00191 1E38 02F8 		subwf	Param78,F
00192 1E39 	;
00193 1E39 3030 	BLP_TestNum_1	movlw	0x30
00194 1E3A 02F8 		subwf	Param78,F	;'0' >> 0x00
00195 1E3B 182C 		btfsc	MSN_Done
00196 1E3C 3204 		bra	BLP_TestNum_2	;do low nibble
00197 1E3D 0E78 		swapf	Param78,W
00198 1E3E 00AB 		movwf	IH_TempVal
00199 1E3F 142C 		bsf	MSN_Done
00200 1E40 33DA 		bra	BLP_L2
00201 1E41 	;
00202 1E41 0878 	BLP_TestNum_2	movf	Param78,W
00203 1E42 07AB 		addwf	IH_TempVal,F
00204 1E43 	;
00205 1E43 	; We have a number in IH_TempVal
00206 1E43 3001 		movlw	IHS_Length
00207 1E44 022A 		subwf	IH_State,W
00208 1E45 		SKPZ		;Waiting for length byte?
00208 1E45 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00209 1E46 320C 		bra	BLP_IHS_AddrMSB	; No
00210 1E47 3041 		movlw	.65	; Yes, is it in range 0..64?
00211 1E48 022B 		subwf	IH_TempVal,W
00212 1E49 		SKPNB		;<=64?
00212 1E49 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00213 1E4A 3203 		bra	BLP_SaveIH_Length
00214 1E4B 	;
00215 1E4B 302B 		movlw	IH_ErrorBadLen
00216 1E4C 2714 		call	SendChar
00217 1E4D 2E13 		goto	BL_ParseNextLine
00218 1E4E 	;
00219 1E4E 082B 	BLP_SaveIH_Length	movf	IH_TempVal,W
00220 1E4F 00A7 		movwf	IH_Bytes
00221 1E50 07AD 		addwf	ChkSum,F
00222 1E51 0AAA 	BLP_NextState	incf	IH_State,F
00223 1E52 2E1A 		goto	BLP_L1
00224 1E53 	;
00225 1E53 3002 	BLP_IHS_AddrMSB	movlw	IHS_AddrMSB
00226 1E54 022A 		subwf	IH_State,W
00227 1E55 		SKPZ		;Waiting for Address MSB?
00227 1E55 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00228 1E56 3204 		bra	BLP_IHS_AddrLSB	; No
00229 1E57 	;
00230 1E57 082B 		movf	IH_TempVal,W
00231 1E58 00A4 		movwf	IH_Addr_Lo+1
00232 1E59 07AD 		addwf	ChkSum,F
00233 1E5A 33F6 		bra	BLP_NextState
00234 1E5B 	;
00235 1E5B 3003 	BLP_IHS_AddrLSB	movlw	IHS_AddrLSB
00236 1E5C 022A 		subwf	IH_State,W
00237 1E5D 		SKPZ		;Waiting for Address LSB?
00237 1E5D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00238 1E5E 3204 		bra	BLP_IHS_DataType	; No
00239 1E5F 	;
00240 1E5F 082B 		movf	IH_TempVal,W
00241 1E60 00A3 		movwf	IH_Addr_Lo
00242 1E61 07AD 		addwf	ChkSum,F
00243 1E62 33EE 		bra	BLP_NextState
00244 1E63 	;
00245 1E63 3004 	BLP_IHS_DataType	movlw	IHS_DataType
00246 1E64 022A 		subwf	IH_State,W
00247 1E65 		SKPZ		;Waiting for Data Type?
00247 1E65 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00248 1E66 3207 		bra	BLP_IHS_Data	; No
00249 1E67 	;
00250 1E67 082B 		movf	IH_TempVal,W
00251 1E68 00A9 		movwf	IH_Type
00252 1E69 07AD 		addwf	ChkSum,F
00253 1E6A 	; Ship IHS_Data if length = 0
00254 1E6A 08A7 		movf	IH_Bytes,F
00255 1E6B 		SKPNZ		;Expecting zero length data?
00255 1E6B 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00256 1E6C 0AAA 		incf	IH_State,F	; Yes
00257 1E6D 33E3 		bra	BLP_NextState
00258 1E6E 	;
00259 1E6E 3005 	BLP_IHS_Data	movlw	IHS_Data
00260 1E6F 022A 		subwf	IH_State,W
00261 1E70 		SKPZ		;Waiting for Data?
00261 1E70 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00262 1E71 3209 		bra	BLP_IHS_CSum	; No
SerialServo.asm                                                       Page: 51
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00263 1E72 	;
00264 1E72 082B 		movf	IH_TempVal,W
00265 1E73 001A 		movwi	FSR0++
00266 1E74 07AD 		addwf	ChkSum,F
00267 1E75 0AA8 		incf	IH_ByteCount,F
00268 1E76 	; if IH_ByteCount=IH_Bytes then next state
00269 1E76 0828 		movf	IH_ByteCount,W
00270 1E77 0227 		subwf	IH_Bytes,W
00271 1E78 		SKPZ		;Done with data?
00271 1E78 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00272 1E79 2E1A 		goto	BLP_L1	; No
00273 1E7A 33D6 		bra	BLP_NextState	; Yes
00274 1E7B 	;
00275 1E7B 3006 	BLP_IHS_CSum	movlw	IHS_CSum
00276 1E7C 022A 		subwf	IH_State,W
00277 1E7D 		SKPZ		;Waiting for Checksum?
00277 1E7D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00278 1E7E 2E13 		goto	BL_ParseNextLine	; No, we should never get here
00279 1E7F 	; get 2's comp
00280 1E7F 01F8 		clrf	Param78
00281 1E80 082D 		movf	ChkSum,W
00282 1E81 0278 		subwf	Param78,W
00283 1E82 022B 		subwf	IH_TempVal,W
00284 1E83 		SKPZ		;Checksum matches?
00284 1E83 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00285 1E84 3201 		bra	BLP_BadCSum
00286 1E85 3203 		bra	BLP_Validate
00287 1E86 	;
00288 1E86 302D 	BLP_BadCSum	movlw	IH_ErrorBadCSum
00289 1E87 2714 		call	SendChar
00290 1E88 2E13 		goto	BL_ParseNextLine
00291 1E89 	;
00292 1E89 	;===================
00293 1E89 	; We have received a complete Intel Hex command
00294 1E89 	BLP_Validate:
00295 1E89 3001 		movlw	IHT_End
00296 1E8A 0229 		subwf	IH_Type,W
00297 1E8B 		SKPZ		;End?
00297 1E8B 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00298 1E8C 3205 		bra	BLPV_Data	; No
00299 1E8D 	; handle end command
00300 1E8D 302A 		movlw	IH_Ack
00301 1E8E 2714 		call	SendChar
00302 1E8F 18AC 		btfsc	DataInBuffer
00303 1E90 26E4 		call	BLP_WriteBuffer
00304 1E91 0008 		return
00305 1E92 	;
00306 1E92 3000 	BLPV_Data	movlw	IHT_Data
00307 1E93 0229 		subwf	IH_Type,W
00308 1E94 		SKPZ		;Data?
00308 1E94 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00309 1E95 3204 		bra	BLPV_Addr	; No
00310 1E96 	; handle data
00311 1E96 26A9 		call	BufferIHData
00312 1E97 	;
00313 1E97 302A 		movlw	IH_Ack
00314 1E98 2714 		call	SendChar
00315 1E99 2E13 		goto	BL_ParseNextLine
00316 1E9A 	;
00317 1E9A 3004 	BLPV_Addr	movlw	IHT_HighAddr
00318 1E9B 0229 		subwf	IH_Type,W
00319 1E9C 		SKPZ		;High Address?
00319 1E9C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00320 1E9D 2E13 		goto	BL_ParseNextLine	; No
00321 1E9E 	; handle high address change
00322 1E9E 3080 		movlw	low SerialBuffer
00323 1E9F 0084 		movwf	FSR0L
00324 1EA0 3021 		movlw	high SerialBuffer
00325 1EA1 0085 		movwf	FSR0H
00326 1EA2 0012 		moviw	FSR0++
00327 1EA3 00A6 		movwf	IH_Addr_Hi+1
00328 1EA4 0012 		moviw	FSR0++
00329 1EA5 00A5 		movwf	IH_Addr_Hi
00330 1EA6 302A 		movlw	IH_Ack
00331 1EA7 2714 		call	SendChar
00332 1EA8 2E13 		goto	BL_ParseNextLine
00333 1EA9 	;
00334 1EA9 	;===========================================
00335 1EA9 	; Validate address is in range and move to SourceBuffer
00336 1EA9 	;
00337 1EA9 	; Entry: DataInBuffer, IH_ByteCount, Data in SerialBuffer, 32bit address IH_Addr_Hi:IH_Addr_Lo
00338 1EA9 	; Exit:
00339 1EA9 	; 
00340 1EA9 	BufferIHData:
00341 1EA9 	; check address range
00342 1EA9 0825 		movf	IH_Addr_Hi,W
00343 1EAA 0426 		iorwf	IH_Addr_Hi+1,W
00344 1EAB 		SKPZ		;High address = 0x0000 ?
00344 1EAB 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00345 1EAC 0008 		return		; No
00346 1EAD 	; convert to words, IH_Addr_Lo = IH_Addr_Lo / 2
00347 1EAD 36A4 		lsrf	IH_Addr_Lo+1,F
00348 1EAE 0CA3 		rrf	IH_Addr_Lo,F
00349 1EAF 301E 		movlw	high BootLoaderStart
00350 1EB0 0224 		subwf	IH_Addr_Lo+1,W
00351 1EB1 		SKPB		;BootLoaderStart>IH_Addr_Lo?
00351 1EB1 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00352 1EB2 0008 		return		; No
00353 1EB3 	;
SerialServo.asm                                                       Page: 52
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00354 1EB3 1CAC 		btfss	DataInBuffer	;Any old data in the buffer?
00355 1EB4 320D 		bra	BIHD_PutInBuff	; No
00356 1EB5 	;
00357 1EB5 	; Continue filling buffer or flush and add to new buffer?
00358 1EB5 	;
00359 1EB5 0824 		movf	IH_Addr_Lo+1,W
00360 1EB6 0221 		subwf	PROG_ADDR_HI,W
00361 1EB7 		SKPZ		;Matches?
00361 1EB7 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00362 1EB8 3208 		bra	BIHD_FlushBuff	; No
00363 1EB9 	;
00364 1EB9 30E0 		movlw	AddressMask
00365 1EBA 0520 		andwf	PROG_ADDR_LO,W
00366 1EBB 00F8 		movwf	Param78
00367 1EBC 30E0 		movlw	AddressMask
00368 1EBD 0524 		andwf	IH_Addr_Lo+1,W
00369 1EBE 0278 		subwf	Param78,W
00370 1EBF 		SKPNZ		;Matches?
00370 1EBF 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00371 1EC0 320A 		bra	BIHD_PutInBuff_E2	; Yes
00372 1EC1 	;
00373 1EC1 26E4 	BIHD_FlushBuff	call	BLP_WriteBuffer
00374 1EC2 	;
00375 1EC2 	; Entry: IH_Addr_Lo=Word Address
00376 1EC2 	;
00377 1EC2 0823 	BIHD_PutInBuff	movf	IH_Addr_Lo,W
00378 1EC3 39E0 		andlw	AddressMask
00379 1EC4 00A0 		movwf	PROG_ADDR_LO
00380 1EC5 0824 		movf	IH_Addr_Lo+1,W
00381 1EC6 00A1 		movwf	PROG_ADDR_HI
00382 1EC7 30FF 		movlw	0xFF
00383 1EC8 3AE0 		xorlw	AddressMask	;0x1F
00384 1EC9 0523 		andwf	IH_Addr_Lo,W	;Offset within block
00385 1ECA 00A2 		movwf	ProgWordCount
00386 1ECB 	;
00387 1ECB 3080 	BIHD_PutInBuff_E2	movlw	low SerialBuffer
00388 1ECC 0084 		movwf	FSR0L
00389 1ECD 3021 		movlw	high SerialBuffer
00390 1ECE 0085 		movwf	FSR0H
00391 1ECF 	;
00392 1ECF 	; FSR1 = SourceBuffer + ProgWordCount * 2
00393 1ECF 0187 		clrf	FSR1H
00394 1ED0 3522 		lslf	ProgWordCount,W	;ProgWordCount * 2
00395 1ED1 3E00 		addlw	low SourceBuffer
00396 1ED2 0086 		movwf	FSR1L
00397 1ED3 3021 		movlw	high SourceBuffer
00398 1ED4 3D87 		addwfc	FSR1H,F
00399 1ED5 	;
00400 1ED5 	;Param79 = IH_ByteCount
00401 1ED5 0828 		movf	IH_ByteCount,W
00402 1ED6 00F9 		movwf	Param79
00403 1ED7 	;ProgWordCount += IH_ByteCount / 2
00404 1ED7 3689 		lsrf	WREG,F	; divide by 2
00405 1ED8 07A2 		addwf	ProgWordCount,F
00406 1ED9 	;
00407 1ED9 0012 	BIHD_PutInBuff_L1	moviw	FSR0++
00408 1EDA 001E 		movwi	FSR1++
00409 1EDB 0BF9 		decfsz	Param79,F
00410 1EDC 33FC 		bra	BIHD_PutInBuff_L1
00411 1EDD 	;
00412 1EDD 14AC 		bsf	DataInBuffer
00413 1EDE 3020 		movlw	BlockWords
00414 1EDF 0222 		subwf	ProgWordCount,W
00415 1EE0 		SKPNZ		;buffer full?
00415 1EE0 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00416 1EE1 3202 		bra	BLP_WriteBuffer	; Yes
00417 1EE2 		SKPNB		;Overflow? This should not happen.
00417 1EE2 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00418 1EE3 0008 		return		; No
00419 1EE4 	;
00420 1EE4 	; fall thru to BLP_WriteBuffer
00421 1EE4 	;=============================================
00422 1EE4 	; Write SourceBuffer to Prog memory
00423 1EE4 	;
00424 1EE4 	; Entry: SourceBuffer,
00425 1EE4 	;
00426 1EE4 	BLP_WriteBuffer:
00427 1EE4 	; copy old prog mem to DestBuffer
00428 1EE4 3040 		movlw	low DestBuffer
00429 1EE5 0086 		movwf	FSR1L
00430 1EE6 3021 		movlw	high DestBuffer
00431 1EE7 0087 		movwf	FSR1H
00432 1EE8 2769 		call	ReadProgBlock
00433 1EE9 	;
00434 1EE9 3000 		movlw	low SourceBuffer	;new data
00435 1EEA 0086 		movwf	FSR1L
00436 1EEB 3021 		movlw	high SourceBuffer
00437 1EEC 0087 		movwf	FSR1H	
00438 1EED 3040 		movlw	low DestBuffer	;old data
00439 1EEE 0086 		movwf	FSR1L
00440 1EEF 3021 		movlw	high DestBuffer
00441 1EF0 0087 		movwf	FSR1H
00442 1EF1 2742 		call	CompareBlock
00443 1EF2 	;
00444 1EF2 1809 		btfsc	WREG,0	;Matches?
00445 1EF3 320C 		bra	BLP_WriteBuffer_end	; Yes
00446 1EF4 	;	
00447 1EF4 3040 		movlw	low DestBuffer
00448 1EF5 0086 		movwf	FSR1L
SerialServo.asm                                                       Page: 53
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00449 1EF6 3021 		movlw	high DestBuffer
00450 1EF7 0087 		movwf	FSR1H
00451 1EF8 2735 		call	TestErased
00452 1EF9 1C09 		btfss	WREG,0	;Erased?
00453 1EFA 	;
00454 1EFA 277B 		call	EraseProgBlock	; No, Erase it.
00455 1EFB 	;
00456 1EFB 3000 		movlw	low SourceBuffer
00457 1EFC 0086 		movwf	FSR1L
00458 1EFD 3021 		movlw	high SourceBuffer
00459 1EFE 0087 		movwf	FSR1H	
00460 1EFF 2792 		call	WriteProgBlock
00461 1F00 	;
00462 1F00 10AC 	BLP_WriteBuffer_end	bcf	DataInBuffer
00463 1F01 275C 		call	EraseSourceBuffer
00464 1F02 	;
00465 1F02 0008 		return
00466 1F03 	;==============================================
00467 1F03 	; Get a byte from UART, waits forever
00468 1F03 	;
00469 1F03 	; Entry: none
00470 1F03 	; Exit: W=Char
00471 1F03 	;
00472 1F03 0020 	GetChar	MOVLB	0x00
00473 1F04 1E91 		BTFSS	PIR1,RCIF	;RX has a byte?
00474 1F05 33FD 		BRA	GetChar
00475 1F06 	;
00476 1F06 0023  a		MOVLB	RCSTA	;banksel
00475 1F07 		BANKSEL	RCSTA	; bank 3
00477 1F07 081D 		MOVF	RCSTA,W
00478 1F08 3906 		ANDLW	0x06
00479 1F09 		SKPZ		;Frame or Overrun Err?
00479 1F09 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00480 1F0A 3203 		BRA	GetChar_Err	; yes
00481 1F0B 0819 		MOVF	RCREG,W
00482 1F0C 	;
00483 1F0C 0020 		movlb	0x00	; bank 0
00484 1F0D 	;	goto	SendChar	; tc
00485 1F0D 0008 		RETURN
00486 1F0E 	;
00487 1F0E 0819 	GetChar_Err	MOVF	RCREG,W	;bad byte so drop it
00488 1F0F 121D 		BCF	RCSTA,CREN
00489 1F10 111D 		BCF	RCSTA,FERR
00490 1F11 109D 		BCF	RCSTA,OERR
00491 1F12 161D 		BSF	RCSTA,CREN
00492 1F13 33EF 		bra	GetChar
00493 1F14 	;
00494 1F14 	;==============================================
00495 1F14 	; Send a byte to UART
00496 1F14 	;
00497 1F14 	; Entry: W=Char to send
00498 1F14 	SendChar:
00499 1F14 1E11 		BTFSS	PIR1,TXIF	;TX done?
00500 1F15 33FE 		bra	SendChar
00501 1F16 0023  a		MOVLB	TXREG	;banksel
00500 1F17 		BANKSEL	TXREG
00502 1F17 009A 		MOVWF	TXREG
00503 1F18 0020 		MOVLB	0
00504 1F19 0008 		RETURN
00505 1F1A 	;	
00506 1F1A 	;==============================================
00507 1F1A 	; Read EEProm(255)
00508 1F1A 	;
00509 1F1A 	ReadEEData:	
00510 1F1A 0023  a		MOVLB	EEADRL	;banksel
00509 1F1B 		BANKSEL	EEADRL
00511 1F1B 30FF 		MOVLW	0xFF
00512 1F1C 0091 		MOVWF	EEADRL
00513 1F1D 	;
00514 1F1D 	;Data Memory
00515 1F1D 	;Address to read ;Deselect Config space
00516 1F1D 1315 		BCF	EECON1,CFGS
00517 1F1E 1395 		BCF	EECON1,EEPGD
00518 1F1F 	;Point to DATA memory
00519 1F1F 1415 		BSF	EECON1,RD	;EE Read
00520 1F20 0813 		MOVF	EEDATL,W	;W = EEDATL
00521 1F21 0020 		movlb	0
00522 1F22 0008 		return
00523 1F23 	;
00524 1F23 	;==============================================
00525 1F23 	; Clear EEProm(255)
00526 1F23 	;
00527 1F23 	WriteEEData:
00528 1F23 0023  a		MOVLB	EEADRL	;banksel
00527 1F24 		BANKSEL	EEADRL
00529 1F24 30FF 		MOVLW	0xFF
00530 1F25 0091 		MOVWF	EEADRL
00531 1F26 3000 		movlw	0x00
00532 1F27 0093 		movwf	EEDATL
00533 1F28 1315 		BCF	EECON1,CFGS	;not config mem
00534 1F29 1395 		BCF	EECON1,EEPGD	;not prog mem
00535 1F2A 1515 		BSF	EECON1,WREN
00536 1F2B 3055 		movlw	0x55
00537 1F2C 0096 		movwf	EECON2
00538 1F2D 30AA 		movlw	0xAA
00539 1F2E 0096 		movwf	EECON2
00540 1F2F 1495 		bsf	EECON1,WR
00541 1F30 1895 	WriteEEData_L1	btfsc	EECON1,WR
00542 1F31 33FE 		bra	WriteEEData_L1
SerialServo.asm                                                       Page: 54
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00543 1F32 1115 		bcf	EECON1,WREN
00544 1F33 0020 		movlb	0
00545 1F34 0008 		return
00546 1F35 	;
00547 1F35 	;==============================================
00548 1F35 	; Test if block is erased
00549 1F35 	;
00550 1F35 	; Entry: FSR1 -> current data
00551 1F35 	; Exit: W=1 if new = blank else W=0
00552 1F35 	;
00553 1F35 3020 	TestErased	movlw	BlockWords
00554 1F36 00F9 		movwf	Param79
00555 1F37 0016 	TestErased_L1	moviw	FSR1++	;LSB
00556 1F38 3CFF 		sublw	0xFF
00557 1F39 		SKPZ		;=0xFF?
00557 1F39 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00558 1F3A 3400 		retlw	0x00	; No
00559 1F3B 	;
00560 1F3B 0016 		moviw	FSR1++	;MSB
00561 1F3C 3C3F 		sublw	0x3F
00562 1F3D 		SKPZ		;=0x3F?
00562 1F3D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00563 1F3E 3400 		retlw	0x00	; No
00564 1F3F 	;
00565 1F3F 0BF9 		decfsz	Param79,F
00566 1F40 33F6 		bra	TestErased_L1
00567 1F41 3401 		retlw	0x01
00568 1F42 	;
00569 1F42 	;==============================================
00570 1F42 	; Compare Block
00571 1F42 	;
00572 1F42 	; Entry: FSR0 -> new data, FSR1 -> current data
00573 1F42 	; Exit: W=1 if new = current else W=0
00574 1F42 	;
00575 1F42 3020 	CompareBlock	movlw	BlockWords
00576 1F43 00F9 		movwf	Param79
00577 1F44 0012 	CompareBlock_L1	moviw	FSR0++	;LSB
00578 1F45 00F7 		movwf	Param77
00579 1F46 0012 		moviw	FSR0++	;MSB
00580 1F47 00F8 		movwf	Param78
00581 1F48 	; skip?
00582 1F48 3C3F 		sublw	0x3F
00583 1F49 		SKPZ
00583 1F49 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00584 1F4A 3206 		bra	CB_NotBlank
00585 1F4B 0A77 		incf	Param77,W
00586 1F4C 		SKPZ
00586 1F4C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00587 1F4D 3203 		bra	CB_NotBlank
00588 1F4E 0016 		moviw	FSR1++
00589 1F4F 0016 		moviw	FSR1++
00590 1F50 3208 		bra	CB_Next
00591 1F51 	;
00592 1F51 0016 	CB_NotBlank	moviw	FSR1++
00593 1F52 0277 		subwf	Param77,W
00594 1F53 		SKPZ		;Matches?
00594 1F53 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00595 1F54 3400 		retlw	0x00	; No
00596 1F55 0016 		moviw	FSR1++
00597 1F56 0278 		subwf	Param78,W
00598 1F57 		SKPZ		;Matches?
00598 1F57 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00599 1F58 3400 		retlw	0x00	; No
00600 1F59 	;
00601 1F59 0BF9 	CB_Next	decfsz	Param79,F
00602 1F5A 33E9 		bra	CompareBlock_L1
00603 1F5B 3401 		retlw	0x01	;It's a match!
00604 1F5C 	;
00605 1F5C 	;==============================================
00606 1F5C 3000 	EraseSourceBuffer	movlw	low SourceBuffer
00607 1F5D 0086 		movwf	FSR1L
00608 1F5E 3021 		movlw	high SourceBuffer
00609 1F5F 0087 		movwf	FSR1H
00610 1F60 	;
00611 1F60 	; Fall thru to EraseBlock
00612 1F60 	;==============================================
00613 1F60 	; Erase Block
00614 1F60 	;
00615 1F60 	; Entry: FSR1
00616 1F60 	;
00617 1F60 3020 	EraseBlock	movlw	BlockWords
00618 1F61 00F9 		movwf	Param79
00619 1F62 30FF 	EraseBlock_L1	movlw	0xFF
00620 1F63 001E 		movwi	FSR1++
00621 1F64 303F 		movlw	0x3F
00622 1F65 001E 		movwi	FSR1++
00623 1F66 0BF9 		decfsz	Param79,F
00624 1F67 33FA 		bra	EraseBlock_L1
00625 1F68 0008 		return
00626 1F69 	;	
00627 1F69 	;==============================================
00628 1F69 	; Read Program memory block
00629 1F69 	;
00630 1F69 	; Entry: FSR1,PROG_ADDR_HI:PROG_ADDR_LO
00631 1F69 	; Exit: FSR1 changed, 32 words >> (FSR1++)
00632 1F69 	;
00633 1F69 278A 	ReadProgBlock	call	LoadProgAddr
00634 1F6A 1315 		BCF	EECON1,CFGS	; Do not select Configuration Space
00635 1F6B 1795 		BSF	EECON1,EEPGD	; Select Program Memory
SerialServo.asm                                                       Page: 55
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00636 1F6C 3020 		movlw	BlockWords	;Block is .32 words
00637 1F6D 00F9 		movwf	Param79
00638 1F6E 1415 	ReadProgBlock_L1	BSF	EECON1,RD	; Initiate read
00639 1F6F 0000 		NOP		; skipped
00640 1F70 0000 		NOP		; do nothing
00641 1F71 0813 		MOVF	EEDATL,W	; Get LSB of word
00642 1F72 001E 		movwi	FSR1++	; Store in user location
00643 1F73 0814 		MOVF	EEDATH,W	; Get MSB of word
00644 1F74 001E 		movwi	FSR1++	; Store in user location
00645 1F75 0BF9 		decfsz	Param79,F
00646 1F76 3202 		bra	ReadProgBlock_1
00647 1F77 0020 		movlb	0
00648 1F78 0008 		return
00649 1F79 	;
00650 1F79 0A91 	ReadProgBlock_1	incf	EEADRL,F
00651 1F7A 33F3 		bra	ReadProgBlock_L1
00652 1F7B 	;
00653 1F7B 	;=====================================================
00654 1F7B 	; Erase Program memory block
00655 1F7B 	;
00656 1F7B 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO
00657 1F7B 	;
00658 1F7B 278A 	EraseProgBlock	call	LoadProgAddr
00659 1F7C 1795 		BSF	EECON1,EEPGD	;Point to program memory
00660 1F7D 1315 		BCF	EECON1,CFGS	;Not configuration space
00661 1F7E 1615 		BSF	EECON1,FREE	;Specify an erase operation, automaticaly cleared
00662 1F7F 1515 		BSF	EECON1,WREN	;Enable writes
00663 1F80 3055 		MOVLW	55h	;Start of required sequence to initiate erase
00664 1F81 0096 		MOVWF	EECON2	;Write 55h
00665 1F82 30AA 		MOVLW	0AAh
00666 1F83 0096 		MOVWF	EECON2	;Write AAh
00667 1F84 1495 		BSF	EECON1,WR	;Set WR bit to begin erase
00668 1F85 0000 		NOP		;Any instructions here are ignored as processor
00669 1F86 0000 		NOP		; halts to begin erase sequence
00670 1F87 				;Processor will stop here and wait for erase complete.
00671 1F87 				;after erase processor continues with 3rd instruction
00672 1F87 1115 		BCF	EECON1,WREN	;Disable writes
00673 1F88 0020 		movlb	0
00674 1F89 0008 		return
00675 1F8A 	;
00676 1F8A 	;=========================================================
00677 1F8A 	; Load the program address PROG_ADDR_HI:PROG_ADDR_LO into EEADRH:EEADRL
00678 1F8A 0821 	LoadProgAddr	movf	PROG_ADDR_HI,W
00679 1F8B 0023  a		MOVLB	EEADRH	;banksel
00678 1F8C 		BANKSEL	EEADRH	;bank ?
00680 1F8C 0092 		MOVWF	EEADRH	; Store MSB of address
00681 1F8D 0020 		movlb	0	;bank 0
00682 1F8E 0820 		movf	PROG_ADDR_LO,W
00683 1F8F 0023  a		MOVLB	EEADRH	;banksel
00682 1F90 		BANKSEL	EEADRH	;bank ?
00684 1F90 0091 		MOVWF	EEADRL	; Store LSB of address
00685 1F91 0008 		return
00686 1F92 	;
00687 1F92 	;==========================================================
00688 1F92 	; Write Program memory block
00689 1F92 	;
00690 1F92 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, FSR1
00691 1F92 	; Exit: FSR1 changed
00692 1F92 	; 
00693 1F92 278A 	WriteProgBlock	call	LoadProgAddr
00694 1F93 1795 		BSF	EECON1,EEPGD	;Point to program memory
00695 1F94 1315 		BCF	EECON1,CFGS	;Not configuration space
00696 1F95 1515 		BSF	EECON1,WREN	;Enable writes
00697 1F96 1695 		BSF	EECON1,LWLO	;Only Load Write Latches
00698 1F97 3020 		movlw	BlockWords
00699 1F98 00F9 		movwf	Param79
00700 1F99 	;
00701 1F99 0016 	WriteProgBlock_L1	moviw	FSR1++
00702 1F9A 0093 		movwf	EEDATL
00703 1F9B 0016 		moviw	FSR1++
00704 1F9C 0094 		movwf	EEDATH
00705 1F9D 	;
00706 1F9D 0811 		movf	EEADRL,W
00707 1F9E 3A1F 		xorlw	0x1F
00708 1F9F 391F 		andlw	0x1F
00709 1FA0 1903 		btfsc	_Z	;EEADRL = xxx1 1111?
00710 1FA1 3209 		bra	WriteProgBlock_Wr	; Yes
00711 1FA2 	;
00712 1FA2 3055 		movlw	0x55	; Start of required write sequence:
00713 1FA3 0096 		movwf	EECON2
00714 1FA4 30AA 		movlw	0xAA
00715 1FA5 0096 		movwf	EECON2
00716 1FA6 1495 		bsf	EECON1,WR	; Set WR bit to begin write to latches
00717 1FA7 0000 		nop
00718 1FA8 0000 		nop
00719 1FA9 0A91 		incf	EEADRL,F
00720 1FAA 33EE 		bra	WriteProgBlock_L1
00721 1FAB 	;
00722 1FAB 1295 	WriteProgBlock_Wr	bcf	EECON1,LWLO	; Write memory not latches
00723 1FAC 3055 		movlw	0x55	; Start of required write sequence:
00724 1FAD 0096 		movwf	EECON2
00725 1FAE 30AA 		movlw	0xAA
00726 1FAF 0096 		movwf	EECON2
00727 1FB0 1495 		bsf	EECON1,WR	; Set WR bit to begin write
00728 1FB1 0000 		nop
00729 1FB2 0000 		nop
00730 1FB3 	;
00731 1FB3 1115 		bcf	EECON1,WREN
00732 1FB4 	;
SerialServo.asm                                                       Page: 56
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00733 1FB4 0020 	WriteProgBlock_end	movlb	0
00734 1FB5 0008 		return	
00735 1FB6 	;
00736 1FB6 	;============================================================
00737 1FB6 	; call once
00738 1FB6 	;
00739 1FB6 0021 	InitializeBLIO	MOVLB	0x01	; select bank 1
00740 1FB7 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00741 1FB8 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00742 1FB9 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00743 1FBA 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00744 1FBB 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00745 1FBC 1515 		bsf	OPTION_REG,PS2
00746 1FBD 	;
00747 1FBD 30F0 		MOVLW	OSCCON_Value
00748 1FBE 0099 		MOVWF	OSCCON
00749 1FBF 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00750 1FC0 0097 		movwf	WDTCON
00751 1FC1 	;
00752 1FC1 0024 		movlb	4	; bank 4
00753 1FC2 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00754 1FC3 	;
00755 1FC3 0023 		MOVLB	0x03	; bank 3
00756 1FC4 3003 		movlw	ANSELA_Val
00757 1FC5 008C 		movwf	ANSELA
00758 1FC6 3000 		movlw	ANSELB_Val
00759 1FC7 008D 		movwf	ANSELB
00760 1FC8 	;
00761 1FC8 	;
00762 1FC8 		if UseAltSerialPort
00763 1FC8 	;SPI MISO >> SDI1 RB1, default
00764 1FC8 	;SPI CLK >> RB4, default
00765 1FC8 0022 		movlb	2	;bank 2
00766 1FC9 179D 		bsf	APFCON0,RXDTSEL	;RX >> RB2
00767 1FCA 141E 		bsf	APFCON1,TXCKSEL	;TX >> RB5
00768 1FCB 171D 		bsf	APFCON0,SDO1SEL	;SPI MOSI >> SDO1 RA6
00769 1FCC 		endif
00770 1FCC 	;
00771 1FCC 0020 		MOVLB	0x00	;Bank 0
00772 1FCD 	; setup data ports
00773 1FCD 3011 		movlw	PortBValue
00774 1FCE 008D 		movwf	PORTB	;init port B
00775 1FCF 3000 		movlw	PortAValue
00776 1FD0 008C 		movwf	PORTA
00777 1FD1 0021 		MOVLB	0x01	; bank 1
00778 1FD2 30BF 		movlw	PortADDRBits
00779 1FD3 008C 		movwf	TRISA
00780 1FD4 30C6 		movlw	PortBDDRBits	;setup for programer
00781 1FD5 008D 		movwf	TRISB
00782 1FD6 	;
00783 1FD6 	; setup serial I/O
00784 1FD6 0023  a		MOVLB	BAUDCON	;banksel
00783 1FD7 		BANKSEL	BAUDCON	; bank 3
00785 1FD7 3008 		movlw	BAUDCON_Value
00786 1FD8 009F 		movwf	BAUDCON
00787 1FD9 30CF 		MOVLW	low BaudRate
00788 1FDA 009B 		MOVWF	SPBRGL
00789 1FDB 3000 		MOVLW	high BaudRate
00790 1FDC 009C 		MOVWF	SPBRGH
00791 1FDD 3024 		MOVLW	TXSTA_Value
00792 1FDE 009E 		MOVWF	TXSTA
00793 1FDF 3090 		MOVLW	RCSTA_Value
00794 1FE0 009D 		MOVWF	RCSTA
00795 1FE1 0021 		movlb	0x01	; bank 1
00796 1FE2 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00797 1FE2 0020 		movlb	0x00	; bank 0
00798 1FE3 	;
00799 1FE3 	;
00800 1FE3 0064 		CLRWDT
00801 1FE4 	;
00802 1FE4 	;	bsf	INTCON,PEIE	; enable periferal interupts
00803 1FE4 138B 		bcf	INTCON,GIE	; disable interupts
00804 1FE5 	;
00805 1FE5 0008 		return
00806 1FE6 	;
00807 1FE6 	;
00808 1FE6 	 
00809 1FE6 	 
00810 1FE6 	 
00811 1FE6 	 
00812 1FE6 	 
00813 1FE6 	 
00814 1FE6 	 
00815 1FE6 	 
00816 1FE6 	 
00817 1FE6 	 
00818 1FE6 	 
00819 1FE6 	 
00820 1FE6 	 
00821 1FE6 	 
00822 1FE6 	 
00823 1FE6 	 
00824 1FE6 	 
00825 1FE6 	 
00826 1FE6 	 
00827 1FE6 	 
00828 1FE6 	 
00829 1FE6 	 
00830 1FE6 	 
SerialServo.asm                                                       Page: 57
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

00831 1FE6 	 
00832 1FE6 	 
00833 1FE6 	 
00834 1FE6 	 
01895 1FE6 	;
01896 1FE6 	;
01897 1FE6 		END

X-Ref Table
ADCON0	009D 	ReadAN, ReadAN_1, ReadAN0_ColdStart
ADCON1	009E 	ReadAN0_ColdStart
ADGO	0001 	ReadAN_1
ADON	0000 	ReadAN
ADRESH	009C 	ReadAN_1
ADRESL	009B 	ReadAN_1
AN0_Val	0000 	ReadAN_TryAN0, ReadAN_AN0_3, ReadAN0_ColdStart
AN1_Val	0004 	ReadAN_AN0
AN2_Val	0008 	ReadAN, ReadAN_TryAN2, ReadAN_AN0_1
AN3_Val	000C 	ReadAN_AN0_2
ANFlags	00B2 	ML_1, ReadAN_TryAN0, ReadAN_AN0
ANNumMask	007C 	ReadAN
ANSELA	018C 	InitializeIO, InitializeBLIO
ANSELA_Val	0003 	InitializeIO, InitializeBLIO
ANSELB	018D 	InitializeIO, InitializeBLIO
ANSELB_Val	0000 	InitializeIO, InitializeBLIO
APFCON0	011D 	InitializeIO, InitializeBLIO
APFCON1	011E 	InitializeIO, InitializeBLIO
AS5047D_Flags	0070 	ReadEncoder, Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_ReadReg
		AS5047_Read, CheckParity_L1
AS5047_ANGLECOM	7FFF 	AS5047_ReadPos
AS5047_ANGLEUNC	7FFE 	AS5047_ReadPos_1
AS5047_DIAAGCReg	3FFC 	AS5047_ReadPos_1
AS5047_ErrReg	0001 	AS5047_ReadPos_1
AS5047_NOP	C000 	Init_AS5047D, AS5047_Read
AS5047_Read ^	0273 	AS5047_ReadReg
AS5047_ReadBit	4000 	Init_AS5047D
AS5047_ReadPos ^	0235 	ReadEncoder, AS5047_ReadPos_1
AS5047_ReadPos_1 ^	0246 	AS5047_ReadPos
AS5047_ReadReg ^	026B 	AS5047_ReadPos_1
AS5047_Settings1	0018 	AS5047_ReadPos_1
AS5047_Settings2	0019 	AS5047_ReadPos_1
AS5047_ZPOSL	0017 	AS5047_ReadPos_1
AS5047_ZPOSM	0016 	AS5047_ReadPos_1
AddressMask	00E0 	BufferIHData, BIHD_PutInBuff
AllDataRXd	RX_ParseFlags,6	RS232_Parse, RS232_Parse_DALo_End
AngleReadFlag	AS5047D_Flags,1	Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read
Aux0DigOut_1 ^	004D 	LED1_Blink_end
Aux0DigOut_2 ^	0050 	LED1_Blink_end, Aux0DigOut_1
Aux0DigOut_end ^	0052 	LED1_Blink_end
Aux1DigOut_1 ^	0083 	LED2_Blink_end
Aux1DigOut_2 ^	0086 	LED2_Blink_end, Aux1DigOut_1
Aux1DigOut_end ^	0088 	LED2_Blink_end
BAUDCON	019F 	InitializeIO, InitializeBLIO
BAUDCON_Value	0008 	InitializeIO, InitializeBLIO
BF	0000 	SPI_SendRecWord_L1, SPI_SendRecWord_L2
BIHD_FlushBuff ^	1EC1 	BufferIHData
BIHD_PutInBuff ^	1EC2 	BufferIHData
BIHD_PutInBuff_E2 ^	1ECB 	BufferIHData
BIHD_PutInBuff_L1 ^	1ED9 	BIHD_PutInBuff_L1
BLPV_Addr ^	1E9A 	BLPV_Data
BLPV_Data ^	1E92 	BLP_Validate
BLP_BadCSum ^	1E86 	BLP_IHS_CSum
BLP_IHS_AddrLSB ^	1E5B 	BLP_IHS_AddrMSB
BLP_IHS_AddrMSB ^	1E53 	BLP_TestNum_2
BLP_IHS_CSum ^	1E7B 	BLP_IHS_Data
BLP_IHS_Data ^	1E6E 	BLP_IHS_DataType
BLP_IHS_DataType ^	1E63 	BLP_IHS_AddrLSB
BLP_L1 ^	1E1A 	BLP_L2, BLP_NextState, BLP_IHS_Data
BLP_L2 ^	1E1B 	BLP_TestNum, BLP_TestNum_1
BLP_NextState ^	1E51 	BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
BLP_SaveIH_Length ^	1E4E 	BLP_TestNum_2
BLP_TestNum ^	1E24 	BLP_L2
BLP_TestNum_1 ^	1E39 	BLP_TestNum
BLP_TestNum_2 ^	1E41 	BLP_TestNum_1
BLP_Validate ^	1E89 	BLP_IHS_CSum
BLP_WriteBuffer ^	1EE4 	BLP_Validate, BIHD_FlushBuff, BIHD_PutInBuff_L1
BLP_WriteBuffer_end ^	1F00 	BLP_WriteBuffer
BL_Parse ^	1E12 	BootLoaderStart
BL_ParseNextLine ^	1E13 	BLP_TestNum, BLP_TestNum_2, BLP_IHS_CSum, BLP_BadCSum, BLPV_Data
		BLPV_Addr
BSR	0008 	ProgStartVector
BattVolts	Cur_AN1	Cmd_RestoreParams_end
BaudRate	00CF 	InitializeIO, InitializeBLIO
BlockSize	0040 	BootLoaderStart
BlockWords	0020 	BIHD_PutInBuff_L1, TestErased, CompareBlock, EraseSourceBuffer, ReadProgBlock
		WriteProgBlock
BootLoaderStart ^	1E00 	, StoreSerOut_S0, BufferIHData
BootLoader_End ^	1E10 	BootLoaderStart
BufferIHData ^	1EA9 	BLPV_Data
C	0000 	DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_UpdatePos, DM3_MovPlus, DM4_NotOverCurrent
		DoMode4_MovPlus, ClampInt, ClampInt_1, HandleRXData_1, Cmd_GetGripI_end, Cmd_SetAuxConfig_end
		Cmd_GetAuxConfig_end, Cmd_SetAuxNValue_end, BLP_TestNum, BLP_TestNum_2, BufferIHData
		BIHD_PutInBuff_L1
CB_Next ^	1F59 	CompareBlock_L1
CB_NotBlank ^	1F51 	CompareBlock_L1
CCP1CON	0293 	Aux1DigOut_end, IRQ_Servo1_1, IRQ_Servo1_OH, IRQ_Servo1_Idle, IRQ_Servo1_OL
		StartServo, InitializeIO
CCP1CON_Clr	0009 	IRQ_Servo1_OH
CCP1CON_Idle	000A 	Aux1DigOut_end, IRQ_Servo1_Idle
SerialServo.asm   X-Ref Table                                            Page: 58
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

CCP1CON_Set	0008 	IRQ_Servo1_OL, StartServo
CCP1IE	0002 	InitializeIO
CCP1IF	0002 	Aux1DigOut_end, IRQ_Servo1_X
CCP1M0	0000 	IRQ_Servo1_1, IRQ_Servo1_Idle
CCP1M1	0001 	IRQ_Servo1_1, IRQ_Servo1_Idle
CCPR1H	0292 	IRQ_Servo1_OH, IRQ_Servo1_Dwell, StartServo
CCPR1L	0291 	IRQ_Servo1_OH, IRQ_Servo1_Dwell, StartServo
CFGS	0006 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
CKE	0006 	Init_AS5047D
CREN	0004 	RX_TheByte_Err, GetChar_Err
CalcParity ^	0291 	Init_AS5047D, AS5047_ReadPos, AS5047_Read
CalcParity_L1 ^	0294 	CalcParity_L1
CalcdDwell	02A2 	IRQ_Servo1_OH, IRQ_Servo1_20mS, IRQ_Servo1_CalcDwell, IRQ_Servo1_Idle
		IRQ_Servo1_Dwell, StartServo, SetMiddlePosition
CalcdDwellH	02A3 	IRQ_Servo1_OH, IRQ_Servo1_20mS, IRQ_Servo1_CalcDwell, IRQ_Servo1_Idle
		IRQ_Servo1_Dwell, StartServo, SetMiddlePosition
CheckCurrent ^	042B 	DoModeTwo, DoModeThree, DoMode4
CheckGripCurrent ^	043D 	DoMode4
CheckParity ^	02A4 	Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg
CheckParity_L1 ^	02A7 	CheckParity_L1
ChkSum	002D 	BootLoaderStart, BL_ParseNextLine, BLP_SaveIH_Length, BLP_IHS_AddrMSB
		BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
ClampInt ^	062D 	DoModeZero, DoModeTwo_Go, DM3_Go, DoMode4_Go
ClampInt_1 ^	063B 	ClampInt
ClampInt_tooHigh ^	064A 	ClampInt
ClampInt_tooLow ^	0645 	ClampInt_1
ClearRam ^	00CA 	InitializeIO
ClearRam_2 ^	00DB 	ClearRam
ClearRam_L2 ^	00E4 	ClearRam, ClearRam_2, ClearRam_L2
CmdErrorFlag	AS5047D_Flags,3	ReadEncoder, Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg
Cmd_GetAuxConfig_end ^	0932 	Cmd_SetAuxConfig_end
Cmd_GetAuxNValue_Ana ^	096C 	Cmd_SetAuxNValue_end
Cmd_GetAuxNValue_Btn ^	0982 	Cmd_SetAuxNValue_end
Cmd_GetAuxNValue_Btn1 ^	0989 	Cmd_GetAuxNValue_Btn
Cmd_GetAuxNValue_Btn2 ^	0990 	Cmd_GetAuxNValue_Btn1
Cmd_GetAuxNValue_Dig ^	0976 	Cmd_SetAuxNValue_end
Cmd_GetAuxNValue_Dig1 ^	097D 	Cmd_GetAuxNValue_Dig
Cmd_GetAuxNValue_end ^	0992 	Cmd_SetAuxNValue_end
Cmd_GetBattVolts_end ^	09E2 	Cmd_RestoreParams_end
Cmd_GetCmdPos_end ^	083B 	Cmd_SetCmdPos_end
Cmd_GetDeadBand_End ^	08F3 	Cmd_SetDeadBand_End
Cmd_GetEnaOvrCur_End ^	08B3 	Cmd_SetEnaOvrCur_End
Cmd_GetEncAbs_end ^	09C6 	Cmd_GetEnc_end
Cmd_GetEnc_end ^	09B7 	Cmd_GetI_end
Cmd_GetEncoderOffset_End ^	09A4 	Cmd_SetEncoderOffset_End
Cmd_GetFFwd_end ^	085B 	Cmd_SetFFwd_end
Cmd_GetFRev_end ^	086D 	Cmd_SetFRev_end
Cmd_GetGripI_end ^	0912 	Cmd_SetGripI_end
Cmd_GetI_end ^	09AE 	Cmd_GetEncoderOffset_End
Cmd_GetMaxI_end ^	0849 	Cmd_SetMaxI_end
Cmd_GetMax_uS_end ^	0891 	Cmd_SetMax_uS_end
Cmd_GetMin_uS_end ^	087F 	Cmd_SetMin_uS_end
Cmd_GetMode_end ^	0829 	Cmd_SetMode_end
Cmd_GetRevDir_End ^	08A2 	Cmd_SetRevDir_End
Cmd_GetSpeed_End ^	08D4 	Cmd_SetSpeed_End
Cmd_GetStatus_end ^	09F3 	Cmd_GetBattVolts_end
Cmd_GetStopCenter_End ^	08C5 	Cmd_SetStopCenter_End
Cmd_GetUseFastPWM_End ^	0904 	Cmd_SetUseFastPWM_End
Cmd_GetUseIdleCenter_End ^	08E5 	Cmd_SetUseIdleCenter_End
Cmd_ReBoot_end ^	09F8 	Cmd_GetStatus_end
Cmd_RestoreParams_end ^	09D8 	Cmd_SaveParams_end
Cmd_RunBootloader_end ^	0A03 	Cmd_ReBoot_end
Cmd_SaveParams_end ^	09CF 	Cmd_GetEncAbs_end
Cmd_SendIDString_L1 ^	0A1E 	Cmd_SendIDString_L1
Cmd_SendIDString_end ^	0A3A 	Cmd_SetSlaveAddr_end
Cmd_SetAuxConfig_end ^	0922 	Cmd_GetGripI_end
Cmd_SetAuxNDigOut ^	094B 	Cmd_GetAuxConfig_end
Cmd_SetAuxNLED ^	094B 	Cmd_GetAuxConfig_end
Cmd_SetAuxNValue_end ^	0953 	Cmd_GetAuxConfig_end
Cmd_SetCmdPos_end ^	0832 	Cmd_GetMode_end
Cmd_SetDeadBand_End ^	08EC 	Cmd_GetUseIdleCenter_End
Cmd_SetEnaOvrCur_End ^	08AC 	Cmd_GetRevDir_End
Cmd_SetEncoderOffset_End ^	099B 	Cmd_GetAuxNValue_end
Cmd_SetFFwd_end ^	0852 	Cmd_GetMaxI_end
Cmd_SetFRev_end ^	0864 	Cmd_GetFFwd_end
Cmd_SetGripI_end ^	090B 	Cmd_GetUseFastPWM_End
Cmd_SetMasterAddr_end ^	0A0E 	Cmd_RunBootloader_end
Cmd_SetMaxI_end ^	0842 	Cmd_GetCmdPos_end
Cmd_SetMax_uS_end ^	0888 	Cmd_GetMin_uS_end
Cmd_SetMin_uS_end ^	0876 	Cmd_GetFRev_end
Cmd_SetMode_end ^	0822 	HandleRXData_1
Cmd_SetRevDir_End ^	089B 	Cmd_GetMax_uS_end
Cmd_SetSlaveAddr_end ^	0A19 	Cmd_SetMasterAddr_end
Cmd_SetSpeed_End ^	08CD 	Cmd_GetStopCenter_End
Cmd_SetStopCenter_End ^	08BC 	Cmd_GetEnaOvrCur_End
Cmd_SetUseFastPWM_End ^	08FD 	Cmd_GetDeadBand_End
Cmd_SetUseIdleCenter_End ^	08DE 	Cmd_GetSpeed_End
CompareBlock ^	1F42 	BLP_WriteBuffer
CompareBlock_L1 ^	1F44 	CB_Next
ContinueReadFlag	AS5047D_Flags,2	Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read
Copy7CToSig ^	05F1 	DoModeZero, DM1_FF, DM1_FR, DoModeTwo_Go, DM3_Go, DoMode4_Go
		StartServo
Copy7CToSig_1 ^	05FA 	Copy7CToSig, Copy7CToSig_1
Copy7CToSig_Done ^	0602 	Copy7CToSig
CopyToRam ^	00E9 	InitializeIO, Cmd_SaveParams_end
CopyToRam_L1 ^	00EE 	CopyToRam_L1
Cur_AN0	00B3 	ML_1, CheckCurrent, CheckGripCurrent, ReadAN, ReadAN_TryAN0, ReadAN_AN0
		Cmd_GetEncoderOffset_End
SerialServo.asm   X-Ref Table                                            Page: 59
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

Cur_AN1	00B5 	ReadAN_AN0_3, Cmd_GetAuxNValue_Ana, Cmd_RestoreParams_end
Cur_AN2	00B7 	DoModeZero, DoModeOne, ReadAN_AN2
Cur_AN3	00B9 	ReadAN_AN2
DM1_FF ^	041F 	DoModeOne
DM1_FR ^	0425 	DoModeOne
DM2_NotOverCurrent ^	046F 	DoModeTwo
DM3_FF ^	04DC 	DM3_NotOverCurrent
DM3_FF_1 ^	04DE 	DM3_FR
DM3_FR ^	04E6 	DM3_NotOverCurrent
DM3_FR_1 ^	04E8 	DM3_FF
DM3_Go ^	051B 	DM3_UpdatePos, DM3_Minus, DM3_Plus
DM3_IdleInactive ^	04DA 	DM3_IdleServo
DM3_IdleServo ^	04CF 	DoModeThree, DM3_FF_1, DM3_FR_1
DM3_Minus ^	0506 	DM3_UpdatePos
DM3_MovPlus ^	050B 	DM3_UpdatePos
DM3_NoSpeed ^	0517 	DM3_UpdatePos, DM3_MovPlus
DM3_NotOverCurrent ^	04B1 	DoModeThree
DM3_Plus ^	0512 	DM3_MovPlus
DM3_UpdatePos ^	04EF 	DM3_IdleServo, DM3_FF_1
DM4_NotOverCurrent ^	052F 	DoMode4
DataInBuffer	IH_Flags,1	BootLoaderStart, BL_Parse, BLP_Validate, BufferIHData, BIHD_PutInBuff_L1
		BLP_WriteBuffer_end
DataReceivedFlag	SerFlags,1	RX_TheByte, No_NewDataAN0
DataSentFlag	SerFlags,2	TX_TheByte, ML_Ser_Out
DeadBand	005C 	DM3_NotOverCurrent, Cmd_GetUseIdleCenter_End, Cmd_SetDeadBand_End
DebounceTime	000A 	HdlBtn_DB
DecTimer ^	010B 	DecTimer4, DecTimer3, DecTimer2
DecTimer1 ^	010A 	ProgStartVector
DecTimer2 ^	0108 	ProgStartVector
DecTimer3 ^	0106 	ProgStartVector
DecTimer4 ^	0104 	ProgStartVector
DelayWuS ^	012D 	DecTimer, ReadAN_1, ReadAN0_ColdStart
DelayWuS_Loop ^	012E 	DelayWuS_Loop
DestAddHiRXd	RX_ParseFlags,5	RS232_Parse
DestAddLoRXd	RX_ParseFlags,4	RS232_Parse, RS232_Parse_SALo_end
DestBuffer	2140 	BootLoaderStart, BLP_WriteBuffer
DoMode4 ^	0522 	ML_Ser_End
DoMode4_1 ^	056A 	DoMode4
DoMode4_Go ^	0561 	DoMode4_Minus_1, DoMode4_Hold
DoMode4_Hold ^	054E 	DM4_NotOverCurrent, DoMode4_MovPlus
DoMode4_Minus ^	0549 	DM4_NotOverCurrent
DoMode4_Minus_1 ^	054A 	DM4_NotOverCurrent, DoMode4_Hold
DoMode4_MovPlus ^	0552 	DM4_NotOverCurrent
DoMode4_Plus ^	055D 	DoMode4_MovPlus
DoMode4_Plus_1 ^	055E 	DoMode4_MovPlus
DoModeOne ^	0401 	ML_Ser_End
DoModeThree ^	04A5 	ML_Ser_End
DoModeTwo ^	0463 	ML_Ser_End
DoModeTwo_1 ^	04A3 	DoModeTwo
DoModeTwo_Go ^	049C 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_Plus
DoModeTwo_Minus ^	0487 	DM2_NotOverCurrent
DoModeTwo_MovPlus ^	048C 	DM2_NotOverCurrent
DoModeTwo_NoSpeed ^	0498 	DM2_NotOverCurrent, DoModeTwo_MovPlus
DoModeTwo_Plus ^	0493 	DoModeTwo_MovPlus
DoModeZero ^	03F5 	ML_Ser_End
EEADR	0191 	EERead, EEWrite
EEADRH	0192 	LoadProgAddr
EEADRL	0191 	ReadEEData, WriteEEData, ReadProgBlock_1, LoadProgAddr, WriteProgBlock_L1
EEAddrTemp	002A 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DelayWuS_Loop
		EERead, EEWriteW, EEWrite
EECON1	0195 	EERead, EEWrite, EEWriteLoop, ReadEEData, WriteEEData, WriteEEData_L1
		ReadProgBlock, ReadProgBlock_L1, EraseProgBlock, WriteProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
EECON2	0196 	EEWrite, WriteEEData, EraseProgBlock, WriteProgBlock_L1, WriteProgBlock_Wr
EEDAT	0193 	EERead, EEWrite
EEDATH	0194 	ReadProgBlock_L1, WriteProgBlock_L1
EEDATL	0193 	ReadEEData, WriteEEData, ReadProgBlock_L1, WriteProgBlock_L1
EEDataTemp	002B 	SaveParams_L1, EEWrite, Cmd_ReBoot_end
EEPGD	0007 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
EERead ^	0134 	CopyToRam_L1
EEWrite ^	013E 	SaveParams_L1
EEWriteLoop ^	0150 	EEWriteLoop
EEWriteW ^	013D 	Cmd_ReBoot_end
EncoderAccum	0042 	ReadEncoder_2, HA_SetIt, Home_Here, Cmd_GetEnc_end
EncoderFlags	0047 	CopyToRam, SaveParams, ReadEncoder, ReadEncoder_1, ReadEncoder_2
		SaveHomePos
EncoderHome	0048 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetIt
EncoderOffset	004A 	DM3_NotOverCurrent, Cmd_GetAuxNValue_end, Cmd_SetEncoderOffset_End
EncoderVal	0045 	ReadEncoder, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetItNeg, HA_SetIt, DoModeOne, DM3_NotOverCurrent, Cmd_GetI_end
EraseBlock_L1 ^	1F62 	EraseBlock_L1
EraseProgBlock ^	1F7B 	BLP_WriteBuffer
EraseSourceBuffer ^	1F5C 	BootLoaderStart, BLP_WriteBuffer_end
F	0001 	ProgStartVector, SystemBlink_end, LED1_Blinking, Aux0DigOut_end, LED2_Blinking
		IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, IRQ_Servo1_Dwell, ClearRam, ClearRam_L2, CopyToRam_L1
		SaveParams_L1, DecTimer, DelayWuS_Loop, ReadEncoder_1, ReadEncoder_2, Home_Absolute_2
		SaveHomePos, HA_SetItNeg, Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg, CalcParity_L1
		CheckParity_L1, StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse, RS232_Parse_Byte
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_ClearTXData_L1
		RS232_Send, RS232_Send_L1, ML_1, DoModeZero, DoModeOne, CheckCurrent, CheckGripCurrent
		DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus, DM3_NotOverCurrent
		DM3_UpdatePos, DM3_Minus, DM3_MovPlus, DM3_Plus, DM4_NotOverCurrent, DoMode4_Minus_1
		DoMode4_MovPlus, DoMode4_Plus_1, HandleButtons, ClampInt_1, Cmd_SendIDString_L1
		BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2, BLP_SaveIH_Length, BLP_NextState, BLP_IHS_AddrMSB
		BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BufferIHData, BIHD_PutInBuff_E2
		BIHD_PutInBuff_L1, TestErased_L1, CB_Next, EraseBlock_L1, ReadProgBlock_L1, ReadProgBlock_1
		WriteProgBlock_L1
SerialServo.asm   X-Ref Table                                            Page: 60
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

FERR	0002 	RX_TheByte_Err, GetChar_Err
FREE	0004 	EraseProgBlock
FSR0	0004 	ClearRam, ClearRam_2, ClearRam_L2, StoreSerIn, StoreSerOut
FSR0H	0005 	ClearRam, CopyToRam, SaveParams, DecTimer, StoreSerIn, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, ReadAN, HandleRXData_1, Cmd_GetGripI_end
		Cmd_GetAuxConfig_end, Cmd_SetAuxNDigOut, BL_ParseNextLine, BLPV_Addr, BIHD_PutInBuff_E2
FSR0L	0004 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DecTimer, GetSerIn
		GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, ReadAN_TryAN0, ReadAN_AN0
		ReadAN_AN0_3, ReadAN_AN2, HandleRXData_1, Cmd_GetGripI_end, Cmd_GetAuxConfig_end
		Cmd_SetAuxNDigOut, BL_ParseNextLine, BLPV_Addr, BIHD_PutInBuff_E2
FSR1H	0007 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, HandleRXData_1, Cmd_SetAuxConfig_end
		Cmd_SetAuxNValue_end, Cmd_GetAuxNValue_Ana, BIHD_PutInBuff_E2, BLP_WriteBuffer
		EraseSourceBuffer
FSR1L	0006 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, HandleRXData_1, Cmd_SetAuxConfig_end
		Cmd_SetAuxNValue_end, Cmd_GetAuxNValue_Ana, BIHD_PutInBuff_E2, BLP_WriteBuffer
		EraseSourceBuffer
FirstRAMParam	EncoderFlags	CopyToRam, SaveParams
FlushInBuff ^	02F2 	RS232_Parse_Error
GIE	0007 	EEWrite, EEWriteLoop, Copy7CToSig_1, InitializeIO, InitializeBLIO
GO	0001 	ReadAN0_ColdStart
GO_NOT_DONE	0001 	ReadAN
GetChar ^	1F03 	BLP_L2, GetChar, GetChar_Err
GetChar_Err ^	1F0E 	GetChar
GetSerIn ^	02E1 	RS232_Parse_Byte
GetSerInBytes ^	02F8 	MainLoop
GetSerIn_End ^	02F0 	GetSerIn
GetSerOut ^	0316 	ML_Ser_Out
GetSerOut_End ^	0325 	GetSerOut
GripIMet	ssTempFlags,4	CheckGripCurrent, DoMode4_MovPlus, DoMode4_Go, DoMode4_1
GripIOver	ssTempFlags,5	CheckGripCurrent, DoMode4_Hold, DoMode4_Go, DoMode4_1
HA_SetIt ^	01FB 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos
HA_SetItNeg ^	01F9 	Home_Absolute_2
HandleButtons ^	056E 	No_NewDataAN0
HandleRXData ^	0805 	MainLoop
HandleRXData_1 ^	080B 	HandleRXData
HandleRXData_Rtn ^	0809 	HandleRXData_1, Cmd_GetGripI_end, Cmd_SetAuxConfig_end, Cmd_GetAuxConfig_end
		Cmd_SetAuxNValue_end
HdlBtn_1 ^	057D 	HandleButtons
HdlBtn_Btn1 ^	0586 	HdlBtn_1
HdlBtn_Btn2 ^	0587 	HdlBtn_1
HdlBtn_Btn3 ^	0588 	HdlBtn_1
HdlBtn_Btn4 ^	0589 	HdlBtn_1
HdlBtn_DB ^	057A 	HandleButtons, HdlBtn_Btn1, HdlBtn_Btn2, HdlBtn_Btn3, HdlBtn_Btn4
Home_Absolute_1 ^	01AE 	ReadEncoder_2
Home_Absolute_2 ^	01BA 	ReadEncoder_2, Home_Absolute_1
Home_Absolute_3 ^	01D9 	Home_Absolute_2
Home_Here ^	0206 	ReadEncoder_2
IDString ^	0A26 	Cmd_SendIDString_L1
IHS_AddrLSB	0003 	BLP_IHS_AddrLSB
IHS_AddrMSB	0002 	BLP_IHS_AddrMSB
IHS_CSum	0006 	BLP_IHS_CSum
IHS_Data	0005 	BLP_IHS_Data
IHS_DataType	0004 	BLP_IHS_DataType
IHS_Length	0001 	BLP_L2, BLP_TestNum_2
IHT_Data	0000 	BLPV_Data
IHT_End	0001 	BLP_Validate
IHT_HighAddr	0004 	BLPV_Addr
IH_Ack	002A 	BootLoaderStart, BLP_Validate, BLPV_Data, BLPV_Addr
IH_Addr_Hi	0025 	BootLoaderStart, BLPV_Addr, BufferIHData
IH_Addr_Lo	0023 	BootLoaderStart, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BufferIHData
		BIHD_PutInBuff
IH_ByteCount	0028 	BootLoaderStart, BL_ParseNextLine, BLP_IHS_Data, BIHD_PutInBuff_E2
IH_Bytes	0027 	BootLoaderStart, BLP_SaveIH_Length, BLP_IHS_DataType, BLP_IHS_Data
IH_ErrorBadCSum	002D 	BLP_BadCSum
IH_ErrorBadLen	002B 	BLP_TestNum_2
IH_Flags	002C 	BootLoaderStart, BL_Parse, BLP_L1, BLP_TestNum_1, BLP_Validate, BufferIHData
		BIHD_PutInBuff_L1, BLP_WriteBuffer_end
IH_State	002A 	BootLoaderStart, BL_ParseNextLine, BLP_L2, BLP_TestNum, BLP_TestNum_2
		BLP_NextState, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
		BLP_IHS_CSum
IH_TempVal	002B 	BootLoaderStart, BLP_TestNum_1, BLP_TestNum_2, BLP_SaveIH_Length
		BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
IH_Type	0029 	BootLoaderStart, BLP_IHS_DataType, BLP_Validate, BLPV_Data, BLPV_Addr
INDF0	0000 	ClearRam_L2, DecTimer, StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_DALo_End
		Cmd_SetRevDir_End, Cmd_SetEnaOvrCur_End, Cmd_SetUseIdleCenter_End, Cmd_SetUseFastPWM_End
		Cmd_GetAuxConfig_end
INDF1	0001 	HandleRXData_1, Cmd_GetMax_uS_end, Cmd_GetRevDir_End, Cmd_GetSpeed_End
		Cmd_GetDeadBand_End, Cmd_GetGripI_end, Cmd_SetAuxConfig_end, Cmd_SetAuxNValue_end
INTCON	000B 	EEWrite, EEWriteLoop, Copy7CToSig_1, InitializeIO, InitializeBLIO
IRQ_Ser_End ^	00C9 	IRQ_Servo1_End
IRQ_Servo1_1 ^	0092 	Aux1DigOut_end
IRQ_Servo1_20mS ^	00A8 	IRQ_Servo1_OH
IRQ_Servo1_CalcDwell ^	00AD 	IRQ_Servo1_OH
IRQ_Servo1_Dwell ^	00C0 	Aux1DigOut_end, IRQ_Servo1_Idle
IRQ_Servo1_End ^	00C6 	Aux1DigOut_end
IRQ_Servo1_Idle ^	00B2 	IRQ_Servo1_1
IRQ_Servo1_OH ^	0099 	IRQ_Servo1_Idle
IRQ_Servo1_OL ^	00BE 	IRQ_Servo1_1
IRQ_Servo1_X ^	00C4 	IRQ_Servo1_CalcDwell
Init_AS5047D ^	020B 	InitializeIO
InitializeBLIO ^	1FB6 	BootLoaderStart
InitializeIO ^	064F 	start
LATA	010C 	LED1_Blink_end, Aux0DigOut_1, LED2_Blink_end, Aux1DigOut_1
LATB	010D 	Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L2
LED1_Bit	0002 	ProgStartVector, SystemBlink_end, LED1_NextBlink, LED1_Blink_end, Aux0DigOut_1
		Aux0DigOut_2
LED1_BlinkCount	0026 	SystemBlink_end, LED1_Blinking, LED1_Start
LED1_Blink_end ^	0042 	SystemBlink_end, LED1_Blinking
SerialServo.asm   X-Ref Table                                            Page: 61
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

LED1_Blinking ^	002E 	SystemBlink_end
LED1_Blinks	0024 	SystemBlink_end, LED1_Start, LED1_Blink_end, InitializeIO, HandleRXData_1
		Cmd_SetAuxNDigOut
LED1_Count	0028 	SystemBlink_end, LED1_Blinking, LED1_NextBlink
LED1_Lat	LATA,LED1_Bit	LED1_Blink_end, Aux0DigOut_1
LED1_NextBlink ^	003E 	LED1_Blinking
LED1_Start ^	003C 	LED1_Blinking
LED1_Tris	TRISA,LED1_Bit	ProgStartVector, SystemBlink_end, LED1_NextBlink, Aux0DigOut_2
LED2_Bit	0003 	ProgStartVector, Aux0DigOut_end, LED2_NextBlink, LED2_Blink_end, Aux1DigOut_1
		Aux1DigOut_2
LED2_BlinkCount	0027 	Aux0DigOut_end, LED2_Blinking, LED2_Start
LED2_Blink_end ^	0078 	Aux0DigOut_end, LED2_Blinking
LED2_Blinking ^	0064 	Aux0DigOut_end
LED2_Blinks	0025 	Aux0DigOut_end, LED2_Start, LED2_Blink_end
LED2_Count	0029 	Aux0DigOut_end, LED2_Blinking, LED2_NextBlink
LED2_Lat	LATA,LED2_Bit	LED2_Blink_end, Aux1DigOut_1
LED2_NextBlink ^	0074 	LED2_Blinking
LED2_Start ^	0072 	LED2_Blinking
LED2_Tris	TRISA,LED2_Bit	ProgStartVector, Aux0DigOut_end, LED2_NextBlink, Aux1DigOut_2
LEDErrorTime	000A 	ML_1
LEDFastTime	0014 	LED1_NextBlink, LED2_NextBlink
LEDTIME	0064 	LED1_Blinking, LED2_Blinking, ML_1, InitializeIO
LWLO	0005 	WriteProgBlock, WriteProgBlock_Wr
LastRAMParam	SysFlags	CopyToRam_L1, SaveParams_L1
LoadProgAddr ^	1F8A 	ReadProgBlock, EraseProgBlock, WriteProgBlock
MD3_FFwd	ssStatus,0	DM3_IdleServo, DM3_FF_1, DM3_FR_1
MD3_FRev	ssStatus,1	DM3_IdleServo, DM3_FF_1, DM3_FR_1
ML_1 ^	03C8 	MainLoop
ML_Ser_End ^	03EC 	ML_Ser_Out
ML_Ser_Out ^	03E5 	No_NewDataAN0
MSN_Done	IH_Flags,0	BootLoaderStart, BLP_L1, BLP_TestNum_1
MagEnc_HighZone	EncoderFlags,0	ReadEncoder, ReadEncoder_2
MagEnc_Homed	EncoderFlags,4	ReadEncoder, ReadEncoder_2, SaveHomePos
MagEnc_Index	EncoderFlags,2	ReadEncoder, ReadEncoder_2
MagEnc_IndexLatch	EncoderFlags,3	ReadEncoder, ReadEncoder_1, ReadEncoder_2
MagEnc_LowZone	EncoderFlags,1	ReadEncoder, ReadEncoder_1, ReadEncoder_2
MainLoop ^	03BE 	ModeReturn
ModeReturn ^	03F4 	DoModeZero, DoModeOne, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_Go
		DoModeTwo_1, DM3_IdleInactive, DM3_UpdatePos, DM3_Go, DM4_NotOverCurrent, DoMode4_Go
		DoMode4_1
ModeZeroPot	Cur_AN2	DoModeZero, DoModeOne
NOT_WPUEN	0007 	InitializeIO, InitializeBLIO
NewDataAN0	ANFlags,0	ML_1, ReadAN_TryAN0, ReadAN_AN0
No_NewDataAN0 ^	03DC 	ML_1
OERR	0001 	RX_TheByte_Err, GetChar_Err
OPTION_REG	0095 	InitializeIO, InitializeBLIO
OSCCON	0099 	InitializeIO, InitializeBLIO
OSCCON_Value	00F0 	InitializeIO, InitializeBLIO
OldAN0Value	00BB 	ML_1
OverCurrentFlag	ssTempFlags,3	CheckCurrent, DoModeTwo, DoModeThree, DoMode4
PCLATH	000A 	ProgStartVector, SaveHomePos, MainLoop, RS232_Send_S0, Cmd_GetEncAbs_end
		Cmd_SaveParams_end, Cmd_ReBoot_end, Cmd_RunBootloader_end, Cmd_SetMasterAddr_end
		StoreSerOut_S0
PEIE	0006 	InitializeIO
PIE1	0091 	InitializeIO
PIR1	0011 	ProgStartVector, Aux1DigOut_end, IRQ_Servo1_X, IRQ_Servo1_End, No_NewDataAN0
		GetChar, SendChar
POP_SerOut_End ^	0314 	StoreSerOut
PORTA	000C 	SystemBlink_end, Aux0DigOut_end, InitializeIO, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1
		InitializeBLIO
PORTB	000D 	InitializeIO, InitializeBLIO
PR2	001B 	InitializeIO
PR2_Value	007D 	InitializeIO
PROG_ADDR_HI	0021 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PROG_ADDR_LO	0020 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PS0	0000 	InitializeIO, InitializeBLIO
PS1	0001 	InitializeIO, InitializeBLIO
PS2	0002 	InitializeIO, InitializeBLIO
PSA	0003 	InitializeIO, InitializeBLIO
Param76	0076 	ReadEncoder, ReadEncoder_2, CalcParity, CalcParity_L1, CheckParity
		CheckParity_L1
Param77	0077 	DelayWuS, DelayWuS_Loop, ReadEncoder, ReadEncoder_1, ReadEncoder_2
		CalcParity, CalcParity_L1, CheckParity, CheckParity_L1, CompareBlock_L1, CB_NotBlank
Param78	0078 	ReadEncoder, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read, SPI_SendRecWord_L1
		SPI_SendRecWord_L2, CalcParity_L1, CheckParity_L1, StoreSerIn, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end
		RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_Parse_L1, RS232_ClearTXData, RS232_ClearTXData_L1
		ML_Ser_Out, CheckCurrent, CheckGripCurrent, ReadAN, ReadAN_TryAN2, ReadAN_TryAN0
		ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2, ReadAN_AN0_3, ReadAN_1, HandleRXData_1
		Cmd_SetMode_end, Cmd_GetMode_end, Cmd_SetCmdPos_end, Cmd_GetCmdPos_end, Cmd_SetMaxI_end
		Cmd_GetMaxI_end, Cmd_SetFFwd_end, Cmd_GetFFwd_end, Cmd_SetFRev_end, Cmd_GetFRev_end
		Cmd_SetMin_uS_end, Cmd_GetMin_uS_end, Cmd_SetMax_uS_end, Cmd_GetMax_uS_end, Cmd_SetRevDir_End
		Cmd_GetRevDir_End, Cmd_SetEnaOvrCur_End, Cmd_GetEnaOvrCur_End, Cmd_SetStopCenter_End
		Cmd_GetStopCenter_End, Cmd_SetSpeed_End, Cmd_GetSpeed_End, Cmd_SetUseIdleCenter_End
		Cmd_GetUseIdleCenter_End, Cmd_SetDeadBand_End, Cmd_GetDeadBand_End, Cmd_SetUseFastPWM_End
		Cmd_GetUseFastPWM_End, Cmd_SetGripI_end, Cmd_GetGripI_end, Cmd_SetAuxConfig_end
		Cmd_GetAuxConfig_end, Cmd_SetAuxNDigOut, Cmd_SetAuxNValue_end, Cmd_GetAuxNValue_Ana
		Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_end, Cmd_SetEncoderOffset_End
		Cmd_GetEncoderOffset_End, Cmd_GetI_end, Cmd_GetEnc_end, Cmd_GetEncAbs_end, Cmd_SaveParams_end
		Cmd_RestoreParams_end, Cmd_GetBattVolts_end, Cmd_GetStatus_end, Cmd_ReBoot_end
		Cmd_RunBootloader_end, Cmd_SetMasterAddr_end, Cmd_SetSlaveAddr_end, BLP_L2, BLP_TestNum
		BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_CSum, BufferIHData, CompareBlock_L1, CB_NotBlank
Param79	0079 	ReadEncoder, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_ReadReg, AS5047_Read, SPI_SendRecWord
		SPI_SendRecWord_L1, CalcParity_L1, CheckParity_L1, RS232_Send, RS232_Send_L1, DoModeOne
		CheckCurrent, CheckGripCurrent, DM3_NotOverCurrent, Cmd_SetSlaveAddr_end, Cmd_SendIDString_L1
		BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, TestErased, TestErased_L1, CompareBlock, CB_Next
		EraseSourceBuffer, EraseBlock_L1, ReadProgBlock, ReadProgBlock_L1, WriteProgBlock
SerialServo.asm   X-Ref Table                                            Page: 62
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

Param7A	007A 	ReadEncoder, ReadEncoder_2, Init_AS5047D, RS232_Send, RS232_Send_L1
		DoModeOne, DM3_NotOverCurrent
Param7B	007B 	Init_AS5047D
Param7C	007C 	DoModeZero, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_MovPlus, DoModeTwo_Go
		DM3_NotOverCurrent, DM3_UpdatePos, DM3_MovPlus, DM3_Go, DM4_NotOverCurrent, DoMode4_MovPlus
		DoMode4_Go, Copy7CToSig, Copy7CToSig_1, SetMiddlePosition, ClampInt, ClampInt_1
		ClampInt_tooLow, ClampInt_tooHigh
Param7D	007D 	DoModeZero, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_MovPlus, DoModeTwo_Go
		DM3_NotOverCurrent, DM3_UpdatePos, DM3_MovPlus, DM3_Go, DM4_NotOverCurrent, DoMode4_MovPlus
		DoMode4_Go, Copy7CToSig, Copy7CToSig_1, SetMiddlePosition, ClampInt, ClampInt_1
		ClampInt_tooLow, ClampInt_tooHigh
Param7F	007F 	ClearRam, ClearRam_2, ClearRam_L2
ParityErrFlag	AS5047D_Flags,0	ReadEncoder, CheckParity_L1
PortADDRBits	00BF 	InitializeIO, InitializeBLIO
PortAValue	0000 	InitializeIO, InitializeBLIO
PortBDDRBits	00C6 	InitializeIO, InitializeBLIO
PortBValue	0011 	InitializeIO, InitializeBLIO
ProgStartVector ^	0002 	BootLoader_End
ProgWordCount	0022 	BootLoaderStart, BIHD_PutInBuff, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
PulseSent	ssTempFlags,0	Aux1DigOut_end, DM2_NotOverCurrent, DM3_UpdatePos, DM4_NotOverCurrent
RCIE	0005 	InitializeIO
RCIF	0005 	IRQ_Servo1_End, GetChar
RCREG	0199 	RX_TheByte, RX_TheByte_Err, GetChar, GetChar_Err
RCSTA	019D 	RX_TheByte, RX_TheByte_Err, InitializeIO, GetChar, GetChar_Err, InitializeBLIO
RCSTA_Value	0090 	InitializeIO, InitializeBLIO
RD	0000 	EERead, ReadEEData, ReadProgBlock_L1
RP_DataBytes	0004 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_ClearTXData
		RS232_Send
RP_LongAddr	0000 	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Send
RS232_ClearTXData ^	0397 	RS232_Send_L1
RS232_ClearTXData_L1 ^	039F 	RS232_ClearTXData_L1
RS232_MasterAddr	0058 	RS232_Parse_SALo, RS232_Send, Cmd_RunBootloader_end
RS232_Parse ^	0327 	MainLoop
RS232_Parse_Byte ^	0332 	RS232_Parse
RS232_Parse_DALo_End ^	0369 	RS232_Parse_SALo_end
RS232_Parse_Data_end ^	037A 	RS232_Parse_DALo_End
RS232_Parse_Error ^	0395 	RS232_Parse_Sync2, RS232_Parse_Data_end
RS232_Parse_L1 ^	0388 	RS232_Parse_L1
RS232_Parse_Rtn ^	0359 	RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo_end
		RS232_Parse_DALo_End
RS232_Parse_SALo ^	0349 	RS232_Parse_Sync2
RS232_Parse_SALo_end ^	035B 	RS232_Parse_SALo
RS232_Parse_Sync2 ^	0341 	RS232_Parse_Byte
RS232_Send ^	03A4 	RS232_Send_S0
RS232_Send_L1 ^	03B3 	RS232_Send_L1
RS232_Send_S0 ^	0800 	Cmd_SetMode_end, Cmd_SetCmdPos_end, Cmd_SetMaxI_end, Cmd_SetFFwd_end
		Cmd_SetFRev_end, Cmd_SetMin_uS_end, Cmd_SetMax_uS_end, Cmd_SetRevDir_End, Cmd_SetEnaOvrCur_End
		Cmd_SetStopCenter_End, Cmd_SetSpeed_End, Cmd_SetUseIdleCenter_End, Cmd_SetDeadBand_End
		Cmd_SetUseFastPWM_End, Cmd_SetGripI_end, Cmd_SetAuxConfig_end, Cmd_GetAuxNValue_Ana
		Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1
		Cmd_GetAuxNValue_Btn2, Cmd_SetEncoderOffset_End, Cmd_GetEncoderOffset_End, Cmd_GetI_end
		Cmd_GetEnc_end, Cmd_RestoreParams_end, Cmd_GetBattVolts_end, Cmd_RunBootloader_end
		Cmd_SetMasterAddr_end
RS232_SlaveAddr	0059 	RS232_Parse_SALo_end, RS232_Send, Cmd_SetMasterAddr_end
RXByte	0035 	RX_TheByte, RX_TheByte_Err, No_NewDataAN0
RXDTSEL	0007 	InitializeIO, InitializeBLIO
RXDataIsNew	RX_Flags,1	RS232_Parse, RS232_Parse_L1, MainLoop, HandleRXData
RXDataValidFlag	RX_Flags,0	RS232_Parse, RS232_Parse_L1, HandleRXData
RXDstIsMe	RX_Flags,3	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_L1
RXSrcIsMaster	RX_Flags,2	RS232_Parse, RS232_Parse_SALo, RS232_Parse_L1
RXTimeout	0005 	RS232_Parse_Byte
RX_CSUM	00A3 	RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_Data	00AA 	RS232_Parse_Data_end, HandleRXData_1
RX_DataCount	00A2 	RS232_Parse_SALo, RS232_Parse_DALo_End
RX_DstAdd	00A5 	RS232_Parse_SALo_end
RX_Flags	00A1 	RS232_Parse, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_L1
		MainLoop, HandleRXData
RX_ParseFlags	00A0 	RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo
		RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_Parse_Error
RX_SrcAdd	00A4 	RS232_Parse_SALo
RX_TempData	00A6 	RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_TheByte ^	02C1 	IRQ_Servo1_End
RX_TheByte_Err ^	02CB 	RX_TheByte
ReadAN ^	058A 	ML_1
ReadAN0_ColdStart ^	05E6 	start, ReadAN
ReadAN_1 ^	05D9 	ReadAN_TryAN0, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2, ReadAN_AN0_3
ReadAN_AN0 ^	05B4 	ReadAN, ReadAN_TryAN0
ReadAN_AN0_1 ^	05BF 	ReadAN_AN0_3
ReadAN_AN0_2 ^	05C6 	ReadAN_AN2
ReadAN_AN0_3 ^	05CD 	ReadAN_AN2
ReadAN_AN2 ^	05D3 	ReadAN, ReadAN_TryAN2
ReadAN_Rtn ^	05EF 	ReadAN
ReadAN_TryAN0 ^	05A9 	ReadAN_TryAN2
ReadAN_TryAN2 ^	05A0 	ReadAN
ReadEEData ^	1F1A 	BootLoaderStart
ReadEncoder ^	0156 	No_NewDataAN0
ReadEncoder_1 ^	0170 	ReadEncoder
ReadEncoder_2 ^	017A 	ReadEncoder, ReadEncoder_1
ReadProgBlock ^	1F69 	BLP_WriteBuffer
ReadProgBlock_1 ^	1F79 	ReadProgBlock_L1
ReadProgBlock_L1 ^	1F6E 	ReadProgBlock_1
SDO1SEL	0006 	InitializeIO, InitializeBLIO
SMP	0007 	Init_AS5047D
SPBRGH	019C 	InitializeIO, InitializeBLIO
SPBRGL	019B 	InitializeIO, InitializeBLIO
SPI_CLK_Tris	TRISB,4	Init_AS5047D
SPI_CSn	LATB,0	Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L2
SPI_CSn_Tris	TRISB,0	Init_AS5047D
SPI_MISO_Tris	TRISB,1	Init_AS5047D
SerialServo.asm   X-Ref Table                                            Page: 63
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

SPI_MOSI_Tris	TRISA,6	Init_AS5047D
SPI_SendRecWord ^	027C 	Init_AS5047D, AS5047_ReadPos, AS5047_Read
SPI_SendRecWord_L1 ^	0281 	SPI_SendRecWord_L1
SPI_SendRecWord_L2 ^	0288 	SPI_SendRecWord_L2
SSP1BUF	0211 	SPI_SendRecWord, SPI_SendRecWord_L1, SPI_SendRecWord_L2
SSP1CON1	0215 	Init_AS5047D
SSP1CON1_Val	0022 	Init_AS5047D
SSP1STAT	0214 	Init_AS5047D, SPI_SendRecWord_L1, SPI_SendRecWord_L2
STATUS	0003 	ProgStartVector, SystemBlink_end, LED1_Blinking, LED1_Blink_end, Aux0DigOut_end
		LED2_Blinking, LED2_Blink_end, CopyToRam_L1, SaveParams_L1, DecTimer, ReadEncoder
		ReadEncoder_1, ReadEncoder_2, RX_TheByte, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse
		RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End
		RS232_Parse_Data_end, MainLoop, DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_UpdatePos
		DM3_MovPlus, DM4_NotOverCurrent, DoMode4_MovPlus, HandleButtons, ReadAN, ReadAN_TryAN2
		ReadAN_TryAN0, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2, Copy7CToSig, ClampInt, ClampInt_1
		HandleRXData_1, Cmd_SetMode_end, Cmd_GetMode_end, Cmd_SetCmdPos_end, Cmd_GetCmdPos_end
		Cmd_SetMaxI_end, Cmd_GetMaxI_end, Cmd_SetFFwd_end, Cmd_GetFFwd_end, Cmd_SetFRev_end
		Cmd_GetFRev_end, Cmd_SetMin_uS_end, Cmd_GetMin_uS_end, Cmd_SetMax_uS_end, Cmd_GetMax_uS_end
		Cmd_SetRevDir_End, Cmd_GetRevDir_End, Cmd_SetEnaOvrCur_End, Cmd_GetEnaOvrCur_End
		Cmd_SetStopCenter_End, Cmd_GetStopCenter_End, Cmd_SetSpeed_End, Cmd_GetSpeed_End
		Cmd_SetUseIdleCenter_End, Cmd_GetUseIdleCenter_End, Cmd_SetDeadBand_End, Cmd_GetDeadBand_End
		Cmd_SetUseFastPWM_End, Cmd_GetUseFastPWM_End, Cmd_SetGripI_end, Cmd_GetGripI_end
		Cmd_SetAuxConfig_end, Cmd_GetAuxConfig_end, Cmd_SetAuxNValue_end, Cmd_GetAuxNValue_Dig
		Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1, Cmd_GetAuxNValue_end, Cmd_SetEncoderOffset_End
		Cmd_GetEncoderOffset_End, Cmd_GetI_end, Cmd_GetEnc_end, Cmd_GetEncAbs_end, Cmd_SaveParams_end
		Cmd_RestoreParams_end, Cmd_GetBattVolts_end, Cmd_GetStatus_end, Cmd_ReBoot_end
		Cmd_RunBootloader_end, Cmd_SetMasterAddr_end, Cmd_SetSlaveAddr_end, Cmd_SendIDString_L1
		BootLoaderStart, BLP_L2, BLP_TestNum, BLP_TestNum_2, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB
		BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate, BLPV_Data, BLPV_Addr
		BufferIHData, BIHD_PutInBuff_L1, GetChar, TestErased_L1, CompareBlock_L1, CB_NotBlank
		WriteProgBlock_L1
SW1_Flag	SysFlags,0	SystemBlink_end, HandleButtons, HdlBtn_1, Cmd_GetAuxNValue_Btn
SW1_In	PORTA,2	SystemBlink_end, Cmd_GetAuxNValue_Dig
SW2_Flag	SysFlags,1	Aux0DigOut_end, HandleButtons, HdlBtn_1, Cmd_GetAuxNValue_Btn1
SW2_In	PORTA,3	Aux0DigOut_end, Cmd_GetAuxNValue_Dig1
SW3_Flag	SysFlags,2	HandleButtons, HdlBtn_1
SW4_Flag	SysFlags,3	HandleButtons, HdlBtn_1
SaveHomePos ^	01EC 	ReadEncoder_2
SaveParams ^	00F6 	SaveHomePos, Cmd_GetEncAbs_end, Cmd_RunBootloader_end, Cmd_SetMasterAddr_end
SaveParams_L1 ^	00FB 	SaveParams_L1
SendChar ^	1F14 	BootLoaderStart, BLP_TestNum_2, BLP_BadCSum, BLP_Validate, BLPV_Data
		BLPV_Addr, SendChar
SerFlags	0036 	TX_TheByte, RX_TheByte, No_NewDataAN0, ML_Ser_Out
Ser_Buff_Bank	2	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes, StoreSerOut, GetSerOut
Ser_In_Buff	0126 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut
Ser_In_Bytes	0120 	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes
Ser_In_InPtr	0122 	StoreSerIn, FlushInBuff
Ser_In_OutPtr	0123 	GetSerIn, FlushInBuff
Ser_Out_Buff	0146 	StoreSerOut, GetSerOut
Ser_Out_Bytes	0121 	GetSerInBytes, StoreSerOut, GetSerOut
Ser_Out_InPtr	0124 	StoreSerOut
Ser_Out_OutPtr	0125 	GetSerOut
SerialBuffer	2180 	BootLoaderStart, BL_ParseNextLine, BLPV_Addr, BIHD_PutInBuff_E2
ServoCurrent	Cur_AN0	CheckCurrent, CheckGripCurrent
ServoFastForward	004C 	DM1_FF, DM3_FF_1, Cmd_GetMaxI_end, Cmd_SetFFwd_end
ServoFastReverse	004E 	DM1_FR, DM3_FR_1, Cmd_GetFFwd_end, Cmd_SetFRev_end
ServoIdle	ssTempFlags,2	IRQ_Servo1_1, DoModeOne, DoModeTwo_1, DM3_IdleInactive, DoMode4_1
		Copy7CToSig_Done, SetMiddlePosition
ServoMax_uS	0054 	ClampInt, ClampInt_tooHigh, Cmd_GetMin_uS_end, Cmd_SetMax_uS_end
ServoMin_uS	0052 	ClampInt_1, ClampInt_tooLow, Cmd_GetFRev_end, Cmd_SetMin_uS_end
ServoOff	ssTempFlags,1	Aux1DigOut_end, StartServo, SetMiddlePosition, InitializeIO
ServoSpeed	0056 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus
		DM3_UpdatePos, DM3_Minus, DM3_MovPlus, DM3_Plus, DM4_NotOverCurrent, DoMode4_Minus
		DoMode4_MovPlus, DoMode4_Plus, Cmd_GetStopCenter_End, Cmd_SetSpeed_End
ServoStopCenter	0050 	DM3_IdleServo, Cmd_GetEnaOvrCur_End, Cmd_SetStopCenter_End
SetMiddlePosition ^	061C 	StartServo
SigOutTime	02A0 	IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, Copy7CToSig, Copy7CToSig_1
SigOutTimeH	02A1 	Copy7CToSig, Copy7CToSig_1
SourceAddHiRXd	RX_ParseFlags,3	RS232_Parse
SourceAddLoRXd	RX_ParseFlags,2	RS232_Parse, RS232_Parse_SALo
SourceBuffer	2100 	BootLoaderStart, BIHD_PutInBuff_E2, BLP_WriteBuffer, EraseSourceBuffer
StartServo ^	0605 	start
StoreSerIn ^	02D3 	No_NewDataAN0
StoreSerOut ^	0300 	RS232_Send, RS232_Send_L1, StoreSerOut_S0
StoreSerOut_S0 ^	0A3C 	Cmd_SendIDString_L1
SyncByte1RXd	RX_ParseFlags,0	RS232_Parse, RS232_Parse_Byte
SyncByte2RXd	RX_ParseFlags,1	RS232_Parse, RS232_Parse_Sync2
SysFlags	0061 	SystemBlink_end, Aux0DigOut_end, CopyToRam_L1, SaveParams_L1, HandleButtons
		HdlBtn_1, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1
SysLEDCount	0023 	ProgStartVector, SystemBlink_Std, InitializeIO
SysLED_Bit	0007 	ProgStartVector, SystemBlink_Std
SysLED_BlinkCount	0022 	SystemBlink_Std
SysLED_Blinks	0021 	ProgStartVector
SysLED_Time	0020 	SystemBlink_Std, ML_1, InitializeIO
SysLED_Tris	TRISA,SysLED_Bit	ProgStartVector, SystemBlink_Std
SysMode	0057 	ML_Ser_End, InitializeIO, HandleRXData_1, Cmd_SetMode_end
SystemBlink_Std ^	0017 	ProgStartVector
SystemBlink_end ^	001C 	ProgStartVector
SystemTick_end ^	0088 	ProgStartVector
T1CON	0018 	InitializeIO
T1CON_Val	0021 	InitializeIO
T1GCON	0019 	InitializeIO
T2CON	001C 	InitializeIO
T2CON_Value	004F 	InitializeIO
TMR0CS	0005 	InitializeIO, InitializeBLIO
TMR1GE	0007 	InitializeIO
TMR1H	0017 	StartServo
TMR1L	0016 	StartServo
TMR2IE	0001 	InitializeIO
SerialServo.asm   X-Ref Table                                            Page: 64
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

TMR2IF	0001 	ProgStartVector
TRISA	008C 	ProgStartVector, SystemBlink_Std, SystemBlink_end, LED1_NextBlink, Aux0DigOut_2
		Aux0DigOut_end, LED2_NextBlink, Aux1DigOut_2, Init_AS5047D, InitializeIO, InitializeBLIO
TRISB	008D 	Init_AS5047D, InitializeIO, InitializeBLIO
TXByte	0034 	TX_TheByte, ML_Ser_Out
TXCKSEL	0000 	InitializeIO, InitializeBLIO
TXIF	0004 	No_NewDataAN0, SendChar
TXREG	019A 	TX_TheByte, SendChar
TXSTA	019E 	InitializeIO, InitializeBLIO
TXSTA_Value	0024 	InitializeIO, InitializeBLIO
TX_ACK ^	0A3B 	HandleRXData_1, Cmd_GetMode_end, Cmd_GetCmdPos_end, Cmd_GetMaxI_end
		Cmd_GetFFwd_end, Cmd_GetFRev_end, Cmd_GetMin_uS_end, Cmd_GetMax_uS_end, Cmd_GetRevDir_End
		Cmd_GetEnaOvrCur_End, Cmd_GetStopCenter_End, Cmd_GetSpeed_End, Cmd_GetUseIdleCenter_End
		Cmd_GetDeadBand_End, Cmd_GetUseFastPWM_End, Cmd_GetGripI_end, Cmd_GetAuxConfig_end
		Cmd_SetAuxNDigOut, Cmd_GetAuxNValue_end, Cmd_GetEncAbs_end, Cmd_SaveParams_end
TX_Data	00AE 	RS232_ClearTXData, RS232_Send, HandleRXData_1
TX_TheByte ^	02B9 	No_NewDataAN0
TestErased ^	1F35 	BLP_WriteBuffer
TestErased_L1 ^	1F37 	TestErased_L1
Timer1Hi	002D 	DecTimer1, DecTimer
Timer1Lo	002C 	DecTimer, RS232_Parse, RS232_Parse_Byte
Timer2Hi	002F 	DecTimer2, DecTimer
Timer2Lo	002E 	DecTimer
Timer3Hi	0031 	DecTimer3, DecTimer
Timer3Lo	0030 	DecTimer
Timer4Hi	0033 	DecTimer4, DecTimer
Timer4Lo	0032 	DecTimer, HandleButtons, HdlBtn_DB, InitializeIO
UseAltSerialPort	0001 	InitializeBLIO
UseEEParams	0001 	ClearRam, CopyToRam
UseRS232Chksum	0001 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_Send_L1
UseRS232SendSyncBytes	0000 	RS232_Parse, RS232_Send
UseRS232SyncBytes	0001 	RS232_Parse, RS232_Parse_Byte
W	0000 	SystemBlink_Std, SystemBlink_end, LED1_Blinking, LED1_Start, LED1_Blink_end
		Aux0DigOut_end, LED2_Blinking, LED2_Start, LED2_Blink_end, IRQ_Servo1_OH, IRQ_Servo1_CalcDwell
		IRQ_Servo1_Dwell, CopyToRam_L1, SaveParams_L1, DecTimer, EERead, EEWrite, ReadEncoder
		ReadEncoder_1, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetIt, Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L1, SPI_SendRecWord_L2
		CalcParity_L1, CheckParity_L1, TX_TheByte, RX_TheByte, RX_TheByte_Err, StoreSerIn
		GetSerIn, GetSerInBytes, StoreSerOut, GetSerOut, RS232_Parse_Byte, RS232_Parse_Sync2
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
		RS232_Send, RS232_Send_L1, ML_1, No_NewDataAN0, ML_Ser_End, DoModeZero, DoModeOne
		DM1_FF, DM1_FR, CheckCurrent, CheckGripCurrent, DM2_NotOverCurrent, DoModeTwo_Minus
		DoModeTwo_MovPlus, DoModeTwo_Plus, DoModeTwo_NoSpeed, DoModeTwo_Go, DM3_NotOverCurrent
		DM3_IdleServo, DM3_FF_1, DM3_FR_1, DM3_UpdatePos, DM3_Minus, DM3_MovPlus, DM3_Plus
		DM3_NoSpeed, DM3_Go, DM4_NotOverCurrent, DoMode4_Minus, DoMode4_MovPlus, DoMode4_Plus
		DoMode4_Go, ReadAN, ReadAN_TryAN2, ReadAN_TryAN0, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2
		ReadAN_1, Copy7CToSig, Copy7CToSig_1, ClampInt, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh
		InitializeIO, HandleRXData_1, Cmd_SetMode_end, Cmd_GetMode_end, Cmd_SetCmdPos_end
		Cmd_GetCmdPos_end, Cmd_SetMaxI_end, Cmd_GetMaxI_end, Cmd_SetFFwd_end, Cmd_GetFFwd_end
		Cmd_SetFRev_end, Cmd_GetFRev_end, Cmd_SetMin_uS_end, Cmd_GetMin_uS_end, Cmd_SetMax_uS_end
		Cmd_GetMax_uS_end, Cmd_SetRevDir_End, Cmd_GetRevDir_End, Cmd_SetEnaOvrCur_End, Cmd_GetEnaOvrCur_End
		Cmd_SetStopCenter_End, Cmd_GetStopCenter_End, Cmd_SetSpeed_End, Cmd_GetSpeed_End
		Cmd_SetUseIdleCenter_End, Cmd_GetUseIdleCenter_End, Cmd_SetDeadBand_End, Cmd_GetDeadBand_End
		Cmd_SetUseFastPWM_End, Cmd_GetUseFastPWM_End, Cmd_SetGripI_end, Cmd_GetGripI_end
		Cmd_SetAuxConfig_end, Cmd_GetAuxConfig_end, Cmd_SetAuxNDigOut, Cmd_SetAuxNValue_end
		Cmd_GetAuxNValue_Ana, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_end
		Cmd_SetEncoderOffset_End, Cmd_GetEncoderOffset_End, Cmd_GetI_end, Cmd_GetEnc_end
		Cmd_GetEncAbs_end, Cmd_SaveParams_end, Cmd_RestoreParams_end, Cmd_GetBattVolts_end
		Cmd_GetStatus_end, Cmd_ReBoot_end, Cmd_RunBootloader_end, Cmd_SetMasterAddr_end
		Cmd_SetSlaveAddr_end, Cmd_SendIDString_L1, BLP_L2, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2
		BLP_SaveIH_Length, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
		BLP_IHS_CSum, BLP_Validate, BLPV_Data, BLPV_Addr, BufferIHData, BIHD_PutInBuff
		BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, GetChar, GetChar_Err, ReadEEData, CompareBlock_L1
		CB_NotBlank, ReadProgBlock_L1, LoadProgAddr, WriteProgBlock_L1
WDTCON	0097 	InitializeIO, InitializeBLIO
WPUA	020C 	InitializeIO, InitializeBLIO
WPUA5	0005 	InitializeIO, InitializeBLIO
WR	0001 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
WREG	0009 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3, CheckParity_L1
		ReadAN_1, ReadAN0_ColdStart, BIHD_PutInBuff_E2, BLP_WriteBuffer
WREN	0002 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock
		WriteProgBlock_Wr
WriteEEData ^	1F23 	BootLoaderStart
WriteEEData_L1 ^	1F30 	WriteEEData_L1
WriteProgBlock ^	1F92 	BLP_WriteBuffer
WriteProgBlock_L1 ^	1F99 	WriteProgBlock_L1
WriteProgBlock_Wr ^	1FAB 	WriteProgBlock_L1
Z	0002 	ProgStartVector, SystemBlink_end, LED1_Blinking, LED1_Blink_end, Aux0DigOut_end
		LED2_Blinking, LED2_Blink_end, CopyToRam_L1, SaveParams_L1, DecTimer, ReadEncoder
		ReadEncoder_1, ReadEncoder_2, RX_TheByte, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse
		RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End
		RS232_Parse_Data_end, MainLoop, DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_UpdatePos
		DM3_MovPlus, DM4_NotOverCurrent, DoMode4_MovPlus, HandleButtons, ReadAN, ReadAN_TryAN2
		ReadAN_TryAN0, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2, Copy7CToSig, ClampInt, ClampInt_1
		HandleRXData_1, Cmd_SetMode_end, Cmd_GetMode_end, Cmd_SetCmdPos_end, Cmd_GetCmdPos_end
		Cmd_SetMaxI_end, Cmd_GetMaxI_end, Cmd_SetFFwd_end, Cmd_GetFFwd_end, Cmd_SetFRev_end
		Cmd_GetFRev_end, Cmd_SetMin_uS_end, Cmd_GetMin_uS_end, Cmd_SetMax_uS_end, Cmd_GetMax_uS_end
		Cmd_SetRevDir_End, Cmd_GetRevDir_End, Cmd_SetEnaOvrCur_End, Cmd_GetEnaOvrCur_End
		Cmd_SetStopCenter_End, Cmd_GetStopCenter_End, Cmd_SetSpeed_End, Cmd_GetSpeed_End
		Cmd_SetUseIdleCenter_End, Cmd_GetUseIdleCenter_End, Cmd_SetDeadBand_End, Cmd_GetDeadBand_End
		Cmd_SetUseFastPWM_End, Cmd_GetUseFastPWM_End, Cmd_SetGripI_end, Cmd_GetGripI_end
		Cmd_SetAuxConfig_end, Cmd_GetAuxConfig_end, Cmd_SetAuxNValue_end, Cmd_GetAuxNValue_Dig
		Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1, Cmd_GetAuxNValue_end, Cmd_SetEncoderOffset_End
		Cmd_GetEncoderOffset_End, Cmd_GetI_end, Cmd_GetEnc_end, Cmd_GetEncAbs_end, Cmd_SaveParams_end
		Cmd_RestoreParams_end, Cmd_GetBattVolts_end, Cmd_GetStatus_end, Cmd_ReBoot_end
		Cmd_RunBootloader_end, Cmd_SetMasterAddr_end, Cmd_SetSlaveAddr_end, Cmd_SendIDString_L1
		BootLoaderStart, BLP_L2, BLP_TestNum, BLP_TestNum_2, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB
		BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate, BLPV_Data, BLPV_Addr
SerialServo.asm   X-Ref Table                                            Page: 65
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

		BufferIHData, BIHD_PutInBuff_L1, GetChar, TestErased_L1, CompareBlock_L1, CB_NotBlank
		WriteProgBlock_L1
_C	STATUS,C	DM2_NotOverCurrent, DM3_UpdatePos, DM4_NotOverCurrent
_Z	STATUS,Z	WriteProgBlock_L1
kAuxIOAnalogIn	0004 	ReadAN, ReadAN_TryAN2, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2
kAuxIODigitalOut	0003 	LED1_Blink_end, LED2_Blink_end
kAuxIOLEDBtn	0001 	SystemBlink_end, Aux0DigOut_end
kCmd_GetAuxConfig	0022 	Cmd_SetAuxConfig_end
kCmd_GetAuxNValue	0023 	Cmd_SetAuxNValue_end
kCmd_GetBattVolts	0096 	Cmd_RestoreParams_end
kCmd_GetCmdPos	0002 	Cmd_SetCmdPos_end
kCmd_GetDeadBand	000E 	Cmd_SetDeadBand_End
kCmd_GetEnaOvrCur	0009 	Cmd_SetEnaOvrCur_End
kCmd_GetEnc	0092 	Cmd_GetI_end
kCmd_GetEncAbs	0093 	Cmd_GetEnc_end
kCmd_GetEncoderOffset	0024 	Cmd_SetEncoderOffset_End
kCmd_GetFFwd	0004 	Cmd_SetFFwd_end
kCmd_GetFRev	0005 	Cmd_SetFRev_end
kCmd_GetGripI	0021 	Cmd_SetGripI_end
kCmd_GetI	0091 	Cmd_GetEncoderOffset_End
kCmd_GetMaxI	0003 	Cmd_SetMaxI_end
kCmd_GetMax_uS	0007 	Cmd_SetMax_uS_end
kCmd_GetMin_uS	0006 	Cmd_SetMin_uS_end
kCmd_GetMode	0001 	Cmd_SetMode_end
kCmd_GetRevDir	0008 	Cmd_SetRevDir_End
kCmd_GetSpeed	000C 	Cmd_SetSpeed_End
kCmd_GetStatus	0098 	Cmd_GetBattVolts_end
kCmd_GetStopCenter	000B 	Cmd_SetStopCenter_End
kCmd_GetUseFastPWM	000F 	Cmd_SetUseFastPWM_End
kCmd_GetUseIdleCenter	000D 	Cmd_SetUseIdleCenter_End
kCmd_ReBoot	0099 	Cmd_GetStatus_end
kCmd_RestoreParams	0095 	Cmd_SaveParams_end
kCmd_RunBootloader	009A 	Cmd_ReBoot_end
kCmd_SaveParams	0094 	Cmd_GetEncAbs_end
kCmd_SendIDString	00AA 	Cmd_SetSlaveAddr_end
kCmd_SetAuxConfig	00B2 	Cmd_GetGripI_end
kCmd_SetAuxNValue	00B3 	Cmd_GetAuxConfig_end
kCmd_SetCmdPos	0082 	Cmd_GetMode_end
kCmd_SetDeadBand	008E 	Cmd_GetUseIdleCenter_End
kCmd_SetEnaOvrCur	0089 	Cmd_GetRevDir_End
kCmd_SetEncoderOffset	00B4 	Cmd_GetAuxNValue_end
kCmd_SetFFwd	0084 	Cmd_GetMaxI_end
kCmd_SetFRev	0085 	Cmd_GetFFwd_end
kCmd_SetGripI	00B1 	Cmd_GetUseFastPWM_End
kCmd_SetMasterAddr	00A1 	Cmd_RunBootloader_end
kCmd_SetMaxI	0083 	Cmd_GetCmdPos_end
kCmd_SetMax_uS	0087 	Cmd_GetMin_uS_end
kCmd_SetMin_uS	0086 	Cmd_GetFRev_end
kCmd_SetMode	0081 	HandleRXData_1
kCmd_SetRevDir	0088 	Cmd_GetMax_uS_end
kCmd_SetSlaveAddr	00A2 	Cmd_SetMasterAddr_end
kCmd_SetSpeed	008C 	Cmd_GetStopCenter_End
kCmd_SetStopCenter	008B 	Cmd_GetEnaOvrCur_End
kCmd_SetUseFastPWM	008F 	Cmd_GetDeadBand_End
kCmd_SetUseIdleCenter	008D 	Cmd_GetSpeed_End
kDeadBand	0064 	InitializeBLIO
kGripI	0028 	InitializeBLIO
kGripperHC	0004 	CheckGripCurrent
kMaxMode	0004 	HandleRXData_1
kMaxPulseWidth	1068 	InitializeBLIO
kMaxT	076C 	ReadEncoder_2, Home_Absolute_2, Home_Absolute_3
kMidPulseWidth	0BB8 	SetMiddlePosition
kMinPulseWidth	0708 	InitializeBLIO
kRS232SyncByteValue	00DD 	RS232_Parse_Byte, RS232_Parse_Sync2
kRS232_MasterAddr	0001 	InitializeBLIO
kRS232_SlaveAddr	0002 	InitializeBLIO
kServoCenterStop	0B86 	InitializeBLIO
kServoDwellTime	9C40 	IRQ_Servo1_20mS, IRQ_Servo1_Idle, StartServo, SetMiddlePosition
kServoFastDwellTime	4E20 	IRQ_Servo1_OH
kServoFastForward	0BEA 	InitializeBLIO
kServoFastReverse	0B22 	InitializeBLIO
kServoSpeed	000A 	InitializeBLIO
kStandAlone	0000 	Init_AS5047D
kSysFlags	0000 	InitializeBLIO
kSysMode	0003 	InitializeBLIO
kUpper4Bits	003C 	ReadEncoder, ReadEncoder_1, ReadEncoder_2
kssFlags	0019 	InitializeBLIO
kssMaxI	0032 	InitializeBLIO
nvDeadBand	0015 	InitializeBLIO
nvEncoderFlags	0000 	InitializeBLIO, CopyToRam, SaveParams
nvEncoderHome	0001 	InitializeBLIO
nvEncoderOffset	0003 	InitializeBLIO
nvFirstParamByte	nvEncoderFlags	InitializeBLIO, CopyToRam, SaveParams
nvLastParamByte	nvSysFlags	InitializeBLIO
nvRS232_MasterAddr	0011 	InitializeBLIO
nvRS232_SlaveAddr	0012 	InitializeBLIO
nvServoFastForward	0005 	InitializeBLIO
nvServoFastReverse	0007 	InitializeBLIO
nvServoMax_uS	000D 	InitializeBLIO
nvServoMin_uS	000B 	InitializeBLIO
nvServoSpeed	000F 	InitializeBLIO
nvServoStopCenter	0009 	InitializeBLIO
nvSysFlags	001A 	InitializeBLIO
nvSysMode	0010 	InitializeBLIO
nvssAux0Config	0017 	InitializeBLIO
nvssAux1Config	0018 	InitializeBLIO
nvssAux2Config	0019 	InitializeBLIO
nvssFlags	0013 	InitializeBLIO
nvssGripI	0016 	InitializeBLIO
SerialServo.asm   X-Ref Table                                            Page: 66
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

nvssMaxI	0014 	InitializeBLIO
oldCode	0000 	DecTimer
ssAux0Config	005E 	SystemBlink_end, LED1_Blink_end, ReadAN, ReadAN_AN0, Cmd_GetGripI_end
		Cmd_SetAuxConfig_end, Cmd_GetAuxConfig_end, Cmd_SetAuxNValue_end
ssAux1Config	005F 	Aux0DigOut_end, LED2_Blink_end, ReadAN_TryAN2, ReadAN_AN0_1
ssAux2Config	0060 	ReadAN_AN0_2
ssCmdPos	0037 	DoModeTwo, DM2_NotOverCurrent, DoModeTwo_NoSpeed, DoModeThree, DM3_NotOverCurrent
		DoMode4, DM4_NotOverCurrent, InitializeIO, Cmd_GetMode_end, Cmd_SetCmdPos_end
ssCurPos	0039 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_Plus, DoModeTwo_NoSpeed
		DoModeTwo_Go, DM3_IdleServo, DM3_UpdatePos, DM3_Minus, DM3_Plus, DM3_NoSpeed, DM3_Go
		DM4_NotOverCurrent, DoMode4_Minus_1, DoMode4_Plus_1, DoMode4_Go
ssEnableFastPWM	ssFlags,4	IRQ_Servo1_OH, Cmd_GetDeadBand_End, Cmd_SetUseFastPWM_End
ssEnableOverCur	ssFlags,0	CheckCurrent, Cmd_GetRevDir_End, Cmd_SetEnaOvrCur_End
ssEncCmdError	ssStatus+1,1	ReadEncoder
ssEncParityError	ssStatus+1,0	ReadEncoder
ssFlags	005A 	IRQ_Servo1_OH, CheckCurrent, DM3_IdleServo, DM3_FF, DM3_FR, Cmd_GetMax_uS_end
		Cmd_SetRevDir_End, Cmd_GetRevDir_End, Cmd_SetEnaOvrCur_End, Cmd_GetSpeed_End, Cmd_SetUseIdleCenter_End
		Cmd_GetDeadBand_End, Cmd_SetUseFastPWM_End
ssGripI	005D 	CheckGripCurrent, Cmd_GetUseFastPWM_End, Cmd_SetGripI_end
ssGripMCur	ssStatus,5	CheckGripCurrent, Cmd_GetBattVolts_end
ssGripOCur	ssStatus,4	CheckGripCurrent, Cmd_GetBattVolts_end
ssMD3_Dest	003B 	DM3_IdleServo, DM3_FF_1, DM3_FR_1, DM3_UpdatePos, DM3_NoSpeed
ssMaxI	005B 	CheckCurrent, Cmd_GetCmdPos_end, Cmd_SetMaxI_end
ssMode3IdleCenter	ssFlags,3	DM3_IdleServo, Cmd_GetSpeed_End, Cmd_SetUseIdleCenter_End
ssRX_Timeout	ssStatus,3	RS232_Parse, Cmd_GetBattVolts_end
ssReverseDir	ssFlags,1	DM3_FF, DM3_FR, Cmd_GetMax_uS_end, Cmd_SetRevDir_End
ssStatus	003E 	ReadEncoder, RS232_Parse, ML_1, CheckGripCurrent, DoModeTwo, DM2_NotOverCurrent
		DoModeThree, DM3_NotOverCurrent, DM3_IdleServo, DM3_FF_1, DM3_FR_1, DoMode4, DM4_NotOverCurrent
		Cmd_GetBattVolts_end
ssTempFlags	003D 	Aux1DigOut_end, IRQ_Servo1_1, DoModeOne, CheckCurrent, CheckGripCurrent
		DoModeTwo, DM2_NotOverCurrent, DoModeTwo_1, DoModeThree, DM3_IdleInactive, DM3_UpdatePos
		DoMode4, DM4_NotOverCurrent, DoMode4_Hold, DoMode4_MovPlus, DoMode4_Go, DoMode4_1
		Copy7CToSig_Done, StartServo, SetMiddlePosition, InitializeIO
ssio_OverCurSD	ssStatus,2	ML_1, DoModeTwo, DM2_NotOverCurrent, DoModeThree, DM3_NotOverCurrent
		DoMode4, DM4_NotOverCurrent
start ^	03BB 	ProgStartVector
useRS232	0001 	InitializeIO
 

X-Ref Table (The UnCalled)
AS5047_ReadANGLEUNCReg !	0249 	
AS5047_ReadDIAAGCReg !	024E 	
AS5047_ReadErrorReg !	0267 	
AS5047_ReadStgs1Reg !	025D 	
AS5047_ReadStgs2Reg !	0262 	
AS5047_ReadZPOSLReg !	0258 	
AS5047_ReadZPOSMReg !	0253 	
AS5047_Write !	0219 	
Bank0_Rtn !	05EF 	
BootLoader !	1E00 	
Cmd_GetCalPot_end !	09E2 	
Delay100uS !	012A 	
Delay10uS !	0128 	
Delay40uS !	012C 	
EEReadW !	0133 	
EraseBlock !	1F60 	
GetSerOutBytes !	02FC 	
HA_SetItPos !	01F6 	
Home_Absolute !	019B 	
IRQ_Ser !	00C6 	
IRQ_Servo1 !	0088 	
POP_SerOut !	030E 	
RS232_Parse_DALo !	035B 	
RS232_Parse_Data !	0369 	
ReadAN_3 !	05EE 	
ReadAN_AN1 !	05D0 	
ReadAN_AN3 !	05D6 	
StopServo !	0621 	
SystemBlink_DoIt !	0019 	
TestT1_Zero !	0124 	
TestT2_Zero !	0120 	
TestT3_Zero !	011C 	
TestT4_Zero !	0118 	
WriteProgBlock_end !	1FB4 	
 

Memory Usage Map ('X' = Used, '-' = Unused)
 
0000  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
SerialServo.asm   Memory Usage Map                                       Page: 67
/Users/davidflynn/Projects/SerialServo/FirmwareMacroPIC Rev C PCB/

0540  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX ---------------- ----------------
0800  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A40  : X--------------- ---------------- ---------------- ----------------
1E00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1EC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1FC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX---------- ----------------
 
Program Memory Words Used:2759
Program Memory Words Free:5433
 
UserID
8000  :XXXX
 
Config
8007  :XX
 
EEPROM
F000  : XXXXXXXXXXXXXXXX XXXXXXXXXXX----- ---------------- ----------------
F0C0  : ---------------- ---------------- ---------------- ---------------X
 
Data EEPROM Bytes Used:28
Data EEPROM Bytes Free:228
