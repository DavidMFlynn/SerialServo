SerialServo.asm                                                       Page: 1
/Users/davidflynn/Projects/SerialServo/Firmware/

00001 0000 	;====================================================================================================
00002 0000 	;
00003 0000 	;    Filename:      SerialServo.asm
00004 0000 	;    Created:       4/26/2018
00005 0000 	;    File Version:  1.1b1   8/27/2020
00006 0000 	;
00007 0000 	;    Author:        David M. Flynn
00008 0000 	;    Company:       Oxford V.U.E., Inc.
00009 0000 	;    E-Mail:        dflynn@oxfordvue.com
00010 0000 	;    Web Site:      http://www.oxfordvue.com/
00011 0000 	;
00012 0000 	;====================================================================================================
00013 0000 	;    SerialServo is sample code.
00014 0000 	;    Controls a single robot arm joint using an R/C servo (SG90) modified
00015 0000 	;    for continuous rotation.  Features and configurations will be added as needed.
00016 0000 	;
00017 0000 	;    Features: 	TTL Packet Serial
00018 0000 	;	R/C Servo PWM output
00019 0000 	;	Current sensing.
00020 0000 	;	3 Buttons/LEDs for config
00021 0000 	;	Absolute magnetic encoder
00022 0000 	;
00023 0000 	;Mode 0: (LED 1 = off) servo test mode, copy AN4 Pot value x 2 + 1976 to servo PWM.
00024 0000 	;Mode 1: (LED 1 = 1 flash) servo and encoder test mode, AN4 Pot value + 950 - EncoderVal to servo dir.
00025 0000 	;Mode 2: Basic Serial Servo, output servo pulse of ssCmdPos x 0.5uS.
00026 0000 	;Mode 3: Absolute encoder position control. ssCmdPos = 0..4095
00027 0000 	;Mode 4: Gripper force control.
00028 0000 	;
00029 0000 	;    History:
00030 0000 	; 1.1b1   8/27/2020    Pulled changes from Rev C firmware 1.1b4. Mode 3 and Bootloader changes mostly.
00031 0000 	; 1.0b8   4/7/2019	Added bootloader
00032 0000 	; 1.0b7   10/3/2018	Mode 3 is working for 4-wheel rover corner pivot motors.
00033 0000 	; 1.0b6   8/18/2018	Moved analog variables to bank 1. Fast blink on error. EncoderOffset for mode3
00034 0000 	; 1.0b5   7/23/2018	Aux IO
00035 0000 	; 1.0b4   7/14/2018	Better defaults. Gripper mode (4).
00036 0000 	; 1.0b3   6/19/2018	Added ssEnableFastPWM
00037 0000 	; 1.0b2   6/3/2018	Servo current is averaged, DD DD Sync bytes and checksum.
00038 0000 	; 1.0b1   6/1/2018	Modes 2 and 3 are working. No current limit yet.
00039 0000 	; 1.0a3   5/31/2018    Added Speed, StopCenter.
00040 0000 	; 1.0a2   5/25/2018	Added some more commands.
00041 0000 	; 1.0a1   5/24/2018	It begins to work.
00042 0000 	; 1.0d1   4/26/2018	First code.
00043 0000 	;
00044 0000 	;====================================================================================================
00045 0000 	; ToDo:
00046 0000 	;
00047 0000 	;
00048 0000 	;====================================================================================================
00049 0000 	;====================================================================================================
00050 0000 	; What happens next:
00051 0000 	;   At power up the system LED will blink.
00052 0000 	;   Mode 0: (LED 1 = off) servo test mode, copy AN4 Pot value to servo.
00053 0000 	;   Mode 1: (LED 1 = 1 flash) servo  and encoder test mode, AN4 Pot value - EncoderVal to servo dir.
00054 0000 	;   Mode 2: Basic Serial Servo, output servo pulse of CmdPos * 0.5uS.
00055 0000 	;   Mode 3: Absolute encoder position control, Single rotation of encoder, Continuous rotation servo.
00056 0000 	;   Mode 4: Gripper force control.
00057 0000 	;====================================================================================================
00058 0000 	;
00059 0000 	;   Pin 1 (RA2/AN2) SW2/LED2 (Active Low Input/Output)
00060 0000 	;   Pin 2 (RA3/AN3) SW3/LED3 (Active Low Input/Output)
00061 0000 	;   Pin 3 (RA4/AN4) Calibration Pot (Analog Input)
00062 0000 	;   Pin 4 (RA5/MCLR*) VPP/MCLR*
00063 0000 	;   Pin 5 (GND) Ground
00064 0000 	;   Pin 6 (RB0) MagEnc_CSBit (Active Low Output)
00065 0000 	;   Pin 7 (RB1/AN11/SDA1) TTL Serial RX
00066 0000 	;   Pin 8 (RB2/AN10/TX) TTL Serial TX
00067 0000 	;   Pin 9 (RB3/CCP1) Pulse output for Servo
00068 0000 	;
00069 0000 	;   Pin 10 (RB4/AN8/SLC1)  MagEnc_CLKBit
00070 0000 	;   Pin 11 (RB5/AN7) Battery voltage sensing analog input
00071 0000 	;   Pin 12 (RB6/AN5/CCP2) ICSPCLK
00072 0000 	;   Pin 13 (RB7/AN6) ICSPDAT
00073 0000 	;   Pin 14 (Vcc) +5 volts
00074 0000 	;   Pin 15 (RA6) MagEnc_DataBit (Digital Input)
00075 0000 	;   Pin 16 (RA7/CCP2) LED4 (Active Low Output)(System LED)
00076 0000 	;   Pin 17 (RA0/AN0) Current sensing analog input
00077 0000 	;   Pin 18 (RA1) SW1/LED1 (Active Low Input/Output)
00078 0000 	;
00079 0000 	;====================================================================================================
00080 0000 	;
00081 0000 	;
00082 0000 		list	p=16f1847,r=hex,W=1	; list directive to define processor
00001 0000 		nolist
00002 0000 	;
00003 0000 	;==========================================================================
00004 0000 	;  MPASM PIC16F1847 processor include
00005 0000 	; 
00006 0000 	;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
00007 0000 	;  Modified by DMF 11/16/2013
00008 0000 	;==========================================================================
00009 0000 	;
01163 0000 		NOLIST
01164 0000 	;
00085 0000 		list
00086 0000 	;
00087 8007 EFA4 		__CONFIG _CONFIG1,_FOSC_INTOSC & _WDTE_OFF & _MCLRE_OFF & _IESO_OFF
00088 0000 	;
00089 0000 	;
00090 0000 	; INTOSC oscillator: I/O function on CLKIN pin
SerialServo.asm                                                       Page: 2
/Users/davidflynn/Projects/SerialServo/Firmware/

00091 0000 	; WDT disabled
00092 0000 	; PWRT disabled
00093 0000 	; MCLR/VPP pin function is digital input
00094 0000 	; Program memory code protection is disabled
00095 0000 	; Data memory code protection is disabled
00096 0000 	; Brown-out Reset enabled
00097 0000 	; CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin
00098 0000 	; Internal/External Switchover mode is disabled
00099 0000 	; Fail-Safe Clock Monitor is enabled
00100 0000 	;
00101 8008 DFFF 		__CONFIG _CONFIG2,_WRT_OFF & _PLLEN_ON & _LVP_OFF
00102 0000 	;
00103 0000 	; Write protection off
00104 0000 	; 4x PLL Enabled
00105 0000 	; Stack Overflow or Underflow will cause a Reset
00106 0000 	; Brown-out Reset Voltage (Vbor), low trip point selected.
00107 0000 	; Low-voltage programming enabled
00108 0000 	;
00109 0000 	; '__CONFIG' directive is used to embed configuration data within .asm file.
00110 0000 	; The lables following the directive are located in the respective .inc file.
00111 0000 	; See respective data sheet for additional information on configuration word.
00112 0000 	;
00113 0000 		constant	oldCode=0
00114 0000 		constant	useRS232=1
00115 0000 		constant	UseEEParams=1
00116 0000 	;
00117 0000 		constant	UseAltSerialPort=0
00118 0000 		constant	RP_LongAddr=0
00119 0000 		constant	RP_AddressBytes=1
00120 0000 		constant	RP_DataBytes=4
00121 0000 		constant	UseRS232SyncBytes=1
00122 0000 00DD 	kRS232SyncByteValue	EQU	0xDD
00123 0000 		constant	UseRS232Chksum=1
00124 0000 		constant               UsePID=0
00125 0000 	;
00126 0000 0001 	kRS232_MasterAddr	EQU	0x01	;Master's Address
00127 0000 0002 	kRS232_SlaveAddr	EQU	0x02	;This Slave's Address
00128 0000 0003 	kSysMode	EQU	.3	;Default Mode
00129 0000 0020 	Default_Kp	EQU	.32	;Fxd4.4 10*16
00130 0000 0000 	Default_Ki	EQU	0	; max gain is 255 = 15 15/16
00131 0000 0000 	Default_Kd	EQU	0
00132 0000 0004 	kGripperHC	EQU	0x04	;Gripper hysteresis
00133 0000 	;
00134 0000 0003 	#Define	_C	STATUS,C
00135 0000 0003 	#Define	_Z	STATUS,Z
00136 0000 	;
00137 0000 	;====================================================================================================
00140 0000 		nolist
00141 0000 	;
00142 0000 	;    Port A bits
00143 0000 00FF 	PortADDRBits	EQU	b'11111111'
00144 0000 0000 	PortAValue	EQU	b'00000000'
00145 0000 0011 	ANSELA_Val	EQU	b'00010001'	;RA0/AN0, RA4/AN4
00146 0000 	;
00147 0000 000C 	#Define	RA0_In	PORTA,0	;Current, Analog Input
00148 0000 000C 	#Define	SW1_In	PORTA,1	;SW1/LED1
00149 0000 000C 	#Define	SW2_In	PORTA,2	;SW2/LED2
00150 0000 000C 	#Define	SW3_In	PORTA,3	;SW3/LED3
00151 0000 000C 	#Define	RA4_In	PORTA,4	;Pot, Analog Input
00152 0000 000C 	#Define	RA5_In	PORTA,5	;VPP/MCLR*
00153 0000 000C 	#Define	RA6_In	PORTA,6	;MagEnc_DataBit
00154 0000 000C 	#Define	SW4_In	PORTA,7	;LED4 System LED
00155 0000 0001 	LED1_Bit	EQU	1	;LED1 (Active Low Output)
00156 0000 0002 	LED2_Bit	EQU	2	;LED2 (Active Low Output)
00157 0000 0003 	LED3_Bit	EQU	3	;LED3 (Active Low Output)
00158 0000 0007 	SysLED_Bit	EQU	7	;LED4 (Active Low Output)
00159 0000 008C 	#Define	LED1_Tris	TRISA,LED1_Bit	;LED1 (Active Low Output)
00160 0000 010C 	#Define	LED1_Lat	LATA,LED1_Bit	;LED1 (Active Low Output)
00161 0000 008C 	#Define	LED2_Tris	TRISA,LED2_Bit	;LED2 (Active Low Output)
00162 0000 010C 	#Define	LED2_Lat	LATA,LED2_Bit	;LED2 (Active Low Output)
00163 0000 008C 	#Define	LED3_Tris	TRISA,LED3_Bit	;LED3 (Active Low Output)
00164 0000 010C 	#Define	LED3_Lat	LATA,LED3_Bit	;LED3 (Active Low Output)
00165 0000 008C 	#Define	SysLED_Tris	TRISA,SysLED_Bit	;LED4 (Active Low Output)
00166 0000 	;
00167 0000 00F8 	Servo_AddrDataMask	EQU	0xF8
00168 0000 	;
00169 0000 	;
00170 0000 	;    Port B bits
00171 0000 00E6 	PortBDDRBits	EQU	b'11100110'	;CCP1, MagEnc_CLKBit
00172 0000 0011 	PortBValue	EQU	b'00010001'
00173 0000 0020 	ANSELB_Val	EQU	b'00100000'	;RB5/AN7
00174 0000 	;
00175 0000 000D 	#Define	RB0_In	PORTB,0	;MagEnc_CSBit (Active Low Output)
00176 0000 000D 	#Define	RB1_In	PORTB,1	;RX Serial Data
00177 0000 000D 	#Define	RB2_In	PORTB,2	;TX Serial Data
00178 0000 000D 	#Define	RB3_Out	PORTB,3	;CCP1 Output
00179 0000 000D 	#Define	RB4_In	PORTB,4	;MagEnc_CLKBit
00180 0000 000D 	#Define	RB5_In	PORTB,5	;Battery Volts, Analog Input
00181 0000 000D 	#Define	RB6_In	PORTB,6	;ICSPCLK
00182 0000 000D 	#Define	RB7_In	PORTB,7	;ICSPDAT
00183 0000 008D 	#Define	TX_TRIS	TRISB,2	;for High-Z control
00184 0000 	;
00185 0000 	;
00186 0000 	;========================================================================================
00187 0000 	;========================================================================================
00188 0000 	;
00189 0000 	;Constants
00190 0000 00FF 	All_In	EQU	0xFF
00191 0000 0000 	All_Out	EQU	0x00
SerialServo.asm                                                       Page: 3
/Users/davidflynn/Projects/SerialServo/Firmware/

00192 0000 	;
00193 0000 0009 	CCP1CON_Clr	EQU	b'00001001'
00194 0000 0008 	CCP1CON_Set	EQU	b'00001000'
00195 0000 000A 	CCP1CON_Idle	EQU	b'00001010'
00196 0000 	;
00197 0000 	;OSCCON_Value	EQU	b'01110010'	; 8 MHz
00198 0000 00F0 	OSCCON_Value	EQU	b'11110000'	;32MHz
00199 0000 	;
00200 0000 	;T2CON_Value	EQU	b'01001110'	;T2 On, /16 pre, /10 post
00201 0000 004F 	T2CON_Value	EQU	b'01001111'	;T2 On, /64 pre, /10 post
00202 0000 007D 	PR2_Value	EQU	.125
00203 0000 	;
00204 0000 0064 	LEDTIME	EQU	d'100'	;1.00 seconds
00205 0000 000A 	LEDErrorTime	EQU	d'10'
00206 0000 0014 	LEDFastTime	EQU	d'20'
00207 0000 	;
00208 0000 	;T1CON_Val	EQU	b'00000001'	;Fosc=8MHz, PreScale=1,Fosc/4,Timer ON
00209 0000 0021 	T1CON_Val	EQU	b'00100001'	;Fosc=32MHz, PreScale=4,Fosc/4,Timer ON
00210 0000 	;
00211 0000 	;TXSTA_Value	EQU	b'00100000'	;8 bit, TX enabled, Async, low speed
00212 0000 0024 	TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, high speed
00213 0000 0090 	RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00214 0000 0008 	BAUDCON_Value	EQU	b'00001000'	;BRG16=1
00215 0000 	; 8MHz clock low speed (BRGH=0,BRG16=1)
00216 0000 	;Baud_300	EQU	d'1666'	;0.299, -0.02%
00217 0000 	;Baud_1200	EQU	d'416'	;1.199, -0.08%
00218 0000 	;Baud_2400	EQU	d'207'	;2.404, +0.16%
00219 0000 	;Baud_9600	EQU	d'51'	;9.615, +0.16%
00220 0000 	; 32MHz clock low speed (BRGH=1,BRG16=1)
00221 0000 682A 	Baud_300	EQU	.26666	;300, 0.00%
00222 0000 1A0A 	Baud_1200	EQU	.6666	;1200, 0.00%
00223 0000 0D04 	Baud_2400	EQU	.3332	;2400, +0.01%
00224 0000 0340 	Baud_9600	EQU	.832	;9604, +0.04%
00225 0000 01A0 	Baud_19200	EQU	.416	;19.18k, -0.08%
00226 0000 00CF 	Baud_38400	EQU	.207	;38.46k, +0.16%
00227 0000 008A 	Baud_57600	EQU	.138	;57.55k, -0.08%
00228 0000 00CF 	BaudRate	EQU	Baud_38400
00229 0000 	;
00230 0000 9C40 	kServoDwellTime	EQU	.40000	;20mS
00231 0000 4E20 	kServoFastDwellTime	EQU	.20000	;10mS
00232 0000 000A 	kServoSpeed	EQU	.10	;Slow 5uS/Update
00233 0000 0019 	kssFlags	EQU	b'00011001'	;ssEnableFastPWM,ssMode3IdleCenter,ssEnableOverCur=true
00234 0000 0032 	kssMaxI	EQU	.50	;Low
00235 0000 0BB8 	kMidPulseWidth	EQU	.3000	;1500uS
00236 0000 	;
00237 0000 	                       if kSysMode==3
00238 0000 0064 	kMinPulseWidth	EQU	.100	;100 encoder counts
00239 0000 0F9C 	kMaxPulseWidth	EQU	.3996	;Max encoder value for ssCmdPos
00240 0000 	                       else
00243 0000 	                       endif
00244 0000 	;
00245 0000 0B81 	kServoCenterStop	EQU	.2945                  ;test value
00246 0000 0BE5 	kServoFastForward	EQU	kServoCenterStop+.100
00247 0000 0B1D 	kServoFastReverse	EQU	kServoCenterStop-.100
00248 0000 0064 	kDeadBand	EQU	.100	;100 encoder counts
00249 0000 0000 	kSysFlags	EQU	.0
00250 0000 0028 	kGripI	EQU	.40
00251 0000 	;
00252 0000 000A 	DebounceTime	EQU	.10
00253 0000 0004 	kMaxMode	EQU	.4
00254 0000 	;
00255 0000 	; AuxIO modes
00256 0000 0000 	kAuxIOnone	EQU	0x00
00257 0000 0001 	kAuxIOLEDBtn	EQU	0x01
00258 0000 0002 	kAuxIODigitalIn	EQU	0x02
00259 0000 0003 	kAuxIODigitalOut	EQU	0x03
00260 0000 0004 	kAuxIOAnalogIn	EQU	0x04
00261 0000 0005 	kAuxIOHomeSw	EQU	0x05
00262 0000 0006 	kAuxIOFwdLimit	EQU	0x06
00263 0000 0007 	kAuxIORevLimit	EQU	0x07
00264 0000 	;
00265 0000 	;================================================================================================
00266 0000 	;***** VARIABLE DEFINITIONS
00267 0000 	; there are 256 bytes of ram, Bank0 0x20..0x7F, Bank1 0xA0..0xEF, Bank2 0x120..0x16F
00268 0000 	; there are 256 bytes of EEPROM starting at 0x00 the EEPROM is not mapped into memory but
00269 0000 	;  accessed through the EEADR and EEDATA registers
00270 0000 	;================================================================================================
00271 0000 	;  Bank0 Ram 020h-06Fh 80 Bytes
00272 0000 	;
00273 0000 		cblock	0x20
00274 0000 	;
00275 0000 0020 		SysLED_Time		;sys LED time
00276 0000 0021 		SysLED_Blinks		;0=1 flash,1,2,3
00277 0000 0022 		SysLED_BlinkCount
00278 0000 0023 		SysLEDCount		;sys LED Timer tick count
00279 0000 	;
00280 0000 0024 		LED1_Blinks		;0=off,1,2,3
00281 0000 0025 		LED2_Blinks
00282 0000 0026 		LED3_Blinks
00283 0000 0027 		LED1_BlinkCount		;LED1_Blinks..0
00284 0000 0028 		LED2_BlinkCount
00285 0000 0029 		LED3_BlinkCount
00286 0000 002A 		LED1_Count		;tick count
00287 0000 002B 		LED2_Count
00288 0000 002C 		LED3_Count
00289 0000 	;
00290 0000 002D 		EEAddrTemp		;EEProm address to read or write
00291 0000 002E 		EEDataTemp		;Data to be writen to EEProm
00292 0000 	;
SerialServo.asm                                                       Page: 4
/Users/davidflynn/Projects/SerialServo/Firmware/

00293 0000 002F 		Timer1Lo		;1st 16 bit timer
00294 0000 0030 		Timer1Hi		; 50 mS RX timeiout
00295 0000 0031 		Timer2Lo		;2nd 16 bit timer
00296 0000 0032 		Timer2Hi		;
00297 0000 0033 		Timer3Lo		;3rd 16 bit timer
00298 0000 0034 		Timer3Hi		;GP wait timer
00299 0000 0035 		Timer4Lo		;4th 16 bit timer
00300 0000 0036 		Timer4Hi		; debounce timer
00301 0000 	;
00302 0000 0037 		TXByte		;Next byte to send
00303 0000 0038 		RXByte		;Last byte received
00304 0000 0039 		SerFlags
00305 0000 	;
00306 0000 	;
00307 0000 003A 		ssCmdPos:2		;Commanded position, 0=not used
00308 0000 003C 		ssCurPos:2                                    ;Servo signal in 1/2 microseconds
00309 0000 		                                              ;Mode 3: Target Position
00310 0000 003E 		ssTempFlags
00311 0000 003F 		ssStatus:4		;Status and condition flags for the user.
00312 0000 	;
00313 0000 0043 		EncoderAccum:3		;Accumulated distance
00314 0000 0046 		EncoderVal:2		;Value last read, raw 12 bit data
00315 0000 	;-----------------------
00316 0000 	;Below here are saved in eprom
00317 0000 0048 		EncoderFlags
00318 0000 0049 	                       EncoderHome:2                                 ;Absolute Home
00319 0000 004B 	                       EncoderOffset:2		;Used in mode 2 for single rotation
00320 0000 	;
00321 0000 004D 		ServoFastReverse:2                            ;ServoFastReverse is less than
00322 0000 004F 		ServoFastForward:2                            ; ServoFastForward
00323 0000 0051 		ServoStopCenter:2		;Mode 3 Idle position
00324 0000 0053 		ServoMin_uS:2
00325 0000 0055 		ServoMax_uS:2
00326 0000 0057 		ServoSpeed		;0 = off, 1..63 position change per cycle
00327 0000 	;
00328 0000 	                       if UsePID
00332 0000 		endif
00333 0000 	;
00334 0000 0058 		SysMode
00335 0000 0059 		RS232_MasterAddr
00336 0000 005A 		RS232_SlaveAddr
00337 0000 005B 		ssFlags		;Serial Servo flags
00338 0000 005C 		ssMaxI		;Max Current 0=off
00339 0000 005D 		DeadBand		;Used by Mode 2
00340 0000 005E 		ssGripI		;Gripper tension
00341 0000 005F 		ssAux0Config
00342 0000 0060 		ssAux1Config
00343 0000 0061 		ssAux2Config
00344 0000 0062 		SysFlags		;saved in eprom 0x64 must
00345 0000 				; move something to another
00346 0000 				; bank before adding anything new
00347 0000 	;
00348 0000 		endc
00349 0000 	;--------------------------------------------------------------
00350 0000 	;
00351 0000 0053 	MD3_MinCmd             equ                    ServoMin_uS
00352 0000 0055 	MD3_MaxCmd             equ                    ServoMax_uS
00353 0000 	;
00354 0000 	;---SerFlags bits---
00355 0000 0039 	#Define	DataReceivedFlag	SerFlags,1
00356 0000 0039 	#Define	DataSentFlag	SerFlags,2
00357 0000 	;
00358 0000 	;---ssTempFlags bits---
00359 0000 003E 	#Define	PulseSent	ssTempFlags,0
00360 0000 003E 	#Define	ServoOff	ssTempFlags,1
00361 0000 003E 	#Define	ServoIdle	ssTempFlags,2
00362 0000 003E 	#Define	OverCurrentFlag	ssTempFlags,3
00363 0000 003E 	#Define	GripIMet	ssTempFlags,4
00364 0000 003E 	#Define	GripIOver	ssTempFlags,5
00365 0000 	;
00366 0000 	;----ssStatus bits
00367 0000 003F 	#Define	MD3_FFwd	ssStatus,0
00368 0000 003F 	#Define	MD3_FRev	ssStatus,1
00369 0000 003F 	#Define	ssio_OverCurSD	ssStatus,2	;Servo stopped for over-current
00370 0000 003F 	#Define	ssRX_Timeout	ssStatus,3	;cleared by host read
00371 0000 003F 	#Define	ssGripOCur	ssStatus,4	;cleared by host read
00372 0000 003F 	#Define	ssGripMCur	ssStatus,5	;cleared by host read
00373 0000 	;
00374 0000 	; all bits of ssStatus+1 are cleared by a host kCmd_GetStatus command.
00375 0000 0040 	#Define	ssEncParityError	ssStatus+1,0	;cleared by host read
00376 0000 0040 	#Define	ssEncCmdError	ssStatus+1,1	;cleared by host read	
00377 0000 0040 	#Define                ssCmdPosVerified       ssStatus+1,2
00378 0000 	;
00379 0000 	;---------------
00380 0000 0048 	#Define	FirstRAMParam	EncoderFlags
00381 0000 0062 	#Define	LastRAMParam	SysFlags
00382 0000 	;
00383 0000 	;---ssFlags bits---
00384 0000 005B 	#Define	ssEnableOverCur	ssFlags,0	;disable if current is too high
00385 0000 005B 	#Define	ssReverseDir	ssFlags,1	;if set ServoFastForward<=>ServoFastReverse
00386 0000 	;
00387 0000 005B 	#Define	ssMode3IdleCenter	ssFlags,3	;0= Disable PWM, 1= output ServoStopCenter
00388 0000 005B 	#Define	ssEnableFastPWM	ssFlags,4	;0= 20mS PWM, 1= 10mS PWM
00389 0000 005B 	#Define	ssEnableAN4	ssFlags,5	;0= Mode 0,1 disabled; 1= Enabled;
00390 0000 	;
00391 0000 0062 	#Define	SW1_Flag	SysFlags,0
00392 0000 0062 	#Define	SW2_Flag	SysFlags,1
00393 0000 0062 	#Define	SW3_Flag	SysFlags,2
00394 0000 0062 	#Define	SW4_Flag	SysFlags,3
SerialServo.asm                                                       Page: 5
/Users/davidflynn/Projects/SerialServo/Firmware/

00395 0000 	;
00396 0000 	;================================================================================================
00397 0000 	;  Bank1 Ram 0A0h-0EFh 80 Bytes
00398 0000 		cblock	0x0A0
00399 0000 00A0 		RX_ParseFlags
00400 0000 00A1 		RX_Flags
00401 0000 00A2 		RX_DataCount
00402 0000 00A3 		RX_CSUM
00403 0000 00A4 		RX_SrcAdd:RP_AddressBytes
00404 0000 00A5 		RX_DstAdd:RP_AddressBytes
00405 0000 00A6 		RX_TempData:RP_DataBytes
00406 0000 00AA 		RX_Data:RP_DataBytes
00407 0000 00AE 		TX_Data:RP_DataBytes
00408 0000 	;
00409 0000 00B2 		ANFlags
00410 0000 00B3 		Cur_AN0:2		;IServo
00411 0000 00B5 		Cur_AN1:2		;SW1_LED1
00412 0000 00B7 		Cur_AN2:2		;SW2_LED2
00413 0000 00B9 		Cur_AN3:2		;SW3_LED3
00414 0000 00BB 		Cur_AN4:2		;Calibration Pot
00415 0000 00BD 		Cur_AN7:2		;Battery Volts
00416 0000 	;
00417 0000 00BF 		OldAN0Value:2
00418 0000 		endc
00419 0000 	;
00420 0000 00B3 	#Define	ServoCurrent	Cur_AN0
00421 0000 00BD 	#Define	BattVolts	Cur_AN7
00422 0000 00BB 	#Define	ModeZeroPot	Cur_AN4
00423 0000 	;
00424 0000 	;---ANFlags bits---
00425 0000 00B2 	#Define	NewDataAN0	ANFlags,0
00426 0000 00B2 	#Define	NewDataAN4	ANFlags,1
00427 0000 00B2 	#Define	NewDataAN7	ANFlags,2
00428 0000 	;
00429 0000 	;================================================================================================
00430 0000 	;  Bank2 Ram 120h-16Fh 80 Bytes
00431 0000 	;
00432 0000 0002 	#Define	Ser_Buff_Bank	2
00433 0000 	;
00434 0000 		cblock	0x120
00435 0000 0120 		Ser_In_Bytes		;Bytes in Ser_In_Buff
00436 0000 0121 		Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00437 0000 0122 		Ser_In_InPtr
00438 0000 0123 		Ser_In_OutPtr
00439 0000 0124 		Ser_Out_InPtr
00440 0000 0125 		Ser_Out_OutPtr
00441 0000 0126 		Ser_In_Buff:20
00442 0000 0146 		Ser_Out_Buff:20
00443 0000 		endc
00444 0000 	;
00445 0000 	;================================================================================================
00446 0000 	;  Bank3 Ram 1A0h-1EFh 80 Bytes
00447 0000 	; PID vars
00448 0000 		cblock	0x1A0
00449 0000 01A0 		derivCount		;This value determins how many times the Derivative term is
00450 0000 				;calculated based on each Integral term.
00451 0000 01A1 		pidOut0		;24-bit Final Result of PID for the "Plant"
00452 0000 01A2 		pidOut1
00453 0000 01A3 		pidOut2
00454 0000 01A4 		error0		;16-bit error, passed to the PID
00455 0000 01A5 		error1
00456 0000 01A6 		a_Error0		;24-bit accumulated error, used for Integral term
00457 0000 01A7 		a_Error1
00458 0000 01A8 		a_Error2
00459 0000 01A9 		p_Error0		;16-bit previous error, used for Derivative term
00460 0000 01AA 		p_Error1
00461 0000 01AB 		d_Error0		;16-bit delta error (error - previous error)
00462 0000 01AC 		d_Error1
00463 0000 	;
00464 0000 01AD 		prop0		;24-bit proportional value
00465 0000 01AE 		prop1
00466 0000 01AF 		prop2
00467 0000 01B0 		integ0		;24-bit Integral value
00468 0000 01B1 		integ1
00469 0000 01B2 		integ2
00470 0000 01B3 		deriv0		;24-bit Derivative value
00471 0000 01B4 		deriv1
00472 0000 01B5 		deriv2
00473 0000 	;
00474 0000 01B6 		pidStat1		;PID bit-status register
00475 0000 01B7 		pidStat2		;PID bit-status register2
00476 0000 	;
00477 0000 	; PIDMath
00478 0000 01B8 		PRODL
00479 0000 01B9 		PRODH
00480 0000 01BA 		AccB0		;LSB
00481 0000 01BB 		AccB1
00482 0000 01BC 		AccB2
00483 0000 01BD 		AccB3		;MSB
00484 0000 01BE 		AArgB0
00485 0000 01BF 		AArgB1
00486 0000 01C0 		AArgB2
00487 0000 01C1 		AArgB3
00488 0000 01C2 		BArgB0
00489 0000 01C3 		BArgB1
00490 0000 01C4 		BArgB2
00491 0000 01C5 		BArgB3
00492 0000 01C6 		RemB0
00493 0000 01C7 		RemB1
SerialServo.asm                                                       Page: 6
/Users/davidflynn/Projects/SerialServo/Firmware/

00494 0000 01C8 		RemB2
00495 0000 01C9 		RemB3
00496 0000 		endc
00497 0000 	;
00498 0000 	;___________________________ pidStat1 register ________________________________________________
00499 0000 	;|  bit 7   |   bit 6    |  bit 5 |    bit 4   |   bit 3    |  bit 2   |   bit 1    |  bit 0   |
00500 0000 	;| pid_sign | d_err_sign |        | p_err_sign | a_err_sign | err_sign |  a_err_z   |  err_z   |
00501 0000 	;|__________|____________|________|____________|____________|__________|____________|__________|
00502 0000 	;
00503 0000 01B6 	#Define	err_z	pidStat1,0	;error zero flag, Zero = set
00504 0000 01B6 	#Define	a_err_z	pidStat1,1	;a_error zero flag, Zero = set
00505 0000 01B6 	#Define	err_sign	pidStat1,2	;error sign flag, Pos = set/ Neg = clear
00506 0000 01B6 	#Define	a_err_sign	pidStat1,3	;a_error sign flag, Pos = set/ Neg = clear
00507 0000 01B6 	#Define	p_err_sign	pidStat1,4	;p_error sign flag, Pos = set/ Neg = clear
00508 0000 	;
00509 0000 01B6 	#Define	d_err_sign	pidStat1,6	;d_error sign flag, Pos = set/ Neg = clear
00510 0000 01B6 	#Define	pid_sign	pidStat1,7	;PID result sign flag, Pos = set/ Neg = clear
00511 0000 	;
00512 0000 	;________________________________ pidStat2 register______________________________________
00513 0000 	;| bit 7 |  bit 6  |  bit 5   |    bit 4   |   bit 3    |  bit 2    |   bit 1    |  bit 0   |
00514 0000 	;|       |         |          | error_limit| deriv_sign | BArg_sign | AArg_Sign  | d_err_z  |
00515 0000 	;|_______|_________|__________|____________|____________|___________|____________|__________|
00516 0000 	;
00517 0000 01B7 	#Define	d_err_z	pidStat2,0	;d_error zero flag, Zero = set
00518 0000 01B7 	#Define	AArg_sign	pidStat2,1	;AArg sign flag, Pos = set/ Neg = clear
00519 0000 01B7 	#Define	BArg_sign	pidStat2,2	;BArg sign flag, Pos = set/ Neg = clear
00520 0000 01B7 	#Define	deriv_sign	pidStat2,3	;deriv sign flag, Pos = set/ Neg = clear
00521 0000 01B7 	#Define	error_limit	pidStat2,4	;Error limit exceeded flag, error = set/ no error = clear
00522 0000 	;
00523 0000 	;=========================================================================================
00524 0000 	;  Bank4 Ram 220h-26Fh 80 Bytes
00525 0000 	;=========================================================================================
00526 0000 	;  Bank5 Ram 2A0h-2EFh 80 Bytes
00527 0000 	;
00528 0000 		cblock	0x2A0
00529 0000 02A0 		SigOutTime
00530 0000 02A1 		SigOutTimeH
00531 0000 02A2 		CalcdDwell
00532 0000 02A3 		CalcdDwellH
00533 0000 		endc
00534 0000 	;
00535 0000 	;=======================================================================================================
00536 0000 	;  Common Ram 70-7F same for all banks
00537 0000 	;      except for ISR_W_Temp these are used for paramiter passing and temp vars
00538 0000 	;=======================================================================================================
00539 0000 	;
00540 0000 		cblock	0x70
00541 0000 0070 		Param70
00542 0000 0071 		Param71
00543 0000 0072 		Param72
00544 0000 0073 		Param73
00545 0000 0074 		Param74
00546 0000 0075 		Param75
00547 0000 0076 		Param76
00548 0000 0077 		Param77
00549 0000 0078 		Param78
00550 0000 0079 		Param79
00551 0000 007A 		Param7A
00552 0000 007B 		Param7B
00553 0000 007C 		Param7C
00554 0000 007D 		Param7D
00555 0000 007E 		Param7E
00556 0000 007F 		Param7F
00557 0000 		endc
00558 0000 	;
00559 0000 	;=========================================================================================
00560 0000 	;Conditions
00561 0000 0080 	HasISR	EQU	0x80	;used to enable interupts 0x80=true 0x00=false
00562 0000 	;
00563 0000 	;=========================================================================================
00564 0000 	;==============================================================================================
00565 0000 	; ID Locations
00566 0000 		__idlocs	0x10b4
00567 0000 	;
00568 0000 	;==============================================================================================
00569 0000 	; EEPROM locations (NV-RAM) 0x00..0x7F (offsets)
00570 0000 	;
00571 0000 	; default values
00572 0000 		ORG	0xF000
00573 F000 0000 		de	0x00	;nvEncoderFlags
00574 F001 0000 0000 		de	0x00,0x00	;nvEncoderHome
00575 F003 0000 0000 		de	0x00,0x00	;nvEncoderOffset
00576 F005 001D 		de	low kServoFastReverse
00577 F006 000B 		de	high kServoFastReverse
00578 F007 00E5 		de	low kServoFastForward
00579 F008 000B 		de	high kServoFastForward
00580 F009 0081 		de	low kServoCenterStop	;nvServoStopCenter
00581 F00A 000B 		de	high kServoCenterStop
00582 F00B 0064 		de	low kMinPulseWidth	;nvServoMin_uS
00583 F00C 0000 		de	high kMinPulseWidth
00584 F00D 009C 		de	low kMaxPulseWidth	;nvServoMax_uS
00585 F00E 000F 		de	high kMaxPulseWidth
00586 F00F 000A 		de	kServoSpeed	;nvServoSpeed
00587 F010 		if UsePID
00591 F010 		endif
00592 F010 0003 		de	kSysMode	;nvSysMode
00593 F011 0001 		de	kRS232_MasterAddr	;nvRS232_MasterAddr, 0x0F
00594 F012 0002 		de	kRS232_SlaveAddr	;nvRS232_SlaveAddr, 0x10
00595 F013 0019 		de	kssFlags	;nvssFlags
SerialServo.asm                                                       Page: 7
/Users/davidflynn/Projects/SerialServo/Firmware/

00596 F014 0032 		de	kssMaxI	;nvssMaxI
00597 F015 0064 		de	kDeadBand	;nvDeadBand
00598 F016 0028 		de	kGripI
00599 F017 0000 		de	0x00	;ssAux0Config
00600 F018 0000 		de	0x00	;ssAux1Config
00601 F019 0000 		de	0x00	;ssAux2Config
00602 F01A 0000 		de	kSysFlags	;nvSysFlags
00603 F01B 	;
00604 F01B 		ORG	0xF0FF
00605 F0FF 0000 		de	0x00	;Skip BootLoader
00606 F100 	;
00607 F100 		cblock	0x0000
00608 F100 	;
00609 F100 0000 		nvEncoderFlags
00610 F100 0001 	                       nvEncoderHome:2
00611 F100 0003 	                       nvEncoderOffset:2
00612 F100 	;
00613 F100 0005 		nvServoFastReverse:2
00614 F100 0007 		nvServoFastForward:2
00615 F100 0009 		nvServoStopCenter:2
00616 F100 000B 		nvServoMin_uS:2
00617 F100 000D 		nvServoMax_uS:2
00618 F100 000F 		nvServoSpeed
00619 F100 	;
00620 F100 		if UsePID
00624 F100 	                       endif
00625 F100 	;
00626 F100 0010 		nvSysMode
00627 F100 0011 		nvRS232_MasterAddr
00628 F100 0012 		nvRS232_SlaveAddr
00629 F100 0013 		nvssFlags
00630 F100 0014 		nvssMaxI
00631 F100 0015 		nvDeadBand
00632 F100 0016 		nvssGripI
00633 F100 0017 		nvssAux0Config
00634 F100 0018 		nvssAux1Config
00635 F100 0019 		nvssAux2Config
00636 F100 001A 		nvSysFlags
00637 F100 		endc
00638 F100 	;
00639 F100 0000 	#Define	nvFirstParamByte	nvEncoderFlags
00640 F100 001A 	#Define	nvLastParamByte	nvSysFlags
00641 F100 	;
00642 F100 	;
00643 F100 	;==============================================================================================
00644 F100 	;============================================================================================
00645 F100 	;
00646 F100 1E00 	BootLoaderStart	EQU	0x1E00
00647 F100 	;
00648 F100 		ORG	0x000	; processor reset vector
00649 0000 319E 		movlp	BootLoaderStart
00650 0001 2E00 		goto	BootLoaderStart
00651 0002 018A 	ProgStartVector	CLRF	PCLATH
00652 0003 2A90 	  	goto	start	; go to beginning of program
00653 0004 	;
00654 0004 	;===============================================================================================
00655 0004 	; Interupt Service Routine
00656 0004 	;
00657 0004 	; we loop through the interupt service routing every 0.008192 seconds
00658 0004 	;
00659 0004 	;
00660 0004 		ORG	0x004	; interrupt vector location
00661 0004 018A 		CLRF	PCLATH
00662 0005 0188 		CLRF	BSR	; bank0
00663 0006 	;
00664 0006 	;
00665 0006 1C91 		BTFSS	PIR1,TMR2IF
00666 0007 28C0 		goto	SystemTick_end
00667 0008 	;
00668 0008 1091 		BCF	PIR1,TMR2IF	; reset interupt flag bit
00669 0009 	;------------------
00670 0009 	; These routines run 100 times per second
00671 0009 	;
00672 0009 	;------------------
00673 0009 	;Decrement timers until they are zero
00674 0009 	;
00675 0009 2142 		call	DecTimer1	;if timer 1 is not zero decrement
00676 000A 2140 		call	DecTimer2
00677 000B 213E 		call	DecTimer3
00678 000C 213C 		call	DecTimer4
00679 000D 	;
00680 000D 	;-----------------------------------------------------------------
00681 000D 	; blink LEDs
00682 000D 	;
00683 000D 	; All LEDs off
00684 000D 0021 		movlb	0x01	;bank 1
00685 000E 178C 		bsf	SysLED_Tris
00686 000F 	;
00687 000F 150C 		BSF	LED2_Tris
00688 0010 158C 		BSF	LED3_Tris
00689 0011 	;
00690 0011 	; Read Switches
00691 0011 0020 		movlb	0x00	;bank 0
00692 0012 11E2 		BCF	SW4_Flag
00693 0013 	;
00694 0013 	;	BTFSS	SW4_In	;not used in rev n/c
00695 0013 	;	BSF	SW4_Flag
00696 0013 	;--------------------
00697 0013 	; Sys LED time
SerialServo.asm                                                       Page: 8
/Users/davidflynn/Projects/SerialServo/Firmware/

00698 0013 0BA3 		DECFSZ	SysLEDCount,F	;Is it time?
00699 0014 3208 		bra	SystemBlink_end	; No, not yet
00700 0015 	;
00701 0015 08A1 		movf	SysLED_Blinks,F
00702 0016 		SKPNZ		;Standard Blinking?
00702 0016 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00703 0017 3200 		bra	SystemBlink_Std	; Yes
00704 0018 	;
00705 0018 	; custom blinking
00706 0018 	;
00707 0018 01A2 	SystemBlink_Std	CLRF	SysLED_BlinkCount
00708 0019 0820 		MOVF	SysLED_Time,W
00709 001A 00A3 	SystemBlink_DoIt	MOVWF	SysLEDCount
00710 001B 0021 		movlb	0x01	;bank 1
00711 001C 138C 		bcf	SysLED_Tris	;LED ON
00712 001D 	SystemBlink_end:
00713 001D 	;--------------------
00714 001D 	; Flash LEDs
00715 001D 0020 		movlb	0x00	;bank 0
00716 001E 085F 		movf	ssAux0Config,W
00717 001F 390F 		andlw	0x0F
00718 0020 3C01 		sublw	kAuxIOLEDBtn
00719 0021 		SKPZ
00719 0021 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00720 0022 3220 		bra	LED1_Blink_end
00721 0023 	; Get Button Value
00722 0023 0021 		movlb	0x01	;bank 1
00723 0024 148C 		BSF	LED1_Tris
00724 0025 0020 		movlb	0x00	;bank 0
00725 0026 1062 		BCF	SW1_Flag
00726 0027 1C8C 		BTFSS	SW1_In
00727 0028 1462 		BSF	SW1_Flag
00728 0029 	;
00729 0029 08A4 		movf	LED1_Blinks,F
00730 002A 		SKPZ		;LED1 active?
00730 002A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00731 002B 3203 		bra	LED1_Blinking	; Yes
00732 002C 01A7 		clrf	LED1_BlinkCount
00733 002D 01AA 		clrf	LED1_Count
00734 002E 3214 		bra	LED1_Blink_end
00735 002F 	;
00736 002F 082A 	LED1_Blinking	movf	LED1_Count,W
00737 0030 0427 		iorwf	LED1_BlinkCount,W
00738 0031 		SKPNZ		;Startup?
00738 0031 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00739 0032 320A 		bra	LED1_Start
00740 0033 	;
00741 0033 0BAA 		decfsz	LED1_Count,F	;Done w/ blink
00742 0034 320E 		bra	LED1_Blink_end	; no
00743 0035 	;
00744 0035 08A7 		movf	LED1_BlinkCount,F
00745 0036 		SKPNZ		;Done w/ cycle?
00745 0036 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00746 0037 3205 		bra	LED1_Start	; Yes
00747 0038 	;
00748 0038 0BA7 		decfsz	LED1_BlinkCount,F
00749 0039 3205 		bra	LED1_NextBlink
00750 003A 3064 		movlw	LEDTIME	;long off time
00751 003B 00AA 		movwf	LED1_Count
00752 003C 3206 		bra	LED1_Blink_end
00753 003D 	;
00754 003D 0824 	LED1_Start	movf	LED1_Blinks,W
00755 003E 00A7 		movwf	LED1_BlinkCount
00756 003F 3014 	LED1_NextBlink	movlw	LEDFastTime
00757 0040 00AA 		movwf	LED1_Count
00758 0041 	;
00759 0041 0021 		movlb	0x01
00760 0042 108C 		BCF	LED1_Tris
00761 0043 	LED1_Blink_end:
00762 0043 	;-------------
00763 0043 	;kAuxIODigitalOut
00764 0043 0020 		movlb	0x00	;bank 0
00765 0044 085F 		movf	ssAux0Config,W
00766 0045 390F 		andlw	0x0F
00767 0046 3C03 		sublw	kAuxIODigitalOut
00768 0047 		SKPZ
00768 0047 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00769 0048 320A 		bra	Aux0DigOut_end
00770 0049 	;
00771 0049 1C24 		btfss	LED1_Blinks,0
00772 004A 3203 		bra	Aux0DigOut_1
00773 004B 0022 		movlb	0x02	;bank 2
00774 004C 148C 		bsf	LED1_Lat
00775 004D 3203 		bra	Aux0DigOut_2
00776 004E 	;
00777 004E 0022 	Aux0DigOut_1	movlb	0x02	;bank 2
00778 004F 108C 		bcf	LED1_Lat
00779 0050 3200 		bra	Aux0DigOut_2
00780 0051 	;
00781 0051 0021 	Aux0DigOut_2	movlb	0x01	;bank 1
00782 0052 108C 		BCF	LED1_Tris
00783 0053 	Aux0DigOut_end:
00784 0053 	;-------------
00785 0053 0020 		movlb	0x00	;bank 0
00786 0054 0860 		movf	ssAux1Config,W
00787 0055 390F 		andlw	0x0F
00788 0056 3C01 		sublw	kAuxIOLEDBtn
00789 0057 		SKPZ
00789 0057 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
SerialServo.asm                                                       Page: 9
/Users/davidflynn/Projects/SerialServo/Firmware/

00790 0058 3220 		bra	LED2_Blink_end
00791 0059 	; Get Button Value
00792 0059 0021 		movlb	0x01	;bank 1
00793 005A 150C 		BSF	LED2_Tris
00794 005B 0020 		movlb	0x00	;bank 0
00795 005C 10E2 		BCF	SW2_Flag
00796 005D 1D0C 		BTFSS	SW2_In
00797 005E 14E2 		BSF	SW2_Flag
00798 005F 	;
00799 005F 08A5 		movf	LED2_Blinks,F
00800 0060 		SKPZ		;LED2 active?
00800 0060 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00801 0061 3203 		bra	LED2_Blinking	; Yes
00802 0062 01A8 		clrf	LED2_BlinkCount
00803 0063 01AB 		clrf	LED2_Count
00804 0064 3214 		bra	LED2_Blink_end
00805 0065 	;
00806 0065 082B 	LED2_Blinking	movf	LED2_Count,W
00807 0066 0428 		iorwf	LED2_BlinkCount,W
00808 0067 		SKPNZ		;Startup?
00808 0067 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00809 0068 320A 		bra	LED2_Start
00810 0069 	;
00811 0069 0BAB 		decfsz	LED2_Count,F	;Done w/ blink
00812 006A 320E 		bra	LED2_Blink_end	; no
00813 006B 	;
00814 006B 08A8 		movf	LED2_BlinkCount,F
00815 006C 		SKPNZ		;Done w/ cycle?
00815 006C 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00816 006D 3205 		bra	LED2_Start	; Yes
00817 006E 	;
00818 006E 0BA8 		decfsz	LED2_BlinkCount,F
00819 006F 3205 		bra	LED2_NextBlink
00820 0070 3064 		movlw	LEDTIME	;long off time
00821 0071 00AB 		movwf	LED2_Count
00822 0072 3206 		bra	LED2_Blink_end
00823 0073 	;
00824 0073 0825 	LED2_Start	movf	LED2_Blinks,W
00825 0074 00A8 		movwf	LED2_BlinkCount
00826 0075 3014 	LED2_NextBlink	movlw	LEDFastTime
00827 0076 00AB 		movwf	LED2_Count
00828 0077 	;
00829 0077 0021 		movlb	0x01
00830 0078 110C 		BCF	LED2_Tris
00831 0079 	LED2_Blink_end:
00832 0079 	;-------------
00833 0079 	;kAuxIODigitalOut
00834 0079 0020 		movlb	0x00	;bank 0
00835 007A 0860 		movf	ssAux1Config,W
00836 007B 390F 		andlw	0x0F
00837 007C 3C03 		sublw	kAuxIODigitalOut
00838 007D 		SKPZ
00838 007D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00839 007E 320A 		bra	Aux1DigOut_end
00840 007F 	;
00841 007F 1C25 		btfss	LED2_Blinks,0
00842 0080 3203 		bra	Aux1DigOut_1
00843 0081 0022 		movlb	0x02	;bank 2
00844 0082 150C 		bsf	LED2_Lat
00845 0083 3203 		bra	Aux1DigOut_2
00846 0084 	;
00847 0084 0022 	Aux1DigOut_1	movlb	0x02	;bank 2
00848 0085 110C 		bcf	LED2_Lat
00849 0086 3200 		bra	Aux1DigOut_2
00850 0087 	;
00851 0087 0021 	Aux1DigOut_2	movlb	0x01	;bank 1
00852 0088 110C 		BCF	LED2_Tris
00853 0089 	Aux1DigOut_end:
00854 0089 	;-------------
00855 0089 0020 		movlb	0x00	;bank 0
00856 008A 0861 		movf	ssAux2Config,W
00857 008B 390F 		andlw	0x0F
00858 008C 3C01 		sublw	kAuxIOLEDBtn
00859 008D 		SKPZ
00859 008D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00860 008E 3221 		bra	LED3_Blink_end
00861 008F 	; Get Button Value
00862 008F 0021 		movlb	0x01	;bank 1
00863 0090 158C 		BSF	LED3_Tris
00864 0091 0020 		movlb	0x00	;bank 0
00865 0092 1162 		BCF	SW3_Flag
00866 0093 1D8C 		BTFSS	SW3_In
00867 0094 1562 		BSF	SW3_Flag
00868 0095 	;
00869 0095 08A6 		movf	LED3_Blinks,F
00870 0096 		SKPZ		;LED3 active?
00870 0096 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00871 0097 3203 		bra	LED3_Blinking	; Yes
00872 0098 01A9 		clrf	LED3_BlinkCount
00873 0099 01AC 		clrf	LED3_Count
00874 009A 3215 		bra	LED3_Blink_end
00875 009B 	;
00876 009B 082C 	LED3_Blinking	movf	LED3_Count,W
00877 009C 0429 		iorwf	LED3_BlinkCount,W
00878 009D 		SKPNZ		;Startup?
00878 009D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00879 009E 320A 		bra	LED3_Start
00880 009F 	;
00881 009F 0BAC 		decfsz	LED3_Count,F	;Done w/ blink
SerialServo.asm                                                       Page: 10
/Users/davidflynn/Projects/SerialServo/Firmware/

00882 00A0 320F 		bra	LED3_Blink_end	; no
00883 00A1 	;
00884 00A1 08A9 		movf	LED3_BlinkCount,F
00885 00A2 		SKPNZ		;Done w/ cycle?
00885 00A2 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00886 00A3 3205 		bra	LED3_Start	; Yes
00887 00A4 	;
00888 00A4 0BA9 		decfsz	LED3_BlinkCount,F
00889 00A5 3205 		bra	LED3_NextBlink
00890 00A6 3064 		movlw	LEDTIME	;long off time
00891 00A7 00AC 		movwf	LED3_Count
00892 00A8 3207 		bra	LED3_Blink_end
00893 00A9 	;
00894 00A9 0826 	LED3_Start	movf	LED3_Blinks,W
00895 00AA 00A9 		movwf	LED3_BlinkCount
00896 00AB 3014 	LED3_NextBlink	movlw	LEDFastTime
00897 00AC 00AC 		movwf	LED3_Count
00898 00AD 	;
00899 00AD 0021 		movlb	0x01
00900 00AE 118C 		BCF	LED3_Tris
00901 00AF 0020 		movlb	0x00
00902 00B0 	LED3_Blink_end:
00903 00B0 	;-------------
00904 00B0 	;kAuxIODigitalOut
00905 00B0 0020 		movlb	0x00	;bank 0
00906 00B1 0861 		movf	ssAux2Config,W
00907 00B2 390F 		andlw	0x0F
00908 00B3 3C03 		sublw	kAuxIODigitalOut
00909 00B4 		SKPZ
00909 00B4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00910 00B5 320A 		bra	Aux2DigOut_end
00911 00B6 	;
00912 00B6 1C26 		btfss	LED3_Blinks,0
00913 00B7 3203 		bra	Aux2DigOut_1
00914 00B8 0022 		movlb	0x02	;bank 2
00915 00B9 158C 		bsf	LED3_Lat
00916 00BA 3203 		bra	Aux2DigOut_2
00917 00BB 	;
00918 00BB 0022 	Aux2DigOut_1	movlb	0x02	;bank 2
00919 00BC 118C 		bcf	LED3_Lat
00920 00BD 3200 		bra	Aux2DigOut_2
00921 00BE 	;
00922 00BE 0021 	Aux2DigOut_2	movlb	0x01	;bank 1
00923 00BF 118C 		BCF	LED3_Tris
00924 00C0 	Aux2DigOut_end:
00925 00C0 	;-------------
00926 00C0 	;
00927 00C0 	;
00928 00C0 	SystemTick_end:
00929 00C0 	;
00930 00C0 	;==================================================================================
00931 00C0 	;
00932 00C0 	; Handle CCP1 Interupt Flag, Enter w/ bank 0 selected
00933 00C0 	;
00934 00C0 0020 	IRQ_Servo1	MOVLB	0	;bank 0
00935 00C1 1D11 		BTFSS	PIR1,CCP1IF
00936 00C2 323B 		bra	IRQ_Servo1_End
00937 00C3 	;
00938 00C3 143E 		bsf	PulseSent	;ok to update CurPos
00939 00C4 	;
00940 00C4 1CBE 		BTFSS	ServoOff	;Are we sending a pulse?
00941 00C5 3204 		bra	IRQ_Servo1_1	; Yes
00942 00C6 	;
00943 00C6 	;Servo is off, idle CCP1 and keep output low
00944 00C6 0025 		MOVLB	0x05	;Bank 5
00945 00C7 300A 		movlw	CCP1CON_Idle
00946 00C8 0093 		movwf	CCP1CON
00947 00C9 322E 		bra	IRQ_Servo1_Dwell
00948 00CA 	;
00949 00CA 193E 	IRQ_Servo1_1	btfsc	ServoIdle
00950 00CB 321E 		bra	IRQ_Servo1_Idle
00951 00CC 0025 		MOVLB	0x05	;Bank 5
00952 00CD 1893 		BTFSC	CCP1CON,CCP1M1	;Idling?
00953 00CE 3227 		bra	IRQ_Servo1_OL	; Yes, go high after dwell
00954 00CF 1813 		BTFSC	CCP1CON,CCP1M0	;Cleared output on match?
00955 00D0 3225 		bra	IRQ_Servo1_OL	; No
00956 00D1 	; An output just went high
00957 00D1 	;
00958 00D1 0820 	IRQ_Servo1_OH	MOVF	SigOutTime,W	;Put the pulse into the CCP reg.
00959 00D2 0791 		ADDWF	CCPR1L,F
00960 00D3 0821 		MOVF	SigOutTime+1,W
00961 00D4 3D92 		ADDWFC	CCPR1H,F
00962 00D5 3009 		MOVLW	CCP1CON_Clr	;Clear output on match
00963 00D6 0093 		MOVWF	CCP1CON	;CCP1 clr on match
00964 00D7 	;Calculate dwell time
00965 00D7 0020 		movlb	0	;bank 0
00966 00D8 1E5B 		btfss	ssEnableFastPWM
00967 00D9 3206 		bra	IRQ_Servo1_20mS
00968 00DA 0025 		movlb	5	;Bank 5
00969 00DB 3020 		MOVLW	LOW kServoFastDwellTime
00970 00DC 00A2 		MOVWF	CalcdDwell
00971 00DD 304E 		MOVLW	HIGH kServoFastDwellTime
00972 00DE 00A3 		MOVWF	CalcdDwellH
00973 00DF 3205 		bra	IRQ_Servo1_CalcDwell
00974 00E0 	;
00975 00E0 0025 	IRQ_Servo1_20mS	movlb	5	;Bank 5
00976 00E1 3040 		MOVLW	LOW kServoDwellTime
00977 00E2 00A2 		MOVWF	CalcdDwell
00978 00E3 309C 		MOVLW	HIGH kServoDwellTime
SerialServo.asm                                                       Page: 11
/Users/davidflynn/Projects/SerialServo/Firmware/

00979 00E4 00A3 		MOVWF	CalcdDwellH
00980 00E5 	;
00981 00E5 0820 	IRQ_Servo1_CalcDwell	MOVF	SigOutTime,W
00982 00E6 02A2 		SUBWF	CalcdDwell,F
00983 00E7 0821 		MOVF	SigOutTime+1,W
00984 00E8 3BA3 		SUBWFB	CalcdDwellH,F
00985 00E9 3212 		bra	IRQ_Servo1_X
00986 00EA 	;
00987 00EA 0025 	IRQ_Servo1_Idle	MOVLB	0x05
00988 00EB 1893 		BTFSC	CCP1CON,CCP1M1	;Idling?
00989 00EC 320B 		bra	IRQ_Servo1_Dwell	; yes, continue idling.
00990 00ED 1C13 		BTFSS	CCP1CON,CCP1M0	;Just went low?
00991 00EE 33E2 		bra	IRQ_Servo1_OH	; No, finish pulse
00992 00EF 300A 		movlw	CCP1CON_Idle	; Yes, start idling
00993 00F0 0093 		movwf	CCP1CON
00994 00F1 3040 		MOVLW	LOW kServoDwellTime
00995 00F2 00A2 		MOVWF	CalcdDwell
00996 00F3 309C 		MOVLW	HIGH kServoDwellTime
00997 00F4 00A3 		MOVWF	CalcdDwellH
00998 00F5 3202 		bra	IRQ_Servo1_Dwell
00999 00F6 	;
01000 00F6 	; output went low so this cycle is done
01001 00F6 3008 	IRQ_Servo1_OL	MOVLW	CCP1CON_Set	;Set output on match
01002 00F7 0093 		MOVWF	CCP1CON
01003 00F8 	;
01004 00F8 0822 	IRQ_Servo1_Dwell	MOVF	CalcdDwell,W
01005 00F9 0791 		ADDWF	CCPR1L,F
01006 00FA 0823 		MOVF	CalcdDwellH,W
01007 00FB 3D92 		ADDWFC	CCPR1H,F
01008 00FC 	;
01009 00FC 0020 	IRQ_Servo1_X	MOVLB	0x00
01010 00FD 1111 		BCF	PIR1,CCP1IF
01011 00FE 	IRQ_Servo1_End:
01012 00FE 	;-----------------------------------------------------------------------------------------
01013 00FE 	;AUSART Serial ISR
01014 00FE 	;
01015 00FE 1E91 	IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
01016 00FF 3201 		BRA	IRQ_Ser_End
01017 0100 2196 		CALL	RX_TheByte
01018 0101 	;
01019 0101 	IRQ_Ser_End:
01020 0101 	;-----------------------------------------------------------------------------------------
01021 0101 0009 		retfie		; return from interrupt
01022 0102 	;
01023 0102 	;
01024 0102 	;=========================================================================================
01025 0102 	;*****************************************************************************************
01026 0102 	;=========================================================================================
01027 0102 	;
01028 0102 		include <F1847_Common.inc>
00001 0102 	;=========================================================================================
00002 0102 	; Commonly used routines PIC16F1847 version
00003 0102 	;
00004 0102 	;    Filename:      F1847 Common.inc
00005 0102 	;    Date:          4/6/2019
00006 0102 	;    File Version:  1.0.2
00007 0102 	;
00008 0102 	;    Author:        David M. Flynn
00009 0102 	;    Company:       Oxford V.U.E., Inc.
00010 0102 	;    E-Mail:        dflynn@oxfordvue.com
00011 0102 	;    Web Site:      http://www.oxfordvue.com/
00012 0102 	;
00013 0102 	;=========================================================================================
00014 0102 	;    History:
00015 0102 	;
00016 0102 	; 1.0.2  4/6/2019	Fixes to EERead/EEwrite
00017 0102 	; 1.0.2 2/16/2019	Fix: added FSR0H to DecTimer.
00018 0102 	; 1.0.1 11/21/2015	Updates DecTimer.
00019 0102 	; 1.0   11/16/2013	Updated from F648A Common.inc
00020 0102 	;
00021 0102 	;=========================================================================================
00022 0102 	; Routines:
00023 0102 	;
00024 0102 	; ClearRam	(2+0) Clears all RAM, call once before initializing variables, FSR0
00025 0102 	; CopyToRam	(1+0) copy param memory (EEPROM) to ram, call once, FSR0
00026 0102 	; SaveParams	(1+0) copy ram to param memory (EEPROM), FSR0
00027 0102 	;
00028 0102 	;  Set FSR0H before calling these routines
00029 0102 	; DecTimer4	(0+0) Decrement routine for 16 bit timers, FSR0
00030 0102 	; DecTimer3
00031 0102 	; DecTimer2
00032 0102 	; DecTimer1
00033 0102 	; DecTimer	(0+0) High byte of counter address in W
00034 0102 	;
00035 0102 	; TestT4_Zero	Test for 16 bit timers = zero
00036 0102 	; TestT3_Zero	If Timer is zero return Z flag,1 else Z=0
00037 0102 	; TestT2_Zero
00038 0102 	; TestT1_Zero
00039 0102 	;
00040 0102 	; Delay10uS	(0+0)Delay uS    1 cycle = 1uS, 8Mhz clock version
00041 0102 	; Delay100uS
00042 0102 	; Delay40uS
00043 0102 	; DelayWuS
00044 0102 	;
00045 0102 	; EEReadW	(0+0) Read EEPROM address in W
00046 0102 	; EERead	(0+0) Read EEPROM address in EEAddrTemp
00047 0102 	; EEWriteW	(0+0) Write EEPROM address in W, Data in EEDataTemp
00048 0102 	; EEWrite	(0+0) Write EEPROM address in EEAdrTemp, Data in EEDataTemp, FSR0
00049 0102 	;
SerialServo.asm                                                       Page: 12
/Users/davidflynn/Projects/SerialServo/Firmware/

00050 0102 	;=========================================================================================
00051 0102 		ifndef UseEEParams
00053 0102 		endif
00054 0102 	;=========================================================================================
00055 0102 	; Clears all RAM
00056 0102 	; Entry: none
00057 0102 	; Exit: none
00058 0102 	; RAM used: All
00059 0102 	; Calls:(2+0) ClearRam_L2
00060 0102 	;
00061 0102 0020 	ClearRam	MOVLB	0x00
00062 0103 305F 		MOVLW	0x5F	;Clear 20h-7Eh, 95 bytes
00063 0104 00FF 		MOVWF	Param7F
00064 0105 3020 		MOVLW	0x20
00065 0106 0084 		MOVWF	FSR0
00066 0107 0185 		CLRF	FSR0H
00067 0108 211C 		CALL	ClearRam_L2
00068 0109 	;
00069 0109 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00070 010A 00FF 		MOVWF	Param7F
00071 010B 30A0 		MOVLW	0xA0
00072 010C 0084 		MOVWF	FSR0
00073 010D 211C 		CALL	ClearRam_L2
00074 010E 	;
00075 010E 0A85 		INCF	FSR0H,F	
00076 010F 2113 		CALL	ClearRam_2	;Banks 2,3
00077 0110 0A85 		INCF	FSR0H,F	
00078 0111 2113 		CALL	ClearRam_2	;Banks 4,5
00079 0112 0A85 		INCF	FSR0H,F	;Banks 6,7
00080 0113 	;	
00081 0113 3050 	ClearRam_2	MOVLW	0x50	;Clear 120h-16Fh, 80 bytes
00082 0114 00FF 		MOVWF	Param7F
00083 0115 3020 		MOVLW	0x20
00084 0116 0084 		MOVWF	FSR0
00085 0117 211C 		CALL	ClearRam_L2
00086 0118 	;
00087 0118 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00088 0119 00FF 		MOVWF	Param7F
00089 011A 30A0 		MOVLW	0xA0
00090 011B 0084 		MOVWF	FSR0
00091 011C 	;
00092 011C 0180 	ClearRam_L2	CLRF	INDF0
00093 011D 0A84 		INCF	FSR0,F
00094 011E 0BFF 		DECFSZ	Param7F,F
00095 011F 33FC 		bra	ClearRam_L2
00096 0120 0008 		RETURN
00097 0121 	;
00098 0121 		if UseEEParams
00099 0121 	;==========================================================================
00100 0121 	; copy param memory to ram
00101 0121 	;
00102 0121 3000 	CopyToRam	MOVLW	nvFirstParamByte
00103 0122 00AD 		MOVWF	EEAddrTemp
00104 0123 3048 		MOVLW	FirstRAMParam
00105 0124 0084 		MOVWF	FSR0L
00106 0125 0185 		CLRF	FSR0H
00107 0126 216C 	CopyToRam_L1	CALL	EERead
00108 0127 001A 		movwi	FSR0++
00109 0128 0AAD 		INCF	EEAddrTemp,F
00110 0129 3063 		MOVLW	LastRAMParam+1
00111 012A 0204 		SUBWF	FSR0L,W
00112 012B 		SKPZ
00112 012B 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00113 012C 33F9 		BRA	CopyToRam_L1
00114 012D 0008 		RETURN
00115 012E 	;
00116 012E 	;===========================================================================
00117 012E 	; copy ram to param memory
00118 012E 	;
00119 012E 3000 	SaveParams	MOVLW	nvFirstParamByte
00120 012F 00AD 		MOVWF	EEAddrTemp
00121 0130 3048 		MOVLW	FirstRAMParam
00122 0131 0084 		MOVWF	FSR0L
00123 0132 0185 		CLRF	FSR0H
00124 0133 0012 	SaveParams_L1	moviw	FSR0++
00125 0134 00AE 		MOVWF	EEDataTemp
00126 0135 2176 		CALL	EEWrite
00127 0136 0AAD 		INCF	EEAddrTemp,F
00128 0137 3063 		MOVLW	LastRAMParam+1	;last byte
00129 0138 0204 		SUBWF	FSR0L,W
00130 0139 		SKPZ
00130 0139 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00131 013A 33F8 		BRA	SaveParams_L1
00132 013B 0008 		RETURN
00133 013C 	;
00134 013C 		endif
00135 013C 	;=====================================================================================================
00136 013C 	;=========================================================================================================
00137 013C 	; Decrement routine for 16 bit timers
00138 013C 	; Set FSR0H before calling these routines.
00139 013C 	;
00140 013C 3036 	DecTimer4	movlw	Timer4Hi
00141 013D 3205 		bra	DecTimer
00142 013E 3034 	DecTimer3	movlw	Timer3Hi
00143 013F 3203 		bra	DecTimer
00144 0140 3032 	DecTimer2	movlw	Timer2Hi
00145 0141 3201 		bra	DecTimer
00146 0142 3030 	DecTimer1	movlw	Timer1Hi
00147 0143 	;DecTimer
SerialServo.asm                                                       Page: 13
/Users/davidflynn/Projects/SerialServo/Firmware/

00148 0143 	; entry: FSR=Timer(n)Hi
00149 0143 0084 	DecTimer	MOVWF	FSR0L
00150 0144 3000 		movlw	High Timer4Hi
00151 0145 0085 		movwf	FSR0H
00152 0146 0013 		MOVIW	FSR0--	;TimerNHi
00153 0147 0400 		IORWF	INDF0,W	;TimerNLo
00154 0148 		SKPNZ
00154 0148 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00155 0149 0008 		RETURN
00156 014A 3001 		MOVLW	0x01
00157 014B 0280 		SUBWF	INDF0,F	;TimerNLo
00158 014C 0A84 		INCF	FSR0L,F
00159 014D 0103 		CLRW
00160 014E 3B80 		SUBWFB	INDF0,F	;TimerNHi
00161 014F 0008 		RETURN
00162 0150 	;
00163 0150 	;==============================================================================================
00164 0150 	; Test for 16 bit timers = zero
00165 0150 	;If Timer is zero return Z flag,1 else Z=0
00166 0150 	;
00167 0150 0020 	TestT4_Zero	movlb	0
00168 0151 0835 		movf	Timer4Lo,W
00169 0152 0436 		iorwf	Timer4Hi,W
00170 0153 0008 		return
00171 0154 	;
00172 0154 0020 	TestT3_Zero	movlb	0
00173 0155 0833 		movf	Timer3Lo,W
00174 0156 0434 		iorwf	Timer3Hi,W
00175 0157 0008 		return
00176 0158 	;
00177 0158 0020 	TestT2_Zero	movlb	0
00178 0159 0831 		movf	Timer2Lo,W
00179 015A 0432 		iorwf	Timer2Hi,W
00180 015B 0008 		return
00181 015C 	;
00182 015C 0020 	TestT1_Zero	movlb	0
00183 015D 082F 		movf	Timer1Lo,W
00184 015E 0430 		iorwf	Timer1Hi,W
00185 015F 0008 		return	
00186 0160 	;
00187 0160 		if oldCode
00203 0160 		endif
00204 0160 	;======================================================================================
00205 0160 	;Delay uS    1 cycle = .125uS, 32MHz clock version
00206 0160 	; RAM used: Param77
00207 0160 	; Calls:(0) none
00208 0160 	;
00209 0160 3005 	Delay10uS	MOVLW	0x05	;(2*3+5)/2=10
00210 0161 3203 		bra	DelayWuS
00211 0162 3041 	Delay100uS	MOVLW	d'65'	;(28*3+5)/2=100
00212 0163 3201 		bra	DelayWuS
00213 0164 3019 	Delay40uS	MOVLW	d'25'	;(11*3+5)=40
00214 0165 00F7 	DelayWuS	MOVWF	Param77
00215 0166 0000 	DelayWuS_Loop	nop
00216 0167 0000 		nop
00217 0168 0BF7 		DECFSZ	Param77,F
00218 0169 33FC 		bra	DelayWuS_Loop
00219 016A 0008 		RETURN
00220 016B 	;==============================================================================================
00221 016B 	; Read EEPROM
00222 016B 	; entry: EEPROM address to read in W
00223 016B 	;        Bank 0 selected
00224 016B 	; exit: W=EEDATA, Bank 0 selected
00225 016B 	;
00226 016B 00AD 	EEReadW	movwf	EEAddrTemp
00227 016C 	;
00228 016C 	;==============================================================================================
00229 016C 	; Read EEPROM
00230 016C 	; entry: EEPROM address to read in EEAddrTemp
00231 016C 	;        Bank 0 selected
00232 016C 	; exit: W=EEDATA, Bank 0 selected
00233 016C 	;
00234 016C 082D 	EERead	movf	EEAddrTemp,W
00235 016D 0023 		MOVLB	0x03	;Bank 3
00236 016E 0091 		movwf	EEADR	;Address to read
00237 016F 1315 		bcf	EECON1,CFGS	;not config mem
00238 0170 1395 		bcf	EECON1,EEPGD	;Data memory
00239 0171 1415 		bsf	EECON1,RD
00240 0172 0813 		movf	EEDAT,W	;W=EEDAT
00241 0173 0020 		MOVLB	0x00	;Bank 0
00242 0174 0008 		return
00243 0175 	;
00244 0175 	;==============================================================================================
00245 0175 	; Write EEPROM
00246 0175 	; entry: EEPROM address to write in W
00247 0175 	;        EEPROM data to write in EEDataTemp
00248 0175 	;        Bank 0 selected
00249 0175 	; exit: Bank 0 selected
00250 0175 	;
00251 0175 00AD 	EEWriteW	movwf	EEAddrTemp
00252 0176 	;
00253 0176 	;==============================================================================================
00254 0176 	; Write EEPROM
00255 0176 	; entry: EEPROM address to write in EEAdrTemp
00256 0176 	;        EEPROM data to write in EEDataTemp
00257 0176 	;        Bank 0 selected
00258 0176 	; exit: Bank 0 selected
00259 0176 	;
00260 0176 082D 	EEWrite	MOVF	EEAddrTemp,W
SerialServo.asm                                                       Page: 14
/Users/davidflynn/Projects/SerialServo/Firmware/

00261 0177 0023 		MOVLB	0x03	;Bank 3
00262 0178 0091 		movwf	EEADR	;Address to write
00263 0179 0020 		movlb	0x00	; bank 0
00264 017A 082E 		movf	EEDataTemp,W
00265 017B 0023 		movlb	0x03
00266 017C 0093 		movwf	EEDAT
00267 017D 1315 		bcf	EECON1,CFGS	;not config mem
00268 017E 1395 		bcf	EECON1,EEPGD	;Data memory
00269 017F 1515 		bsf	EECON1,WREN
00270 0180 138B 		bcf	INTCON,GIE	;Disale Ints
00271 0181 1B8B 		btfsc	INTCON,GIE
00272 0182 33FD 		bra	$-2
00273 0183 3055 		movlw	0x55
00274 0184 0096 		movwf	EECON2	;write 55
00275 0185 30AA 		movlw	0xAA
00276 0186 0096 		movwf	EECON2	;write AA
00277 0187 1495 		bsf	EECON1,WR
00278 0188 1895 	EEWriteLoop	btfsc	EECON1,WR	
00279 0189 33FE 		bra	EEWriteLoop
00280 018A 1115 		bcf	EECON1,WREN
00281 018B 178B 		bsf	INTCON,GIE
00282 018C 0020 		MOVLB	0x00	;Bank 0
00283 018D 0008 		return
00284 018E 	;
00285 018E 	;	
00286 018E 	;=========================================================================================
00287 018E 	;=========================================================================================
00288 018E 	;
00289 018E 	;
00290 018E 	;
00291 018E 	;
01029 018E 		include <SerBuff1938.inc>
00001 018E 	;=========================================================================================
00002 018E 	;
00003 018E 	;    Filename:      SerBuff.inc
00004 018E 	;    Date:          5/24/2018                                    
00005 018E 	;    File Version:  1.0.5
00006 018E 	;
00007 018E 	;    Author:        David M. Flynn
00008 018E 	;    Company:       Oxford V.U.E., Inc.
00009 018E 	;    E-Mail:        dflynn@oxfordvue.com
00010 018E 	;
00011 018E 	;=========================================================================================
00012 018E 	;=========================================================================================
00013 018E 	; Notes:
00014 018E 	;
00015 018E 	; History:
00016 018E 	; 1.0.5    5/24/2018   Added GetSerInBytes.
00017 018E 	; 1.0.4    5/23/2018	Added FlushInBuff.
00018 018E 	; 1.0.3    12/15/2015	Optimized some code to be segment independent.
00019 018E 	; 1.0.2    10/23/2015	Modified for 'F1938
00020 018E 	; 1.0.1    12/6/2013	Modified for 'F1847
00021 018E 	; 1.0      5/25/2008	First Rev'd version
00022 018E 	;
00023 018E 	;=========================================================================================
00024 018E 	; Bank0 Variables:
00025 018E 	;
00026 018E 	;	cblock	0x20
00027 018E 	;	TXByte		;Next byte to send
00028 018E 	;	RXByte		;Last byte received
00029 018E 	;	SerFlags
00030 018E 	;	endc
00031 018E 	;
00032 018E 	;#Define	DataReceivedFlag	SerFlags,1
00033 018E 	;#Define	DataSentFlag	SerFlags,2
00034 018E 	;
00035 018E 	; Bank2 Variables:
00036 018E 	;#Define	Ser_Buff_Bank	2
00037 018E 	;	cblock	0x120
00038 018E 	;	Ser_In_Bytes		;Bytes in Ser_In_Buff
00039 018E 	;	Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00040 018E 	;	Ser_In_InPtr
00041 018E 	;	Ser_In_OutPtr
00042 018E 	;	Ser_Out_InPtr
00043 018E 	;	Ser_Out_OutPtr
00044 018E 	;	Ser_In_Buff:20
00045 018E 	;	Ser_Out_Buff:20
00046 018E 	;	endc
00047 018E 	;
00048 018E 	;=========================================================================================
00049 018E 	; Routines	(Bank In/Bank Out)
00050 018E 	;
00051 018E 	; TX_TheByte	(0+0) Send one byte to UART
00052 018E 	; RX_TheByte	(0+0) Receive one byte from UART
00053 018E 	; StoreSerIn	(X/0) Put the byte in W into the serial input buffer, FSR0
00054 018E 	; GetSerIn	(X/0) Get a byte from the serial input buffer, FSR0
00055 018E 	; FlushInBuff	(X/0) Flush the serial incoming buffer.
00056 018E 	; GetSerInBytes	(X/0) Get the number of bytes in the serial input buffer
00057 018E 	; GetSerOutBytes	(X/0) Get the number of bytes in the serial ouput buffer
00058 018E 	; StoreSerOut	(X/0) Put the byte in W into the serial output buffer, FSR0
00059 018E 	; POP_SerOut	(X/0) Remove the last char stored in the output buffer
00060 018E 	; GetSerOut	(X/0) Get a byte from the serial Output buffer, FSR0
00061 018E 	;	       W=Byte, Param78:0=ValidFlag
00062 018E 	;=========================================================================================
00063 018E 	;=========================================================================================
00064 018E 	; *** Put in main loop ***
00065 018E 	;
00066 018E 	; Handle Serial Communications
00067 018E 	;	BTFSC	PIR1,TXIF	;TX done?
SerialServo.asm                                                       Page: 15
/Users/davidflynn/Projects/SerialServo/Firmware/

00068 018E 	;	CALL	TX_TheByte	; Yes
00069 018E 	;
00070 018E 	; move any serial data received into the 32 byte input buffer
00071 018E 	;	BTFSS	DataReceivedFlag
00072 018E 	;	BRA	ML_Ser_Out
00073 018E 	;	MOVF	RXByte,W
00074 018E 	;	BCF	DataReceivedFlag
00075 018E 	;	CALL	StoreSerIn
00076 018E 	;
00077 018E 	;=========================================================================================
00078 018E 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00079 018E 	;
00080 018E 	;ML_Ser_Out	BTFSS	DataSentFlag
00081 018E 	;	BRA	ML_Ser_End
00082 018E 	;	CALL	GetSerOut
00083 018E 	;	BTFSS	Param78,0
00084 018E 	;	BRA	ML_Ser_End
00085 018E 	;	MOVWF	TXByte
00086 018E 	;	BCF	DataSentFlag
00087 018E 	;ML_Ser_End
00088 018E 	;
00089 018E 	;=========================================================================================
00090 018E 	; *** Put in Init section ***
00091 018E 	;BAUDCON_Value	EQU	b'00001000'
00092 018E 	;TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, High speed
00093 018E 	;RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00094 018E 	;; 8MHz clock low speed (BRGH=0,BRG16=1)
00095 018E 	;;Baud_300	EQU	d'1666'	;0.299, -0.02%
00096 018E 	;;Baud_1200	EQU	d'416'	;1.199, -0.08%
00097 018E 	;;Baud_2400	EQU	d'207'	;2.404, +0.16%
00098 018E 	;;Baud_9600	EQU	d'51'	;9.615, +0.16%
00099 018E 	;; 8MHz clock high speed (BRGH=1,BRG16=1)
00100 018E 	;Baud_300	EQU	d'6666'	;0.299, -0.02%
00101 018E 	;Baud_1200	EQU	d'1666'	;1.199, -0.08%
00102 018E 	;Baud_2400	EQU	d'832'	;2.404, +0.16%
00103 018E 	;Baud_9600	EQU	d'207'	;9.615, +0.16%
00104 018E 	;Baud_19_2	EQU	d'103'	;19.23k, +0.16
00105 018E 	;Baud_57_6	EQU	d'34'	;57.14k, -0.79
00106 018E 	;BaudRate	EQU	Baud_9600
00107 018E 	;-------------
00108 018E 	;
00109 018E 	; setup serial I/O
00110 018E 	;	movlb	0x03	; bank 3
00111 018E 	;	MOVLW	TXSTA_Value
00112 018E 	;	MOVWF	TXSTA
00113 018E 	;	MOVLW	low BaudRate
00114 018E 	;	MOVWF	SPBRGL
00115 018E 	;	MOVLW	high BaudRate
00116 018E 	;	MOVWF	SPBRGH
00117 018E 	;	MOVLW	RCSTA_Value
00118 018E 	;	MOVWF	RCSTA
00119 018E 	;
00120 018E 	;	movlb	0x01	; bank 1
00121 018E 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00122 018E 	;	movlb	0x00	; bank 0
00123 018E 	;	BSF	INTCON,PEIE	;Peripheral IRQ Enable
00124 018E 	;	BSF	INTCON,GIE
00125 018E 	;
00126 018E 	;=========================================================================================
00127 018E 	; *** Put in ISR ***
00128 018E 	;-----------------------------------------------------------------------------------------
00129 018E 	;AUSART Serial ISR
00130 018E 	;
00131 018E 	;IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00132 018E 	;	BRA	IRQ_Ser_End
00133 018E 	;	CALL	RX_TheByte
00134 018E 	;
00135 018E 	;IRQ_Ser_End
00136 018E 	;
00137 018E 	;=========================================================================================
00138 018E 	; Send one byte
00139 018E 	; Entry: Bank0
00140 018E 	; Exit: Bank0
00141 018E 	;
00142 018E 	;
00143 018E 1939 	TX_TheByte	BTFSC	DataSentFlag
00144 018F 0008 		RETURN
00145 0190 0837 		MOVF	TXByte,W	
00146 0191 0023  a		MOVLB	TXREG	;banksel
00145 0192 		BANKSEL	TXREG
00147 0192 009A 		MOVWF	TXREG
00148 0193 0020 		MOVLB	0
00149 0194 1539 		BSF	DataSentFlag
00150 0195 0008 		RETURN
00151 0196 	;
00152 0196 	;=========================================================================================
00153 0196 	;
00154 0196 	RX_TheByte:
00155 0196 0023  a		MOVLB	RCSTA	;banksel
00154 0197 		BANKSEL	RCSTA	; bank 3
00156 0197 081D 		MOVF	RCSTA,W
00157 0198 3906 		ANDLW	0x06
00158 0199 		SKPZ		;Frame or Overrun Err?
00158 0199 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00159 019A 3205 		BRA	RX_TheByte_Err	; yes
00160 019B 0819 		MOVF	RCREG,W
00161 019C 	;
00162 019C 0020 		movlb	0x00	; bank 0
00163 019D 00B8 		MOVWF	RXByte
SerialServo.asm                                                       Page: 16
/Users/davidflynn/Projects/SerialServo/Firmware/

00164 019E 14B9 		BSF	DataReceivedFlag
00165 019F 0008 		RETURN
00166 01A0 	;
00167 01A0 0819 	RX_TheByte_Err	MOVF	RCREG,W	;bad byte so drop it
00168 01A1 01B8 		CLRF	RXByte
00169 01A2 121D 		BCF	RCSTA,CREN
00170 01A3 111D 		BCF	RCSTA,FERR
00171 01A4 109D 		BCF	RCSTA,OERR
00172 01A5 161D 		BSF	RCSTA,CREN
00173 01A6 0020 		movlb	0x00
00174 01A7 0008 		RETURN
00175 01A8 	;
00176 01A8 	;=========================================================================================
00177 01A8 	;=========================================================================================
00178 01A8 	; Put the byte in W into the serial input buffer
00179 01A8 	;
00180 01A8 	; Entry: W = byte to store
00181 01A8 	; Exit: none
00182 01A8 	; Ram Used: Param78, FSR
00183 01A8 	;
00184 01A8 00F8 	StoreSerIn	MOVWF	Param78
00185 01A9 0022 		MOVLB	Ser_Buff_Bank
00186 01AA 0AA0 		INCF	Ser_In_Bytes,F
00187 01AB 	;	
00188 01AB 0822 		MOVF	Ser_In_InPtr,W
00189 01AC 391F 		ANDLW	0x1F
00190 01AD 0AA2 		INCF	Ser_In_InPtr,F
00191 01AE 3E26 		ADDLW	low Ser_In_Buff
00192 01AF 0084 		MOVWF	FSR0
00193 01B0 3001 		MOVLW	high Ser_In_Buff
00194 01B1 0085 		MOVWF	FSR0H
00195 01B2 0878 		MOVF	Param78,W
00196 01B3 0080 		MOVWF	INDF0
00197 01B4 0020 		MOVLB	0x00
00198 01B5 0008 		RETURN
00199 01B6 	;
00200 01B6 	;=========================================================================================
00201 01B6 	; Get a byte from the serial input buffer
00202 01B6 	;
00203 01B6 	; Entry: none
00204 01B6 	; Exit: W=byte from buffer, Param78,0=valid
00205 01B6 	;
00206 01B6 0022 	GetSerIn	MOVLB	Ser_Buff_Bank
00207 01B7 1078 		BCF	Param78,0	;no data
00208 01B8 08A0 		MOVF	Ser_In_Bytes,F
00209 01B9 		SKPNZ
00209 01B9 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00210 01BA 320A 		bra	GetSerIn_End
00211 01BB 1478 		BSF	Param78,0
00212 01BC 03A0 		DECF	Ser_In_Bytes,F
00213 01BD 0823 		MOVF	Ser_In_OutPtr,W
00214 01BE 391F 		ANDLW	0x1F
00215 01BF 0AA3 		INCF	Ser_In_OutPtr,F
00216 01C0 3E26 		ADDLW	low Ser_In_Buff
00217 01C1 0084 		MOVWF	FSR0L
00218 01C2 3001 		MOVLW	high Ser_In_Buff
00219 01C3 0085 		MOVWF	FSR0H
00220 01C4 0800 		MOVF	INDF0,W
00221 01C5 0020 	GetSerIn_End	movlb	0
00222 01C6 0008 		return
00223 01C7 	;
00224 01C7 	;=========================================================================================
00225 01C7 	; Flush the serial incoming buffer
00226 01C7 	; Entry: none
00227 01C7 	; Exit: bank 0
00228 01C7 	;
00229 01C7 0022 	FlushInBuff	movlb	Ser_Buff_Bank
00230 01C8 01A0 		clrf	Ser_In_Bytes
00231 01C9 01A3 		clrf	Ser_In_OutPtr
00232 01CA 01A2 		clrf	Ser_In_InPtr
00233 01CB 0020 		movlb	0
00234 01CC 0008 		return
00235 01CD 	;
00236 01CD 	;=========================================================================================
00237 01CD 	; Get the number of bytes in the serial input buffer
00238 01CD 	;
00239 01CD 	; Entry: none
00240 01CD 	; Exit: W=bytes in buffer, Z
00241 01CD 	;
00242 01CD 0022 	GetSerInBytes	MOVLB	Ser_Buff_Bank
00243 01CE 0820 		MOVF	Ser_In_Bytes,W
00244 01CF 0020 		movlb	0
00245 01D0 0008 		return
00246 01D1 	;
00247 01D1 	;=========================================================================================
00248 01D1 	; Get the number of bytes in the serial ouput buffer
00249 01D1 	;
00250 01D1 	; Entry: none
00251 01D1 	; Exit: W=bytes in buffer, Z
00252 01D1 	;
00253 01D1 0022 	GetSerOutBytes	MOVLB	Ser_Buff_Bank
00254 01D2 0821 		MOVF	Ser_Out_Bytes,W
00255 01D3 0020 		movlb	0
00256 01D4 0008 		return
00257 01D5 	;
00258 01D5 	;=========================================================================================
00259 01D5 	; Put the byte in W into the serial output buffer
00260 01D5 	;
00261 01D5 	; Entry: W = byte to store
SerialServo.asm                                                       Page: 17
/Users/davidflynn/Projects/SerialServo/Firmware/

00262 01D5 	; Exit: Param78 & W = byte stored, Bank 0
00263 01D5 	; Ram used: Param78, FSR0
00264 01D5 	; Calls: (0) none
00265 01D5 	;
00266 01D5 00F8 	StoreSerOut	MOVWF	Param78
00267 01D6 0022 		MOVLB	Ser_Buff_Bank
00268 01D7 0AA1 		INCF	Ser_Out_Bytes,F
00269 01D8 	;	
00270 01D8 0824 		MOVF	Ser_Out_InPtr,W
00271 01D9 391F 		ANDLW	0x1F
00272 01DA 0AA4 		INCF	Ser_Out_InPtr,F
00273 01DB 3E46 		ADDLW	low Ser_Out_Buff
00274 01DC 0084 		MOVWF	FSR0
00275 01DD 3001 		MOVLW	high Ser_In_Buff
00276 01DE 0085 		MOVWF	FSR0H
00277 01DF 0878 		MOVF	Param78,W
00278 01E0 0080 		MOVWF	INDF0
00279 01E1 0020 		movlb	0
00280 01E2 0008 		return
00281 01E3 	;
00282 01E3 	;=========================================================================================
00283 01E3 	; Remove the last char stored in the output buffer
00284 01E3 	;
00285 01E3 0022 	POP_SerOut	MOVLB	Ser_Buff_Bank
00286 01E4 08A1 		MOVF	Ser_Out_Bytes,F
00287 01E5 		SKPNZ
00287 01E5 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00288 01E6 3202 		bra	POP_SerOut_End
00289 01E7 03A1 		DECF	Ser_Out_Bytes,F
00290 01E8 03A4 		DECF	Ser_Out_InPtr,F
00291 01E9 0020 	POP_SerOut_End	movlb	0
00292 01EA 0008 		return
00293 01EB 	;
00294 01EB 	;=========================================================================================
00295 01EB 	; Get a byte from the serial Output buffer
00296 01EB 	;
00297 01EB 	; Entry: none
00298 01EB 	; Exit: W=byte from buffer, Param78,0=valid
00299 01EB 	;
00300 01EB 0022 	GetSerOut	MOVLB	Ser_Buff_Bank
00301 01EC 1078 		BCF	Param78,0	;no data
00302 01ED 08A1 		MOVF	Ser_Out_Bytes,F
00303 01EE 		SKPNZ
00303 01EE 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00304 01EF 320A 		bra	GetSerOut_End
00305 01F0 1478 		BSF	Param78,0
00306 01F1 03A1 		DECF	Ser_Out_Bytes,F
00307 01F2 0825 		MOVF	Ser_Out_OutPtr,W
00308 01F3 391F 		ANDLW	0x1F
00309 01F4 0AA5 		INCF	Ser_Out_OutPtr,F
00310 01F5 3E46 		ADDLW	low Ser_Out_Buff
00311 01F6 0084 		MOVWF	FSR0L
00312 01F7 3001 		MOVLW	high Ser_In_Buff
00313 01F8 0085 		MOVWF	FSR0H
00314 01F9 0800 		MOVF	INDF0,W
00315 01FA 0020 	GetSerOut_End	movlb	0
00316 01FB 0008 		return
00317 01FC 	;
00318 01FC 	;=========================================================================================
00319 01FC 	;
00320 01FC 	;
00321 01FC 	;
00322 01FC 	;
00323 01FC 	;
00324 01FC 	;
00325 01FC 	;
00326 01FC 	;
00327 01FC 	;
00328 01FC 	;
00329 01FC 	;
00330 01FC 	;
00331 01FC 	;
00332 01FC 	;
00333 01FC 	;
00334 01FC 	;
00335 01FC 	;
00336 01FC 	;
00337 01FC 	;
00338 01FC 	;
01030 01FC 		include <RS232_Parse.inc>
00001 01FC 	;=========================================================================================
00002 01FC 	;
00003 01FC 	;    Filename:      RS232_Parse.inc
00004 01FC 	;    Date:          5/25/2018
00005 01FC 	;    File Version:  1.0d5
00006 01FC 	;
00007 01FC 	;    Author:        David M. Flynn
00008 01FC 	;    Company:       Oxford V.U.E., Inc.
00009 01FC 	;    E-Mail:        dflynn@oxfordvue.com
00010 01FC 	;
00011 01FC 	;=========================================================================================
00012 01FC 	; Routines:
00013 01FC 	;
00014 01FC 	; RS232_Parse	Call from main loop
00015 01FC 	; RS232_ClearTXData	Clear the TX data, FSR1
00016 01FC 	; RS232_Send	Send the data at TX_data, FSR0, FSR1
00017 01FC 	;
00018 01FC 	;=========================================================================================
00019 01FC 	; Notes:
SerialServo.asm                                                       Page: 18
/Users/davidflynn/Projects/SerialServo/Firmware/

00020 01FC 	;
00021 01FC 	; History:
00022 01FC 	; 1.0b5  5/25/2018	RS232_MasterAddr, RS232_SlaveAddr now in ram
00023 01FC 	; 1.0d4  5/18/2018	Added RS232_ClearTXData, RS232_Send.
00024 01FC 	; 1.0d3  5/17/2018	Used Timer1Lo for RXTimeout.
00025 01FC 	; 1.0d2  4/26/2018	Comments, used in robot arm project.
00026 01FC 	; 1.0d1  1/12/2016	Modified for I2C to RS-232 8 byte packets.
00027 01FC 	; 1.0d1  11/9/2015	Adapted for QD Tester
00028 01FC 	; 1.0    12/6/2013	First Rev'd version
00029 01FC 	;
00030 01FC 	; RS232_Parse	(X/0) Parse any bytes received by the serial port
00031 01FC 	; Packet format: (FF FF) SA0 (SA1) DA0 (DA1) D0 D1 D2 D3 D4 D5 D6 D7 (CS)
00032 01FC 	;  FF = Sync byte, SAn = Source Address, DA = Destination Address,
00033 01FC 	;       Dn = Data, CS Check Sum (xor of Address and Data bytes)
00034 01FC 	;  SA must be RS232_RAddr ( the boss )
00035 01FC 	;  DA must be RS232_MyAddr ( this program )
00036 01FC 	;  If the checksum matches put the data bytes in the RX_Data buffer,
00037 01FC 	;   set RXDataValidFlag and RXDataIsNew.
00038 01FC 	;=========================================================================================
00039 01FC 	;	constant RP_LongAddr=1		;16 bit addresses
00040 01FC 	; default to a 6 byte packet SA DA D0 D1 D2 D3
00041 01FC 	;
00042 01FC 		ifndef UseRS232SyncBytes
00044 01FC 		endif
00045 01FC 	;
00046 01FC 		ifndef UseRS232SendSyncBytes
00048 01FC 		endif
00049 01FC 	;
00050 01FC 		ifndef RP_LongAddr
00052 01FC 		endif
00053 01FC 	;
00054 01FC 		ifndef RP_DataBytes
00056 01FC 		endif
00057 01FC 	;
00058 01FC 		ifndef UseRS232Chksum
00060 01FC 		endif
00061 01FC 	;
00062 01FC 		constant RXTimeout=5		;50 mS max between incoming bytes
00063 01FC 	;=========================================================================================
00064 01FC 	; Bank0 variable used by RS232_Parse:
00065 01FC 	;
00066 01FC 	;	cblock
00067 01FC 	;	RS232_MasterAddr
00068 01FC 	;	RS232_SlaveAddr
00069 01FC 	;	endc
00070 01FC 	;
00071 01FC 	; Bank1 variable used by RS232_Parse:
00072 01FC 	;
00073 01FC 	;	cblock
00074 01FC 	;	RX_ParseFlags
00075 01FC 	;	RX_Flags
00076 01FC 	;	RX_DataCount
00077 01FC 	;	RX_CSUM
00078 01FC 	;	RX_TempData:RP_DataBytes
00079 01FC 	;	RX_Data:RP_DataBytes
00080 01FC 	;	TX_Data:RP_DataBytes
00081 01FC 	;	endc
00082 01FC 	;RX_ParseFlags Bits
00083 01FC 00A0 	#Define	SyncByte1RXd	RX_ParseFlags,0
00084 01FC 00A0 	#Define	SyncByte2RXd	RX_ParseFlags,1
00085 01FC 00A0 	#Define	SourceAddLoRXd	RX_ParseFlags,2
00086 01FC 00A0 	#Define	SourceAddHiRXd	RX_ParseFlags,3
00087 01FC 00A0 	#Define	DestAddLoRXd	RX_ParseFlags,4
00088 01FC 00A0 	#Define	DestAddHiRXd	RX_ParseFlags,5
00089 01FC 00A0 	#Define	AllDataRXd	RX_ParseFlags,6
00090 01FC 	;
00091 01FC 	;RX_Flags Bits
00092 01FC 00A1 	#Define	RXDataValidFlag	RX_Flags,0
00093 01FC 00A1 	#Define	RXDataIsNew	RX_Flags,1
00094 01FC 00A1 	#Define	RXSrcIsMaster	RX_Flags,2
00095 01FC 00A1 	#Define	RXDstIsMe	RX_Flags,3
00096 01FC 	;
00097 01FC 	;
00098 01FC 	; *** put in main loop
00099 01FC 	;	CALL	RS232_Parse
00100 01FC 	; if RXDataValidFlag is set data may be used
00101 01FC 	;
00102 01FC 	;=========================================================================================
00103 01FC 	; Parse any bytes received by the serial port
00104 01FC 	;
00105 01FC 	; Receive 0xFF,0xFF,SA0,(SA1),DA0,(DA1),Cmd,Data0,Data1,Data2,CS
00106 01FC 	;
00107 01FC 	;
00108 01FC 	; Entry: none
00109 01FC 	; Exit: none
00110 01FC 	; Ram Used: Param78, FSR
00111 01FC 	; Calls (1+0): GetSerIn
00112 01FC 	;
00113 01FC 0021 	RS232_Parse	movlb	0x01	;bank 1
00114 01FD 08A0 		movf	RX_ParseFlags,F
00115 01FE 		SKPNZ		;Receive in process?
00115 01FE 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00116 01FF 3207 		bra	RS232_Parse_Byte	; no
00117 0200 	;
00118 0200 0020 		movlb	0	;bank 0
00119 0201 08AF 		movf	Timer1Lo,F
00120 0202 		SKPZ		;Timed out?
00120 0202 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00121 0203 3203 		bra	RS232_Parse_Byte	; no
SerialServo.asm                                                       Page: 19
/Users/davidflynn/Projects/SerialServo/Firmware/

00122 0204 	;timed out
00123 0204 15BF 		bsf	ssRX_Timeout
00124 0205 0021 		movlb	0x01	;bank 1
00125 0206 01A0 		clrf	RX_ParseFlags
00126 0207 	;
00127 0207 21B6 	RS232_Parse_Byte	CALL	GetSerIn
00128 0208 1C78 		BTFSS	Param78,0	;Got a byte?
00129 0209 0008 		RETURN		; No
00130 020A 	;
00131 020A 00F8 		MOVWF	Param78	;Data Byte RXd
00132 020B 3005 		movlw	RXTimeout	;Reset time-out timer
00133 020C 00AF 		movwf	Timer1Lo
00134 020D 	; Command inturpreter
00135 020D 		if UseRS232SyncBytes
00136 020D 	;
00137 020D 0021 		movlb	0x01	;bank 1
00138 020E 08A0 		MOVF	RX_ParseFlags,F
00139 020F 		SKPZ		;Beginning new packet?
00139 020F 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00140 0210 3205 		BRA	RS232_Parse_Sync2	; No
00141 0211 30DD 		MOVLW	kRS232SyncByteValue
00142 0212 0278 		SUBWF	Param78,W
00143 0213 		SKPNZ		;Sync byte OK?
00143 0213 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00144 0214 1420 		BSF	SyncByte1RXd	; Yes
00145 0215 3218 		bra	RS232_Parse_Rtn
00146 0216 	;
00147 0216 18A0 	RS232_Parse_Sync2	btfsc	SyncByte2RXd
00148 0217 3206 		bra	RS232_Parse_SALo
00149 0218 30DD 		movlw	kRS232SyncByteValue
00150 0219 0278 		subwf	Param78,W
00151 021A 		SKPZ
00151 021A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00152 021B 2A6A 		goto	RS232_Parse_Error
00153 021C 14A0 		bsf	SyncByte2RXd
00154 021D 3210 		bra	RS232_Parse_Rtn
00155 021E 	;
00156 021E 		endif
00157 021E 	;
00158 021E 	; LSB of Source Address
00159 021E 0021 	RS232_Parse_SALo	movlb	0x01	;bank 1
00160 021F 1920 		btfsc	SourceAddLoRXd
00161 0220 320F 		bra	RS232_Parse_SALo_end
00162 0221 	;
00163 0221 01A3 		clrf	RX_CSUM
00164 0222 01A2 		clrf	RX_DataCount
00165 0223 1521 		bsf	RXSrcIsMaster
00166 0224 0020 		movlb	0
00167 0225 0859 		movf	RS232_MasterAddr,W
00168 0226 0021 		movlb	1
00169 0227 0278 		subwf	Param78,W
00170 0228 		SKPZ
00170 0228 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00171 0229 1121 		bcf	RXSrcIsMaster
00172 022A 1520 		bsf	SourceAddLoRXd
00173 022B 0878 		movf	Param78,W
00174 022C 00A4 		movwf	RX_SrcAdd
00175 022D 06A3 		xorwf	RX_CSUM,F
00176 022E 0020 	RS232_Parse_Rtn	movlb	0x00	;bank 0
00177 022F 0008 		return
00178 0230 	RS232_Parse_SALo_end:
00179 0230 	;
00180 0230 	; MSB of Source Address
00181 0230 		if RP_LongAddr
00196 0230 		endif
00197 0230 	;
00198 0230 	; LSB of Destination Address
00199 0230 1A20 	RS232_Parse_DALo	btfsc	DestAddLoRXd
00200 0231 320C 		bra	RS232_Parse_DALo_End
00201 0232 15A1 		bsf	RXDstIsMe
00202 0233 0020 		movlb	0
00203 0234 085A 		movf	RS232_SlaveAddr,W
00204 0235 0021 		movlb	1
00205 0236 0278 		subwf	Param78,W
00206 0237 		SKPZ
00206 0237 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00207 0238 11A1 		bcf	RXDstIsMe
00208 0239 1620 		bsf	DestAddLoRXd
00209 023A 0878 		movf	Param78,W
00210 023B 00A5 		movwf	RX_DstAdd
00211 023C 06A3 		xorwf	RX_CSUM,F
00212 023D 33F0 		bra	RS232_Parse_Rtn
00213 023E 	RS232_Parse_DALo_End:
00214 023E 	;
00215 023E 	; MSB of Destination Address
00216 023E 		if RP_LongAddr
00231 023E 		endif
00232 023E 	;
00233 023E 1B20 	RS232_Parse_Data	btfsc	AllDataRXd
00234 023F 320F 		bra	RS232_Parse_Data_end
00235 0240 0822 		movf	RX_DataCount,W
00236 0241 3EA6 		addlw	low RX_TempData
00237 0242 0084 		movwf	FSR0L
00238 0243 3000 		movlw	high RX_TempData
00239 0244 0085 		movwf	FSR0H
00240 0245 0878 		movf	Param78,W
00241 0246 06A3 		xorwf	RX_CSUM,F
00242 0247 0080 		movwf	INDF0
00243 0248 0AA2 		incf	RX_DataCount,F
SerialServo.asm                                                       Page: 20
/Users/davidflynn/Projects/SerialServo/Firmware/

00244 0249 3004 		movlw	RP_DataBytes
00245 024A 0222 		subwf	RX_DataCount,W
00246 024B 		SKPZ
00246 024B 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00247 024C 33E1 		bra	RS232_Parse_Rtn
00248 024D 1720 		bsf	AllDataRXd
00249 024E 	;
00250 024E 		if UseRS232Chksum
00251 024E 33DF 		bra	RS232_Parse_Rtn
00252 024F 		endif
00253 024F 	RS232_Parse_Data_end
00254 024F 	;
00255 024F 		if UseRS232Chksum
00256 024F 	; checksum
00257 024F 0878 		movf	Param78,W
00258 0250 0223 		subwf	RX_CSUM,W
00259 0251 		SKPZ		;Checksum matches?
00259 0251 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00260 0252 3217 		bra	RS232_Parse_Error	; No
00261 0253 	;
00262 0253 		endif
00263 0253 	;
00264 0253 30A6 		movlw	low RX_TempData
00265 0254 0084 		movwf	FSR0L
00266 0255 3000 		movlw	high RX_TempData
00267 0256 0085 		movwf	FSR0H
00268 0257 	;
00269 0257 30AA 		movlw	low RX_Data
00270 0258 0086 		movwf	FSR1L
00271 0259 3000 		movlw	high RX_Data
00272 025A 0087 		movwf	FSR1H
00273 025B 	;
00274 025B 3004 		movlw	RP_DataBytes
00275 025C 00F8 		movwf	Param78
00276 025D 0012 	RS232_Parse_L1	moviw	FSR0++
00277 025E 001E 		movwi	FSR1++
00278 025F 0BF8 		decfsz	Param78,F
00279 0260 33FC 		bra	RS232_Parse_L1
00280 0261 	;
00281 0261 14A1 		bsf	RXDataIsNew	;good packet rx'd
00282 0262 1421 		bsf	RXDataValidFlag
00283 0263 1D21 		btfss	RXSrcIsMaster	;from master?
00284 0264 1021 		bcf	RXDataValidFlag	; no
00285 0265 1DA1 		btfss	RXDstIsMe	;to me?
00286 0266 1021 		bcf	RXDataValidFlag	; no
00287 0267 	;
00288 0267 01A0 		clrf	RX_ParseFlags
00289 0268 0020 		movlb	0x00
00290 0269 0008 		return
00291 026A 	;
00292 026A 	;
00293 026A 	; We didn't get the sync byte we were expecting so restart the parser
00294 026A 01A0 	RS232_Parse_Error	CLRF	RX_ParseFlags
00295 026B 29C7 		goto	FlushInBuff
00296 026C 	;
00297 026C 	;=========================================================================================
00298 026C 	; Clear the TX data, unused bytes are sent as 0x00
00299 026C 	; Entry: none
00300 026C 	; Exit: Bank 0
00301 026C 	; Ram used: Param78, FSR1
00302 026C 	; Calls: none
00303 026C 3001 	RS232_ClearTXData	movlw	1	;bank 1
00304 026D 3004 		movlw	RP_DataBytes
00305 026E 00F8 		movwf	Param78
00306 026F 30AE 		movlw	low TX_Data
00307 0270 0086 		movwf	FSR1L
00308 0271 3000 		movlw	high TX_Data
00309 0272 0087 		movwf	FSR1H
00310 0273 3000 		movlw	0x00
00311 0274 001E 	RS232_ClearTXData_L1	movwi	FSR1++
00312 0275 0BF8 		decfsz	Param78,F
00313 0276 33FD 		bra	RS232_ClearTXData_L1
00314 0277 0020 		movlb	0x00
00315 0278 0008 		return
00316 0279 	;
00317 0279 	;=========================================================================================
00318 0279 	; Send a data packet
00319 0279 	;
00320 0279 	;Entry: TX_Data = Data to send 
00321 0279 	;Exit: TX_Data is cleared
00322 0279 	;Ram used: Param78,Param79,Param7A,FSR0,FSR1
00323 0279 	;Calls: (1+0) StoreSerOut
00324 0279 	;
00325 0279 	RS232_Send:
00326 0279 	;
00327 0279 		if UseRS232SendSyncBytes
00334 0279 		endif
00335 0279 	;
00336 0279 0020 		movlb	0x00	;bank 0
00337 027A 01FA 		clrf	Param7A	;CSum
00338 027B 085A 		movf	RS232_SlaveAddr,W	;source address
00339 027C 06FA 		xorwf	Param7A,F
00340 027D 21D5 		call	StoreSerOut
00341 027E 	;
00342 027E 		if RP_LongAddr
00346 027E 		endif
00347 027E 	;
00348 027E 0859 		movf	RS232_MasterAddr,W	;destination address
00349 027F 06FA 		xorwf	Param7A,F
SerialServo.asm                                                       Page: 21
/Users/davidflynn/Projects/SerialServo/Firmware/

00350 0280 21D5 		call	StoreSerOut
00351 0281 	;
00352 0281 		if RP_LongAddr
00356 0281 		endif
00357 0281 	;
00358 0281 0021 		movlb	1	;bank 1
00359 0282 3004 		movlw	RP_DataBytes
00360 0283 00F9 		movwf	Param79
00361 0284 30AE 		movlw	low TX_Data
00362 0285 0086 		movwf	FSR1L
00363 0286 3000 		movlw	high TX_Data
00364 0287 0087 		movwf	FSR1H
00365 0288 	;
00366 0288 0016 	RS232_Send_L1	moviw	FSR1++
00367 0289 06FA 		xorwf	Param7A,F
00368 028A 21D5 		call	StoreSerOut
00369 028B 0BF9 		decfsz	Param79,F
00370 028C 33FB 		bra	RS232_Send_L1
00371 028D 	;
00372 028D 		if UseRS232Chksum
00373 028D 087A 		movf	Param7A,W
00374 028E 21D5 		call	StoreSerOut
00375 028F 		endif
00376 028F 	;
00377 028F 2A6C 		goto	RS232_ClearTXData
00378 0290 	;
00379 0290 	;=========================================================================================
00380 0290 	;
00381 0290 	;
00382 0290 	;
00383 0290 	;
00384 0290 	;
00385 0290 	;
00386 0290 	;
00387 0290 	;
00388 0290 	;
00389 0290 	;
00390 0290 	;
00391 0290 	;
00392 0290 	;
00393 0290 	;
00394 0290 	;
00395 0290 	;
00396 0290 	;
00397 0290 	;
00398 0290 	;
00399 0290 	;
00400 0290 	;
00401 0290 	;
00402 0290 	;
00403 0290 	;
01031 0290 	;
01032 0290 	;=========================================================================================
01033 0290 	;
01034 0290 	start	mLongCall	InitializeIO
01034 0290 318A      M		movlp	InitializeIO	                       movlp                  Destination
01034 0291 22D9      M		call	InitializeIO	                       call                   Destination
01034 0292 3182      M		movlp	$	                       movlp                  $
01035 0293 	;
01036 0293 2519 		CALL	StartServo
01037 0294 24FA 		CALL	ReadAN0_ColdStart
01038 0295 	;
01039 0295 	;=========================================================================================
01040 0295 	;*****************************************************************************************
01041 0295 	;=========================================================================================
01042 0295 0064 	MainLoop	CLRWDT
01043 0296 	;
01044 0296 21CD 		call	GetSerInBytes
01045 0297 		SKPZ		;Any data?
01045 0297 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01046 0298 21FC 		CALL	RS232_Parse	; yes
01047 0299 	;
01048 0299 0021 		movlb	1
01049 029A 1CA1 		btfss	RXDataIsNew
01050 029B 3203 		bra	ML_1
01051 029C 		mLongCall	HandleRXData
01051 029C 3188      M		movlp	HandleRXData	                       movlp                  Destination
01051 029D 2004      M		call	HandleRXData	                       call                   Destination
01051 029E 3182      M		movlp	$	                       movlp                  $
01052 029F 	ML_1:
01053 029F 	;
01054 029F 	; Fast blink the system LED is the servo is stopped because of an error
01055 029F 0020 		MOVLB	0x00
01056 02A0 3064 		MOVLW	LEDTIME
01057 02A1 193F 		btfsc	ssio_OverCurSD
01058 02A2 300A 		movlw	LEDErrorTime
01059 02A3 00A0 		MOVWF	SysLED_Time
01060 02A4 	;
01061 02A4 248E 		CALL	ReadAN
01062 02A5 	;
01063 02A5 	; Average AN0
01064 02A5 0021  a		MOVLB	Cur_AN0	;banksel
01063 02A6 		BankSel	Cur_AN0
01065 02A6 1C32 		btfss	NewDataAN0
01066 02A7 320B 		bra	No_NewDataAN0
01067 02A8 1032 		bcf	NewDataAN0
01068 02A9 083F 		movf	OldAN0Value,W
01069 02AA 07B3 		addwf	Cur_AN0,F
01070 02AB 0840 		movf	OldAN0Value+1,W
SerialServo.asm                                                       Page: 22
/Users/davidflynn/Projects/SerialServo/Firmware/

01071 02AC 3DB4 		addwfc	Cur_AN0+1,F
01072 02AD 3634 		lsrf	Cur_AN0+1,W
01073 02AE 00B4 		movwf	Cur_AN0+1
01074 02AF 00C0 		movwf	OldAN0Value+1
01075 02B0 0C33 		rrf	Cur_AN0,W
01076 02B1 00B3 		movwf	Cur_AN0
01077 02B2 00BF 		movwf	OldAN0Value
01078 02B3 	;
01079 02B3 	No_NewDataAN0:
01080 02B3 		mLongCall	ReadEncoder
01080 02B3 318A      M		movlp	ReadEncoder	                       movlp                  Destination
01080 02B4 220C      M		call	ReadEncoder	                       call                   Destination
01080 02B5 3182      M		movlp	$	                       movlp                  $
01081 02B6 	;
01082 02B6 2472 		call	HandleButtons
01083 02B7 	;
01084 02B7 	;---------------------
01085 02B7 	; Handle Serial Communications
01086 02B7 1A11 		BTFSC	PIR1,TXIF	;TX done?
01087 02B8 218E 		CALL	TX_TheByte	; Yes
01088 02B9 	;
01089 02B9 	; move any serial data received into the 32 byte input buffer
01090 02B9 1CB9 		BTFSS	DataReceivedFlag
01091 02BA 3203 		BRA	ML_Ser_Out
01092 02BB 0838 		MOVF	RXByte,W
01093 02BC 10B9 		BCF	DataReceivedFlag
01094 02BD 21A8 		CALL	StoreSerIn
01095 02BE 	;
01096 02BE 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
01097 02BE 	;
01098 02BE 1D39 	ML_Ser_Out	BTFSS	DataSentFlag
01099 02BF 3205 		BRA	ML_Ser_End
01100 02C0 21EB 		CALL	GetSerOut
01101 02C1 1C78 		BTFSS	Param78,0
01102 02C2 3202 		BRA	ML_Ser_End
01103 02C3 00B7 		MOVWF	TXByte
01104 02C4 1139 		BCF	DataSentFlag
01105 02C5 	ML_Ser_End:
01106 02C5 	;----------------------
01107 02C5 	;
01108 02C5 0020 		movlb	0x00	;bank 0
01109 02C6 0858 		movf	SysMode,W
01110 02C7 000B 		brw
01111 02C8 2ACE 		goto	DoModeZero
01112 02C9 2ADA 		goto	DoModeOne
01113 02CA 2B3C 		goto	DoModeTwo	
01114 02CB 2B7E 		goto	DoModeThree
01115 02CC 2C26 		goto	DoMode4
01116 02CD 	;
01117 02CD 	ModeReturn:
01118 02CD 	;
01119 02CD 2A95 		goto	MainLoop
01120 02CE 	;=========================================================================================
01121 02CE 	;*****************************************************************************************
01122 02CE 	;=========================================================================================
01123 02CE 	;Simple servo testing
01124 02CE 	; copy AN4 value x2 + .1976 to servo value
01125 02CE 	;
01126 02CE 	DoModeZero:
01127 02CE 0021  a		MOVLB	ModeZeroPot	;banksel
01126 02CF 		BankSel	ModeZeroPot
01128 02CF 353B 		lslf	ModeZeroPot,W
01129 02D0 00FC 		movwf	Param7C
01130 02D1 0D3C 		rlf	ModeZeroPot+1,W
01131 02D2 00FD 		movwf	Param7D
01132 02D3 30B8 		movlw	low .1976
01133 02D4 07FC 		addwf	Param7C,F
01134 02D5 3007 		movlw	high .1976
01135 02D6 3DFD 		addwfc	Param7D,F
01136 02D7 	;
01137 02D7 2546 		call	ClampInt
01138 02D8 2505 		call	Copy7CToSig
01139 02D9 	;
01140 02D9 2ACD 		goto	ModeReturn
01141 02DA 	;=========================================================================================
01142 02DA 	;Testing servo and encoder
01143 02DA 	; if AN4 + .950 > EncoderVal set servo to ServoFastForward
01144 02DA 	; elseif AN4 + .1050 < EncoderVal set servo to ServoFastReverse
01145 02DA 	; else Set ServoIdle
01146 02DA 	;
01147 02DA 	DoModeOne:
01148 02DA 0021  a		MOVLB	ModeZeroPot	;banksel
01147 02DB 		BankSel	ModeZeroPot
01149 02DB 	;
01150 02DB 	;Param7A:Param79 = Cur_AN4 + .950
01151 02DB 30B6 		movlw	low .950
01152 02DC 073B 		addwf	ModeZeroPot,W
01153 02DD 00F9 		movwf	Param79
01154 02DE 3003 		movlw	high .950
01155 02DF 3D3C 		addwfc	ModeZeroPot+1,W
01156 02E0 00FA 		movwf	Param7A
01157 02E1 	;
01158 02E1 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
01159 02E1 0020  a		MOVLB	EncoderVal	;banksel
01158 02E2 		BankSel	EncoderVal
01160 02E2 0846 		movf	EncoderVal,W
01161 02E3 02F9 		subwf	Param79,F
01162 02E4 0847 		movf	EncoderVal+1,W
01163 02E5 3BFA 		subwfb	Param7A,F
SerialServo.asm                                                       Page: 23
/Users/davidflynn/Projects/SerialServo/Firmware/

01164 02E6 	;
01165 02E6 1FFA 		btfss	Param7A,7	;Param7A:Param79 < 0?
01166 02E7 3210 		bra	DM1_FF	; No, EncoderVal <= (AN4 + .950)
01167 02E8 	;
01168 02E8 	;Param7A:Param79 = Cur_AN4 + .1050
01169 02E8 0021  a		MOVLB	ModeZeroPot	;banksel
01168 02E9 		BankSel	ModeZeroPot
01170 02E9 301A 		movlw	low .1050
01171 02EA 073B 		addwf	ModeZeroPot,W
01172 02EB 00F9 		movwf	Param79
01173 02EC 3004 		movlw	high .1050
01174 02ED 3D3C 		addwfc	ModeZeroPot+1,W
01175 02EE 00FA 		movwf	Param7A
01176 02EF 	;
01177 02EF 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
01178 02EF 0020  a		MOVLB	EncoderVal	;banksel
01177 02F0 		BankSel	EncoderVal
01179 02F0 0846 		movf	EncoderVal,W
01180 02F1 02F9 		subwf	Param79,F
01181 02F2 0847 		movf	EncoderVal+1,W
01182 02F3 3BFA 		subwfb	Param7A,F
01183 02F4 	;
01184 02F4 1BFA 		btfsc	Param7A,7	;Param7A:Param79 < 0?
01185 02F5 3208 		bra	DM1_FR	; Yes, EncoderVal > (AN4 + .1050)
01186 02F6 	;
01187 02F6 	; EncoderVal > (ModeZeroPot + .950) && EncoderVal <= (ModeZeroPot + .1050)
01188 02F6 153E 		bsf	ServoIdle
01189 02F7 2ACD 		goto	ModeReturn
01190 02F8 	;
01191 02F8 084F 	DM1_FF	movf	ServoFastForward,W
01192 02F9 00FC 		movwf	Param7C
01193 02FA 0850 		movf	ServoFastForward+1,W
01194 02FB 00FD 		movwf	Param7D
01195 02FC 2505 		call	Copy7CToSig
01196 02FD 2ACD 		goto	ModeReturn
01197 02FE 	;
01198 02FE 084D 	DM1_FR	movf	ServoFastReverse,W
01199 02FF 00FC 		movwf	Param7C
01200 0300 084E 		movf	ServoFastReverse+1,W
01201 0301 00FD 		movwf	Param7D
01202 0302 2505 		call	Copy7CToSig
01203 0303 2ACD 		goto	ModeReturn
01204 0304 	;
01205 0304 	;=========================================================================================
01206 0304 	; if ssEnableOverCur and Cur_AN0>ssMaxI*4 then
01207 0304 	;   OverCurrentFlag=true
01208 0304 0020 	CheckCurrent	movlb	0x00	;Bank 0
01209 0305 1C5B 		btfss	ssEnableOverCur
01210 0306 0008 		return
01211 0307 	;Param79:Param78 = ssMaxI * 4
01212 0307 01F9 		clrf	Param79
01213 0308 355C 		lslf	ssMaxI,W
01214 0309 00F8 		movwf	Param78
01215 030A 0DF9 		rlf	Param79,F
01216 030B 35F8 		lslf	Param78,F
01217 030C 0DF9 		rlf	Param79,F
01218 030D 	;Param79:Param78 -= Cur_AN0
01219 030D 0021 		movlb	ServoCurrent
01220 030E 0833 		movf	ServoCurrent,W
01221 030F 02F8 		subwf	Param78,F
01222 0310 0834 		movf	ServoCurrent+1,W
01223 0311 3BF9 		subwfb	Param79,F
01224 0312 0020 		movlb	0x00	;Bank 0
01225 0313 	;
01226 0313 1BF9 		btfsc	Param79,7	;Cur_AN0>ssMaxI*4?
01227 0314 15BE 		bsf	OverCurrentFlag
01228 0315 0008 		return
01229 0316 	;
01230 0316 	;=========================================================================================
01231 0316 	; if Cur_AN0>ssGripI*4 then
01232 0316 	;   GripIMet=true
01233 0316 	; if Cur_AN0>(ssGripI+0x10)*4 then
01234 0316 	;   GripIOver=true
01235 0316 0020 	CheckGripCurrent	movlb	0x00	;Bank 0
01236 0317 	;Param79:Param78 = ssGripI * 4
01237 0317 01F9 		clrf	Param79
01238 0318 355E 		lslf	ssGripI,W
01239 0319 00F8 		movwf	Param78
01240 031A 0DF9 		rlf	Param79,F
01241 031B 35F8 		lslf	Param78,F
01242 031C 0DF9 		rlf	Param79,F
01243 031D 	;Param79:Param78 -= Cur_AN0
01244 031D 0021  a		MOVLB	ServoCurrent	;banksel
01243 031E 		BankSel	ServoCurrent
01245 031E 0833 		movf	ServoCurrent,W
01246 031F 02F8 		subwf	Param78,F
01247 0320 0834 		movf	ServoCurrent+1,W
01248 0321 3BF9 		subwfb	Param79,F
01249 0322 0020 		movlb	0x00	;Bank 0
01250 0323 	;
01251 0323 1BF9 		btfsc	Param79,7	;Cur_AN0>ssGripI*4?
01252 0324 163E 		bsf	GripIMet	; Yes
01253 0325 1BF9 		btfsc	Param79,7	;Cur_AN0>ssGripI*4?
01254 0326 16BF 		bsf	ssGripMCur
01255 0327 	;Param79:Param78 = (ssGripI+0x10) * 4
01256 0327 01F9 		clrf	Param79
01257 0328 3004 		movlw	kGripperHC
01258 0329 075E 		addwf	ssGripI,W
01259 032A 00F8 		movwf	Param78
SerialServo.asm                                                       Page: 24
/Users/davidflynn/Projects/SerialServo/Firmware/

01260 032B 3000 		movlw	0x00
01261 032C 3DF9 		addwfc	Param79,F
01262 032D 35F8 		lslf	Param78,F
01263 032E 0DF9 		rlf	Param79,F
01264 032F 35F8 		lslf	Param78,F
01265 0330 0DF9 		rlf	Param79,F
01266 0331 	;Param79:Param78 -= Cur_AN0
01267 0331 0021  a		MOVLB	ServoCurrent	;banksel
01266 0332 		BankSel	ServoCurrent
01268 0332 0833 		movf	ServoCurrent,W
01269 0333 02F8 		subwf	Param78,F
01270 0334 0834 		movf	ServoCurrent+1,W
01271 0335 3BF9 		subwfb	Param79,F
01272 0336 0020 		movlb	0x00	;Bank 0
01273 0337 	;
01274 0337 1BF9 		btfsc	Param79,7	;Cur_AN0>(ssGripI+10)*4?
01275 0338 16BE 		bsf	GripIOver
01276 0339 1BF9 		btfsc	Param79,7	;Cur_AN0>(ssGripI+10)*4?
01277 033A 163F 		bsf	ssGripOCur
01278 033B 0008 		return
01279 033C 	;
01280 033C 	;=========================================================================================
01281 033C 	;Idle routine for Basic Serial Servo mode
01282 033C 	;
01283 033C 0020 	DoModeTwo	movlb	0
01284 033D 1BBB 		btfsc	ssCmdPos+1,7	;Any command issued?
01285 033E 323D 		bra	DoModeTwo_1	; No, Idle the servo
01286 033F 	;
01287 033F 	;Check for over current, kill position command if over current is detected.
01288 033F 2304 		call	CheckCurrent
01289 0340 1DBE 		btfss	OverCurrentFlag
01290 0341 3206 		bra	DM2_NotOverCurrent
01291 0342 01BA 		clrf	ssCmdPos
01292 0343 01BB 		clrf	ssCmdPos+1
01293 0344 17BB 		bsf	ssCmdPos+1,7
01294 0345 153F 		bsf	ssio_OverCurSD
01295 0346 11BE 		bcf	OverCurrentFlag
01296 0347 3234 		bra	DoModeTwo_1
01297 0348 	;
01298 0348 	DM2_NotOverCurrent:
01299 0348 113F 		bcf	ssio_OverCurSD
01300 0349 08D7 		movf	ServoSpeed,F
01301 034A 		SKPNZ		;Speed = 0?
01301 034A 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01302 034B 3225 		bra	DoModeTwo_NoSpeed	; yes
01303 034C 1C3E 		btfss	PulseSent	;Time to update?
01304 034D 2ACD 		goto	ModeReturn	; No
01305 034E 103E 		bcf	PulseSent
01306 034F 	;Param7D:Param7C = Cmd-Cur
01307 034F 083C 		movf	ssCurPos,W
01308 0350 023A 		subwf	ssCmdPos,W
01309 0351 00FC 		movwf	Param7C
01310 0352 083D 		movf	ssCurPos+1,W
01311 0353 3B3B 		subwfb	ssCmdPos+1,W
01312 0354 00FD 		movwf	Param7D
01313 0355 	; if Param7D:Param7C = 0 then we are In Position
01314 0355 047C 		iorwf	Param7C,W
01315 0356 		SKPNZ
01315 0356 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01316 0357 321D 		bra	DoModeTwo_Go	; if Cmd = Cur Go
01317 0358 	;
01318 0358 	;
01319 0358 1FFD 		BTFSS	Param7D,7	;Cmd<Cur? Set if Cur>Cmd
01320 0359 2B65 		GOTO	DoModeTwo_MovPlus	; Yes
01321 035A 	;Move minus
01322 035A 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01323 035B 2B60 		GOTO	DoModeTwo_Minus	; No
01324 035C 0857 		MOVF	ServoSpeed,W
01325 035D 077C 		ADDWF	Param7C,W
01326 035E 1803 		BTFSC	_C	;Dist<Speed?
01327 035F 3211 		bra	DoModeTwo_NoSpeed	; No
01328 0360 	;
01329 0360 	; Subtract speed from current position
01330 0360 0857 	DoModeTwo_Minus	MOVF	ServoSpeed,W
01331 0361 02BC 		SUBWF	ssCurPos,F	;SigOutTime
01332 0362 3000 		MOVLW	0x00
01333 0363 3BBD 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01334 0364 3210 		bra	DoModeTwo_Go
01335 0365 	;
01336 0365 	;=============================
01337 0365 	; 7D:7C = distance to go
01338 0365 	;
01339 0365 08FD 	DoModeTwo_MovPlus	MOVF	Param7D,F
01340 0366 		SKPZ		;Dist>255 to go?
01340 0366 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01341 0367 3204 		bra	DoModeTwo_Plus	; Yes
01342 0368 0857 		MOVF	ServoSpeed,W
01343 0369 027C 		SUBWF	Param7C,W	;Dist-Speed
01344 036A 		SKPNB		;Speed>Dist?
01344 036A 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01345 036B 3205 		bra	DoModeTwo_NoSpeed	; Yes
01346 036C 	;
01347 036C 0857 	DoModeTwo_Plus	MOVF	ServoSpeed,W	;7D:7C = CurPos + Speed
01348 036D 07BC 		ADDWF	ssCurPos,F
01349 036E 0103 		CLRW
01350 036F 3DBD 		ADDWFC	ssCurPos+1,F
01351 0370 3204 		bra	DoModeTwo_Go
01352 0371 	;
01353 0371 	;
SerialServo.asm                                                       Page: 25
/Users/davidflynn/Projects/SerialServo/Firmware/

01354 0371 	; set current position at command position
01355 0371 083A 	DoModeTwo_NoSpeed	movf	ssCmdPos,W
01356 0372 00BC 		movwf	ssCurPos
01357 0373 083B 		movf	ssCmdPos+1,W
01358 0374 00BD 		movwf	ssCurPos+1
01359 0375 	; make it so
01360 0375 083C 	DoModeTwo_Go	movf	ssCurPos,W
01361 0376 00FC 		movwf	Param7C
01362 0377 083D 		movf	ssCurPos+1,W
01363 0378 00FD 		movwf	Param7D
01364 0379 2546 		call	ClampInt
01365 037A 2505 		call	Copy7CToSig
01366 037B 2ACD 		goto	ModeReturn
01367 037C 	;
01368 037C 	DoModeTwo_1:
01369 037C 153E 		bsf	ServoIdle	;power down servo
01370 037D 2ACD 		goto	ModeReturn
01371 037E 	;
01372 037E 	;=========================================================================================
01373 037E 	;Idle routine for Absolute encoder position control w/ continuous rotation servo.
01374 037E 	;
01375 037E 	;Entry: ssCmdPos = user's command, ssCurPos
01376 037E 	;
01377 037E 	;error = ((EncoderVal + EncoderOffset) mod 16384)-ssCmdPos
01378 037E 	;if DeadBand>0 then
01379 037E 	;  if abs(error)<DeadBand then error=0
01380 037E 	;
01381 037E 	;if error=0 then
01382 037E 	;  IdleServo
01383 037E 	;else
01384 037E 	;  if error<-128 then error= -128
01385 037E 	;  if error>127 then error = 127
01386 037E 	;  servo=ServoStopCenter-error
01387 037E 	;
01388 037E 	; Ram Used:Param79,Param7A,Param7C,Param7D
01389 037E 	;
01390 037E 0020 	DoModeThree	movlb	0	;bank 0
01391 037F 1BBB 		btfsc	ssCmdPos+1,7
01392 0380 3208 		bra	DM3_ServoHere
01393 0381 	;
01394 0381 	;Check for over current, kill position command if over current is detected.
01395 0381 2304 		call	CheckCurrent
01396 0382 1DBE 		btfss	OverCurrentFlag
01397 0383 320C 		bra	DM3_NotOverCurrent
01398 0384 	;
01399 0384 153F 		bsf	ssio_OverCurSD
01400 0385 11BE 		bcf	OverCurrentFlag
01401 0386 	;Flag as no cmd pos.
01402 0386 01BA 		clrf	ssCmdPos
01403 0387 01BB 		clrf	ssCmdPos+1
01404 0388 17BB 		bsf	ssCmdPos+1,7
01405 0389 	; Servo Here
01406 0389 0846 	DM3_ServoHere	movf	EncoderVal,W
01407 038A 074B 		addwf	EncoderOffset,W
01408 038B 00BC 	                       movwf                  ssCurPos
01409 038C 0847 		movf	EncoderVal+1,W
01410 038D 3D4C 		addwfc	EncoderOffset+1,W
01411 038E 00BD 	                       movwf                  ssCurPos+1
01412 038F 	;
01413 038F 3286 		bra	DM3_IdleServo
01414 0390 	;
01415 0390 113F 	DM3_NotOverCurrent	bcf	ssio_OverCurSD
01416 0391 1940 	                       btfsc                  ssCmdPosVerified       ;Has been verified?
01417 0392 320A 	                       bra                    DM3_CPV_End            ; Yes
01418 0393 083A 	                       movf                   ssCmdPos,W             ; No, Clamp and mark as verified.
01419 0394 00FC 	                       movwf                  Param7C
01420 0395 083B 	                       movf                   ssCmdPos+1,W
01421 0396 00FD 	                       movwf                  Param7D
01422 0397 2546 	                       call                   ClampInt               ;MD3_MinCmd<=ssCurPos<=MD3_MaxCmd
01423 0398 087C 	                       movf                   Param7C,W
01424 0399 00BA 	                       movwf                  ssCmdPos
01425 039A 087D 	                       movf                   Param7D,W
01426 039B 00BB 	                       movwf                  ssCmdPos+1
01427 039C 1540 	                       bsf                    ssCmdPosVerified
01428 039D 	DM3_CPV_End:
01429 039D 	;
01430 039D 	; if speed = 0 then just be there
01431 039D 08D7 	                       movf                   ServoSpeed,F
01432 039E 	                       SKPZ
01432 039E 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01433 039F 3205 	                       bra                    DM3_CalcCurPos
01434 03A0 083A 	DM3_ServoThere         movf                   ssCmdPos,W
01435 03A1 00BC 	                       movwf                  ssCurPos
01436 03A2 083B 	                       movf                   ssCmdPos+1,W
01437 03A3 00BD 	                       movwf                  ssCurPos+1
01438 03A4 3226 	                       bra                    DM3_SetServoPWM
01439 03A5 	;
01440 03A5 1C3E 	DM3_CalcCurPos         btfss	PulseSent	;Time to update?
01441 03A6 3224 		bra	DM3_SetServoPWM	; No
01442 03A7 103E 		bcf	PulseSent
01443 03A8 	;
01444 03A8 	;if ssCmdPos<>ssCurPos then
01445 03A8 	;  if ssCmdPos>ssCurPos then
01446 03A8 	;    if ssCmdPos>ssCurPos+ServoSpeed then
01447 03A8 	;      ssCurPos += ServoSpeed
01448 03A8 	;    else
01449 03A8 	;      ssCurPos = ssCmdPos
01450 03A8 	;  else
01451 03A8 	;    if ssCmdPos<ssCurPos-ServoSpeed then
SerialServo.asm                                                       Page: 26
/Users/davidflynn/Projects/SerialServo/Firmware/

01452 03A8 	;      ssCurPos -= ServoSpeed
01453 03A8 	;    else
01454 03A8 	;      ssCurPos = ssCmdPos
01455 03A8 	;
01456 03A8 083A 	                       movf                   ssCmdPos,W             ;ssCurPos-ssCmdPos
01457 03A9 023C 	                       subwf                  ssCurPos,W
01458 03AA 00F8 	                       movwf                  Param78
01459 03AB 083B 	                       movf                   ssCmdPos+1,W
01460 03AC 3B3D 	                       subwfb                 ssCurPos+1,W
01461 03AD 0478 	                       iorwf                  Param78,W
01462 03AE 	                       SKPNZ                                         ;ssCmdPos=ssCurPos/
01462 03AE 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01463 03AF 321B 	                       bra                    DM3_SetServoPWM        ; Yes
01464 03B0 	;
01465 03B0 	                       SKPB                                          ;ssCmdPos>ssCurPos?
01465 03B0 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01466 03B1 320D 	                       bra                    DM3_GoRev              ; No
01467 03B2 	; ssCmdPos>ssCurPos forward
01468 03B2 143F 	                       bsf                    MD3_FFwd
01469 03B3 10BF 	                       bcf                    MD3_FRev
01470 03B4 	;ssCurPos += ServoSpeed
01471 03B4 0857 	                       movf                   ServoSpeed,W
01472 03B5 07BC 	                       addwf                  ssCurPos,F
01473 03B6 3000 	                       movlw                  0x00
01474 03B7 3DBD 	                       addwfc                 ssCurPos+1,F
01475 03B8 	;
01476 03B8 083A 	                       movf                   ssCmdPos,W             ;(ssCurPos+Speed)-ssCmdPos
01477 03B9 023C 	                       subwf                  ssCurPos,W
01478 03BA 083B 	                       movf                   ssCmdPos+1,W
01479 03BB 3B3D 	                       subwfb                 ssCurPos+1,W
01480 03BC 	                       SKPB
01480 03BC 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01481 03BD 33E2 	                       bra                    DM3_ServoThere
01482 03BE 320C 	                       bra                    DM3_SetServoPWM
01483 03BF 	;                       
01484 03BF 	; ssCmdPos<ssCurPos reverse
01485 03BF 103F 	DM3_GoRev              bcf                    MD3_FFwd
01486 03C0 14BF 	                       bsf                    MD3_FRev
01487 03C1 	;
01488 03C1 0857 	                       movf                   ServoSpeed,W
01489 03C2 02BC 	                       subwf                  ssCurPos,F
01490 03C3 3000 	                       movlw                  0x00
01491 03C4 3BBD 	                       subwfb                 ssCurPos+1,F
01492 03C5 	;
01493 03C5 083A 	                       movf                   ssCmdPos,W             ;(ssCurPos-Speed)-ssCmdPos
01494 03C6 023C 	                       subwf                  ssCurPos,W
01495 03C7 083B 	                       movf                   ssCmdPos+1,W
01496 03C8 3B3D 	                       subwfb                 ssCurPos+1,W
01497 03C9 	                       SKPNB
01497 03C9 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01498 03CA 33D5 	                       bra                    DM3_ServoThere
01499 03CB 	;
01500 03CB 	;Param7A:Param79 = ((EncoderVal + EncoderOffset) mod 4096)
01501 03CB 0846 	DM3_SetServoPWM	movf	EncoderVal,W
01502 03CC 074B 		addwf	EncoderOffset,W
01503 03CD 00F9 		movwf	Param79
01504 03CE 0847 		movf	EncoderVal+1,W
01505 03CF 3D4C 		addwfc	EncoderOffset+1,W
01506 03D0 393F 		andlw	0x3F
01507 03D1 00FA 		movwf	Param7A
01508 03D2 	; Calculate Error
01509 03D2 	;Param7A:Param79 = ((EncoderVal + EncoderOffset) mod 4096) - ssCurPos
01510 03D2 083C 		movf	ssCurPos,W	;(EncoderVal + EncoderOffset) mod 16384
01511 03D3 02F9 		subwf	Param79,F
01512 03D4 083D 		movf	ssCurPos+1,W
01513 03D5 3BFA 		subwfb	Param7A,F
01514 03D6 	; if error = 0 then idle
01515 03D6 0879 	                       movf                   Param79,W
01516 03D7 047A 	                       iorwf                  Param7A,W
01517 03D8 	                       SKPNZ
01517 03D8 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01518 03D9 323C 	                       bra                    DM3_IdleServo
01519 03DA 	; if DeadBand = 0 then skip DB check
01520 03DA 08DD 	                       movf                   DeadBand,F
01521 03DB 	                       SKPNZ
01521 03DB 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01522 03DC 3213 	                       bra                    DM3_NoDB
01523 03DD 	; if error<0 then Error_a=abs(error), Param7D:Param7C=abs(Param7A:Param79)
01524 03DD 0879 	                       movf                   Param79,W
01525 03DE 00FC 	                       movwf                  Param7C
01526 03DF 087A 	                       movf                   Param7A,W
01527 03E0 00FD 	                       movwf                  Param7D
01528 03E1 1FFA 	                       btfss                  Param7A,7
01529 03E2 3206 	                       bra                    DM3_ErrIsPos
01530 03E3 01FC 	                       clrf                   Param7C
01531 03E4 01FD 	                       clrf                   Param7D
01532 03E5 0879 	                       movf                   Param79,W
01533 03E6 02FC 	                       subwf                  Param7C,F
01534 03E7 087A 	                       movf                   Param7A,W
01535 03E8 3BFD 	                       subwfb                 Param7D,F
01536 03E9 	;
01537 03E9 	;if Error_a>255 then ignor DB
01538 03E9 08FD 	DM3_ErrIsPos           movf                   Param7D,F
01539 03EA 	                       SKPZ                                          ;Error>255?
01539 03EA 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01540 03EB 3204 	                       bra                    DM3_NoDB               ; Yes
01541 03EC 085D 	                       movf                   DeadBand,W
01542 03ED 02FC 	                       subwf                  Param7C,F              ;Param7C = Error - DB
01543 03EE 	                       SKPNB                                         ;DB>Error?
SerialServo.asm                                                       Page: 27
/Users/davidflynn/Projects/SerialServo/Firmware/

01543 03EE 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01544 03EF 3226 	                       bra                    DM3_IdleServo          ; Yes
01545 03F0 	;
01546 03F0 	; if error<-128 then error = -128
01547 03F0 1FFA 	DM3_NoDB               btfss                  Param7A,7              ;Error is negative?
01548 03F1 3209 	                       bra                    DM3_PosLimit           ; No
01549 03F2 307F 	                       movlw                  0x7F
01550 03F3 0479 	                       iorwf                  Param79,W              ;high bit only
01551 03F4 057A 	                       andwf                  Param7A,W
01552 03F5 3AFF 	                       xorlw                  0xFF
01553 03F6 	                       SKPNZ                                         ;< -128?
01553 03F6 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01554 03F7 320A 	                       bra                    DM3_CalcSCmd           ; No
01555 03F8 3080 	                       movlw                  0x80                   ;-128
01556 03F9 00F9 	                       movwf                  Param79
01557 03FA 3207 	                       bra                    DM3_CalcSCmd
01558 03FB 	;
01559 03FB 	; if error >= 128 then error = 127
01560 03FB 3080 	DM3_PosLimit           movlw                  0x80
01561 03FC 0579 	                       andwf                  Param79,W              ;hi bit only
01562 03FD 047A 	                       iorwf                  Param7A,W              ;or w/ hi byte
01563 03FE 	                       SKPNZ                                         ;>= 128?
01563 03FE 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01564 03FF 3202 	                       bra                    DM3_CalcSCmd           ; No
01565 0400 307F 	                       movlw                  0x7F
01566 0401 00F9 	                       movwf                  Param79
01567 0402 	;
01568 0402 1CDB 	DM3_CalcSCmd           btfss                  ssReverseDir           ;Moves reversed?
01569 0403 3209 	                       bra                    DM3_CalcSCmd_1         ; No
01570 0404 0879 	                       movf                   Param79,W
01571 0405 3C80 	                       sublw                  0x80                   ;test for -128
01572 0406 	                       SKPZ                                          ;Is -128?
01572 0406 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01573 0407 3202 	                       bra                    DM3_CalcSCmd_2s
01574 0408 3081 	                       movlw                  0x81                   ; Yes, Make it -127
01575 0409 00F9 	                       movwf                  Param79
01576 040A 0879 	DM3_CalcSCmd_2s        movf                   Param79,W
01577 040B 3C00 	                       sublw                  0x00                   ; Yes, 2's comp
01578 040C 00F9 	                       movwf                  Param79
01579 040D 	DM3_CalcSCmd_1:      
01580 040D 	;
01581 040D 	;0.5 x gain
01582 040D 	;                       asrf                   Param79,W
01583 040D 	;
01584 040D 	;
01585 040D 0879 	                       movf                   Param79,W
01586 040E 0251 	                       subwf                  ServoStopCenter,W
01587 040F 00FC 	                       movwf                  Param7C
01588 0410 3000 	                       movlw                  0x00
01589 0411 1BF9 	                       btfsc                  Param79,7              ;is neg?
01590 0412 30FF 	                       movlw                  0xFF                   ; yes, sign extend it
01591 0413 3B52 	                       subwfb                 ServoStopCenter+1,W
01592 0414 00FD 	                       movwf                  Param7D
01593 0415 3209 	                       bra	DM3_UpdatePos
01594 0416 	;
01595 0416 	;
01596 0416 	; abs(Error) <= DeadBand
01597 0416 	; if ssMode3IdleCenter then
01598 0416 	;   servo=ServoStopCenter
01599 0416 	; else
01600 0416 	;   ServoIdle=true
01601 0416 	;
01602 0416 1DDB 	DM3_IdleServo	btfss	ssMode3IdleCenter
01603 0417 320A 		bra	DM3_IdleInactive
01604 0418 0851 		movf	ServoStopCenter,W
01605 0419 00FC 		movwf	Param7C
01606 041A 0852 		movf	ServoStopCenter+1,W
01607 041B 00FD 		movwf	Param7D
01608 041C 103F 	                       bcf                    MD3_FFwd
01609 041D 10BF 	                       bcf                    MD3_FRev
01610 041E 113E 		bcf	ServoIdle
01611 041F 	;
01612 041F 	; set current position at destination position
01613 041F 	; Entry: Param7D:Param7C servo signal in 1/2 microseconds
01614 041F 	;
01615 041F 2541 	DM3_UpdatePos	call	ClampIntMD3
01616 0420 2505 		call	Copy7CToSig
01617 0421 2ACD 		goto	ModeReturn
01618 0422 	;
01619 0422 	;
01620 0422 153E 	DM3_IdleInactive	bsf	ServoIdle
01621 0423 103F 	                       bcf                    MD3_FFwd
01622 0424 10BF 	                       bcf                    MD3_FRev
01623 0425 2ACD 		goto	ModeReturn
01624 0426 	;
01625 0426 	;=============================
01626 0426 	;=========================================================================================
01627 0426 	;Idle routine for Gripper Serial Servo mode
01628 0426 	; Servo is set to idle only is no command or over current.
01629 0426 	;
01630 0426 0020 	DoMode4	movlb	0
01631 0427 1BBB 		btfsc	ssCmdPos+1,7	;Any command issued?
01632 0428 3245 		bra	DoMode4_1	; No, Idle the servo
01633 0429 	;
01634 0429 	;Check for over current, kill position command if over current is detected.
01635 0429 2304 		call	CheckCurrent
01636 042A 2316 		call	CheckGripCurrent
01637 042B 1DBE 		btfss	OverCurrentFlag
01638 042C 3206 		bra	DM4_NotOverCurrent
SerialServo.asm                                                       Page: 28
/Users/davidflynn/Projects/SerialServo/Firmware/

01639 042D 01BA 		clrf	ssCmdPos	;kill the command
01640 042E 01BB 		clrf	ssCmdPos+1
01641 042F 17BB 		bsf	ssCmdPos+1,7
01642 0430 153F 		bsf	ssio_OverCurSD
01643 0431 11BE 		bcf	OverCurrentFlag
01644 0432 323B 		bra	DoMode4_1	;Idle the servo
01645 0433 	;
01646 0433 	DM4_NotOverCurrent:
01647 0433 	; Speed cannot be 0, if 0 set to 1 (slow)
01648 0433 113F 		bcf	ssio_OverCurSD
01649 0434 08D7 		movf	ServoSpeed,F
01650 0435 		SKPNZ		;Speed = 0?
01650 0435 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01651 0436 0AD7 		incf	ServoSpeed,F	; yes, make it 1
01652 0437 1C3E 		btfss	PulseSent	;Time to update?
01653 0438 2ACD 		goto	ModeReturn	; No
01654 0439 103E 		bcf	PulseSent
01655 043A 	;Param7D:Param7C = Cmd-Cur
01656 043A 083C 		movf	ssCurPos,W
01657 043B 023A 		subwf	ssCmdPos,W
01658 043C 00FC 		movwf	Param7C
01659 043D 083D 		movf	ssCurPos+1,W
01660 043E 3B3B 		subwfb	ssCmdPos+1,W
01661 043F 00FD 		movwf	Param7D
01662 0440 	; if Param7D:Param7C = 0 then we are In Position
01663 0440 047C 		iorwf	Param7C,W
01664 0441 		SKPNZ
01664 0441 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01665 0442 320F 		bra	DoMode4_Hold	; if Cmd = Cur Go
01666 0443 	;
01667 0443 	;Sign bit set if Cur>Cmd
01668 0443 1FFD 		BTFSS	Param7D,7	;Cmd>Cur?
01669 0444 3211 		bra	DoMode4_MovPlus	; Yes
01670 0445 	;Move minus
01671 0445 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01672 0446 2C4D 		GOTO	DoMode4_Minus	; No
01673 0447 0857 		MOVF	ServoSpeed,W
01674 0448 077C 		ADDWF	Param7C,W
01675 0449 1C03 		BTFSS	_C	;Dist<Speed?
01676 044A 3202 		bra	DoMode4_Minus	; Yes
01677 044B 3001 		movlw	0x01	; No, use 1 as speed
01678 044C 3201 		bra	DoMode4_Minus_1
01679 044D 	;
01680 044D 	; Subtract speed from current position
01681 044D 0857 	DoMode4_Minus	MOVF	ServoSpeed,W
01682 044E 02BC 	DoMode4_Minus_1	SUBWF	ssCurPos,F	;SigOutTime
01683 044F 3000 		MOVLW	0x00
01684 0450 3BBD 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01685 0451 3213 		bra	DoMode4_Go
01686 0452 	;
01687 0452 	;=============================
01688 0452 	; if Cur_AN0>(ssGripI+0x10)*4 then move minus 1
01689 0452 1EBE 	DoMode4_Hold	btfss	GripIOver	;Gripping too hard?
01690 0453 2C65 		goto	DoMode4_Go	; No
01691 0454 3001 		movlw	0x01	; No, use 2 as speed
01692 0455 33F8 		bra	DoMode4_Minus_1
01693 0456 	;
01694 0456 	;=============================
01695 0456 	; 7D:7C = distance to go
01696 0456 	;
01697 0456 1A3E 	DoMode4_MovPlus	btfsc	GripIMet	;Servo Current > ssGripI?
01698 0457 33FA 		bra	DoMode4_Hold	; Yes, don't move more closed.
01699 0458 	;
01700 0458 08FD 		MOVF	Param7D,F
01701 0459 		SKPZ		;Dist>255 to go?
01701 0459 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01702 045A 3206 		bra	DoMode4_Plus	; Yes
01703 045B 0857 		MOVF	ServoSpeed,W
01704 045C 027C 		SUBWF	Param7C,W	;Dist-Speed
01705 045D 		SKPB		;Speed>Dist?
01705 045D 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01706 045E 3202 		bra	DoMode4_Plus	; No
01707 045F 3001 		movlw	0x01	;Use 1 as speed
01708 0460 3201 		bra	DoMode4_Plus_1
01709 0461 	;
01710 0461 0857 	DoMode4_Plus	MOVF	ServoSpeed,W	;CurPos += Speed
01711 0462 07BC 	DoMode4_Plus_1	ADDWF	ssCurPos,F
01712 0463 0103 		CLRW
01713 0464 3DBD 		ADDWFC	ssCurPos+1,F
01714 0465 	;
01715 0465 	; make it so
01716 0465 083C 	DoMode4_Go	movf	ssCurPos,W	;7D:7C = CurPos
01717 0466 00FC 		movwf	Param7C
01718 0467 083D 		movf	ssCurPos+1,W
01719 0468 00FD 		movwf	Param7D
01720 0469 2546 		call	ClampInt
01721 046A 2505 		call	Copy7CToSig
01722 046B 123E 		bcf	GripIMet
01723 046C 12BE 		bcf	GripIOver
01724 046D 2ACD 		goto	ModeReturn
01725 046E 	;
01726 046E 	DoMode4_1:
01727 046E 153E 		bsf	ServoIdle	;power down servo
01728 046F 123E 		bcf	GripIMet
01729 0470 12BE 		bcf	GripIOver
01730 0471 2ACD 		goto	ModeReturn
01731 0472 	;
01732 0472 	;=========================================================================================
01733 0472 	;=========================================================================================
SerialServo.asm                                                       Page: 29
/Users/davidflynn/Projects/SerialServo/Firmware/

01734 0472 	;DebounceTime,kMaxMode
01735 0472 	;Timer4Lo,SysMode
01736 0472 0020 	HandleButtons	movlb	0x00	;bank 0
01737 0473 08B5 		movf	Timer4Lo,F
01738 0474 		SKPNZ		;Debounced?
01738 0474 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01739 0475 320B 		bra	HdlBtn_1	; Yes
01740 0476 	;
01741 0476 1862 		btfsc	SW1_Flag
01742 0477 3206 		bra	HdlBtn_DB
01743 0478 18E2 		btfsc	SW2_Flag
01744 0479 3204 		bra	HdlBtn_DB
01745 047A 1962 		btfsc	SW3_Flag
01746 047B 3202 		bra	HdlBtn_DB
01747 047C 1DE2 		btfss	SW4_Flag
01748 047D 0008 		return
01749 047E 	;
01750 047E 300A 	HdlBtn_DB	movlw	DebounceTime
01751 047F 00B5 		movwf	Timer4Lo
01752 0480 0008 		return
01753 0481 	; we are de-bounced
01754 0481 1862 	HdlBtn_1	btfsc	SW1_Flag
01755 0482 3207 		bra	HdlBtn_Btn1
01756 0483 18E2 		btfsc	SW2_Flag
01757 0484 3206 		bra	HdlBtn_Btn2
01758 0485 1962 		btfsc	SW3_Flag
01759 0486 3205 		bra	HdlBtn_Btn3
01760 0487 19E2 		btfsc	SW4_Flag
01761 0488 3204 		bra	HdlBtn_Btn4
01762 0489 0008 		return
01763 048A 	;
01764 048A 	; Mode
01765 048A 	HdlBtn_Btn1:
01766 048A 2C7E 		goto	HdlBtn_DB
01767 048B 	;
01768 048B 	HdlBtn_Btn2:
01769 048B 2C7E 		goto	HdlBtn_DB
01770 048C 	;
01771 048C 	HdlBtn_Btn3:
01772 048C 2C7E 		goto	HdlBtn_DB
01773 048D 	; not used
01774 048D 	HdlBtn_Btn4:
01775 048D 2C7E 		goto	HdlBtn_DB
01776 048E 	;
01777 048E 	;=========================================================================================
01778 048E 	; Setup or Read AN0 or Read AN4
01779 048E 007C 	ANNumMask	EQU	0x7C
01780 048E 0000 	AN0_Val	EQU	0x00
01781 048E 0004 	AN1_Val	EQU	0x04
01782 048E 0008 	AN2_Val	EQU	0x08
01783 048E 000C 	AN3_Val	EQU	0x0C
01784 048E 0010 	AN4_Val	EQU	0x10
01785 048E 001C 	AN7_Val	EQU	0x1C
01786 048E 	;
01787 048E 0021 	ReadAN	MOVLB	1	;bank 1
01788 048F 1C1D 		BTFSS	ADCON0,ADON	;Is the Analog input ON?
01789 0490 3269 		BRA	ReadAN0_ColdStart	; No, go start it
01790 0491 	;
01791 0491 189D 		BTFSC	ADCON0,GO_NOT_DONE	;Conversion done?
01792 0492 3270 		BRA	ReadAN_Rtn	; No
01793 0493 	;
01794 0493 3000 		movlw	HIGH Cur_AN0
01795 0494 0085 		movwf	FSR0H
01796 0495 081D 		movf	ADCON0,W
01797 0496 0020 		movlb	0x00	;bank 0
01798 0497 397C 		andlw	ANNumMask
01799 0498 		SKPNZ
01799 0498 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01800 0499 322E 		bra	ReadAN_AN0
01801 049A 	;
01802 049A 00F8 		movwf	Param78	;AN select bits
01803 049B 	;
01804 049B 085F 		movf	ssAux0Config,W
01805 049C 390F 		andlw	0x0F
01806 049D 3C04 		sublw	kAuxIOAnalogIn
01807 049E 		SKPZ
01807 049E 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01808 049F 3204 		bra	ReadAN_TryAN2
01809 04A0 3004 		movlw	AN1_Val
01810 04A1 0278 		subwf	Param78,W	;AN select bits
01811 04A2 		SKPNZ
01811 04A2 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01812 04A3 3240 		bra	ReadAN_AN1
01813 04A4 	;
01814 04A4 0860 	ReadAN_TryAN2	movf	ssAux1Config,W
01815 04A5 390F 		andlw	0x0F
01816 04A6 3C04 		sublw	kAuxIOAnalogIn
01817 04A7 		SKPZ
01817 04A7 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01818 04A8 3204 		bra	ReadAN_TryAN3
01819 04A9 3008 		movlw	AN2_Val
01820 04AA 0278 		subwf	Param78,W	;AN select bits
01821 04AB 		SKPNZ
01821 04AB 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01822 04AC 323A 		bra	ReadAN_AN2
01823 04AD 	;
01824 04AD 0861 	ReadAN_TryAN3	movf	ssAux2Config,W
01825 04AE 390F 		andlw	0x0F
01826 04AF 3C04 		sublw	kAuxIOAnalogIn
SerialServo.asm                                                       Page: 30
/Users/davidflynn/Projects/SerialServo/Firmware/

01827 04B0 		SKPZ
01827 04B0 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01828 04B1 3204 		bra	ReadAN_TryAN4
01829 04B2 300C 		movlw	AN3_Val
01830 04B3 0278 		subwf	Param78,W	;AN select bits
01831 04B4 		SKPNZ
01831 04B4 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01832 04B5 3234 		bra	ReadAN_AN3
01833 04B6 	;
01834 04B6 3010 	ReadAN_TryAN4	movlw	AN4_Val
01835 04B7 0278 		subwf	Param78,W
01836 04B8 		SKPNZ
01836 04B8 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01837 04B9 3207 		bra	ReadAN_AN4
01838 04BA 	;
01839 04BA 3000 		movlw	AN0_Val	;next to read
01840 04BB 00F8 		movwf	Param78
01841 04BC 30BD 		movlw	LOW Cur_AN7
01842 04BD 0084 		movwf	FSR0L
01843 04BE 0021  a		MOVLB	Cur_AN0	;banksel
01842 04BF 		BankSel	Cur_AN0	;where the analog stuff is
01844 04BF 1532 		bsf	NewDataAN7
01845 04C0 322C 		bra	ReadAN_1
01846 04C1 	;
01847 04C1 301C 	ReadAN_AN4	movlw	AN7_Val	;next to read
01848 04C2 00F8 		movwf	Param78
01849 04C3 30BB 		movlw	low Cur_AN4
01850 04C4 0084 		movwf	FSR0L
01851 04C5 0021  a		MOVLB	Cur_AN0	;banksel
01850 04C6 		BankSel	Cur_AN0	;where the analog stuff is
01852 04C6 14B2 		bsf	NewDataAN4
01853 04C7 3225 		bra	ReadAN_1
01854 04C8 	;
01855 04C8 30B3 	ReadAN_AN0	movlw	low Cur_AN0
01856 04C9 0084 		movwf	FSR0L
01857 04CA 0021  a		MOVLB	Cur_AN0	;banksel
01856 04CB 		BankSel	Cur_AN0	;where the analog stuff is
01858 04CB 1432 		bsf	NewDataAN0
01859 04CC 3004 		movlw	AN1_Val	;next to read
01860 04CD 00F8 		movwf	Param78
01861 04CE 085F 		movf	ssAux0Config,W
01862 04CF 390F 		andlw	0x0F
01863 04D0 3C04 		sublw	kAuxIOAnalogIn
01864 04D1 		SKPNZ
01864 04D1 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01865 04D2 321A 		bra	ReadAN_1
01866 04D3 	;
01867 04D3 3008 	ReadAN_AN0_1	movlw	AN2_Val	;next to read
01868 04D4 00F8 		movwf	Param78
01869 04D5 0860 		movf	ssAux1Config,W
01870 04D6 390F 		andlw	0x0F
01871 04D7 3C04 		sublw	kAuxIOAnalogIn
01872 04D8 		SKPNZ
01872 04D8 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01873 04D9 3213 		bra	ReadAN_1
01874 04DA 	;
01875 04DA 300C 	ReadAN_AN0_2	movlw	AN3_Val	;next to read
01876 04DB 00F8 		movwf	Param78
01877 04DC 0861 		movf	ssAux2Config,W
01878 04DD 390F 		andlw	0x0F
01879 04DE 3C04 		sublw	kAuxIOAnalogIn
01880 04DF 		SKPNZ
01880 04DF 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01881 04E0 320C 		bra	ReadAN_1
01882 04E1 	;
01883 04E1 3010 	ReadAN_AN0_3	movlw	AN4_Val	;next to read
01884 04E2 00F8 		movwf	Param78
01885 04E3 3209 		bra	ReadAN_1
01886 04E4 	;
01887 04E4 30B5 	ReadAN_AN1	movlw	low Cur_AN1
01888 04E5 0084 		movwf	FSR0L
01889 04E6 33EC 		bra	ReadAN_AN0_1
01890 04E7 	;
01891 04E7 30B7 	ReadAN_AN2	movlw	low Cur_AN2
01892 04E8 0084 		movwf	FSR0L
01893 04E9 33F0 		bra	ReadAN_AN0_2
01894 04EA 	;
01895 04EA 30B9 	ReadAN_AN3	movlw	low Cur_AN3
01896 04EB 0084 		movwf	FSR0L
01897 04EC 33F4 		bra	ReadAN_AN0_3
01898 04ED 	;
01899 04ED 0021 	ReadAN_1	movlb	0x01	;bank 1
01900 04EE 081B 		MOVF	ADRESL,W
01901 04EF 001A 		MOVWI	FSR0++
01902 04F0 081C 		MOVF	ADRESH,W
01903 04F1 001A 		MOVWI	FSR0++
01904 04F2 	;
01905 04F2 0878 		movf	Param78,W
01906 04F3 1409 		BSF	WREG,0	;ADC ON
01907 04F4 009D 		MOVWF	ADCON0
01908 04F5 3004 		movlw	0x04	;Acquisition time 5uS
01909 04F6 2165 		call	DelayWuS
01910 04F7 149D 		BSF	ADCON0,ADGO	;Start next conversion.
01911 04F8 0020 		movlb	0x00	; bank 0
01912 04F9 0008 		return
01913 04FA 	;
01914 04FA 0021 	ReadAN0_ColdStart	MOVLB	1
01915 04FB 30E0 		MOVLW	b'11100000'	;Right Just, fosc/64
01916 04FC 	;	MOVLW	b'11110000'	;Right Just, Frc
SerialServo.asm                                                       Page: 31
/Users/davidflynn/Projects/SerialServo/Firmware/

01917 04FC 009E 		MOVWF	ADCON1
01918 04FD 3000 		MOVLW	AN0_Val	;Select AN0
01919 04FE 1409 		BSF	WREG,0	;ADC ON
01920 04FF 009D 		MOVWF	ADCON0
01921 0500 3004 		movlw	0x04	;Acquisition time 5uS
01922 0501 2165 		call	DelayWuS
01923 0502 149D 	ReadAN_3	BSF	ADCON0,GO
01924 0503 	ReadAN_Rtn:
01925 0503 0020 	Bank0_Rtn	MOVLB	0
01926 0504 0008 		Return
01927 0505 	;
01928 0505 	;=========================================================================================
01929 0505 	;
01930 0505 	; Don't disable interrupts if you don't need to...
01931 0505 0025 	Copy7CToSig	MOVLB	0x05	;bank 5
01932 0506 087C 		MOVF	Param7C,W
01933 0507 0220 		SUBWF	SigOutTime,W
01934 0508 		SKPZ
01934 0508 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01935 0509 3204 		bra	Copy7CToSig_1
01936 050A 087D 		MOVF	Param7D,W
01937 050B 0221 		SUBWF	SigOutTimeH,W
01938 050C 		SKPNZ
01938 050C 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01939 050D 3208 		bra	Copy7CToSig_Done
01940 050E 	;
01941 050E 138B 	Copy7CToSig_1	bcf	INTCON,GIE
01942 050F 1B8B 		btfsc	INTCON,GIE
01943 0510 33FD 		bra	Copy7CToSig_1
01944 0511 087C 		MOVF	Param7C,W
01945 0512 00A0 		MOVWF	SigOutTime
01946 0513 087D 		MOVF	Param7D,W
01947 0514 00A1 		MOVWF	SigOutTimeH
01948 0515 178B 		bsf	INTCON,GIE
01949 0516 0020 	Copy7CToSig_Done	movlb	0	;bank 0
01950 0517 113E 		BCF	ServoIdle
01951 0518 0008 		return
01952 0519 	;
01953 0519 	;=========================================================================================
01954 0519 	;=========================================================================================
01955 0519 	; Set CCP1 to go high is 0x100 clocks
01956 0519 	;
01957 0519 0020 	StartServo	MOVLB	0	;bank 0
01958 051A 1CBE 		BTFSS	ServoOff
01959 051B 0008 		RETURN
01960 051C 10BE 		BCF	ServoOff
01961 051D 	;
01962 051D 2530 		CALL	SetMiddlePosition
01963 051E 2505 		CALL	Copy7CToSig
01964 051F 	;
01965 051F 0025 		movlb	0x05	;bank 5
01966 0520 3040 		MOVLW	LOW kServoDwellTime
01967 0521 00A2 		MOVWF	CalcdDwell
01968 0522 309C 		MOVLW	HIGH kServoDwellTime
01969 0523 00A3 		MOVWF	CalcdDwellH
01970 0524 0020 		movlb	0	;bank 0
01971 0525 	;
01972 0525 3000 		MOVLW	0x00	;start in 0x100 clocks
01973 0526 0096 		MOVWF	TMR1L
01974 0527 30FF 		MOVLW	0xFF
01975 0528 0097 		MOVWF	TMR1H
01976 0529 	;
01977 0529 0025 		MOVLB	0x05
01978 052A 0192 		CLRF	CCPR1H
01979 052B 0191 		CLRF	CCPR1L
01980 052C 3008 		MOVLW	CCP1CON_Set
01981 052D 0093 		MOVWF	CCP1CON	;go high on match
01982 052E 0020 		MOVLB	0x00	;Bank 0
01983 052F 0008 		RETURN
01984 0530 	;
01985 0530 	;=========
01986 0530 	;
01987 0530 30B8 	SetMiddlePosition	MOVLW	LOW kMidPulseWidth
01988 0531 00FC 		MOVWF	Param7C
01989 0532 300B 		MOVLW	HIGH kMidPulseWidth
01990 0533 00FD 		MOVWF	Param7D
01991 0534 0008 		Return
01992 0535 	;
01993 0535 	;=========================================================================================
01994 0535 0020 	StopServo	movlb	0	;bank 0
01995 0536 18BE 		BTFSC	ServoOff
01996 0537 0008 		RETURN
01997 0538 	;
01998 0538 0025 		movlb	0x05	;bank 5
01999 0539 3040 		MOVLW	LOW kServoDwellTime
02000 053A 00A2 		MOVWF	CalcdDwell
02001 053B 309C 		MOVLW	HIGH kServoDwellTime
02002 053C 00A3 		MOVWF	CalcdDwellH
02003 053D 0020 		movlb	0	;bank 0
02004 053E 153E 		BSF	ServoIdle
02005 053F 14BE 		BSF	ServoOff
02006 0540 0008 		return
02007 0541 	;
02008 0541 	;=========================================================================================
02009 0541 	; ClampIntMD3(Param7D:Param7C,ServoFastReverse,ServoFastForward)
02010 0541 	;
02011 0541 	ClampIntMD3            mMOVLF                 ServoFastReverse,FSR0
02011 0541 304D      M		movlw	low ServoFastReverse	                       movlw                  low ADDRESS
02011 0542 0084      M		movwf	FSR0	                       movwf                  DEST
SerialServo.asm                                                       Page: 32
/Users/davidflynn/Projects/SerialServo/Firmware/

02011 0543 3000      M		movlw	high ServoFastReverse	                       movlw                  high ADDRESS
02011 0544 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
02012 0545 3204 	                       bra                    ClampInt_E2
02013 0546 	;
02014 0546 	;---------------------
02015 0546 	; ClampInt(Param7D:Param7C,ServoMin_uS,ServoMax_uS)
02016 0546 	;
02017 0546 	; Entry: Param7D:Param7C
02018 0546 	; Exit: Param7D:Param7C=ClampInt(Param7D:Param7C,ServoMin_uS,ServoMax_uS)
02019 0546 	; Ram Used: FSR0
02020 0546 	;
02021 0546 	ClampInt	mMOVLF                 ServoMin_uS,FSR0
02021 0546 3053      M		movlw	low ServoMin_uS	                       movlw                  low ADDRESS
02021 0547 0084      M		movwf	FSR0	                       movwf                  DEST
02021 0548 3000      M		movlw	high ServoMin_uS	                       movlw                  high ADDRESS
02021 0549 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
02022 054A 0020 	ClampInt_E2            movlb	0
02023 054B 	;W = Cmd - Max
02024 054B 3F02 	                       moviw                  2[FRS0]
02025 054C 027C 	                       subwf                  Param7C,W
02026 054D 3F03 	                       moviw                  3[FRS0]
02027 054E 3B7D 	                       subwfb                 Param7D,W
02028 054F 	                       SKPB                                          ;Cmd > Max?
02028 054F 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
02029 0550 320D 	                       bra                    ClampInt_tooHigh       ; Yes, Fix it
02030 0551 3200 	                       bra                    ClampInt_1             ; No, check for < Min
02031 0552 	;
02032 0552 	; W=Cmd - Min
02033 0552 3F00 	ClampInt_1             moviw                  0[FRS0]
02034 0553 027C 	                       subwf                  Param7C,W
02035 0554 3F01 	                       moviw                  1[FSR0]
02036 0555 3B7D 	                       subwfb                 Param7D,W
02037 0556 	                       SKPB                                          ;Cmd > Min?
02037 0556 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
02038 0557 0008 	                       return                                        ; Yes
02039 0558 3200 	                       bra                    ClampInt_tooLow        ; No, Fix it
02040 0559 	;
02041 0559 3F00 	ClampInt_tooLow	moviw                  0[FRS0]
02042 055A 00FC 		MOVWF	Param7C
02043 055B 3F01 		moviw                  1[FRS0]
02044 055C 00FD 		MOVWF	Param7D
02045 055D 0008 		RETURN
02046 055E 	;
02047 055E 3F02 	ClampInt_tooHigh	moviw                  2[FRS0]
02048 055F 00FC 		MOVWF	Param7C
02049 0560 3F03 		moviw                  3[FRS0]
02050 0561 00FD 		MOVWF	Param7D
02051 0562 0008 		RETURN
02052 0563 	;
02053 0563 	;=========================================================================================
02054 0563 	;=========================================================================================
02055 0563 	;
02056 0563 	                       if UsePID
02059 0563 		endif
02060 0563 	;
02061 0563 	;
02062 0563 	;
02063 0563 		org 0x800
02064 0800 		include <SerialServoCmds.inc>
00001 0800 	;=========================================================================================
00002 0800 	;
00003 0800 	;    Filename:      SerialServoCmds.inc
00004 0800 	;    Date:          6/1/2018
00005 0800 	;    File Version:  1.1
00006 0800 	;
00007 0800 	;    Author:        David M. Flynn
00008 0800 	;    Company:       Oxford V.U.E., Inc.
00009 0800 	;    E-Mail:        dflynn@oxfordvue.com
00010 0800 	;    Web Site:      http://www.oxfordvue.com/
00011 0800 	;
00012 0800 	;=========================================================================================
00013 0800 	; Notes:
00014 0800 	;  Command interpreter for SerialServo
00015 0800 	;
00016 0800 	; History
00017 0800 	; 1.1    6/1/2018	All commands are here now.
00018 0800 	; 1.0    5/25/2018	Moved out of SerialServo.asm
00019 0800 	;=========================================================================================
00020 0800 	;
00021 0800 0081 	kCmd_SetMode	EQU	0x81	;+1 data (SysMode), return ACK
00022 0800 0001 	kCmd_GetMode	EQU	0x01
00023 0800 0082 	kCmd_SetCmdPos	EQU	0x82	;+2 data (ssCmdPos), return ACK
00024 0800 0002 	kCmd_GetCmdPos	EQU	0x02
00025 0800 0083 	kCmd_SetMaxI	EQU	0x83	;+1 data (ssMaxI), return ACK
00026 0800 0003 	kCmd_GetMaxI	EQU	0x03
00027 0800 0084 	kCmd_SetFFwd	EQU	0x84	;+2 data (ServoFastForward), return ACK
00028 0800 0004 	kCmd_GetFFwd	EQU	0x04
00029 0800 0085 	kCmd_SetFRev	EQU	0x85	;+2 data (ServoFastReverse), return ACK
00030 0800 0005 	kCmd_GetFRev	EQU	0x05
00031 0800 0086 	kCmd_SetMin_uS	EQU	0x86	;+2 data (ServoMin_uS), return ACK
00032 0800 0006 	kCmd_GetMin_uS	EQU	0x06
00033 0800 0087 	kCmd_SetMax_uS	EQU	0x87	;+2 data (ServoMax_uS), return ACK
00034 0800 0007 	kCmd_GetMax_uS	EQU	0x07
00035 0800 0088 	kCmd_SetRevDir	EQU	0x88	;+1 data (ssReverseDir), return ACK
00036 0800 0008 	kCmd_GetRevDir	EQU	0x08
00037 0800 0089 	kCmd_SetEnaOvrCur	EQU	0x89	;+1 data (ssEnableOverCur), return ACK
00038 0800 0009 	kCmd_GetEnaOvrCur	EQU	0x09
00039 0800 	;
00040 0800 008B 	kCmd_SetStopCenter	EQU	0x8B	;+2 data (ServoStopCenter), return ACK
SerialServo.asm                                                       Page: 33
/Users/davidflynn/Projects/SerialServo/Firmware/

00041 0800 000B 	kCmd_GetStopCenter	EQU	0x0B
00042 0800 008C 	kCmd_SetSpeed	EQU	0x8C	;+1 data (ServoSpeed), return ACK
00043 0800 000C 	kCmd_GetSpeed	EQU	0x0C
00044 0800 008D 	kCmd_SetUseIdleCenter	EQU	0x8D	;+1 data (ssMode3IdleCenter), return ACK
00045 0800 000D 	kCmd_GetUseIdleCenter	EQU	0x0D
00046 0800 008E 	kCmd_SetDeadBand	EQU	0x8E	;+1 data (DeadBand), return ACK
00047 0800 000E 	kCmd_GetDeadBand	EQU	0x0E
00048 0800 008F 	kCmd_SetUseFastPWM	EQU	0x8F	;+1 data (ssEnableFastPWM), return ACK
00049 0800 000F 	kCmd_GetUseFastPWM	EQU	0x0F
00050 0800 	;
00051 0800 00B1 	kCmd_SetGripI	EQU	0xB1	;+1 data (ssGripI), return ACK
00052 0800 0021 	kCmd_GetGripI	EQU	0x21
00053 0800 00B2 	kCmd_SetAuxConfig	EQU	0xB2	;+2 data (AuxNum,Value), return ACK
00054 0800 0022 	kCmd_GetAuxConfig	EQU	0x22	;+1 data (AuxNum)
00055 0800 00B3 	kCmd_SetAuxNValue	EQU	0xB3	;+2 data (AuxNum,Value), return ACK
00056 0800 0023 	kCmd_GetAuxNValue	EQU	0x23	;(AuxN,ValueL,ValueH)
00057 0800 00B4 	kCmd_SetEncoderOffset	EQU	0xB4	;+2 data (EncoderOffset), return ACK
00058 0800 0024 	kCmd_GetEncoderOffset	EQU	0x24
00059 0800 	                       if UsePID
00066 0800 	                       endif
00067 0800 	;
00068 0800 0091 	kCmd_GetI	EQU	0x91	;return Cur_AN0
00069 0800 0092 	kCmd_GetEnc	EQU	0x92	;return EncoderVal
00070 0800 0093 	kCmd_GetEncAbs	EQU	0x93	;return EncoderAccum
00071 0800 0094 	kCmd_SaveParams	EQU	0x94	;Save all eeprom params, return ACK
00072 0800 0095 	kCmd_RestoreParams	EQU	0x95	;Copy to ram, return ACK
00073 0800 0096 	kCmd_GetBattVolts	EQU	0x96	;return Cur_AN7
00074 0800 0097 	kCmd_GetCalPot	EQU	0x97	;return Cur_AN4
00075 0800 0098 	kCmd_GetStatus	EQU	0x98	;return ssStatus
00076 0800 0099 	kCmd_ReBoot	EQU	0x99	;ReBoot the controller
00077 0800 009A 	kCmd_RunBootloader	EQU	0x9A	;Set EEPROM (0xFF) = 0xFF and reboot
00078 0800 	;
00079 0800 	; these commands save params and return a 0,0,0,0 packet with the new address
00080 0800 00A1 	kCmd_SetMasterAddr	EQU	0xA1	;+1 data, return a zero packet
00081 0800 00A2 	kCmd_SetSlaveAddr	EQU	0xA2	;+1 data, return a zero packet
00082 0800 	;
00083 0800 	;Special packet (0xDD, 0xDD, 0x01, 0x02, 0xAA, 0x00, 0x00, 0x00, checksum)
00084 0800 00AA 	kCmd_SendIDString	EQU	0xAA	; returns "DMFE Serial Servo\n"
00085 0800 	;
00086 0800 	;=========================================================================================
00087 0800 	;
00088 0800 	RS232_Send_S0	mLongCall	RS232_Send
00088 0800 3182      M		movlp	RS232_Send	                       movlp                  Destination
00088 0801 2279      M		call	RS232_Send	                       call                   Destination
00088 0802 3188      M		movlp	$	                       movlp                  $
00089 0803 0008 		return
00090 0804 	;
00091 0804 	;=========================================================================================
00092 0804 	; Entry: RXDataIsNew=1, data in RX_Data
00093 0804 	;
00094 0804 0021 	HandleRXData	movlb	RX_Flags	;bank 1
00095 0805 10A1 		bcf	RXDataIsNew
00096 0806 1821 		btfsc	RXDataValidFlag	;from master to me?
00097 0807 3202 		bra	HandleRXData_1
00098 0808 0020 	HandleRXData_Rtn	movlb	0	;bank 0
00099 0809 0008 		return		; no, ignore this packet
00100 080A 	;
00101 080A 0020 	HandleRXData_1	movlb	0	;bank 0
00102 080B 	                       mMOVLF	RX_Data,FSR1
00102 080B 30AA      M		movlw	low RX_Data	                       movlw                  low ADDRESS
00102 080C 0086      M		movwf	FSR1	                       movwf                  DEST
00102 080D 3000      M		movlw	high RX_Data	                       movlw                  high ADDRESS
00102 080E 0087      M		movwf	FSR1+1	                       movwf                  DEST+1
00103 080F 		mMOVLF	TX_Data,FSR0
00103 080F 30AE      M		movlw	low TX_Data	                       movlw                  low ADDRESS
00103 0810 0084      M		movwf	FSR0	                       movwf                  DEST
00103 0811 3000      M		movlw	high TX_Data	                       movlw                  high ADDRESS
00103 0812 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
00104 0813 	;Dispatcher
00105 0813 	;
00106 0813 0016 		moviw	FSR1++
00107 0814 00F8 		movwf	Param78	;aka RX_Data
00108 0815 39F0 		andlw                  0xF0
00109 0816 		SKPZ
00109 0816 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00110 0817 3213 		bra                    Dispatcher_1
00111 0818 0878 		movf                   Param78,W
00112 0819 390F 		andlw                  0x0F
00113 081A 	;Jump table for 0x00 to 0x0F
00114 081A 000B 	                       brw
00115 081B 0008 	                       return                                        ;0x00 not used
00116 081C 327F 	                       bra                    Cmd_GetMode
00117 081D 3286 	                       bra                    Cmd_GetCmdPos
00118 081E 28AD 	                       goto                   Cmd_GetMaxI
00119 081F 28B5 	                       goto                   Cmd_GetFFwd
00120 0820 28BF 	                       goto                   Cmd_GetFRev
00121 0821 28C9 	                       goto                   Cmd_GetMin_uS
00122 0822 28D3 	                       goto                   Cmd_GetMax_uS
00123 0823 28DE 	                       goto                   Cmd_GetRevDir
00124 0824 28E7 	                       goto                   Cmd_GetEnaOvrCur       ;9
00125 0825 0008 	                       return
00126 0826 28EF 	                       goto                   Cmd_GetStopCenter
00127 0827 28F8 	                       goto                   Cmd_GetSpeed
00128 0828 2901 	                       goto                   Cmd_GetUseIdleCenter
00129 0829 2907 	                       goto                   Cmd_GetDeadBand
00130 082A 2910 	                       goto                   Cmd_GetUseFastPWM
00131 082B 	;
00132 082B 3C80 	Dispatcher_1           sublw                  0x80
00133 082C 	                       SKPZ
SerialServo.asm                                                       Page: 34
/Users/davidflynn/Projects/SerialServo/Firmware/

00133 082C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00134 082D 3213 	                       bra                    Dispatcher_2
00135 082E 0878 	                       movf                   Param78,W
00136 082F 390F 		andlw                  0x0F
00137 0830 	;Jump table for 0x80 to 0x8F
00138 0830 000B 	                       brw
00139 0831 0008 	                       return                                        ;0x80 not used
00140 0832 3262 	                       bra                    Cmd_SetMode
00141 0833 326B 	                       bra                    Cmd_SetCmdPos
00142 0834 28AA 	                       goto                   Cmd_SetMaxI
00143 0835 28B0 	                       goto                   Cmd_SetFFwd
00144 0836 28BA 	                       goto                   Cmd_SetFRev
00145 0837 28C4 	                       goto                   Cmd_SetMin_uS
00146 0838 28CE 	                       goto                   Cmd_SetMax_uS
00147 0839 28D8 	                       goto                   Cmd_SetRevDir
00148 083A 28E1 	                       goto                   Cmd_SetEnaOvrCur
00149 083B 0008 	                       return
00150 083C 28EA 	                       goto                   Cmd_SetStopCenter
00151 083D 28F4 	                       goto                   Cmd_SetSpeed
00152 083E 28FB 	                       goto                   Cmd_SetUseIdleCenter
00153 083F 2904 	                       goto                   Cmd_SetDeadBand
00154 0840 290A 	                       goto                   Cmd_SetUseFastPWM
00155 0841 	;
00156 0841 	;Jump table for 0x20 to 0x27
00157 0841 0878 	Dispatcher_2           movf                   Param78,W
00158 0842 39F0 	                       andlw                  0xF0
00159 0843 3C20 	                       sublw                  0x20
00160 0844 	                       SKPZ
00160 0844 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00161 0845 320D 	                       bra                    Dispatcher_3
00162 0846 19F8 	                       btfsc                  Param78,3              ;>7?
00163 0847 0008 	                       return                                        ; Yes, oops
00164 0848 3007 	                       movlw                  0x07
00165 0849 0578 	                       andwf                  Param78,W
00166 084A 000B 	                       brw
00167 084B 0008 	                       return
00168 084C 2916 	                       goto                   Cmd_GetGripI
00169 084D 2925 	                       goto                   Cmd_GetAuxConfig
00170 084E 294E 	                       goto                   Cmd_GetAuxNValue
00171 084F 2998 	                       goto                   Cmd_GetEncoderOffset
00172 0850 	                       if UsePID
00176 0850 	                       else
00177 0850 0008 	                       return
00178 0851 0008 	                       return
00179 0852 0008 	                       return
00180 0853 	                       endif
00181 0853 	;
00182 0853 0878 	Dispatcher_3           movf                   Param78,W
00183 0854 39F0 	                       andlw                  0xF0
00184 0855 3CB0 	                       sublw                  0xB0
00185 0856 	                       SKPZ
00185 0856 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00186 0857 320D 	                       bra                    Dispatcher_4
00187 0858 19F8 	                       btfsc                  Param78,3              ;>7?
00188 0859 0008 	                       return                                        ; Yes, oops
00189 085A 3007 	                       movlw                  0x07
00190 085B 0578 	                       andwf                  Param78,W
00191 085C 000B 	                       brw
00192 085D 0008 	                       return
00193 085E 2913 	                       goto                   Cmd_SetGripI
00194 085F 2919 	                       goto                   Cmd_SetAuxConfig
00195 0860 2931 	                       goto                   Cmd_SetAuxNValue
00196 0861 2993 	                       goto                   Cmd_SetEncoderOffset
00197 0862 	                       if UsePID
00201 0862 	                       else
00202 0862 0008 	                       return
00203 0863 0008 	                       return
00204 0864 0008 	                       return
00205 0865 	                       endif
00206 0865 	;
00207 0865 	;Jump table for 0x90 to 0x9F
00208 0865 0878 	Dispatcher_4           movf                   Param78,W
00209 0866 39F0 	                       andlw                  0xF0
00210 0867 3C90 	                       sublw                  0x90
00211 0868 	                       SKPZ
00211 0868 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00212 0869 3213 	                       bra                    Dispatcher_5
00213 086A 300F 	                       movlw                  0x0F
00214 086B 0578 	                       andwf                  Param78,W
00215 086C 000B 	                       brw
00216 086D 0008 	                       return                                        ;0x90 not used
00217 086E 299D 	                       goto                   Cmd_GetI
00218 086F 29A3 	                       goto                   Cmd_GetEnc
00219 0870 29A8 	                       goto                   Cmd_GetEncAbs
00220 0871 29B3 	                       goto                   Cmd_SaveParams
00221 0872 29B7 	                       goto                   Cmd_RestoreParams
00222 0873 29BB 	                       goto                   Cmd_GetBattVolts
00223 0874 0008 	                       return                                        ;goto                   Cmd_GetCalPot
00224 0875 29C7 	                       goto                   Cmd_GetStatus
00225 0876 0001 	                       reset                                         ;Cmd_ReBoot
00226 0877 29D4 	                       goto                   Cmd_RunBootloader
00227 0878 0008 	                       return
00228 0879 0008 	                       return
00229 087A 0008 	                       return
00230 087B 0008 	                       return
00231 087C 0008 	                       return
00232 087D 	;
00233 087D 	;Jump table for 0xA0 to 0xAF
00234 087D 0878 	Dispatcher_5           movf                   Param78,W
SerialServo.asm                                                       Page: 35
/Users/davidflynn/Projects/SerialServo/Firmware/

00235 087E 39F0 	                       andlw                  0xF0
00236 087F 3CA0 	                       sublw                  0xA0
00237 0880 	                       SKPZ
00237 0880 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00238 0881 3203 	                       bra                    Dispatcher_6
00239 0882 300F 	                       movlw                  0x0F
00240 0883 0578 	                       andwf                  Param78,W
00241 0884 000B 	                       brw
00242 0885 0008 	Dispatcher_6           return                                        ;0xA0 not used
00243 0886 29DA 	                       goto                   Cmd_SetMasterAddr
00244 0887 29E0 	                       goto                   Cmd_SetSlaveAddr
00245 0888 0008 	                       return
00246 0889 0008 	                       return
00247 088A 0008 	                       return
00248 088B 0008 	                       return
00249 088C 0008 	                       return
00250 088D 0008 	                       return
00251 088E 0008 	                       return
00252 088F 29E6 	                       goto                   Cmd_SendIDString       ;0xAA
00253 0890 0008 	                       return
00254 0891 0008 	                       return
00255 0892 0008 	                       return
00256 0893 0008 	                       return
00257 0894 0008 	                       return
00258 0895 	;
00259 0895 	;---kCmd_SetMode----------------
00260 0895 	; Set Mode
00261 0895 3005 	Cmd_SetMode	movlw	kMaxMode+1
00262 0896 0201 		subwf	INDF1,W
00263 0897 		SKPB		;kMaxMode+1>Data
00263 0897 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00264 0898 336F 		bra	HandleRXData_Rtn
00265 0899 	;
00266 0899 0016 		moviw	FSR1++
00267 089A 00D8 		movwf	SysMode
00268 089B 2A07 		goto	TX_ACK
00269 089C 	;
00270 089C 	;---kCmd_GetMode------------------
00271 089C 0858 	Cmd_GetMode	movf	SysMode,W
00272 089D 001A 		movwi	FSR0++
00273 089E 2800 		goto	RS232_Send_S0
00274 089F 	;
00275 089F 	;---kCmd_SetCmdPos-------------------
00276 089F 	; Set Command Position
00277 089F 0016 	Cmd_SetCmdPos	moviw	FSR1++
00278 08A0 00BA 		movwf	ssCmdPos
00279 08A1 0016 		moviw	FSR1++
00280 08A2 00BB 		movwf	ssCmdPos+1
00281 08A3 2A07 		goto	TX_ACK
00282 08A4 	;
00283 08A4 	;---kCmd_GetCmdPos------------------
00284 08A4 	; Get Command Position
00285 08A4 083A 	Cmd_GetCmdPos	movf	ssCmdPos,W
00286 08A5 001A 		movwi	FSR0++
00287 08A6 083B 		movf	ssCmdPos+1,W
00288 08A7 001A 		movwi	FSR0++
00289 08A8 1140 		bcf                    ssCmdPosVerified
00290 08A9 2800 		goto	RS232_Send_S0
00291 08AA 	;
00292 08AA 	Cmd_GetCmdPos_end:
00293 08AA 	;---kCmd_SetMaxI-------------------
00294 08AA 	; Set Max Current
00295 08AA 0016 	Cmd_SetMaxI	moviw	FSR1++
00296 08AB 00DC 		movwf	ssMaxI
00297 08AC 2A07 		goto	TX_ACK
00298 08AD 	;
00299 08AD 	;---kCmd_GetMaxI-------------------
00300 08AD 	; Get Max Current
00301 08AD 085C 	Cmd_GetMaxI	movf	ssMaxI,W
00302 08AE 001A 		movwi	FSR0++
00303 08AF 2800 		goto	RS232_Send_S0
00304 08B0 	;
00305 08B0 	;---kCmd_SetFFwd-------------------
00306 08B0 	; Set ServoFastForward
00307 08B0 0016 	Cmd_SetFFwd	moviw	FSR1++
00308 08B1 00CF 		movwf	ServoFastForward
00309 08B2 0016 		moviw	FSR1++
00310 08B3 00D0 		movwf	ServoFastForward+1
00311 08B4 2A07 		goto	TX_ACK
00312 08B5 	;
00313 08B5 	;---kCmd_GetFFwd-------------------
00314 08B5 	; Get ServoFastForward
00315 08B5 084F 	Cmd_GetFFwd	movf	ServoFastForward,W
00316 08B6 001A 		movwi	FSR0++
00317 08B7 0850 		movf	ServoFastForward+1,W
00318 08B8 001A 		movwi	FSR0++
00319 08B9 2800 		goto	RS232_Send_S0
00320 08BA 	;
00321 08BA 	;---kCmd_SetFRev-------------------
00322 08BA 	; Set ServoFastReverse
00323 08BA 0016 	Cmd_SetFRev	moviw	FSR1++
00324 08BB 00CD 		movwf	ServoFastReverse
00325 08BC 0016 		moviw	FSR1++
00326 08BD 00CE 		movwf	ServoFastReverse+1
00327 08BE 2A07 		goto	TX_ACK
00328 08BF 	;
00329 08BF 	;---kCmd_GetFRev------------------
00330 08BF 	; Get ServoFastReverse
00331 08BF 084D 	Cmd_GetFRev	movf	ServoFastReverse,W
SerialServo.asm                                                       Page: 36
/Users/davidflynn/Projects/SerialServo/Firmware/

00332 08C0 001A 		movwi	FSR0++
00333 08C1 084E 		movf	ServoFastReverse+1,W
00334 08C2 001A 		movwi	FSR0++
00335 08C3 2800 		goto	RS232_Send_S0
00336 08C4 	;
00337 08C4 	;---kCmd_SetMin_uS-------------------
00338 08C4 	; Set ServoMin_uS
00339 08C4 0016 	Cmd_SetMin_uS	moviw	FSR1++
00340 08C5 00D3 		movwf	ServoMin_uS
00341 08C6 0016 		moviw	FSR1++
00342 08C7 00D4 		movwf	ServoMin_uS+1
00343 08C8 2A07 		goto	TX_ACK
00344 08C9 	;
00345 08C9 	;---kCmd_GetMin_uS----------------
00346 08C9 	; Get ServoMin_uS
00347 08C9 0853 	Cmd_GetMin_uS	movf	ServoMin_uS,W
00348 08CA 001A 		movwi	FSR0++
00349 08CB 0854 		movf	ServoMin_uS+1,W
00350 08CC 001A 		movwi	FSR0++
00351 08CD 2800 		goto	RS232_Send_S0
00352 08CE 	;
00353 08CE 	;---kCmd_SetMax_uS-------------------
00354 08CE 	; Set ServoMax_uS
00355 08CE 0016 	Cmd_SetMax_uS	moviw	FSR1++
00356 08CF 00D5 		movwf	ServoMax_uS
00357 08D0 0016 		moviw	FSR1++
00358 08D1 00D6 		movwf	ServoMax_uS+1
00359 08D2 2A07 		goto	TX_ACK
00360 08D3 	;
00361 08D3 	;---kCmd_GetMax_uS-----------------
00362 08D3 	; Get ServoMax_uS
00363 08D3 0855 	Cmd_GetMax_uS	movf	ServoMax_uS,W
00364 08D4 001A 		movwi	FSR0++
00365 08D5 0856 		movf	ServoMax_uS+1,W
00366 08D6 001A 		movwi	FSR0++
00367 08D7 2800 		goto	RS232_Send_S0
00368 08D8 	;
00369 08D8 	;---kCmd_SetRevDir---------------
00370 08D8 10DB 	Cmd_SetRevDir	bcf	ssReverseDir
00371 08D9 3001 		movlw	0x01
00372 08DA 0601 		xorwf	INDF1,W
00373 08DB 		SKPNZ		;01h?
00373 08DB 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00374 08DC 14DB 		bsf	ssReverseDir	; Yes
00375 08DD 2A07 		goto	TX_ACK
00376 08DE 	;
00377 08DE 	;---kCmd_GetRevDir---------------
00378 08DE 18DB 	Cmd_GetRevDir	btfsc	ssReverseDir
00379 08DF 1400 		bsf	INDF0,0
00380 08E0 2800 		goto	RS232_Send_S0
00381 08E1 	;
00382 08E1 	;---kCmd_SetEnaOvrCur------------
00383 08E1 105B 	Cmd_SetEnaOvrCur	bcf	ssEnableOverCur
00384 08E2 3001 		movlw	0x01
00385 08E3 0601 		xorwf	INDF1,W
00386 08E4 		SKPNZ
00386 08E4 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00387 08E5 145B 		bsf	ssEnableOverCur
00388 08E6 2A07 		goto	TX_ACK
00389 08E7 	;
00390 08E7 	;---kCmd_GetEnaOvrCur------------
00391 08E7 185B 	Cmd_GetEnaOvrCur	btfsc	ssEnableOverCur
00392 08E8 1400 		bsf	INDF0,0
00393 08E9 2800 		goto	RS232_Send_S0
00394 08EA 	;
00395 08EA 	;---kCmd_SetStopCenter---------
00396 08EA 0016 	Cmd_SetStopCenter	moviw	FSR1++
00397 08EB 00D1 		movwf	ServoStopCenter
00398 08EC 0016 		moviw	FSR1++
00399 08ED 00D2 		movwf	ServoStopCenter+1
00400 08EE 2A07 		goto	TX_ACK
00401 08EF 	;
00402 08EF 	;---kCmd_GetStopCenter---------
00403 08EF 0851 	Cmd_GetStopCenter	movf	ServoStopCenter,W
00404 08F0 001A 		movwi	FSR0++
00405 08F1 0852 		movf	ServoStopCenter+1,W
00406 08F2 001A 		movwi	FSR0++
00407 08F3 2800 		goto	RS232_Send_S0
00408 08F4 	;
00409 08F4 	;---kCmd_SetSpeed--------------
00410 08F4 0016 	Cmd_SetSpeed	moviw	FSR1++
00411 08F5 393F 		andlw	0x3F	;0..63
00412 08F6 00D7 		movwf	ServoSpeed
00413 08F7 2A07 		goto	TX_ACK
00414 08F8 	;
00415 08F8 	;---kCmd_GetSpeed--------------
00416 08F8 0857 	Cmd_GetSpeed	movf	ServoSpeed,W
00417 08F9 001A 		movwi	FSR0++
00418 08FA 2800 		goto	RS232_Send_S0
00419 08FB 	;
00420 08FB 	;---kCmd_SetUseIdleCenter------
00421 08FB 11DB 	Cmd_SetUseIdleCenter	bcf	ssMode3IdleCenter
00422 08FC 3001 		movlw	0x01
00423 08FD 0601 		xorwf	INDF1,W
00424 08FE 		SKPNZ
00424 08FE 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00425 08FF 15DB 		bsf	ssMode3IdleCenter
00426 0900 2A07 		goto	TX_ACK
00427 0901 	;
SerialServo.asm                                                       Page: 37
/Users/davidflynn/Projects/SerialServo/Firmware/

00428 0901 	;---kCmd_GetUseIdleCenter------
00429 0901 19DB 	Cmd_GetUseIdleCenter	btfsc	ssMode3IdleCenter
00430 0902 1400 		bsf	INDF0,0
00431 0903 2800 		goto	RS232_Send_S0
00432 0904 	;
00433 0904 	;---kCmd_SetDeadBand------------
00434 0904 0016 	Cmd_SetDeadBand	moviw	FSR1++
00435 0905 00DD 		movwf	DeadBand
00436 0906 2A07 		goto	TX_ACK	
00437 0907 	;
00438 0907 	;---kCmd_GetDeadBand------------
00439 0907 085D 	Cmd_GetDeadBand	movf	DeadBand,W
00440 0908 001A 		movwi	FSR0++
00441 0909 2800 		goto	RS232_Send_S0
00442 090A 	;
00443 090A 	;---kCmd_SetUseFastPWM----------	;+1 data (ssEnableFastPWM), return ACK
00444 090A 125B 	Cmd_SetUseFastPWM	bcf	ssEnableFastPWM
00445 090B 3001 		movlw	0x01
00446 090C 0601 		xorwf	INDF1,W
00447 090D 		SKPNZ
00447 090D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00448 090E 165B 		bsf	ssEnableFastPWM
00449 090F 2A07 		goto	TX_ACK
00450 0910 	;
00451 0910 	;---kCmd_GetUseFastPWM----------
00452 0910 1A5B 	Cmd_GetUseFastPWM	btfsc	ssEnableFastPWM
00453 0911 1400 		bsf	INDF0,0
00454 0912 2800 		goto	RS232_Send_S0
00455 0913 	;
00456 0913 	;---kCmd_SetGripI-------------------
00457 0913 	; Set Grip Current
00458 0913 0016 	Cmd_SetGripI	moviw	FSR1++
00459 0914 00DE 		movwf	ssGripI
00460 0915 2A07 		goto	TX_ACK
00461 0916 	;
00462 0916 	;---kCmd_GetGripI-------------------
00463 0916 	; Get Grip Current
00464 0916 085E 	Cmd_GetGripI	movf	ssGripI,W
00465 0917 001A 		movwi	FSR0++
00466 0918 2800 		goto	RS232_Send_S0
00467 0919 	;
00468 0919 	;---kCmd_SetAuxConfig-----------	;+3 data (Aux0Config,Aux1Config,Aux2Config), return ACK
00469 0919 	; Set Aux N Config
00470 0919 0801 	Cmd_SetAuxConfig	movf	INDF1,W
00471 091A 3C02 		sublw	0x02	;2-AuxNum
00472 091B 		SKPNB		;<=2?
00472 091B 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00473 091C 2808 		goto	HandleRXData_Rtn	; no
00474 091D 	;
00475 091D 0016 		moviw	FSR1++
00476 091E 3E5F 		addlw	low ssAux0Config
00477 091F 0084 		movwf	FSR0L
00478 0920 3000 		movlw	high ssAux0Config
00479 0921 0085 		movwf	FSR0H
00480 0922 0016 		moviw	FSR1++	;New Config Value
00481 0923 001A 		movwi	FSR0++
00482 0924 2A07 		goto	TX_ACK
00483 0925 	;
00484 0925 	;---kCmd_GetAuxConfig-----------
00485 0925 	; Get Aux N Config
00486 0925 0801 	Cmd_GetAuxConfig	movf	INDF1,W
00487 0926 3C02 		sublw	0x02	;2-AuxNum
00488 0927 		SKPNB		;<=2?
00488 0927 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00489 0928 2808 		goto	HandleRXData_Rtn	; no
00490 0929 	;
00491 0929 0801 		movf	INDF1,W
00492 092A 3E5F 		addlw	low ssAux0Config
00493 092B 0086 		movwf	FSR1L
00494 092C 3000 		movlw	high ssAux0Config
00495 092D 0087 		movwf	FSR1H
00496 092E 	;
00497 092E 0801 		movf	INDF1,W
00498 092F 001A 		movwi	FSR0++
00499 0930 2800 		goto	RS232_Send_S0
00500 0931 	;
00501 0931 	;---kCmd_SetAuxNValue-----------	;+2 data (AuxNum,Value), return ACK
00502 0931 	; Set Aux N Value
00503 0931 0016 	Cmd_SetAuxNValue	moviw	FSR1++
00504 0932 00F8 		movwf	Param78	;AuxNum
00505 0933 3C02 		sublw	0x02	;2-AuxNum
00506 0934 		SKPNB		;<=2?
00506 0934 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00507 0935 2808 		goto	HandleRXData_Rtn	; no
00508 0936 	;
00509 0936 0878 		movf	Param78,W	;AuxNum
00510 0937 3E5F 		addlw	low ssAux0Config
00511 0938 0084 		movwf	FSR0L
00512 0939 3000 		movlw	high ssAux0Config
00513 093A 0085 		movwf	FSR0H
00514 093B 	;
00515 093B 0800 		movf	INDF0,W	;ssAuxXConfig
00516 093C 3907 		andlw	0x07
00517 093D 000B 		brw
00518 093E 2A07 		goto	TX_ACK	;kAuxIOnone
00519 093F 3206 		bra	Cmd_SetAuxNLED	;kAuxIOLEDBtn
00520 0940 2A07 		goto	TX_ACK	;kAuxIODigitalIn
00521 0941 3204 		bra	Cmd_SetAuxNDigOut	;kAuxIODigitalOut
00522 0942 2A07 		goto	TX_ACK	;kAuxIOAnalogIn
SerialServo.asm                                                       Page: 38
/Users/davidflynn/Projects/SerialServo/Firmware/

00523 0943 2A07 		goto	TX_ACK	;kAuxIOHomeSw
00524 0944 2A07 		goto	TX_ACK	;kAuxIOFwdLimit
00525 0945 2A07 		goto	TX_ACK	;kAuxIORevLimit
00526 0946 	;
00527 0946 	Cmd_SetAuxNDigOut:
00528 0946 0878 	Cmd_SetAuxNLED	movf	Param78,W	;AuxNum
00529 0947 3E24 		addlw	low LED1_Blinks
00530 0948 0084 		movwf	FSR0L
00531 0949 3000 		movlw	high LED1_Blinks
00532 094A 0085 		movwf	FSR0H
00533 094B 0016 		moviw	FSR1++	;AuxVal
00534 094C 001A 		movwi	FSR0++
00535 094D 2A07 		goto	TX_ACK
00536 094E 	;
00537 094E 	;---kCmd_GetAuxNValue-----------	;(AuxN,ValueL,ValueH)
00538 094E 	; Get Aux N Value
00539 094E 0801 	Cmd_GetAuxNValue	movf	INDF1,W
00540 094F 00F8 		movwf	Param78	;AuxNum
00541 0950 3C02 		sublw	0x02	;2-AuxNum
00542 0951 		SKPNB		;<=2?
00542 0951 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00543 0952 2808 		goto	HandleRXData_Rtn	; no
00544 0953 	;
00545 0953 0878 		movf	Param78,W	;AuxNum
00546 0954 3E5F 		addlw	low ssAux0Config
00547 0955 0086 		movwf	FSR1L
00548 0956 3000 		movlw	high ssAux0Config
00549 0957 0087 		movwf	FSR1H
00550 0958 	;
00551 0958 0801 		movf	INDF1,W	;ssAuxXConfig
00552 0959 3907 		andlw	0x07
00553 095A 000B 		brw
00554 095B 2808 		goto	HandleRXData_Rtn	;kAuxIOnone, not valid
00555 095C 3223 		bra	Cmd_GetAuxNValue_Btn	;kAuxIOLEDBtn
00556 095D 320F 		bra	Cmd_GetAuxNValue_Dig	;kAuxIODigitalIn
00557 095E 320E 		bra	Cmd_GetAuxNValue_Dig	;kAuxIODigitalOut
00558 095F 3203 		bra	Cmd_GetAuxNValue_Ana	;kAuxIOAnalogIn
00559 0960 320C 		bra	Cmd_GetAuxNValue_Dig	;kAuxIOHomeSw
00560 0961 320B 		bra	Cmd_GetAuxNValue_Dig	;kAuxIOFwdLimit
00561 0962 320A 		bra	Cmd_GetAuxNValue_Dig	;kAuxIORevLimit
00562 0963 	;
00563 0963 3578 	Cmd_GetAuxNValue_Ana	lslf	Param78,W	;AuxNum X2
00564 0964 3EB5 		addlw	low Cur_AN1
00565 0965 0086 		movwf	FSR1L
00566 0966 3000 		movlw	high Cur_AN1
00567 0967 0087 		movwf	FSR1H
00568 0968 0016 		moviw	FSR1++
00569 0969 001A 		movwi	FSR0++
00570 096A 0016 		moviw	FSR1++
00571 096B 001A 		movwi	FSR0++
00572 096C 2800 		goto	RS232_Send_S0
00573 096D 	;
00574 096D 	; Send the value of the port bit 0x00 or 0x01
00575 096D 0878 	Cmd_GetAuxNValue_Dig	movf	Param78,W	;AuxNum
00576 096E 		SKPZ
00576 096E 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00577 096F 3204 		bra	Cmd_GetAuxNValue_Dig1
00578 0970 188C 		btfsc	SW1_In
00579 0971 3001 		movlw	0x01
00580 0972 001A 		movwi	FSR0++
00581 0973 2800 		goto	RS232_Send_S0
00582 0974 	;
00583 0974 3C01 	Cmd_GetAuxNValue_Dig1	sublw	0x01
00584 0975 		SKPZ
00584 0975 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00585 0976 3204 		bra	Cmd_GetAuxNValue_Dig2
00586 0977 190C 		btfsc	SW2_In
00587 0978 3001 		movlw	0x01
00588 0979 001A 		movwi	FSR0++
00589 097A 2800 		goto	RS232_Send_S0
00590 097B 	;
00591 097B 0103 	Cmd_GetAuxNValue_Dig2	clrw
00592 097C 198C 		btfsc	SW3_In
00593 097D 3001 		movlw	0x01
00594 097E 001A 		movwi	FSR0++
00595 097F 2800 		goto	RS232_Send_S0
00596 0980 	; Send the Button value
00597 0980 0878 	Cmd_GetAuxNValue_Btn	movf	Param78,W	;AuxNum
00598 0981 		SKPZ
00598 0981 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00599 0982 3204 		bra	Cmd_GetAuxNValue_Btn1
00600 0983 1862 		btfsc	SW1_Flag
00601 0984 3001 		movlw	0x01
00602 0985 001A 		movwi	FSR0++
00603 0986 2800 		goto	RS232_Send_S0
00604 0987 	;
00605 0987 3C01 	Cmd_GetAuxNValue_Btn1	sublw	0x01
00606 0988 		SKPZ
00606 0988 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00607 0989 3204 		bra	Cmd_GetAuxNValue_Btn2
00608 098A 18E2 		btfsc	SW2_Flag
00609 098B 3001 		movlw	0x01
00610 098C 001A 		movwi	FSR0++
00611 098D 2800 		goto	RS232_Send_S0
00612 098E 	;
00613 098E 0103 	Cmd_GetAuxNValue_Btn2	clrw
00614 098F 1962 		btfsc	SW3_Flag
00615 0990 3001 		movlw	0x01
00616 0991 001A 		movwi	FSR0++
SerialServo.asm                                                       Page: 39
/Users/davidflynn/Projects/SerialServo/Firmware/

00617 0992 2800 		goto	RS232_Send_S0
00618 0993 	;
00619 0993 	;
00620 0993 	;---kCmd_SetEncoderOffset-------  +2 data (EncoderOffset), return ACK
00621 0993 	;
00622 0993 0016 	Cmd_SetEncoderOffset	moviw	FSR1++
00623 0994 00CB 		movwf	EncoderOffset
00624 0995 0016 		moviw	FSR1++
00625 0996 00CC 		movwf	EncoderOffset+1
00626 0997 2A07 		goto	TX_ACK
00627 0998 	;
00628 0998 	;---kCmd_GetEncoderOffset-------
00629 0998 	;
00630 0998 084B 	Cmd_GetEncoderOffset	movf	EncoderOffset,W
00631 0999 001A 		movwi	FSR0++
00632 099A 084C 		movf	EncoderOffset+1,W
00633 099B 001A 		movwi	FSR0++
00634 099C 2800 		goto	RS232_Send_S0
00635 099D 	;
00636 099D 	                       if UsePID
00666 099D 	                       endif
00667 099D 	;---kCmd_GetI-------------------
00668 099D 	; Get servo current
00669 099D 0021  a		MOVLB	Cur_AN0	;banksel
00668 099E 	Cmd_GetI	BankSel	Cur_AN0
00670 099E 0833 		movf	Cur_AN0,W
00671 099F 001A 		movwi	FSR0++
00672 09A0 0834 		movf	Cur_AN0+1,W
00673 09A1 001A 		movwi	FSR0++
00674 09A2 2800 		goto	RS232_Send_S0
00675 09A3 	;
00676 09A3 	;---kCmd_GetEnc-------------------
00677 09A3 	; Get Encoder Raw Position
00678 09A3 0846 	Cmd_GetEnc	movf	EncoderVal,W
00679 09A4 001A 		movwi	FSR0++
00680 09A5 0847 		movf	EncoderVal+1,W
00681 09A6 001A 		movwi	FSR0++
00682 09A7 2800 		goto	RS232_Send_S0
00683 09A8 	;
00684 09A8 	;---kCmd_GetEncAbs-------------------
00685 09A8 	; Get Encoder Accumulated Position
00686 09A8 0843 	Cmd_GetEncAbs	movf	EncoderAccum,W
00687 09A9 001A 		movwi	FSR0++
00688 09AA 0844 		movf	EncoderAccum+1,W
00689 09AB 001A 		movwi	FSR0++
00690 09AC 0845 		movf	EncoderAccum+2,W
00691 09AD 001A 		movwi	FSR0++
00692 09AE 3000 		movlw	0x00
00693 09AF 1BC5 		btfsc	EncoderAccum+2,7
00694 09B0 30FF 		movlw	0xFF
00695 09B1 001A 		movwi	FSR0++	;sign extrnded Int24
00696 09B2 2800 		goto	RS232_Send_S0
00697 09B3 	;
00698 09B3 	;---kCmd_SaveParams-----------------
00699 09B3 	Cmd_SaveParams	mLongCall	SaveParams
00699 09B3 3181      M		movlp	SaveParams	                       movlp                  Destination
00699 09B4 212E      M		call	SaveParams	                       call                   Destination
00699 09B5 3189      M		movlp	$	                       movlp                  $
00700 09B6 2A07 		goto	TX_ACK
00701 09B7 	;
00702 09B7 	;---kCmd_RestoreParams--------------
00703 09B7 	Cmd_RestoreParams	mLongCall	CopyToRam
00703 09B7 3181      M		movlp	CopyToRam	                       movlp                  Destination
00703 09B8 2121      M		call	CopyToRam	                       call                   Destination
00703 09B9 3189      M		movlp	$	                       movlp                  $
00704 09BA 2A07 		goto	TX_ACK
00705 09BB 	;
00706 09BB 	;---kCmd_GetBattVolts---------------
00707 09BB 	; Get battery volts
00708 09BB 0021  a		MOVLB	BattVolts	;banksel
00707 09BC 	Cmd_GetBattVolts	BankSel	BattVolts
00709 09BC 083D 		movf	BattVolts,W
00710 09BD 001A 		movwi	FSR0++
00711 09BE 083E 		movf	BattVolts+1,W
00712 09BF 001A 		movwi	FSR0++
00713 09C0 2800 		goto	RS232_Send_S0
00714 09C1 	;
00715 09C1 	;---kCmd_GetCalPot------------------
00716 09C1 	; Get calibration pot
00717 09C1 0021 	Cmd_GetCalPot	movlb	ModeZeroPot
00718 09C2 083B 		movf	ModeZeroPot,W
00719 09C3 001A 		movwi	FSR0++
00720 09C4 083C 		movf	ModeZeroPot+1,W
00721 09C5 001A 		movwi	FSR0++
00722 09C6 2800 		goto	RS232_Send_S0
00723 09C7 	;
00724 09C7 	;---kCmd_GetStatus----------------
00725 09C7 083F 	Cmd_GetStatus	movf	ssStatus,W
00726 09C8 001A 		movwi	FSR0++
00727 09C9 0840 		movf	ssStatus+1,W
00728 09CA 001A 		movwi	FSR0++
00729 09CB 0841 		movf	ssStatus+2,W
00730 09CC 001A 		movwi	FSR0++
00731 09CD 0842 		movf	ssStatus+3,W
00732 09CE 001A 		movwi	FSR0++
00733 09CF 	;reset flags
00734 09CF 11BF 		bcf	ssRX_Timeout
00735 09D0 12BF 		bcf	ssGripMCur
00736 09D1 123F 		bcf	ssGripOCur
SerialServo.asm                                                       Page: 40
/Users/davidflynn/Projects/SerialServo/Firmware/

00737 09D2 	;
00738 09D2 01C0 		clrf	ssStatus+1
00739 09D3 	;	
00740 09D3 2800 		goto	RS232_Send_S0
00741 09D4 	;
00742 09D4 	;---kCmd_RunBootloader--------------
00743 09D4 30FF 	Cmd_RunBootloader	movlw	0xFF
00744 09D5 00AE 		movwf	EEDataTemp
00745 09D6 		mLongCall	EEWriteW	;Write EEPROM address in W
00745 09D6 3181      M		movlp	EEWriteW	                       movlp                  Destination
00745 09D7 2175      M		call	EEWriteW	                       call                   Destination
00745 09D8 3189      M		movlp	$	                       movlp                  $
00746 09D9 0001 		reset
00747 09DA 	;
00748 09DA 	;---kCmd_SetMasterAddr------------
00749 09DA 0016 	Cmd_SetMasterAddr	moviw	FSR1++
00750 09DB 00D9 		movwf	RS232_MasterAddr
00751 09DC 		mLongCall	SaveParams
00751 09DC 3181      M		movlp	SaveParams	                       movlp                  Destination
00751 09DD 212E      M		call	SaveParams	                       call                   Destination
00751 09DE 3189      M		movlp	$	                       movlp                  $
00752 09DF 2800 		goto	RS232_Send_S0
00753 09E0 	;
00754 09E0 	;---kCmd_SetSlaveAddr-------------
00755 09E0 0016 	Cmd_SetSlaveAddr	moviw	FSR1++
00756 09E1 00DA 		movwf	RS232_SlaveAddr
00757 09E2 		mLongCall	SaveParams
00757 09E2 3181      M		movlp	SaveParams	                       movlp                  Destination
00757 09E3 212E      M		call	SaveParams	                       call                   Destination
00757 09E4 3189      M		movlp	$	                       movlp                  $
00758 09E5 2800 		goto	RS232_Send_S0
00759 09E6 	;
00760 09E6 	;---kCmd_SendIDString------------
00761 09E6 01F9 	Cmd_SendIDString	clrf	Param79
00762 09E7 0879 	Cmd_SendIDString_L1	movf	Param79,W
00763 09E8 21EF 		call	IDString
00764 09E9 3800 		iorlw	0x00
00765 09EA 		SKPNZ
00765 09EA 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00766 09EB 0008 		return
00767 09EC 2208 		call	StoreSerOut_S0
00768 09ED 0AF9 		incf	Param79,F
00769 09EE 33F8 		bra	Cmd_SendIDString_L1
00770 09EF 	;
00771 09EF 000B 	IDString	brw
00772 09F0 3444 		retlw	'D'
00773 09F1 344D 		retlw	'M'
00774 09F2 3446 		retlw	'F'
00775 09F3 3445 		retlw	'E'
00776 09F4 3420 		retlw	' '
00777 09F5 3453 		retlw	'S'
00778 09F6 3465 		retlw	'e'
00779 09F7 3472 		retlw	'r'
00780 09F8 3469 		retlw	'i'
00781 09F9 3461 		retlw	'a'
00782 09FA 346C 		retlw	'l'
00783 09FB 3420 		retlw	' '
00784 09FC 3453 		retlw	'S'
00785 09FD 3465 		retlw	'e'
00786 09FE 3472 		retlw	'r'
00787 09FF 3476 		retlw	'v'
00788 0A00 346F 		retlw	'o'
00789 0A01 3420 		retlw	' '
00790 0A02 3472 		retlw	'r'
00791 0A03 3442 		retlw	'B'
00792 0A04 340A 		retlw	'\n'
00793 0A05 3400 		retlw	0x00
00794 0A06 	;
00795 0A06 	;--------------------------------
00796 0A06 0008 		return
00797 0A07 	;
00798 0A07 30FF 	TX_ACK	movlw	0xFF
00799 0A08 	StoreSerOut_S0	mLongCall	StoreSerOut
00799 0A08 3181      M		movlp	StoreSerOut	                       movlp                  Destination
00799 0A09 21D5      M		call	StoreSerOut	                       call                   Destination
00799 0A0A 318A      M		movlp	$	                       movlp                  $
00800 0A0B 0008 		return
00801 0A0C 	;
00802 0A0C 	;=========================================================================================
00803 0A0C 	;=========================================================================================
02065 0A0C 		include <MagEncoder.inc>
00001 0A0C 	;*****************************************************************************************
00002 0A0C 	;    Filename:      MagEncoder.inc
00003 0A0C 	;    Date:          5/28/2017
00004 0A0C 	;    File Version:  1.0.2   8/27/2020
00005 0A0C 	;    
00006 0A0C 	;    Author:        David M. Flynn
00007 0A0C 	;    Company:       Oxford V.U.E., Inc.
00008 0A0C 	;    E-Mail:        dflynn@oxfordvue.com
00009 0A0C 	;    Web Site:      http://www.oxfordvue.com/
00010 0A0C 	;
00011 0A0C 	;*****************************************************************************************
00012 0A0C 	; AEAT-6012 Magnetic Encoder Reader
00013 0A0C 	; Written for the 16F1847 running at 32MHz
00014 0A0C 	; Delay 60mS before calling ReadEncoder the first time, power-up time.
00015 0A0C 	; Add ReadEncoder to your main loop, must be call often enough so roll over/under
00016 0A0C 	;  is seen.
00017 0A0C 	; If the last ReadEncoder saw zero then MagEnc_Index is set.
00018 0A0C 	; If a roll over/under was detected MagEnc_IndexLatch will be set, you must clear it
SerialServo.asm                                                       Page: 41
/Users/davidflynn/Projects/SerialServo/Firmware/

00019 0A0C 	;  before calling ReadEncoder again.
00020 0A0C 	; Works in any segment, requires no additional stack.
00021 0A0C 	;
00022 0A0C 	; Requires 2 output pins (CS* and CLK) and 1 input (Data)
00023 0A0C 	;
00024 0A0C 	; Constants for 12 bit encoder:
00025 0A0C 000C 	nDataBits             	EQU                    .12
00026 0A0C 000C 	kUpper2Bits            EQU                    0x0C
00027 0A0C 0003 	kEncHiBit	EQU	3
00028 0A0C 	; Constants for 10 bit encoder:
00029 0A0C 	;nDataBits             EQU                    .10
00030 0A0C 	;kUpper2Bits           EQU                    0x03
00031 0A0C 	;kEncHiBit	EQU	1
00032 0A0C 	; 
00033 0A0C 	; History:
00034 0A0C 	;   1.0.2   8/27/2020  Fixed to asm w/ MacroPIC.
00035 0A0C 	;   1.0.1   5/28/2017  Added Home routines.
00036 0A0C 	;   1.0.0   5/27/2017  First Code and it WORKS!
00037 0A0C 	;*****************************************************************************************
00038 0A0C 	; Routines:
00039 0A0C 	;
00040 0A0C 	; ReadEncoder	Add change from last read to EncoderAccum,
00041 0A0C 	;	 update MagEnc_Index and MagEnc_IndexLatch.
00042 0A0C 	; Home_Absolute        Home absolute, Set home as encoder zero.
00043 0A0C 	; Home_Here            Set Home as last read value.
00044 0A0C 	;*****************************************************************************************
00045 0A0C 	; Add the following to the Bank 0 variables.
00046 0A0C 	;	cblock		;Variables bank0
00047 0A0C 	;	EncoderAccum:3		;Accumulated distance
00048 0A0C 	;	EncoderVal:2		;Value last read, raw 12 bit data
00049 0A0C 	;	EncoderFlags                                  ;saved in eprom
00050 0A0C 	;                      EncoderHome:2                                 ;Absolute Home, saved in eprom
00051 0A0C 	;	endc
00052 0A0C 	;
00053 0A0C 0048 	#Define	MagEnc_HighZone	EncoderFlags,0	
00054 0A0C 0048 	#Define	MagEnc_LowZone	EncoderFlags,1
00055 0A0C 0048 	#Define	MagEnc_Index	EncoderFlags,2
00056 0A0C 0048 	#Define	MagEnc_IndexLatch	EncoderFlags,3	;set if zero is crossed or Encode value = zero
00057 0A0C 0048 	#Define                MagEnc_Homed           EncoderFlags,4
00058 0A0C 	;
00059 0A0C 	; Change the following to use the available pins
00060 0A0C 0000 	MagEnc_CSBit	EQU	0	;RB0
00061 0A0C 0004 	MagEnc_CLKBit	EQU	4	;RB4
00062 0A0C 0006 	MagEnc_DataBit	EQU	6	;RA6
00063 0A0C 010D 	MagEnc_CSLAT	EQU	LATB
00064 0A0C 000C 	MagEnc_DataPort	EQU	PORTA
00065 0A0C 010D 	#Define	MagEnc_CS	MagEnc_CSLAT,MagEnc_CSBit	
00066 0A0C 010D 	#Define	MagEnc_CLK	MagEnc_CSLAT,MagEnc_CLKBit
00067 0A0C 000C 	#Define	MagEnc_Data	MagEnc_DataPort,MagEnc_DataBit
00068 0A0C 	;=========================================
00069 0A0C 	; ReadEncoder
00070 0A0C 	; Entry: none
00071 0A0C 	; Exit: EncoderValue,EncoderAccum,EncoderFlags
00072 0A0C 	; Calls: none
00073 0A0C 	; Uses: Param76,Param77,Param78,Param79,Param7A FSR0
00074 0A0C 	;
00075 0A0C 0020 	ReadEncoder	movlb	0	;bank0
00076 0A0D 300C 		movlw	nDataBits	;read 12 bits
00077 0A0E 00F8 		movwf	Param78
00078 0A0F 300D 		movlw	low MagEnc_CSLAT
00079 0A10 0084 		movwf	FSR0L
00080 0A11 3001 		movlw	high MagEnc_CSLAT
00081 0A12 0085 		movwf	FSR0H
00082 0A13 1000 		bcf	INDF0,MagEnc_CSBit     ;assert CS*
00083 0A14 	;			;delay 500ns
00084 0A14 0846 		movf	EncoderVal,W
00085 0A15 00F9 		movwf	Param79                ;retain old value
00086 0A16 0847 		movf	EncoderVal+1,W
00087 0A17 00FA 		movwf	Param7A
00088 0A18 01C6 		clrf	EncoderVal
00089 0A19 01C7 		clrf	EncoderVal+1
00090 0A1A 	;
00091 0A1A 	;Loop to read the data.
00092 0A1A 1200 	ReadEncoder_L1	bcf	INDF0,MagEnc_CLKBit    ;Clock
00093 0A1B 0000 		nop		;delay 500ns
00094 0A1C 0000 		nop
00095 0A1D 0000 		nop
00096 0A1E 0000 		nop
00097 0A1F 0000 		nop
00098 0A20 1600 		bsf	INDF0,MagEnc_CLKBit
00099 0A21 0000 		nop		;delay 375ns
00100 0A22 0000 		nop
00101 0A23 0000 		nop
00102 0A24 0000 		nop
00103 0A25 1003 		bcf	_C
00104 0A26 1B0C 		btfsc	MagEnc_Data
00105 0A27 1403 		bsf	_C
00106 0A28 0DC6 		rlf	EncoderVal,F
00107 0A29 0DC7 		rlf	EncoderVal+1,F
00108 0A2A 0BF8 		decfsz	Param78,F
00109 0A2B 33EE 		bra	ReadEncoder_L1
00110 0A2C 	;
00111 0A2C 1400 		bsf	INDF0,MagEnc_CSBit
00112 0A2D 	;copy to temp
00113 0A2D 0846 		movf	EncoderVal,W
00114 0A2E 00F6 		movwf	Param76
00115 0A2F 0847 		movf	EncoderVal+1,W
00116 0A30 00F7 		movwf	Param77
00117 0A31 	;
SerialServo.asm                                                       Page: 42
/Users/davidflynn/Projects/SerialServo/Firmware/

00118 0A31 	; handle overflow, goes from >3072 to <1024
00119 0A31 1C48 		btfss	MagEnc_HighZone
00120 0A32 3206 		bra	ReadEncoder_1
00121 0A33 300C 		movlw	kUpper2Bits
00122 0A34 0577 		andwf	Param77,W
00123 0A35 		SKPNZ		;Less than 1024?
00123 0A35 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00124 0A36 1677 		bsf	Param77,4	; yes, set 13th bit
00125 0A37 15C8 		bsf	MagEnc_IndexLatch	;crossed zero
00126 0A38 320E 		bra	ReadEncoder_2
00127 0A39 	;
00128 0A39 	; handle underflow, goes from <1024 to <=3072
00129 0A39 1CC8 	ReadEncoder_1	btfss	MagEnc_LowZone
00130 0A3A 320C 		bra	ReadEncoder_2
00131 0A3B 300C 		movlw	kUpper2Bits
00132 0A3C 0577 		andwf	Param77,W
00133 0A3D 3A0C 		xorlw	kUpper2Bits
00134 0A3E 		SKPZ		;>=3072?
00134 0A3E 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00135 0A3F 3207 		bra	ReadEncoder_2	; No
00136 0A40 	;Val = 0 - value
00137 0A40 0876 		movf	Param76,W
00138 0A41 01F6 		clrf                   Param76
00139 0A42 02F6 		subwf	Param76,F
00140 0A43 0877 		movf                   Param77,W
00141 0A44 01F7 		clrf                   Param77	
00142 0A45 3BF7 		subwfb	Param77,F
00143 0A46 15C8 		bsf	MagEnc_IndexLatch	;crossed zero
00144 0A47 	;
00145 0A47 	; calculate new flag values
00146 0A47 1148 	ReadEncoder_2	bcf	MagEnc_Index
00147 0A48 0846 		movf	EncoderVal,W
00148 0A49 0447 		iorwf	EncoderVal+1,W
00149 0A4A 		SKPNZ
00149 0A4A 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00150 0A4B 1548 		bsf	MagEnc_Index
00151 0A4C 	;
00152 0A4C 1948 		btfsc	MagEnc_Index
00153 0A4D 15C8 		bsf	MagEnc_IndexLatch
00154 0A4E 	;
00155 0A4E 10C8 		bcf	MagEnc_LowZone
00156 0A4F 300C 		movlw	kUpper2Bits
00157 0A50 0547 		andwf	EncoderVal+1,W
00158 0A51 		SKPNZ		;Les than 1024?
00158 0A51 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00159 0A52 14C8 		bsf	MagEnc_LowZone	; Yes
00160 0A53 	;
00161 0A53 1048 		bcf	MagEnc_HighZone
00162 0A54 300C 		movlw	kUpper2Bits
00163 0A55 0547 		andwf	EncoderVal+1,W	;2 high bits
00164 0A56 3A0C 		xorlw	kUpper2Bits
00165 0A57 		SKPNZ		;both bits set, >=3072
00165 0A57 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00166 0A58 1448 		bsf	MagEnc_HighZone	; yes
00167 0A59 	;
00168 0A59 	; calc change = new - old
00169 0A59 0876 		movf	Param76,W
00170 0A5A 0279 		subwf	Param79,W	;old value
00171 0A5B 00F6 		movwf	Param76
00172 0A5C 0877 		movf	Param77,W
00173 0A5D 3B7A 		subwfb	Param7A,W	;old value high byte
00174 0A5E 00F7 		movwf	Param77
00175 0A5F 01F8 		clrf	Param78	;sign extend to 24 bits
00176 0A60 30FF 		movlw	0xFF
00177 0A61 1BF7 		btfsc	Param77,7	;sign bit set?
00178 0A62 00F8 		movwf	Param78	; Yes
00179 0A63 	;
00180 0A63 	; add the change to the accumulated value
00181 0A63 0876 		movf	Param76,W
00182 0A64 07C3 		addwf	EncoderAccum,F
00183 0A65 0877 		movf	Param77,W
00184 0A66 3DC4 		addwfc	EncoderAccum+1,F
00185 0A67 0878 		movf	Param78,W
00186 0A68 3DC5 		addwfc	EncoderAccum+2,F
00187 0A69 	;
00188 0A69 0008 		return
00189 0A6A 	;
00190 0A6A 	;=========================================================================================
00191 0A6A 	; Home absolute, Set home as encoder HM absolute.
00192 0A6A 	; Call ReadEncoder once first.
00193 0A6A 	; Entry: HM = Absolute Home, EncoderVal = Current Position Absolute,
00194 0A6A 	;        kMaxT = ±Max travel from HM,
00195 0A6A 	;        EncoderAccum = 0 = Current Position Incremental
00196 0A6A 	; Exit: EncoderAccum = Current Position Relitive
00197 0A6A 	;
00198 0A6A 	; The Math:
00199 0A6A 	;  ' tests for Current Position > HM
00200 0A6A 	;  if HM + kMaxT >= 4096 then 'Dual zone
00201 0A6A 	;    if EncoderVal > HM then 
00202 0A6A 	;      'Current Position is positive between HM and 4096
00203 0A6A 	;      EncoderAccum = EncoderVal - HM
00204 0A6A 	;    elseif EncoderVal < ((HM + kMaxT) mod 4096) then 
00205 0A6A 	;      'Current Position is positive between 0 and HM + kMaxT
00206 0A6A 	;      EncoderAccum = EncoderVal + 4096 - HM
00207 0A6A 	;  else 'Single zone
00208 0A6A 	;    if EncoderVal > HM and EncoderVal <= HM + kMaxT then
00209 0A6A 	;      'Current Position is positive between HM and HM + kMAxT
00210 0A6A 	;      EncoderAccum = EncoderVal - HM
00211 0A6A 	;
SerialServo.asm                                                       Page: 43
/Users/davidflynn/Projects/SerialServo/Firmware/

00212 0A6A 	;  ' test for Current Position < HM
00213 0A6A 	;  if HM - kMaxT < 0 then 'Dual zone
00214 0A6A 	;    if (EncoderVal < HM) then
00215 0A6A 	;      'Current Position is between HM and 0
00216 0A6A 	;      EncoderAccum = EncoderVal - HM
00217 0A6A 	;    elseif (EncoderVal > 8192 - HM - kMaxT) then
00218 0A6A 	;      'Current Position is between 0 and HM - kMaxT
00219 0A6A 	;      EncoderAccum = EncoderVal - 4096 - HM
00220 0A6A 	;  else 'Single zone
00221 0A6A 	;    if EncoderVal < HM and EncoderVal > HM - kMaxT then
00222 0A6A 	;      'Current Position is between HM and HM - kMaxT
00223 0A6A 	;      EncoderAccum = EncoderVal - HM
00224 0A6A 	;      
00225 0A6A 	;
00226 0A6A 076C 	kMaxT                  EQU                    .1900                  ;Less than a half turn
00227 0A6A 	;
00228 0A6A 22D4 	Home_Absolute	call                   Home_Here
00229 0A6B 1E48 	                       btfss                  MagEnc_Homed           ;First boot?
00230 0A6C 324E 	                       bra                    SaveHomePos            ; Yes
00231 0A6D 	;
00232 0A6D 	;  ' tests for Current Position > HM
00233 0A6D 	;if HM + kMaxT >= 4096 then 'Dual zone
00234 0A6D 306C 	                       movlw                  low kMaxT
00235 0A6E 0749 	                       addwf                  EncoderHome,W
00236 0A6F 00F8 	                       movwf                  Param78
00237 0A70 3007 	                       movlw                  high kMaxT
00238 0A71 3D4A 	                       addwfc                 EncoderHome+1,W
00239 0A72 00F9 	                       movwf                  Param79
00240 0A73 39F0 	                       andlw                  0xF0
00241 0A74 	                       SKPNZ
00241 0A74 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00242 0A75 3207 	                       bra                    Home_Absolute_1
00243 0A76 	;    if EncoderVal > HM then 
00244 0A76 	;      'Current Position is positive between HM and 4096
00245 0A76 	;      EncoderAccum = EncoderVal - HM
00246 0A76 0846 	                       movf                   EncoderVal,W
00247 0A77 0249 	                       subwf                  EncoderHome,W
00248 0A78 0847 	                       movf                   EncoderVal+1,W
00249 0A79 3B4A 	                       subwfb                 EncoderHome+1,W
00250 0A7A 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > HM?
00251 0A7B 324D 	                       bra                    HA_SetIt               ; Yes
00252 0A7C 320C 	                       bra                    Home_Absolute_2
00253 0A7D 	;        
00254 0A7D 	;  else 'Single zone
00255 0A7D 	;    if EncoderVal > HM and EncoderVal < HM + kMaxT then
00256 0A7D 	;      'Current Position is positive between HM and HM + kMAxT
00257 0A7D 	;      EncoderAccum = EncoderVal - HM
00258 0A7D 0849 	Home_Absolute_1        movf                   EncoderHome,W
00259 0A7E 0246 	                       subwf                  EncoderVal,W
00260 0A7F 084A 	                       movf                   EncoderHome+1,W
00261 0A80 3B47 	                       subwfb                 EncoderVal+1,W
00262 0A81 1F89 	                       btfss                  WREG,7
00263 0A82 3206 	                       bra                    Home_Absolute_2
00264 0A83 0878 	                       movf                   Param78,W              ;HM + kMaxT
00265 0A84 0246 	                       subwf                  EncoderVal,W
00266 0A85 0879 	                       movf                   Param79,W
00267 0A86 3B47 	                       subwfb                 EncoderVal+1,W
00268 0A87 1B89 	                       btfsc                  WREG,7                 ;EncoderVal < HM + kMaxT?
00269 0A88 3240 	                       bra                    HA_SetIt               ; Yes
00270 0A89 	;
00271 0A89 	;  ' test for Current Position < HM
00272 0A89 	;  if HM - kMaxT < 0 then 'Dual zone
00273 0A89 306C 	Home_Absolute_2        movlw                  low kMaxT
00274 0A8A 0249 	                       subwf                  EncoderHome,W
00275 0A8B 3007 	                       movlw                  high kMaxT
00276 0A8C 3B4A 	                       subwfb                 EncoderHome+1,W
00277 0A8D 1F89 	                       btfss                  WREG,7                 ;HM - kMaxT < 0?
00278 0A8E 3219 	                       bra                    Home_Absolute_3        ; No, not dual zone
00279 0A8F 	;    if (EncoderVal < HM) then
00280 0A8F 	;      'Current Position is between HM and 0
00281 0A8F 	;      EncoderAccum = EncoderVal - HM
00282 0A8F 0849 	                       movf                   EncoderHome,W
00283 0A90 0246 	                       subwf                  EncoderVal,W
00284 0A91 084A 	                       movf                   EncoderHome+1,W
00285 0A92 3B47 	                       subwfb                 EncoderVal+1,W
00286 0A93 1B89 	                       btfsc                  WREG,7                 ;EncoderVal < HM?
00287 0A94 3234 	                       bra                    HA_SetIt               ; Yes
00288 0A95 	;    elseif (EncoderVal > 8192 - HM - kMaxT) then
00289 0A95 	;      'Current Position is between 0 and HM - kMaxT
00290 0A95 	;      EncoderAccum = EncoderVal - 4096 - HM
00291 0A95 3000 	                       movlw                  low .8192              ;Param78:Param79 = .8192
00292 0A96 00F8 	                       movwf                  Param78
00293 0A97 3020 	                       movlw                  high .8192
00294 0A98 00F9 	                       movwf                  Param79
00295 0A99 0849 	                       movf                   EncoderHome,W          ;Param78:Param79 -= EncoderHome
00296 0A9A 02F8 	                       subwf                  Param78,F
00297 0A9B 084A 	                       movf                   EncoderHome+1,W
00298 0A9C 3BF9 	                       subwfb                 Param79,F
00299 0A9D 306C 	                       movlw                  low kMaxT              ;Param78:Param79 -= kMaxT
00300 0A9E 02F8 	                       subwf                  Param78,F
00301 0A9F 3007 	                       movlw                  high kMaxT
00302 0AA0 3BF9 	                       subwfb                 Param79,F
00303 0AA1 0846 	                       movf                   EncoderVal,W 
00304 0AA2 0278 	                       subwf                  Param78,W
00305 0AA3 0847 	                       movf                   EncoderVal+1,W
00306 0AA4 3B79 	                       subwfb                 Param79,W
00307 0AA5 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > Param78:Param79?
00308 0AA6 3220 	                       bra                    HA_SetItNeg            ; Yes
00309 0AA7 0008 	                       return                                        ; No, not in this zone
SerialServo.asm                                                       Page: 44
/Users/davidflynn/Projects/SerialServo/Firmware/

00310 0AA8 	;
00311 0AA8 	;  else 'Single zone
00312 0AA8 	;    if EncoderVal < HM and EncoderVal > HM - kMaxT then
00313 0AA8 	;      'Current Position is between HM and HM - kMaxT
00314 0AA8 	;      EncoderAccum = EncoderVal - HM
00315 0AA8 0849 	Home_Absolute_3        movf                   EncoderHome,W
00316 0AA9 0246 	                       subwf                  EncoderVal,W
00317 0AAA 084A 	                       movf                   EncoderHome+1,W
00318 0AAB 3B47 	                       subwfb                 EncoderVal+1,W
00319 0AAC 1F89 	                       btfss                  WREG,7                 ;EncoderVal < HM?
00320 0AAD 0008 	                       return                                        ; No
00321 0AAE 306C 	                       movlw                  low kMaxT              ;Param78:Param79 = EncoderHome - kMaxT
00322 0AAF 0249 	                       subwf                  EncoderHome,W
00323 0AB0 00F8 	                       movwf                  Param78
00324 0AB1 3007 	                       movlw                  high kMaxT
00325 0AB2 3B4A 	                       subwfb                 EncoderHome+1,W
00326 0AB3 00F9 	                       movwf                  Param79
00327 0AB4 0846 	                       movf                   EncoderVal,W
00328 0AB5 0278 	                       subwf                  Param78,W
00329 0AB6 0847 	                       movf                   EncoderVal+1,W
00330 0AB7 3B79 	                       subwfb                 Param79,W
00331 0AB8 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > HM - kMaxT?
00332 0AB9 320F 	                       bra                    HA_SetIt               ; Yes
00333 0ABA 0008 	                       return                                        ; No, must be zero
00334 0ABB 	;
00335 0ABB 	;======================
00336 0ABB 1648 	SaveHomePos            bsf                    MagEnc_Homed
00337 0ABC 0846 	                       movf                   EncoderVal,W
00338 0ABD 00C9 	                       movwf                  EncoderHome
00339 0ABE 0847 	                       movf                   EncoderVal+1,W
00340 0ABF 00CA 	                       movwf                  EncoderHome+1
00341 0AC0 	                       mLongCall              SaveParams
00341 0AC0 3181      M		movlp	SaveParams	                       movlp                  Destination
00341 0AC1 212E      M		call	SaveParams	                       call                   Destination
00341 0AC2 318A      M		movlp	$	                       movlp                  $
00342 0AC3 0008 	                       return
00343 0AC4 	;======================
00344 0AC4 	;EncoderAccum = EncoderVal + 4096 - HM
00345 0AC4 	;                      movlw                  low .4096
00346 0AC4 	;                      addwf                  EncoderVal,F
00347 0AC4 3010 	HA_SetItPos            movlw                  high .4096
00348 0AC5 3DC7 	                       addwfc                 EncoderVal+1,F
00349 0AC6 3202 	                       bra                    HA_SetIt
00350 0AC7 	;======================
00351 0AC7 	;EncoderAccum = EncoderVal - 4096 - HM
00352 0AC7 	;                      movlw                  low .4096
00353 0AC7 	;                      subwf                  EncoderVal,F
00354 0AC7 3010 	HA_SetItNeg            movlw                  high .4096
00355 0AC8 3BC7 	                       subwfb                 EncoderVal+1,F
00356 0AC9 	;======================
00357 0AC9 	;EncoderAccum = EncoderVal - HM
00358 0AC9 0849 	HA_SetIt               movf                   EncoderHome,W
00359 0ACA 0246 	                       subwf                  EncoderVal,W
00360 0ACB 00C3 	                       movwf                  EncoderAccum
00361 0ACC 084A 	                       movf                   EncoderHome+1,W
00362 0ACD 3B47 	                       subwfb                 EncoderVal+1,W
00363 0ACE 00C4 	                       movwf                  EncoderAccum+1
00364 0ACF 30FF 	                       movlw                  0xFF
00365 0AD0 1FC4 	                       btfss                  EncoderAccum+1,7
00366 0AD1 3000 	                       movlw                  0x00
00367 0AD2 00C5 	                       movwf                  EncoderAccum+2
00368 0AD3 0008 	                       return
00369 0AD4 	;
00370 0AD4 	;                       
00371 0AD4 	;=========================================================================================
00372 0AD4 	; Set Home as last read value
00373 0AD4 	; Call ReadEncoder once first.
00374 0AD4 	;
00375 0AD4 0020 	Home_Here              movlb                  0
00376 0AD5 01C3 	                       clrf                   EncoderAccum
00377 0AD6 01C4 	                       clrf                   EncoderAccum+1
00378 0AD7 01C5 	                       clrf                   EncoderAccum+2
00379 0AD8 0008 	                       return
00380 0AD9 	;
00381 0AD9 	;=========================================================================================
00382 0AD9 	;=========================================================================================
00383 0AD9 		
00384 0AD9 		
00385 0AD9 		
00386 0AD9 		
00387 0AD9 		
00388 0AD9 		
00389 0AD9 		
00390 0AD9 		
00391 0AD9 		
00392 0AD9 		
00393 0AD9 		
00394 0AD9 		
00395 0AD9 		
00396 0AD9 		
00397 0AD9 		
00398 0AD9 		
00399 0AD9 		
00400 0AD9 		
00401 0AD9 		
00402 0AD9 		
02066 0AD9 	;	include <AS5047D_Lib.inc>
02067 0AD9 		include <ssInit.inc>
00001 0AD9 	;=========================================================================================
SerialServo.asm                                                       Page: 45
/Users/davidflynn/Projects/SerialServo/Firmware/

00002 0AD9 	; call once
00003 0AD9 	;=========================================================================================
00004 0AD9 	;
00005 0AD9 0021 	InitializeIO	MOVLB	0x01	; select bank 1
00006 0ADA 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00007 0ADB 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00008 0ADC 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00009 0ADD 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00010 0ADE 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00011 0ADF 1515 		bsf	OPTION_REG,PS2
00012 0AE0 	;
00013 0AE0 0021 		MOVLB	0x01	; bank 1
00014 0AE1 30F0 		MOVLW	OSCCON_Value
00015 0AE2 0099 		MOVWF	OSCCON
00016 0AE3 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00017 0AE4 0097 		movwf	WDTCON
00018 0AE5 	;
00019 0AE5 0024 		movlb	4	; bank 4
00020 0AE6 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00021 0AE7 	;
00022 0AE7 0023 		MOVLB	0x03	; bank 3
00023 0AE8 3011 		movlw	ANSELA_Val
00024 0AE9 008C 		movwf	ANSELA
00025 0AEA 3020 		movlw	ANSELB_Val
00026 0AEB 008D 		movwf	ANSELB
00027 0AEC 	;
00028 0AEC 	;Setup T2 for 100/s
00029 0AEC 0020 		movlb	0	; bank 0
00030 0AED 304F 		MOVLW	T2CON_Value
00031 0AEE 009C 		MOVWF	T2CON
00032 0AEF 307D 		MOVLW	PR2_Value
00033 0AF0 009B 		MOVWF	PR2
00034 0AF1 0021 		movlb	1	; bank 1
00035 0AF2 1491 		bsf	PIE1,TMR2IE	; enable Timer 2 interupt
00036 0AF3 	;
00037 0AF3 	; setup timer 1 for 0.5uS/count
00038 0AF3 	;
00039 0AF3 0020 		MOVLB	0x00	; bank 0
00040 0AF4 3021 		MOVLW	T1CON_Val
00041 0AF5 0098 		MOVWF	T1CON
00042 0AF6 1399 		bcf	T1GCON,TMR1GE	;always count
00043 0AF7 	;
00044 0AF7 	; clear memory to zero
00045 0AF7 		mLongCall	ClearRam
00045 0AF7 3181      M		movlp	ClearRam	                       movlp                  Destination
00045 0AF8 2102      M		call	ClearRam	                       call                   Destination
00045 0AF9 318A      M		movlp	$	                       movlp                  $
00046 0AFA 0064 		CLRWDT
00047 0AFB 		mLongCall	CopyToRam
00047 0AFB 3181      M		movlp	CopyToRam	                       movlp                  Destination
00047 0AFC 2121      M		call	CopyToRam	                       call                   Destination
00047 0AFD 318A      M		movlp	$	                       movlp                  $
00048 0AFE 	;
00049 0AFE 	; setup ccp1
00050 0AFE 	;
00051 0AFE 14BE 		BSF	ServoOff
00052 0AFF 	;	BANKSEL	APFCON
00053 0AFF 	;	BSF	APFCON,CCP1SEL	;CCP1 on RA5
00054 0AFF 0025  a		MOVLB	CCP1CON	;banksel
00053 0B00 		BANKSEL	CCP1CON
00055 0B00 0193 		CLRF	CCP1CON
00056 0B01 	;
00057 0B01 0021 		MOVLB	0x01	;Bank 1
00058 0B02 1511 		bsf	PIE1,CCP1IE
00059 0B03 	;
00060 0B03 	;
00061 0B03 0020 		MOVLB	0x00	;Bank 0
00062 0B04 	; setup data ports
00063 0B04 3011 		movlw	PortBValue
00064 0B05 008D 		movwf	PORTB	;init port B
00065 0B06 3000 		movlw	PortAValue
00066 0B07 008C 		movwf	PORTA
00067 0B08 0021 		MOVLB	0x01	; bank 1
00068 0B09 30FF 		movlw	PortADDRBits
00069 0B0A 008C 		movwf	TRISA
00070 0B0B 30E6 		movlw	PortBDDRBits	;setup for programer
00071 0B0C 008D 		movwf	TRISB
00072 0B0D 	;
00073 0B0D 		if useRS232
00074 0B0D 	; setup serial I/O
00075 0B0D 0023  a		MOVLB	BAUDCON	;banksel
00074 0B0E 		BANKSEL	BAUDCON	; bank 3
00076 0B0E 3008 		movlw	BAUDCON_Value
00077 0B0F 009F 		movwf	BAUDCON
00078 0B10 30CF 		MOVLW	low BaudRate
00079 0B11 009B 		MOVWF	SPBRGL
00080 0B12 3000 		MOVLW	high BaudRate
00081 0B13 009C 		MOVWF	SPBRGH
00082 0B14 3024 		MOVLW	TXSTA_Value
00083 0B15 009E 		MOVWF	TXSTA
00084 0B16 3090 		MOVLW	RCSTA_Value
00085 0B17 009D 		MOVWF	RCSTA
00086 0B18 0021 		movlb	0x01	; bank 1
00087 0B19 1691 		BSF	PIE1,RCIE	; Serial Receive interupt
00088 0B1A 0020 		movlb	0x00	; bank 0
00089 0B1B 	;
00090 0B1B 		endif
00091 0B1B 	;
00092 0B1B 0064 		CLRWDT
SerialServo.asm                                                       Page: 46
/Users/davidflynn/Projects/SerialServo/Firmware/

00093 0B1C 	;-----------------------
00094 0B1C 	;
00095 0B1C 0020 		MOVLB	0x00
00096 0B1D 3064 		MOVLW	LEDTIME
00097 0B1E 00A0 		MOVWF	SysLED_Time
00098 0B1F 3001 		movlw	0x01
00099 0B20 00A3 		movwf	SysLEDCount	;start blinking right away
00100 0B21 3064 		movlw	.100
00101 0B22 00B5 		movwf	Timer4Lo	;ignor buttons for 1st second
00102 0B23 	;
00103 0B23 0858 		movf	SysMode,W
00104 0B24 00A4 		movwf	LED1_Blinks
00105 0B25 	;
00106 0B25 	;if mode 3 don't move
00107 0B25 17BB 		bsf	ssCmdPos+1,7
00108 0B26 	;
00109 0B26 0064 		CLRWDT
00110 0B27 	;
00111 0B27 170B 		bsf	INTCON,PEIE	; enable periferal interupts
00112 0B28 178B 		bsf	INTCON,GIE	; enable interupts
00113 0B29 	;
00114 0B29 0008 		return
00115 0B2A 	;
00116 0B2A 	;
02068 0B2A 	;
02069 0B2A 		org BootLoaderStart
02070 1E00 		include <BootLoader1847.inc>
00001 1E00 	;************************************************
00002 1E00 	; BootLoader for PIC16F1847
00003 1E00 	; filename: Bootloader1847.inc
00004 1E00 	; Created: 3/21/2019
00005 1E00 	; Revision: 1.0a2 3/26/2020
00006 1E00 	;************************************************
00007 1E00 	; History
00008 1E00 	; 1.0a2 3/26/2020      Bug Fixes.
00009 1E00 	; 1.0a1 4/7/2019	First working version.
00010 1E00 	; 1.0d1 3/21/2019	first code
00011 1E00 	;************************************************
00012 1E00 	; Notes:
00013 1E00 	;
00014 1E00 	; WDT is not suported.
00015 1E00 	;
00016 1E00 	;  Does not program data EEProm, or other than prog mem 0..BootLoaderStart-1
00017 1E00 	;
00018 1E00 	; Must be the last thing in prog mem, will not overwrite itself or anything after it.
00019 1E00 	;
00020 1E00 	;BootLoaderStart	EQU	0x1E00
00021 1E00 	;	org BootLoaderStart
00022 1E00 	;	include <Bootloader1847.inc>
00023 1E00 	;
00024 1E00 	;  Reset vector:
00025 1E00 	;  	movlp	high BootLoaderStart
00026 1E00 	;    	goto	BootLoaderStart
00027 1E00 	;  ProgStartVector	CLRF	PCLATH
00028 1E00 	;	goto	Start
00029 1E00 	;
00030 1E00 	;  DataEEProm (0xFF) = 0xFF = run bootloader
00031 1E00 	;
00032 1E00 	; What happens next:
00033 1E00 	;  If Data EEProm address (0xFF) <> 0xFF then goto ProgStartVector
00034 1E00 	;  Setup  UART for 38.4KBaud
00035 1E00 	;  Parse incoming text as .hex file
00036 1E00 	;   if program memory address > 0 and < BootLoader then
00037 1E00 	;    read block from prog mem
00038 1E00 	;    if compare blocks then
00039 1E00 	;      if prog mem is not blank then erase block
00040 1E00 	;    write block
00041 1E00 	;
00042 1E00 	;  DataEEProm (0xFF) = 0x00
00043 1E00 	;
00044 1E00 	;  reset
00045 1E00 	;************************************************
00046 1E00 	; .hex
00047 1E00 	;:020000040000FA 
00048 1E00 	;       ^^^^^^ Set high word of address to 0x0000
00049 1E00 	;:100010005A23582356235423422021000C16200033
00050 1E00 	;:100020003A100C1E3A14A10B053221000C122000CC
00051 1E00 	;^ Start code                             ^^ Checksum
00052 1E00 	; ^^ Bytes of data (0x10)
00053 1E00 	;   ^^^^ Address low word (0x0020)
00054 1E00 	;       ^^ Record type 0x00 = Data
00055 1E00 	;         ^^^^ LSB MSB of data for Addr / 2
00056 1E00 	;                                         
00057 1E00 	; Checksum is 2's complement of all other bytes added together
00058 1E00 	; Valid address range 0000 0000 .. 0000 3BFE (bootloader is at 0000 3C00 .. 0000 3FFF, 512 words)
00059 1E00 	;************************************************
00060 1E00 	;
00061 1E00 	;
00062 1E00 		cblock 0x20
00063 1E00 0020 		PROG_ADDR_LO                                  ;word address PC
00064 1E00 0021 		PROG_ADDR_HI                                  ; high 7 bits of PC
00065 1E00 0022 		ProgWordCount                                 ;Words in SourceBuffer
00066 1E00 		
00067 1E00 0023 		IH_Addr_Lo:2		;
00068 1E00 0025 		IH_Addr_Hi:2		;extended linear address, alway 0x0000 for Prog mem
00069 1E00 0027 		IH_Bytes
00070 1E00 0028 		IH_ByteCount
00071 1E00 0029 		IH_Type		;Record Type 0..5
00072 1E00 002A 		IH_State
SerialServo.asm                                                       Page: 47
/Users/davidflynn/Projects/SerialServo/Firmware/

00073 1E00 002B 		IH_TempVal
00074 1E00 002C 		IH_Flags
00075 1E00 002D 		ChkSum
00076 1E00 		endc
00077 1E00 	;
00078 1E00 002C 	#Define	MSN_Done	IH_Flags,0	;Most Significant Nibble
00079 1E00 002C 	#Define	DataInBuffer	IH_Flags,1             ;SourceBuffer has data
00080 1E00 	;
00081 1E00 	;IH_Type: Intel Hex Types
00082 1E00 0000 	IHT_Data	EQU	0x00
00083 1E00 0001 	IHT_End	EQU	0x01	;ie :00000001FF
00084 1E00 0002 	IHT_XSA	EQU	0x02	;extended segment address, not supported
00085 1E00 0003 	IHT_SSA	EQU	0x03	;start segment address, not supported
00086 1E00 0004 	IHT_HighAddr	EQU	0x04	;extended linear address, :02000004FFFFFC
00087 1E00 0005 	IHT_SLA	EQU	0x05	;start linear address, not supported, :04000005000000CD2A
00088 1E00 	;
00089 1E00 	;IH_State values
00090 1E00 0000 	IHS_WaitForColon	EQU	0x00
00091 1E00 0001 	IHS_Length	EQU	0x01
00092 1E00 0002 	IHS_AddrMSB	EQU	0x02
00093 1E00 0003 	IHS_AddrLSB	EQU	0x03
00094 1E00 0004 	IHS_DataType	EQU	0x04
00095 1E00 0005 	IHS_Data	EQU	0x05
00096 1E00 0006 	IHS_CSum	EQU	0x06	;waiting for check sum
00097 1E00 	;
00098 1E00 002B 	IH_ErrorBadLen	EQU	'+'	;>64 Too big
00099 1E00 002D 	IH_ErrorBadCSum	EQU	'-'	;Checksum didn't match
00100 1E00 003D 	IH_ErrorBadType        EQU                    '='                    ;IH_Type not recognized 
00101 1E00 002A 	IH_Ack	EQU	'*'	;We got a good Intel Hex line
00102 1E00 	;
00103 1E00 0040 	BlockSize	EQU	0x40
00104 1E00 0020 	BlockWords	EQU	BlockSize/2	;0x20
00105 1E00 00E0 	AddressMask	EQU	0xE0
00106 1E00 	;
00107 1E00 	;Contiguous ram 0x2000..0x23EF
00108 1E00 		cblock 0x2100		;0x0100 after start of ram
00109 1E00 2100 		SourceBuffer:BlockSize
00110 1E00 2140 		DestBuffer:BlockSize
00111 1E00 2180 		SerialBuffer:BlockSize
00112 1E00 		endc
00113 1E00 	;
00114 1E00 	;=========================================================================================
00115 1E00 	;
00116 1E00 	; Entry: DataEEProm255
00117 1E00 	; Exit: goto ProgStartVector
00118 1E00 	; Calls: none
00119 1E00 	; RAM used: ALL
00120 1E00 	;
00121 1E00 279E 	BootLoader	call	InitializeBLIO	;returns w/ bank 0 selected
00122 1E01 	;
00123 1E01 2704 		call	ReadEEData	;Get Data from EEPROM (0xFF) 
00124 1E02 3AFF 		xorlw	0xFF
00125 1E03 		SKPZ		;0xFF xor 0xFF = 0
00125 1E03 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00126 1E04 320B 		bra	BootLoader_End
00127 1E05 	;
00128 1E05 	; Bootloader is active send "**"
00129 1E05 302A 		movlw	IH_Ack
00130 1E06 26FE 		call	SendChar
00131 1E07 302A 		movlw	IH_Ack
00132 1E08 26FE 		call	SendChar
00133 1E09 	;
00134 1E09 	;Initialize
00135 1E09 01A0 		clrf	PROG_ADDR_LO
00136 1E0A 01A1 		clrf	PROG_ADDR_HI
00137 1E0B 01A5 		clrf	IH_Addr_Hi
00138 1E0C 01A6 		clrf	IH_Addr_Hi+1
00139 1E0D 2746 		call	EraseSourceBuffer
00140 1E0E 	;
00141 1E0E 2612 		call	BL_Parse
00142 1E0F 	;	
00143 1E0F 	;if successful then clear EEProm(255)
00144 1E0F 270D 		call	WriteEEData
00145 1E10 	;
00146 1E10 3180 	BootLoader_End	movlp	0x00
00147 1E11 2802 		goto	ProgStartVector
00148 1E12 	;
00149 1E12 	;=========================================================================================
00150 1E12 	; Parse incoming data and do stuff
00151 1E12 	;
00152 1E12 10AC 	BL_Parse	bcf	DataInBuffer
00153 1E13 01AA 	BL_ParseNextLine	clrf	IH_State
00154 1E14 01A8 		clrf	IH_ByteCount
00155 1E15 01AD 		clrf	ChkSum
00156 1E16 26DE 		call                   FSR0_SerialBuffer
00157 1E17 	;
00158 1E17 102C 	BLP_L1	bcf	MSN_Done
00159 1E18 	;
00160 1E18 26ED 	BLP_L2	call	GetChar
00161 1E19 00F8 		movwf	Param78
00162 1E1A 303A 		movlw	':'
00163 1E1B 0278 		subwf	Param78,W
00164 1E1C 		SKPZ		;Char=":"
00164 1E1C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00165 1E1D 3203 		bra	BLP_TestNum	; No
00166 1E1E 	; It's a ":" so set state=1, wait for length
00167 1E1E 3001 		movlw	IHS_Length
00168 1E1F 00AA 		movwf	IH_State
00169 1E20 33F6 		bra	BLP_L1
SerialServo.asm                                                       Page: 48
/Users/davidflynn/Projects/SerialServo/Firmware/

00170 1E21 	;
00171 1E21 08AA 	BLP_TestNum	movf	IH_State,F
00172 1E22 		SKPNZ		;Are we waiting for a number?
00172 1E22 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00173 1E23 33F4 		bra	BLP_L2	; No
00174 1E24 	;
00175 1E24 3030 		movlw	0x30	;'0'
00176 1E25 0278 		subwf	Param78,W
00177 1E26 		SKPNB		;Char>="0"?
00177 1E26 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00178 1E27 33EB 		bra	BL_ParseNextLine	; No start over
00179 1E28 303A 		movlw	0x3A	;':'
00180 1E29 0278 		subwf	Param78,W
00181 1E2A 		SKPNB                                         ;>"9"?
00181 1E2A 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00182 1E2B 320A 		bra	BLP_TestNum_1          ; No, it's 0..9
00183 1E2C 3041 		movlw	0x41	;'A'
00184 1E2D 0278 		subwf	Param78,W
00185 1E2E 		SKPNB		;Char>="A"?
00185 1E2E 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00186 1E2F 33E3 		bra	BL_ParseNextLine	; No start over
00187 1E30 3047 		movlw	0x47	;'G'
00188 1E31 0278 		subwf	Param78,W
00189 1E32 		SKPB		;Char<"G"
00189 1E32 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00190 1E33 33DF 		bra	BL_ParseNextLine	; No, start over
00191 1E34 3007 		movlw	0x07	; Yes, A..F
00192 1E35 02F8 		subwf	Param78,F              ;  make "A" "0"+.10
00193 1E36 	;
00194 1E36 3030 	BLP_TestNum_1	movlw	0x30
00195 1E37 02F8 		subwf	Param78,F	;'0' >> 0x00
00196 1E38 182C 		btfsc	MSN_Done
00197 1E39 3204 		bra	BLP_TestNum_2	;do low nibble
00198 1E3A 0E78 		swapf	Param78,W
00199 1E3B 00AB 		movwf	IH_TempVal
00200 1E3C 142C 		bsf	MSN_Done
00201 1E3D 33DA 		bra	BLP_L2                 ;go get the next char
00202 1E3E 	;
00203 1E3E 0878 	BLP_TestNum_2	movf	Param78,W
00204 1E3F 07AB 		addwf	IH_TempVal,F           ;add the low nibble
00205 1E40 	;
00206 1E40 	; We have a number in IH_TempVal
00207 1E40 082A 	                       movf                   IH_State,W
00208 1E41 3907 	                       andlw                  0x07
00209 1E42 000B 	                       brw
00210 1E43 33CF 	                       bra                    BL_ParseNextLine       ;IHS_WaitForColon already handled
00211 1E44 3206 	                       bra                    BLP_IHS_Length         ;Waiting for length byte
00212 1E45 3211 	                       bra                    BLP_IHS_AddrMSB        ;IHS_AddrMSB
00213 1E46 3214 	                       bra                    BLP_IHS_AddrLSB        ;IHS_AddrLSB
00214 1E47 3217 	                       bra                    BLP_IHS_DataType       ;IHS_DataType
00215 1E48 321D 	                       bra                    BLP_IHS_Data           ;IHS_Data
00216 1E49 3225 	                       bra                    BLP_IHS_CSum           ;IHS_CSum
00217 1E4A 33C8 	                       bra                    BL_ParseNextLine       ;oops
00218 1E4B 	;	
00219 1E4B 3041 	BLP_IHS_Length	movlw	.65	; Yes, is it in range 0..64?
00220 1E4C 022B 		subwf	IH_TempVal,W
00221 1E4D 		SKPNB		;<=64?
00221 1E4D 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00222 1E4E 3203 		bra	BLP_SaveIH_Length
00223 1E4F 	;
00224 1E4F 302B 		movlw	IH_ErrorBadLen
00225 1E50 26FE 		call	SendChar
00226 1E51 2E13 		goto	BL_ParseNextLine
00227 1E52 	;
00228 1E52 082B 	BLP_SaveIH_Length	movf	IH_TempVal,W
00229 1E53 00A7 		movwf	IH_Bytes
00230 1E54 07AD 		addwf	ChkSum,F
00231 1E55 0AAA 	BLP_NextState	incf	IH_State,F
00232 1E56 2E17 		goto	BLP_L1
00233 1E57 	;
00234 1E57 082B 	BLP_IHS_AddrMSB	movf	IH_TempVal,W
00235 1E58 00A4 		movwf	IH_Addr_Lo+1
00236 1E59 07AD 		addwf	ChkSum,F
00237 1E5A 33FA 		bra	BLP_NextState
00238 1E5B 	;
00239 1E5B 082B 	BLP_IHS_AddrLSB	movf	IH_TempVal,W
00240 1E5C 00A3 		movwf	IH_Addr_Lo
00241 1E5D 07AD 		addwf	ChkSum,F
00242 1E5E 33F6 		bra	BLP_NextState
00243 1E5F 	;
00244 1E5F 082B 	BLP_IHS_DataType	movf	IH_TempVal,W
00245 1E60 00A9 		movwf	IH_Type
00246 1E61 07AD 		addwf	ChkSum,F
00247 1E62 	; Ship IHS_Data if length = 0
00248 1E62 08A7 		movf	IH_Bytes,F
00249 1E63 		SKPNZ		;Expecting zero length data?
00249 1E63 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00250 1E64 0AAA 		incf	IH_State,F	; Yes
00251 1E65 33EF 		bra	BLP_NextState
00252 1E66 	;
00253 1E66 082B 	BLP_IHS_Data	movf	IH_TempVal,W
00254 1E67 001A 		movwi	FSR0++
00255 1E68 07AD 		addwf	ChkSum,F
00256 1E69 0AA8 		incf	IH_ByteCount,F
00257 1E6A 	; if IH_ByteCount=IH_Bytes then next state
00258 1E6A 0828 		movf	IH_ByteCount,W
00259 1E6B 0227 		subwf	IH_Bytes,W
00260 1E6C 		SKPZ		;Done with data?
00260 1E6C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
SerialServo.asm                                                       Page: 49
/Users/davidflynn/Projects/SerialServo/Firmware/

00261 1E6D 2E17 		goto	BLP_L1	; No
00262 1E6E 33E6 		bra	BLP_NextState	; Yes
00263 1E6F 	;
00264 1E6F 	BLP_IHS_CSum:
00265 1E6F 	; get 2's comp
00266 1E6F 01F8 		clrf	Param78
00267 1E70 082D 		movf	ChkSum,W
00268 1E71 0278 		subwf	Param78,W
00269 1E72 022B 		subwf	IH_TempVal,W
00270 1E73 		SKPNZ		;Checksum matches?
00270 1E73 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00271 1E74 3203 		bra	BLP_Validate           ; Yes
00272 1E75 	;
00273 1E75 302D 		movlw	IH_ErrorBadCSum
00274 1E76 26FE 		call	SendChar
00275 1E77 2E13 		goto	BL_ParseNextLine
00276 1E78 	;
00277 1E78 	;===================
00278 1E78 	; We have received a complete Intel Hex command
00279 1E78 	;
00280 1E78 0829 	BLP_Validate	movf                   IH_Type,W
00281 1E79 39F8 	                       andlw                  0xF8
00282 1E7A 	                       SKPZ
00282 1E7A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00283 1E7B 3218 	                       bra                    BLPV_BadType
00284 1E7C 	;
00285 1E7C 0829 	                       movf                   IH_Type,W
00286 1E7D 000B 	                       brw
00287 1E7E 320B 	                       bra                    BLPV_Data              ;IHT_Data
00288 1E7F 3206 	                       bra                    BLPV_EndCmd            ;IHT_End
00289 1E80 3213 	                       bra                    BLPV_BadType           ;IHT_XSA
00290 1E81 3212 	                       bra                    BLPV_BadType           ;IHT_SSA
00291 1E82 3209 	                       bra                    BLPV_HighAddr          ;IHT_HighAddr
00292 1E83 3210 	                       bra                    BLPV_BadType           ;IHT_SLA
00293 1E84 320F 	                       bra                    BLPV_BadType           ;6
00294 1E85 320E 	                       bra                    BLPV_BadType           ;7
00295 1E86 	;---------------------
00296 1E86 	; handle end command
00297 1E86 18AC 	BLPV_EndCmd	btfsc	DataInBuffer
00298 1E87 26CD 		call	BLP_WriteBuffer
00299 1E88 302A 		movlw	IH_Ack
00300 1E89 2EFE 	                       goto	SendChar
00301 1E8A 	;
00302 1E8A 	;---------------------
00303 1E8A 	; handle data
00304 1E8A 2696 	BLPV_Data	call	BufferIHData           ;Move to source buffer
00305 1E8B 3205 	                       bra                    BLPV_Exit_Ack
00306 1E8C 	;
00307 1E8C 	;---------------------
00308 1E8C 	; handle high address change
00309 1E8C 26DE 	BLPV_HighAddr	call                   FSR0_SerialBuffer
00310 1E8D 0012 		moviw	FSR0++
00311 1E8E 00A6 		movwf	IH_Addr_Hi+1
00312 1E8F 0012 		moviw	FSR0++
00313 1E90 00A5 		movwf	IH_Addr_Hi
00314 1E91 302A 	BLPV_Exit_Ack	movlw	IH_Ack
00315 1E92 26FE 	BLPV_Exit	call	SendChar
00316 1E93 2E13 		goto	BL_ParseNextLine
00317 1E94 	;---------------------
00318 1E94 303D 	BLPV_BadType           movlw                  IH_ErrorBadType
00319 1E95 33FC 	                       bra                    BLPV_Exit
00320 1E96 	;
00321 1E96 	;===========================================
00322 1E96 	; Validate address is in range and move to SourceBuffer
00323 1E96 	;
00324 1E96 	; Entry: DataInBuffer, IH_ByteCount, Data in SerialBuffer, 32bit address IH_Addr_Hi:IH_Addr_Lo
00325 1E96 	; Exit: SourceBuffer, DataInBuffer, ProgWordCount, PROG_ADDR_HI:PROG_ADDR_LO
00326 1E96 	; 
00327 1E96 	; check address range, max 32K program words
00328 1E96 0825 	BufferIHData	movf	IH_Addr_Hi,W
00329 1E97 0426 		iorwf	IH_Addr_Hi+1,W
00330 1E98 		SKPZ		;High address = 0x0000 ?
00330 1E98 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00331 1E99 0008 		return		; No, > 64KB or 32K words
00332 1E9A 	;
00333 1E9A 	; convert to words, IH_Addr_Lo = IH_Addr_Lo / 2
00334 1E9A 36A4 		lsrf	IH_Addr_Lo+1,F
00335 1E9B 0CA3 		rrf	IH_Addr_Lo,F
00336 1E9C 301E 		movlw	high BootLoaderStart   ;0x0E
00337 1E9D 0224 		subwf	IH_Addr_Lo+1,W
00338 1E9E 		SKPB		;BootLoaderStart > IH_Addr_Lo?
00338 1E9E 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00339 1E9F 0008 		return		; No, don't allow overwrite of bootloader
00340 1EA0 	;
00341 1EA0 1CAC 		btfss	DataInBuffer	;Any old data in the buffer?
00342 1EA1 320D 		bra	BIHD_PutInBuff	; No
00343 1EA2 	;
00344 1EA2 	; Continue filling buffer or flush and add to new buffer?
00345 1EA2 	;
00346 1EA2 0824 		movf	IH_Addr_Lo+1,W
00347 1EA3 0221 		subwf	PROG_ADDR_HI,W
00348 1EA4 		SKPZ		;MSB of Address Matches?
00348 1EA4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00349 1EA5 3208 		bra	BIHD_FlushBuff	; No, write current data to PFM
00350 1EA6 	;
00351 1EA6 30E0 		movlw	AddressMask
00352 1EA7 0520 		andwf	PROG_ADDR_LO,W
00353 1EA8 00F8 		movwf	Param78                ;Param78 = Prog Address LSB & 0xE0
00354 1EA9 30E0 		movlw	AddressMask
SerialServo.asm                                                       Page: 50
/Users/davidflynn/Projects/SerialServo/Firmware/

00355 1EAA 0523 		andwf	IH_Addr_Lo,W           ;W = IH Word Address LSB & 0xE0
00356 1EAB 0278 		subwf	Param78,W
00357 1EAC 		SKPNZ		;Row Address Matches?
00357 1EAC 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00358 1EAD 320A 		bra	BIHD_PutInBuff_E2	; Yes
00359 1EAE 	;
00360 1EAE 26CD 	BIHD_FlushBuff	call	BLP_WriteBuffer
00361 1EAF 	;
00362 1EAF 	; Entry: IH_Addr_Lo=Word Address
00363 1EAF 	; 
00364 1EAF 0823 	BIHD_PutInBuff	movf	IH_Addr_Lo,W           ;was converted to words
00365 1EB0 39E0 		andlw	AddressMask            ; 0xE0
00366 1EB1 00A0 		movwf	PROG_ADDR_LO
00367 1EB2 0824 		movf	IH_Addr_Lo+1,W
00368 1EB3 00A1 		movwf	PROG_ADDR_HI
00369 1EB4 	; ProgWordCount = 0x1F & IH_Addr_Lo
00370 1EB4 30FF 		movlw	0xFF
00371 1EB5 3AE0 		xorlw	AddressMask	;0x1F
00372 1EB6 0523 		andwf	IH_Addr_Lo,W	;Offset within block
00373 1EB7 00A2 		movwf	ProgWordCount
00374 1EB8 	;
00375 1EB8 26DE 	BIHD_PutInBuff_E2	call                   FSR0_SerialBuffer
00376 1EB9 	;
00377 1EB9 	; FSR1 = SourceBuffer + ProgWordCount * 2
00378 1EB9 3522 		lslf	ProgWordCount,W	;ProgWordCount * 2
00379 1EBA 3E00 		addlw	low SourceBuffer
00380 1EBB 0086 		movwf	FSR1L
00381 1EBC 3021 		movlw	high SourceBuffer
00382 1EBD 0087 		movwf	FSR1H
00383 1EBE 	;
00384 1EBE 	;Param79 = IH_ByteCount
00385 1EBE 0828 		movf	IH_ByteCount,W
00386 1EBF 00F9 		movwf	Param79
00387 1EC0 	;ProgWordCount += IH_ByteCount / 2
00388 1EC0 3628 		lsrf	IH_ByteCount,W	; divide by 2
00389 1EC1 07A2 		addwf	ProgWordCount,F
00390 1EC2 	;
00391 1EC2 0012 	BIHD_PutInBuff_L1	moviw	FSR0++                 ;move SerialBuffer
00392 1EC3 001E 		movwi	FSR1++                 ;to SourceBuffer
00393 1EC4 0BF9 		decfsz	Param79,F
00394 1EC5 33FC 		bra	BIHD_PutInBuff_L1
00395 1EC6 	;
00396 1EC6 14AC 		bsf	DataInBuffer
00397 1EC7 	;
00398 1EC7 3020 		movlw	BlockWords             ;0x20
00399 1EC8 0222 		subwf	ProgWordCount,W        ;W = ProgWordCount - 0x20
00400 1EC9 		SKPNZ		;buffer full?
00400 1EC9 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00401 1ECA 3202 		bra	BLP_WriteBuffer	; Yes, ProgWordCount = 0x20
00402 1ECB 		SKPNB		;Overflow? This should not happen.
00402 1ECB 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00403 1ECC 0008 		return		; No, ProgWordCount < 0x20
00404 1ECD 	;
00405 1ECD 	; fall thru to BLP_WriteBuffer
00406 1ECD 	;=============================================
00407 1ECD 	; Write SourceBuffer to Prog memory
00408 1ECD 	;
00409 1ECD 	; Entry: SourceBuffer, ProgWordCount, PROG_ADDR_HI:PROG_ADDR_LO
00410 1ECD 	;
00411 1ECD 	BLP_WriteBuffer:
00412 1ECD 	; copy old prog mem to DestBuffer
00413 1ECD 26E3 		call                   FSR1_DestBuff
00414 1ECE 2751 		call	ReadProgBlock
00415 1ECF 	;
00416 1ECF 3000 		movlw	low SourceBuffer	;new data
00417 1ED0 0084 		movwf	FSR0L
00418 1ED1 3021 		movlw	high SourceBuffer
00419 1ED2 0085 		movwf	FSR0H	
00420 1ED3 26E3 		call                   FSR1_DestBuff          ;old data
00421 1ED4 272C 		call	CompareBlock
00422 1ED5 	;
00423 1ED5 1809 		btfsc	WREG,0	;Matches?
00424 1ED6 3206 		bra	BLP_WriteBuffer_end	; Yes
00425 1ED7 	;	
00426 1ED7 26E3 		call                   FSR1_DestBuff
00427 1ED8 271F 		call	TestErased
00428 1ED9 1C09 		btfss	WREG,0	;Erased?
00429 1EDA 2763 		call	EraseProgBlock	; No, Erase it.
00430 1EDB 	;
00431 1EDB 26E8 		call                   FSR1_SourceBuffer	
00432 1EDC 277A 		call	WriteProgBlock
00433 1EDD 	;
00434 1EDD 2F46 	BLP_WriteBuffer_end	goto	EraseSourceBuffer
00435 1EDE 	;
00436 1EDE 	;---------------------
00437 1EDE 3080 	FSR0_SerialBuffer      movlw	low SerialBuffer
00438 1EDF 0084 		movwf	FSR0L
00439 1EE0 3021 		movlw	high SerialBuffer
00440 1EE1 0085 		movwf	FSR0H
00441 1EE2 0008 		return
00442 1EE3 	;
00443 1EE3 	;---------------------
00444 1EE3 3040 	FSR1_DestBuff          movlw	low DestBuffer
00445 1EE4 0086 		movwf	FSR1L
00446 1EE5 3021 		movlw	high DestBuffer
00447 1EE6 0087 		movwf	FSR1H
00448 1EE7 0008 		return
00449 1EE8 	;
00450 1EE8 	;---------------------
SerialServo.asm                                                       Page: 51
/Users/davidflynn/Projects/SerialServo/Firmware/

00451 1EE8 3000 	FSR1_SourceBuffer      movlw	low SourceBuffer
00452 1EE9 0086 		movwf	FSR1L
00453 1EEA 3021 		movlw	high SourceBuffer
00454 1EEB 0087 		movwf	FSR1H
00455 1EEC 0008 		return
00456 1EED 	;
00457 1EED 	;==============================================
00458 1EED 	; Get a byte from UART, waits forever
00459 1EED 	;
00460 1EED 	; Entry: none
00461 1EED 	; Exit: W=Char
00462 1EED 	;
00463 1EED 0020 	GetChar	MOVLB	0x00
00464 1EEE 1E91 		BTFSS	PIR1,RCIF	;RX has a byte?
00465 1EEF 33FD 		BRA	GetChar
00466 1EF0 	;
00467 1EF0 0023 		movlb	RCSTA	; bank 3
00468 1EF1 081D 		MOVF	RCSTA,W
00469 1EF2 3906 		ANDLW	0x06
00470 1EF3 		SKPZ		;Frame or Overrun Err?
00470 1EF3 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00471 1EF4 3203 		BRA	GetChar_Err	; yes
00472 1EF5 0819 		MOVF	RCREG,W
00473 1EF6 	;
00474 1EF6 0020 		movlb	0x00	; bank 0
00475 1EF7 	;	goto	SendChar	; tc
00476 1EF7 0008 		RETURN
00477 1EF8 	;
00478 1EF8 0819 	GetChar_Err	MOVF	RCREG,W	;bad byte so drop it
00479 1EF9 121D 		BCF	RCSTA,CREN
00480 1EFA 111D 		BCF	RCSTA,FERR
00481 1EFB 109D 		BCF	RCSTA,OERR
00482 1EFC 161D 		BSF	RCSTA,CREN
00483 1EFD 33EF 		bra	GetChar
00484 1EFE 	;
00485 1EFE 	;==============================================
00486 1EFE 	; Send a byte to UART
00487 1EFE 	;
00488 1EFE 	; Entry: W=Char to send
00489 1EFE 	SendChar:
00490 1EFE 1E11 		BTFSS	PIR1,TXIF	;TX done?
00491 1EFF 33FE 		bra	SendChar
00492 1F00 0023 		movlb	TXREG
00493 1F01 009A 		MOVWF	TXREG
00494 1F02 0020 		MOVLB	0
00495 1F03 0008 		RETURN
00496 1F04 	;	
00497 1F04 	;==============================================
00498 1F04 	; Read EEProm(255)
00499 1F04 	;
00500 1F04 	ReadEEData:	
00501 1F04 0023 		movlb	EEADRL
00502 1F05 30FF 		MOVLW	0xFF
00503 1F06 0091 		MOVWF	EEADRL
00504 1F07 	;
00505 1F07 	;Data Memory
00506 1F07 	;Address to read ;Deselect Config space
00507 1F07 1315 		BCF	EECON1,CFGS
00508 1F08 1395 		BCF	EECON1,EEPGD
00509 1F09 	;Point to DATA memory
00510 1F09 1415 		BSF	EECON1,RD	;EE Read
00511 1F0A 0813 		MOVF	EEDATL,W	;W = EEDATL
00512 1F0B 0020 		movlb	0
00513 1F0C 0008 		return
00514 1F0D 	;
00515 1F0D 	;==============================================
00516 1F0D 	; Clear EEProm(255)
00517 1F0D 	;
00518 1F0D 	WriteEEData:
00519 1F0D 0023 		movlb	EEADRL
00520 1F0E 30FF 		MOVLW	0xFF
00521 1F0F 0091 		MOVWF	EEADRL
00522 1F10 3000 		movlw	0x00
00523 1F11 0093 		movwf	EEDATL
00524 1F12 1315 		BCF	EECON1,CFGS	;not config mem
00525 1F13 1395 		BCF	EECON1,EEPGD	;not prog mem
00526 1F14 1515 		BSF	EECON1,WREN
00527 1F15 3055 		movlw	0x55
00528 1F16 0096 		movwf	EECON2
00529 1F17 30AA 		movlw	0xAA
00530 1F18 0096 		movwf	EECON2
00531 1F19 1495 		bsf	EECON1,WR
00532 1F1A 1895 	WriteEEData_L1	btfsc	EECON1,WR
00533 1F1B 33FE 		bra	WriteEEData_L1
00534 1F1C 1115 		bcf	EECON1,WREN
00535 1F1D 0020 		movlb	0
00536 1F1E 0008 		return
00537 1F1F 	;
00538 1F1F 	;==============================================
00539 1F1F 	; Test if block is erased
00540 1F1F 	;
00541 1F1F 	; Entry: FSR1 -> current data
00542 1F1F 	; Exit: W=1 if new = blank else W=0
00543 1F1F 	;
00544 1F1F 3020 	TestErased	movlw	BlockWords
00545 1F20 00F9 		movwf	Param79
00546 1F21 0016 	TestErased_L1	moviw	FSR1++	;LSB
00547 1F22 3CFF 		sublw	0xFF
00548 1F23 		SKPZ		;=0xFF?
SerialServo.asm                                                       Page: 52
/Users/davidflynn/Projects/SerialServo/Firmware/

00548 1F23 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00549 1F24 3400 		retlw	0x00	; No
00550 1F25 	;
00551 1F25 0016 		moviw	FSR1++	;MSB
00552 1F26 3C3F 		sublw	0x3F
00553 1F27 		SKPZ		;=0x3F?
00553 1F27 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00554 1F28 3400 		retlw	0x00	; No
00555 1F29 	;
00556 1F29 0BF9 		decfsz	Param79,F
00557 1F2A 33F6 		bra	TestErased_L1
00558 1F2B 3401 		retlw	0x01                   ;All words are 0x3FFF
00559 1F2C 	;
00560 1F2C 	;==============================================
00561 1F2C 	; Compare Block
00562 1F2C 	;
00563 1F2C 	; Entry: FSR0 -> new data, FSR1 -> current data
00564 1F2C 	; Exit: W=1 if new = current else W=0
00565 1F2C 	;
00566 1F2C 3020 	CompareBlock	movlw	BlockWords
00567 1F2D 00F9 		movwf	Param79
00568 1F2E 0012 	CompareBlock_L1	moviw	FSR0++	;LSB
00569 1F2F 00F7 		movwf	Param77
00570 1F30 0012 		moviw	FSR0++	;MSB
00571 1F31 00F8 		movwf	Param78
00572 1F32 	; skip?
00573 1F32 3C3F 		sublw	0x3F
00574 1F33 		SKPZ
00574 1F33 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00575 1F34 3206 		bra	CB_NotBlank
00576 1F35 0A77 		incf	Param77,W
00577 1F36 		SKPZ
00577 1F36 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00578 1F37 3203 		bra	CB_NotBlank
00579 1F38 0016 		moviw	FSR1++
00580 1F39 0016 		moviw	FSR1++
00581 1F3A 3208 		bra	CB_Next
00582 1F3B 	;
00583 1F3B 0016 	CB_NotBlank	moviw	FSR1++
00584 1F3C 0277 		subwf	Param77,W
00585 1F3D 		SKPZ		;Matches?
00585 1F3D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00586 1F3E 3400 		retlw	0x00	; No
00587 1F3F 0016 		moviw	FSR1++
00588 1F40 0278 		subwf	Param78,W
00589 1F41 		SKPZ		;Matches?
00589 1F41 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00590 1F42 3400 		retlw	0x00	; No
00591 1F43 	;
00592 1F43 0BF9 	CB_Next	decfsz	Param79,F
00593 1F44 33E9 		bra	CompareBlock_L1
00594 1F45 3401 		retlw	0x01	;It's a match!
00595 1F46 	;
00596 1F46 	;==============================================
00597 1F46 	; Fill SourceBuffer w/ 0x3FFF
00598 1F46 	;
00599 1F46 26E8 	EraseSourceBuffer	call                   FSR1_SourceBuffer
00600 1F47 10AC 	                       bcf	DataInBuffer           ;mark SourceBuffer as empty
00601 1F48 	;
00602 1F48 	; Fall thru to EraseBlock
00603 1F48 	;==============================================
00604 1F48 	; Erase Block (Fill with 0x3FFF)
00605 1F48 	;
00606 1F48 	; Entry: FSR1
00607 1F48 	;
00608 1F48 3020 	EraseBlock	movlw	BlockWords
00609 1F49 00F9 		movwf	Param79
00610 1F4A 30FF 	EraseBlock_L1	movlw	0xFF
00611 1F4B 001E 		movwi	FSR1++
00612 1F4C 303F 		movlw	0x3F
00613 1F4D 001E 		movwi	FSR1++
00614 1F4E 0BF9 		decfsz	Param79,F
00615 1F4F 33FA 		bra	EraseBlock_L1
00616 1F50 0008 		return
00617 1F51 	;	
00618 1F51 	;==============================================
00619 1F51 	; Read Program memory block
00620 1F51 	;
00621 1F51 	; Entry: FSR1,PROG_ADDR_HI:PROG_ADDR_LO
00622 1F51 	; Exit: FSR1 changed, 32 words >> (FSR1++)
00623 1F51 	;
00624 1F51 2772 	ReadProgBlock	call	LoadProgAddr
00625 1F52 1315 		BCF	EECON1,CFGS	; Do not select Configuration Space
00626 1F53 1795 		BSF	EECON1,EEPGD	; Select Program Memory
00627 1F54 3020 		movlw	BlockWords	;Block is .32 words
00628 1F55 00F9 		movwf	Param79
00629 1F56 1415 	ReadProgBlock_L1	BSF	EECON1,RD	; Initiate read
00630 1F57 0000 		NOP		; skipped
00631 1F58 0000 		NOP		; do nothing
00632 1F59 0813 		MOVF	EEDATL,W	; Get LSB of word
00633 1F5A 001E 		movwi	FSR1++	; Store in user location
00634 1F5B 0814 		MOVF	EEDATH,W	; Get MSB of word
00635 1F5C 001E 		movwi	FSR1++	; Store in user location
00636 1F5D 0BF9 		decfsz	Param79,F
00637 1F5E 3202 		bra	ReadProgBlock_1
00638 1F5F 0020 		movlb	0
00639 1F60 0008 		return
00640 1F61 	;
00641 1F61 0A91 	ReadProgBlock_1	incf	EEADRL,F
SerialServo.asm                                                       Page: 53
/Users/davidflynn/Projects/SerialServo/Firmware/

00642 1F62 33F3 		bra	ReadProgBlock_L1
00643 1F63 	;
00644 1F63 	;=====================================================
00645 1F63 	; Erase Program memory block
00646 1F63 	;
00647 1F63 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO
00648 1F63 	;
00649 1F63 2772 	EraseProgBlock	call	LoadProgAddr
00650 1F64 1795 		BSF	EECON1,EEPGD	;Point to program memory
00651 1F65 1315 		BCF	EECON1,CFGS	;Not configuration space
00652 1F66 1615 		BSF	EECON1,FREE	;Specify an erase operation, automaticaly cleared
00653 1F67 1515 		BSF	EECON1,WREN	;Enable writes
00654 1F68 3055 		MOVLW	55h	;Start of required sequence to initiate erase
00655 1F69 0096 		MOVWF	EECON2	;Write 55h
00656 1F6A 30AA 		MOVLW	0AAh
00657 1F6B 0096 		MOVWF	EECON2	;Write AAh
00658 1F6C 1495 		BSF	EECON1,WR	;Set WR bit to begin erase
00659 1F6D 0000 		NOP		;Any instructions here are ignored as processor
00660 1F6E 0000 		NOP		; halts to begin erase sequence
00661 1F6F 				;Processor will stop here and wait for erase complete.
00662 1F6F 				;after erase processor continues with 3rd instruction
00663 1F6F 1115 		BCF	EECON1,WREN	;Disable writes
00664 1F70 0020 		movlb	0
00665 1F71 0008 		return
00666 1F72 	;
00667 1F72 	;=========================================================
00668 1F72 	; Load the program address PROG_ADDR_HI:PROG_ADDR_LO into EEADRH:EEADRL
00669 1F72 	;
00670 1F72 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, bank 0
00671 1F72 	; Exit: bank 16
00672 1F72 	;
00673 1F72 0821 	LoadProgAddr	movf	PROG_ADDR_HI,W
00674 1F73 0023 		movlb	EEADRH	;bank ?
00675 1F74 0092 		MOVWF	EEADRH	; Store MSB of address
00676 1F75 0020 		movlb	0	;bank 0
00677 1F76 0820 		movf	PROG_ADDR_LO,W
00678 1F77 0023 		movlb	EEADRH	;bank ?
00679 1F78 0091 		MOVWF	EEADRL	; Store LSB of address
00680 1F79 0008 		return
00681 1F7A 	;
00682 1F7A 	;==========================================================
00683 1F7A 	; Write Program memory block
00684 1F7A 	;
00685 1F7A 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, FSR1
00686 1F7A 	; Exit: FSR1 changed
00687 1F7A 	; 
00688 1F7A 2772 	WriteProgBlock	call	LoadProgAddr
00689 1F7B 1795 		BSF	EECON1,EEPGD	;Point to program memory
00690 1F7C 1315 		BCF	EECON1,CFGS	;Not configuration space
00691 1F7D 1515 		BSF	EECON1,WREN	;Enable writes
00692 1F7E 1695 		BSF	EECON1,LWLO	;Only Load Write Latches
00693 1F7F 3020 		movlw	BlockWords
00694 1F80 00F9 		movwf	Param79
00695 1F81 	;
00696 1F81 0016 	WriteProgBlock_L1	moviw	FSR1++
00697 1F82 0093 		movwf	EEDATL
00698 1F83 0016 		moviw	FSR1++
00699 1F84 0094 		movwf	EEDATH
00700 1F85 	;
00701 1F85 0811 		movf	EEADRL,W
00702 1F86 3A1F 		xorlw	0x1F
00703 1F87 391F 		andlw	0x1F
00704 1F88 1903 		btfsc	_Z	;EEADRL = xxx1 1111?
00705 1F89 3209 		bra	WriteProgBlock_Wr	; Yes
00706 1F8A 	;
00707 1F8A 3055 		movlw	0x55	; Start of required write sequence:
00708 1F8B 0096 		movwf	EECON2
00709 1F8C 30AA 		movlw	0xAA
00710 1F8D 0096 		movwf	EECON2
00711 1F8E 1495 		bsf	EECON1,WR	; Set WR bit to begin write to latches
00712 1F8F 0000 		nop
00713 1F90 0000 		nop
00714 1F91 0A91 		incf	EEADRL,F
00715 1F92 33EE 		bra	WriteProgBlock_L1
00716 1F93 	;
00717 1F93 1295 	WriteProgBlock_Wr	bcf	EECON1,LWLO	; Write memory not latches
00718 1F94 3055 		movlw	0x55	; Start of required write sequence:
00719 1F95 0096 		movwf	EECON2
00720 1F96 30AA 		movlw	0xAA
00721 1F97 0096 		movwf	EECON2
00722 1F98 1495 		bsf	EECON1,WR	; Set WR bit to begin write
00723 1F99 0000 		nop
00724 1F9A 0000 		nop
00725 1F9B 	;
00726 1F9B 1115 		bcf	EECON1,WREN
00727 1F9C 	;
00728 1F9C 0020 	WriteProgBlock_end	movlb	0
00729 1F9D 0008 		return	
00730 1F9E 	;
00731 1F9E 	;============================================================
00732 1F9E 	; call once
00733 1F9E 	;
00734 1F9E 0021 	InitializeBLIO	MOVLB	0x01	; select bank 1
00735 1F9F 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00736 1FA0 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00737 1FA1 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00738 1FA2 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00739 1FA3 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00740 1FA4 1515 		bsf	OPTION_REG,PS2
SerialServo.asm                                                       Page: 54
/Users/davidflynn/Projects/SerialServo/Firmware/

00741 1FA5 	;
00742 1FA5 30F0 		MOVLW	OSCCON_Value
00743 1FA6 0099 		MOVWF	OSCCON
00744 1FA7 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00745 1FA8 0097 		movwf	WDTCON
00746 1FA9 	;
00747 1FA9 0024 		movlb	4	; bank 4
00748 1FAA 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00749 1FAB 	;
00750 1FAB 0023 		MOVLB	0x03	; bank 3
00751 1FAC 3011 		movlw	ANSELA_Val
00752 1FAD 008C 		movwf	ANSELA
00753 1FAE 3020 		movlw	ANSELB_Val
00754 1FAF 008D 		movwf	ANSELB
00755 1FB0 	;
00756 1FB0 	;
00757 1FB0 		if UseAltSerialPort
00764 1FB0 		endif
00765 1FB0 	;
00766 1FB0 0020 		MOVLB	0x00	;Bank 0
00767 1FB1 	; setup data ports
00768 1FB1 3011 		movlw	PortBValue
00769 1FB2 008D 		movwf	PORTB	;init port B
00770 1FB3 3000 		movlw	PortAValue
00771 1FB4 008C 		movwf	PORTA
00772 1FB5 0021 		MOVLB	0x01	; bank 1
00773 1FB6 30FF 		movlw	PortADDRBits
00774 1FB7 008C 		movwf	TRISA
00775 1FB8 30E6 		movlw	PortBDDRBits	;setup for programer
00776 1FB9 008D 		movwf	TRISB
00777 1FBA 	;
00778 1FBA 	; setup serial I/O
00779 1FBA 0023 		movlb	BAUDCON	; bank 3
00780 1FBB 3008 		movlw	BAUDCON_Value
00781 1FBC 009F 		movwf	BAUDCON
00782 1FBD 30CF 		MOVLW	low BaudRate
00783 1FBE 009B 		MOVWF	SPBRGL
00784 1FBF 3000 		MOVLW	high BaudRate
00785 1FC0 009C 		MOVWF	SPBRGH
00786 1FC1 3024 		MOVLW	TXSTA_Value
00787 1FC2 009E 		MOVWF	TXSTA
00788 1FC3 3090 		MOVLW	RCSTA_Value
00789 1FC4 009D 		MOVWF	RCSTA
00790 1FC5 	;	movlb	0x01	; bank 1
00791 1FC5 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00792 1FC5 0020 		movlb	0x00	; bank 0
00793 1FC6 	;
00794 1FC6 	;	bsf	INTCON,PEIE	; enable periferal interupts
00795 1FC6 138B 		bcf	INTCON,GIE	; disable interupts
00796 1FC7 	;
00797 1FC7 0008 		return
00798 1FC8 	;
00799 1FC8 	;
00800 1FC8 	 
00801 1FC8 	 
00802 1FC8 	 
00803 1FC8 	 
00804 1FC8 	 
00805 1FC8 	 
00806 1FC8 	 
00807 1FC8 	 
00808 1FC8 	 
00809 1FC8 	 
00810 1FC8 	 
00811 1FC8 	 
00812 1FC8 	 
00813 1FC8 	 
00814 1FC8 	 
00815 1FC8 	 
00816 1FC8 	 
00817 1FC8 	 
00818 1FC8 	 
00819 1FC8 	 
00820 1FC8 	 
00821 1FC8 	 
00822 1FC8 	 
00823 1FC8 	 
00824 1FC8 	 
00825 1FC8 	 
00826 1FC8 	 
02071 1FC8 	;
02072 1FC8 	;
02073 1FC8 		END

X-Ref Table
ADCON0	009D 	ReadAN, ReadAN_1, ReadAN0_ColdStart
ADCON1	009E 	ReadAN0_ColdStart
ADGO	0001 	ReadAN_1
ADON	0000 	ReadAN
ADRESH	009C 	ReadAN_1
ADRESL	009B 	ReadAN_1
AN0_Val	0000 	ReadAN_TryAN4, ReadAN0_ColdStart
AN1_Val	0004 	ReadAN, ReadAN_AN0
AN2_Val	0008 	ReadAN_TryAN2, ReadAN_AN0_1
AN3_Val	000C 	ReadAN_TryAN3, ReadAN_AN0_2
AN4_Val	0010 	ReadAN_TryAN4, ReadAN_AN0_3
AN7_Val	001C 	ReadAN_AN4
ANFlags	00B2 	ML_1, ReadAN_TryAN4, ReadAN_AN4, ReadAN_AN0
ANNumMask	007C 	ReadAN
SerialServo.asm   X-Ref Table                                            Page: 55
/Users/davidflynn/Projects/SerialServo/Firmware/

ANSELA	018C 	InitializeIO, InitializeBLIO
ANSELA_Val	0011 	InitializeIO, InitializeBLIO
ANSELB	018D 	InitializeIO, InitializeBLIO
ANSELB_Val	0020 	InitializeIO, InitializeBLIO
AddressMask	00E0 	BufferIHData, BIHD_PutInBuff
AllDataRXd	RX_ParseFlags,6	RS232_Parse, RS232_Parse_DALo_End
Aux0DigOut_1 ^	004E 	LED1_Blink_end
Aux0DigOut_2 ^	0051 	LED1_Blink_end, Aux0DigOut_1
Aux0DigOut_end ^	0053 	LED1_Blink_end
Aux1DigOut_1 ^	0084 	LED2_Blink_end
Aux1DigOut_2 ^	0087 	LED2_Blink_end, Aux1DigOut_1
Aux1DigOut_end ^	0089 	LED2_Blink_end
Aux2DigOut_1 ^	00BB 	LED3_Blink_end
Aux2DigOut_2 ^	00BE 	LED3_Blink_end, Aux2DigOut_1
Aux2DigOut_end ^	00C0 	LED3_Blink_end
BAUDCON	019F 	InitializeIO, InitializeBLIO
BAUDCON_Value	0008 	InitializeIO, InitializeBLIO
BIHD_FlushBuff ^	1EAE 	BufferIHData
BIHD_PutInBuff ^	1EAF 	BufferIHData
BIHD_PutInBuff_E2 ^	1EB8 	BufferIHData
BIHD_PutInBuff_L1 ^	1EC2 	BIHD_PutInBuff_L1
BLPV_BadType ^	1E94 	BLP_Validate
BLPV_Data ^	1E8A 	BLP_Validate
BLPV_EndCmd ^	1E86 	BLP_Validate
BLPV_Exit ^	1E92 	BLPV_BadType
BLPV_Exit_Ack ^	1E91 	BLPV_Data
BLPV_HighAddr ^	1E8C 	BLP_Validate
BLP_IHS_AddrLSB ^	1E5B 	BLP_TestNum_2
BLP_IHS_AddrMSB ^	1E57 	BLP_TestNum_2
BLP_IHS_CSum ^	1E6F 	BLP_TestNum_2
BLP_IHS_Data ^	1E66 	BLP_TestNum_2
BLP_IHS_DataType ^	1E5F 	BLP_TestNum_2
BLP_IHS_Length ^	1E4B 	BLP_TestNum_2
BLP_L1 ^	1E17 	BLP_L2, BLP_NextState, BLP_IHS_Data
BLP_L2 ^	1E18 	BLP_TestNum, BLP_TestNum_1
BLP_NextState ^	1E55 	BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
BLP_SaveIH_Length ^	1E52 	BLP_IHS_Length
BLP_TestNum ^	1E21 	BLP_L2
BLP_TestNum_1 ^	1E36 	BLP_TestNum
BLP_TestNum_2 ^	1E3E 	BLP_TestNum_1
BLP_Validate ^	1E78 	BLP_IHS_CSum
BLP_WriteBuffer ^	1ECD 	BLPV_EndCmd, BIHD_FlushBuff, BIHD_PutInBuff_L1
BLP_WriteBuffer_end ^	1EDD 	BLP_WriteBuffer
BL_Parse ^	1E12 	BootLoaderStart
BL_ParseNextLine ^	1E13 	BLP_TestNum, BLP_TestNum_2, BLP_IHS_Length, BLP_IHS_CSum
		BLPV_Exit
BSR	0008 	ProgStartVector
BattVolts	Cur_AN7	Cmd_GetBattVolts
BaudRate	00CF 	InitializeIO, InitializeBLIO
BlockSize	0040 	BootLoaderStart
BlockWords	0020 	BIHD_PutInBuff_L1, TestErased, CompareBlock, EraseSourceBuffer, ReadProgBlock
		WriteProgBlock
BootLoaderStart ^	1E00 	, InitializeIO, BufferIHData
BootLoader_End ^	1E10 	BootLoaderStart
BufferIHData ^	1E96 	BLPV_Data
C	0000 	DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_CalcCurPos, DM3_GoRev, DM3_ErrIsPos
		DM4_NotOverCurrent, DoMode4_MovPlus, ClampInt_E2, ClampInt_1, Cmd_SetMode, Cmd_SetAuxConfig
		Cmd_GetAuxConfig, Cmd_SetAuxNValue, Cmd_GetAuxNValue, ReadEncoder_L1, BLP_TestNum
		BLP_IHS_Length, BufferIHData, BIHD_PutInBuff_L1
CB_Next ^	1F43 	CompareBlock_L1
CB_NotBlank ^	1F3B 	CompareBlock_L1
CCP1CON	0293 	Aux2DigOut_end, IRQ_Servo1_1, IRQ_Servo1_OH, IRQ_Servo1_Idle, IRQ_Servo1_OL
		StartServo, InitializeIO
CCP1CON_Clr	0009 	IRQ_Servo1_OH
CCP1CON_Idle	000A 	Aux2DigOut_end, IRQ_Servo1_Idle
CCP1CON_Set	0008 	IRQ_Servo1_OL, StartServo
CCP1IE	0002 	InitializeIO
CCP1IF	0002 	Aux2DigOut_end, IRQ_Servo1_X
CCP1M0	0000 	IRQ_Servo1_1, IRQ_Servo1_Idle
CCP1M1	0001 	IRQ_Servo1_1, IRQ_Servo1_Idle
CCPR1H	0292 	IRQ_Servo1_OH, IRQ_Servo1_Dwell, StartServo
CCPR1L	0291 	IRQ_Servo1_OH, IRQ_Servo1_Dwell, StartServo
CFGS	0006 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
CREN	0004 	RX_TheByte_Err, GetChar_Err
CalcdDwell	02A2 	IRQ_Servo1_OH, IRQ_Servo1_20mS, IRQ_Servo1_CalcDwell, IRQ_Servo1_Idle
		IRQ_Servo1_Dwell, StartServo, SetMiddlePosition
CalcdDwellH	02A3 	IRQ_Servo1_OH, IRQ_Servo1_20mS, IRQ_Servo1_CalcDwell, IRQ_Servo1_Idle
		IRQ_Servo1_Dwell, StartServo, SetMiddlePosition
CheckCurrent ^	0304 	DoModeTwo, DoModeThree, DoMode4
CheckGripCurrent ^	0316 	DoMode4
ChkSum	002D 	BootLoaderStart, BL_ParseNextLine, BLP_SaveIH_Length, BLP_IHS_AddrMSB
		BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
ClampInt ^	0546 	DoModeZero, DoModeTwo_Go, DM3_NotOverCurrent, DoMode4_Go
ClampIntMD3 ^	0541 	DM3_UpdatePos
ClampInt_1 ^	0552 	ClampInt_E2
ClampInt_E2 ^	054A 	ClampIntMD3
ClampInt_tooHigh ^	055E 	ClampInt_E2
ClampInt_tooLow ^	0559 	ClampInt_1
ClearRam ^	0102 	InitializeIO
ClearRam_2 ^	0113 	ClearRam
ClearRam_L2 ^	011C 	ClearRam, ClearRam_2, ClearRam_L2
Cmd_GetAuxConfig ^	0925 	Dispatcher_2
Cmd_GetAuxNValue ^	094E 	Dispatcher_2
Cmd_GetAuxNValue_Ana ^	0963 	Cmd_GetAuxNValue
Cmd_GetAuxNValue_Btn ^	0980 	Cmd_GetAuxNValue
Cmd_GetAuxNValue_Btn1 ^	0987 	Cmd_GetAuxNValue_Btn
Cmd_GetAuxNValue_Btn2 ^	098E 	Cmd_GetAuxNValue_Btn1
Cmd_GetAuxNValue_Dig ^	096D 	Cmd_GetAuxNValue
SerialServo.asm   X-Ref Table                                            Page: 56
/Users/davidflynn/Projects/SerialServo/Firmware/

Cmd_GetAuxNValue_Dig1 ^	0974 	Cmd_GetAuxNValue_Dig
Cmd_GetAuxNValue_Dig2 ^	097B 	Cmd_GetAuxNValue_Dig1
Cmd_GetBattVolts ^	09BB 	Dispatcher_4
Cmd_GetCmdPos ^	08A4 	HandleRXData_1
Cmd_GetDeadBand ^	0907 	HandleRXData_1
Cmd_GetEnaOvrCur ^	08E7 	HandleRXData_1
Cmd_GetEnc ^	09A3 	Dispatcher_4
Cmd_GetEncAbs ^	09A8 	Dispatcher_4
Cmd_GetEncoderOffset ^	0998 	Dispatcher_2
Cmd_GetFFwd ^	08B5 	HandleRXData_1
Cmd_GetFRev ^	08BF 	HandleRXData_1
Cmd_GetGripI ^	0916 	Dispatcher_2
Cmd_GetI ^	099D 	Dispatcher_4
Cmd_GetMaxI ^	08AD 	HandleRXData_1
Cmd_GetMax_uS ^	08D3 	HandleRXData_1
Cmd_GetMin_uS ^	08C9 	HandleRXData_1
Cmd_GetMode ^	089C 	HandleRXData_1
Cmd_GetRevDir ^	08DE 	HandleRXData_1
Cmd_GetSpeed ^	08F8 	HandleRXData_1
Cmd_GetStatus ^	09C7 	Dispatcher_4
Cmd_GetStopCenter ^	08EF 	HandleRXData_1
Cmd_GetUseFastPWM ^	0910 	HandleRXData_1
Cmd_GetUseIdleCenter ^	0901 	HandleRXData_1
Cmd_RestoreParams ^	09B7 	Dispatcher_4
Cmd_RunBootloader ^	09D4 	Dispatcher_4
Cmd_SaveParams ^	09B3 	Dispatcher_4
Cmd_SendIDString ^	09E6 	Dispatcher_6
Cmd_SendIDString_L1 ^	09E7 	Cmd_SendIDString_L1
Cmd_SetAuxConfig ^	0919 	Dispatcher_3
Cmd_SetAuxNDigOut ^	0946 	Cmd_SetAuxNValue
Cmd_SetAuxNLED ^	0946 	Cmd_SetAuxNValue
Cmd_SetAuxNValue ^	0931 	Dispatcher_3
Cmd_SetCmdPos ^	089F 	Dispatcher_1
Cmd_SetDeadBand ^	0904 	Dispatcher_1
Cmd_SetEnaOvrCur ^	08E1 	Dispatcher_1
Cmd_SetEncoderOffset ^	0993 	Dispatcher_3
Cmd_SetFFwd ^	08B0 	Dispatcher_1
Cmd_SetFRev ^	08BA 	Dispatcher_1
Cmd_SetGripI ^	0913 	Dispatcher_3
Cmd_SetMasterAddr ^	09DA 	Dispatcher_6
Cmd_SetMaxI ^	08AA 	Dispatcher_1
Cmd_SetMax_uS ^	08CE 	Dispatcher_1
Cmd_SetMin_uS ^	08C4 	Dispatcher_1
Cmd_SetMode ^	0895 	Dispatcher_1
Cmd_SetRevDir ^	08D8 	Dispatcher_1
Cmd_SetSlaveAddr ^	09E0 	Dispatcher_6
Cmd_SetSpeed ^	08F4 	Dispatcher_1
Cmd_SetStopCenter ^	08EA 	Dispatcher_1
Cmd_SetUseFastPWM ^	090A 	Dispatcher_1
Cmd_SetUseIdleCenter ^	08FB 	Dispatcher_1
CompareBlock ^	1F2C 	BLP_WriteBuffer
CompareBlock_L1 ^	1F2E 	CB_Next
Copy7CToSig ^	0505 	DoModeZero, DM1_FF, DM1_FR, DoModeTwo_Go, DM3_UpdatePos, DoMode4_Go
		StartServo
Copy7CToSig_1 ^	050E 	Copy7CToSig, Copy7CToSig_1
Copy7CToSig_Done ^	0516 	Copy7CToSig
CopyToRam ^	0121 	Cmd_RestoreParams, InitializeIO
CopyToRam_L1 ^	0126 	CopyToRam_L1
Cur_AN0	00B3 	ML_1, CheckCurrent, CheckGripCurrent, ReadAN, ReadAN_TryAN4, ReadAN_AN4
		ReadAN_AN0, Cmd_GetI
Cur_AN1	00B5 	ReadAN_AN1, Cmd_GetAuxNValue_Ana
Cur_AN2	00B7 	ReadAN_AN2
Cur_AN3	00B9 	ReadAN_AN3
Cur_AN4	00BB 	DoModeZero, DoModeOne, ReadAN_AN4, Cmd_GetBattVolts
Cur_AN7	00BD 	ReadAN_TryAN4, Cmd_GetBattVolts
DM1_FF ^	02F8 	DoModeOne
DM1_FR ^	02FE 	DoModeOne
DM2_NotOverCurrent ^	0348 	DoModeTwo
DM3_CPV_End ^	039D 	DM3_NotOverCurrent
DM3_CalcCurPos ^	03A5 	DM3_CPV_End
DM3_CalcSCmd ^	0402 	DM3_NoDB, DM3_PosLimit
DM3_CalcSCmd_1 ^	040D 	DM3_CalcSCmd
DM3_CalcSCmd_2s ^	040A 	DM3_CalcSCmd
DM3_ErrIsPos ^	03E9 	DM3_SetServoPWM
DM3_GoRev ^	03BF 	DM3_CalcCurPos
DM3_IdleInactive ^	0422 	DM3_IdleServo
DM3_IdleServo ^	0416 	DM3_ServoHere, DM3_SetServoPWM, DM3_ErrIsPos
DM3_NoDB ^	03F0 	DM3_SetServoPWM, DM3_ErrIsPos
DM3_NotOverCurrent ^	0390 	DoModeThree
DM3_PosLimit ^	03FB 	DM3_NoDB
DM3_ServoHere ^	0389 	DoModeThree
DM3_ServoThere ^	03A0 	DM3_CalcCurPos, DM3_GoRev
DM3_SetServoPWM ^	03CB 	DM3_ServoThere, DM3_CalcCurPos
DM3_UpdatePos ^	041F 	DM3_CalcSCmd_1
DM4_NotOverCurrent ^	0433 	DoMode4
DataInBuffer	IH_Flags,1	BootLoaderStart, BL_Parse, BLPV_EndCmd, BufferIHData, BIHD_PutInBuff_L1
		EraseSourceBuffer
DataReceivedFlag	SerFlags,1	RX_TheByte, No_NewDataAN0
DataSentFlag	SerFlags,2	TX_TheByte, ML_Ser_Out
DeadBand	005D 	DM3_SetServoPWM, DM3_ErrIsPos, Cmd_SetDeadBand, Cmd_GetDeadBand
DebounceTime	000A 	HdlBtn_DB
DecTimer ^	0143 	DecTimer4, DecTimer3, DecTimer2
DecTimer1 ^	0142 	ProgStartVector
DecTimer2 ^	0140 	ProgStartVector
DecTimer3 ^	013E 	ProgStartVector
DecTimer4 ^	013C 	ProgStartVector
DelayWuS ^	0165 	DecTimer, ReadAN_1, ReadAN0_ColdStart
DelayWuS_Loop ^	0166 	DelayWuS_Loop
DestAddHiRXd	RX_ParseFlags,5	RS232_Parse
SerialServo.asm   X-Ref Table                                            Page: 57
/Users/davidflynn/Projects/SerialServo/Firmware/

DestAddLoRXd	RX_ParseFlags,4	RS232_Parse, RS232_Parse_SALo_end
DestBuffer	2140 	BootLoaderStart, FSR1_DestBuff
Dispatcher_1 ^	082B 	HandleRXData_1
Dispatcher_2 ^	0841 	Dispatcher_1
Dispatcher_3 ^	0853 	Dispatcher_2
Dispatcher_4 ^	0865 	Dispatcher_3
Dispatcher_5 ^	087D 	Dispatcher_4
Dispatcher_6 ^	0885 	Dispatcher_5
DoMode4 ^	0426 	ML_Ser_End
DoMode4_1 ^	046E 	DoMode4
DoMode4_Go ^	0465 	DoMode4_Minus_1, DoMode4_Hold
DoMode4_Hold ^	0452 	DM4_NotOverCurrent, DoMode4_MovPlus
DoMode4_Minus ^	044D 	DM4_NotOverCurrent
DoMode4_Minus_1 ^	044E 	DM4_NotOverCurrent, DoMode4_Hold
DoMode4_MovPlus ^	0456 	DM4_NotOverCurrent
DoMode4_Plus ^	0461 	DoMode4_MovPlus
DoMode4_Plus_1 ^	0462 	DoMode4_MovPlus
DoModeOne ^	02DA 	ML_Ser_End
DoModeThree ^	037E 	ML_Ser_End
DoModeTwo ^	033C 	ML_Ser_End
DoModeTwo_1 ^	037C 	DoModeTwo
DoModeTwo_Go ^	0375 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_Plus
DoModeTwo_Minus ^	0360 	DM2_NotOverCurrent
DoModeTwo_MovPlus ^	0365 	DM2_NotOverCurrent
DoModeTwo_NoSpeed ^	0371 	DM2_NotOverCurrent, DoModeTwo_MovPlus
DoModeTwo_Plus ^	036C 	DoModeTwo_MovPlus
DoModeZero ^	02CE 	ML_Ser_End
EEADR	0191 	EERead, EEWrite
EEADRH	0192 	LoadProgAddr
EEADRL	0191 	ReadEEData, WriteEEData, ReadProgBlock_1, LoadProgAddr, WriteProgBlock_L1
EEAddrTemp	002D 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DelayWuS_Loop
		EERead, EEWriteW, EEWrite
EECON1	0195 	EERead, EEWrite, EEWriteLoop, ReadEEData, WriteEEData, WriteEEData_L1
		ReadProgBlock, ReadProgBlock_L1, EraseProgBlock, WriteProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
EECON2	0196 	EEWrite, WriteEEData, EraseProgBlock, WriteProgBlock_L1, WriteProgBlock_Wr
EEDAT	0193 	EERead, EEWrite
EEDATH	0194 	ReadProgBlock_L1, WriteProgBlock_L1
EEDATL	0193 	ReadEEData, WriteEEData, ReadProgBlock_L1, WriteProgBlock_L1
EEDataTemp	002E 	SaveParams_L1, EEWrite, Cmd_RunBootloader
EEPGD	0007 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
EERead ^	016C 	CopyToRam_L1
EEWrite ^	0176 	SaveParams_L1
EEWriteLoop ^	0188 	EEWriteLoop
EEWriteW ^	0175 	Cmd_RunBootloader
EncoderAccum	0043 	Cmd_GetEncAbs, ReadEncoder_2, HA_SetIt, Home_Here
EncoderFlags	0048 	CopyToRam, SaveParams, ReadEncoder, ReadEncoder_L1, ReadEncoder_1
		ReadEncoder_2, SaveHomePos
EncoderHome	0049 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetIt
EncoderOffset	004B 	DM3_ServoHere, DM3_SetServoPWM, Cmd_SetEncoderOffset, Cmd_GetEncoderOffset
EncoderVal	0046 	DoModeOne, DM3_ServoHere, DM3_SetServoPWM, Cmd_GetEnc, ReadEncoder
		ReadEncoder_L1, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetItNeg, HA_SetIt
EraseBlock_L1 ^	1F4A 	EraseBlock_L1
EraseProgBlock ^	1F63 	BLP_WriteBuffer
EraseSourceBuffer ^	1F46 	BootLoaderStart, BLP_WriteBuffer_end
F	0001 	ProgStartVector, SystemBlink_end, LED1_Blinking, Aux0DigOut_end, LED2_Blinking
		Aux1DigOut_end, LED3_Blinking, IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, IRQ_Servo1_Dwell
		ClearRam, ClearRam_L2, CopyToRam_L1, SaveParams_L1, DecTimer, DelayWuS_Loop, StoreSerIn
		GetSerIn, StoreSerOut, GetSerOut, RS232_Parse, RS232_Parse_Byte, RS232_Parse_SALo
		RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_ClearTXData_L1
		RS232_Send, RS232_Send_L1, ML_1, DoModeZero, DoModeOne, CheckCurrent, CheckGripCurrent
		DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus, DM3_CPV_End
		DM3_CalcCurPos, DM3_GoRev, DM3_SetServoPWM, DM3_ErrIsPos, DM4_NotOverCurrent, DoMode4_Minus_1
		DoMode4_MovPlus, DoMode4_Plus_1, HandleButtons, Cmd_SendIDString_L1, ReadEncoder_L1
		ReadEncoder_1, ReadEncoder_2, Home_Absolute_2, SaveHomePos, HA_SetItNeg, BLP_TestNum
		BLP_TestNum_1, BLP_TestNum_2, BLP_SaveIH_Length, BLP_NextState, BLP_IHS_AddrMSB
		BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BufferIHData, BIHD_PutInBuff_E2
		BIHD_PutInBuff_L1, TestErased_L1, CB_Next, EraseBlock_L1, ReadProgBlock_L1, ReadProgBlock_1
		WriteProgBlock_L1
FERR	0002 	RX_TheByte_Err, GetChar_Err
FREE	0004 	EraseProgBlock
FSR0	0004 	ClearRam, ClearRam_2, ClearRam_L2, StoreSerIn, StoreSerOut, ClampIntMD3
		ClampInt, HandleRXData_1
FSR0H	0005 	ClearRam, CopyToRam, SaveParams, DecTimer, StoreSerIn, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, ReadAN, Cmd_SetAuxConfig
		Cmd_SetAuxNValue, Cmd_SetAuxNDigOut, ReadEncoder, BLP_WriteBuffer, FSR0_SerialBuffer
FSR0L	0004 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DecTimer, GetSerIn
		GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, ReadAN_TryAN4, ReadAN_AN4
		ReadAN_AN0, ReadAN_AN1, ReadAN_AN2, ReadAN_AN3, Cmd_SetAuxConfig, Cmd_SetAuxNValue
		Cmd_SetAuxNDigOut, ReadEncoder, BLP_WriteBuffer, FSR0_SerialBuffer
FSR0_SerialBuffer ^	1EDE 	BL_ParseNextLine, BLPV_HighAddr, BIHD_PutInBuff_E2
FSR1	0006 	HandleRXData_1
FSR1H	0007 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, Cmd_GetAuxConfig
		Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana, BIHD_PutInBuff_E2, FSR1_DestBuff, FSR1_SourceBuffer
FSR1L	0006 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, Cmd_GetAuxConfig
		Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana, BIHD_PutInBuff_E2, FSR1_DestBuff, FSR1_SourceBuffer
FSR1_DestBuff ^	1EE3 	BLP_WriteBuffer
FSR1_SourceBuffer ^	1EE8 	BLP_WriteBuffer, EraseSourceBuffer
FirstRAMParam	EncoderFlags	CopyToRam, SaveParams
FlushInBuff ^	01C7 	RS232_Parse_Error
GIE	0007 	EEWrite, EEWriteLoop, Copy7CToSig_1, InitializeIO, InitializeBLIO
GO	0001 	ReadAN0_ColdStart
GO_NOT_DONE	0001 	ReadAN
GetChar ^	1EED 	BLP_L2, GetChar, GetChar_Err
GetChar_Err ^	1EF8 	GetChar
GetSerIn ^	01B6 	RS232_Parse_Byte
SerialServo.asm   X-Ref Table                                            Page: 58
/Users/davidflynn/Projects/SerialServo/Firmware/

GetSerInBytes ^	01CD 	MainLoop
GetSerIn_End ^	01C5 	GetSerIn
GetSerOut ^	01EB 	ML_Ser_Out
GetSerOut_End ^	01FA 	GetSerOut
GripIMet	ssTempFlags,4	CheckGripCurrent, DoMode4_MovPlus, DoMode4_Go, DoMode4_1
GripIOver	ssTempFlags,5	CheckGripCurrent, DoMode4_Hold, DoMode4_Go, DoMode4_1
HA_SetIt ^	0AC9 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos
HA_SetItNeg ^	0AC7 	Home_Absolute_2
HandleButtons ^	0472 	No_NewDataAN0
HandleRXData ^	0804 	MainLoop
HandleRXData_1 ^	080A 	HandleRXData
HandleRXData_Rtn ^	0808 	Cmd_SetMode, Cmd_SetAuxConfig, Cmd_GetAuxConfig, Cmd_SetAuxNValue
		Cmd_GetAuxNValue
HdlBtn_1 ^	0481 	HandleButtons
HdlBtn_Btn1 ^	048A 	HdlBtn_1
HdlBtn_Btn2 ^	048B 	HdlBtn_1
HdlBtn_Btn3 ^	048C 	HdlBtn_1
HdlBtn_Btn4 ^	048D 	HdlBtn_1
HdlBtn_DB ^	047E 	HandleButtons, HdlBtn_Btn1, HdlBtn_Btn2, HdlBtn_Btn3, HdlBtn_Btn4
Home_Absolute_1 ^	0A7D 	ReadEncoder_2
Home_Absolute_2 ^	0A89 	ReadEncoder_2, Home_Absolute_1
Home_Absolute_3 ^	0AA8 	Home_Absolute_2
Home_Here ^	0AD4 	ReadEncoder_2
IDString ^	09EF 	Cmd_SendIDString_L1
IHS_Length	0001 	BLP_L2
IH_Ack	002A 	BootLoaderStart, BLPV_EndCmd, BLPV_Exit_Ack
IH_Addr_Hi	0025 	BootLoaderStart, BLPV_HighAddr, BufferIHData
IH_Addr_Lo	0023 	BootLoaderStart, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BufferIHData
		BIHD_PutInBuff
IH_ByteCount	0028 	BootLoaderStart, BL_ParseNextLine, BLP_IHS_Data, BIHD_PutInBuff_E2
IH_Bytes	0027 	BootLoaderStart, BLP_SaveIH_Length, BLP_IHS_DataType, BLP_IHS_Data
IH_ErrorBadCSum	002D 	BLP_IHS_CSum
IH_ErrorBadLen	002B 	BLP_IHS_Length
IH_ErrorBadType	003D 	BLPV_BadType
IH_Flags	002C 	BootLoaderStart, BL_Parse, BLP_L1, BLP_TestNum_1, BLPV_EndCmd, BufferIHData
		BIHD_PutInBuff_L1, EraseSourceBuffer
IH_State	002A 	BootLoaderStart, BL_ParseNextLine, BLP_L2, BLP_TestNum, BLP_TestNum_2
		BLP_NextState, BLP_IHS_DataType
IH_TempVal	002B 	BootLoaderStart, BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_Length, BLP_SaveIH_Length
		BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
IH_Type	0029 	BootLoaderStart, BLP_IHS_DataType, BLP_Validate
INDF0	0000 	ClearRam_L2, DecTimer, StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_DALo_End
		Cmd_GetRevDir, Cmd_GetEnaOvrCur, Cmd_GetUseIdleCenter, Cmd_GetUseFastPWM, Cmd_SetAuxNValue
		ReadEncoder, ReadEncoder_L1
INDF1	0001 	Cmd_SetMode, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_SetUseIdleCenter, Cmd_SetUseFastPWM
		Cmd_SetAuxConfig, Cmd_GetAuxConfig, Cmd_GetAuxNValue
INTCON	000B 	EEWrite, EEWriteLoop, Copy7CToSig_1, InitializeIO, InitializeBLIO
IRQ_Ser_End ^	0101 	IRQ_Servo1_End
IRQ_Servo1_1 ^	00CA 	Aux2DigOut_end
IRQ_Servo1_20mS ^	00E0 	IRQ_Servo1_OH
IRQ_Servo1_CalcDwell ^	00E5 	IRQ_Servo1_OH
IRQ_Servo1_Dwell ^	00F8 	Aux2DigOut_end, IRQ_Servo1_Idle
IRQ_Servo1_End ^	00FE 	Aux2DigOut_end
IRQ_Servo1_Idle ^	00EA 	IRQ_Servo1_1
IRQ_Servo1_OH ^	00D1 	IRQ_Servo1_Idle
IRQ_Servo1_OL ^	00F6 	IRQ_Servo1_1
IRQ_Servo1_X ^	00FC 	IRQ_Servo1_CalcDwell
InitializeBLIO ^	1F9E 	BootLoaderStart
InitializeIO ^	0AD9 	start
LATA	010C 	LED1_Blink_end, Aux0DigOut_1, LED2_Blink_end, Aux1DigOut_1, LED3_Blink_end
		Aux2DigOut_1
LATB	010D 	ReadEncoder
LED1_Bit	0001 	SystemBlink_end, LED1_NextBlink, LED1_Blink_end, Aux0DigOut_1, Aux0DigOut_2
LED1_BlinkCount	0027 	SystemBlink_end, LED1_Blinking, LED1_Start
LED1_Blink_end ^	0043 	SystemBlink_end, LED1_Blinking
LED1_Blinking ^	002F 	SystemBlink_end
LED1_Blinks	0024 	SystemBlink_end, LED1_Start, LED1_Blink_end, Cmd_SetAuxNDigOut
		InitializeIO
LED1_Count	002A 	SystemBlink_end, LED1_Blinking, LED1_NextBlink
LED1_Lat	LATA,LED1_Bit	LED1_Blink_end, Aux0DigOut_1
LED1_NextBlink ^	003F 	LED1_Blinking
LED1_Start ^	003D 	LED1_Blinking
LED1_Tris	TRISA,LED1_Bit	SystemBlink_end, LED1_NextBlink, Aux0DigOut_2
LED2_Bit	0002 	ProgStartVector, Aux0DigOut_end, LED2_NextBlink, LED2_Blink_end, Aux1DigOut_1
		Aux1DigOut_2
LED2_BlinkCount	0028 	Aux0DigOut_end, LED2_Blinking, LED2_Start
LED2_Blink_end ^	0079 	Aux0DigOut_end, LED2_Blinking
LED2_Blinking ^	0065 	Aux0DigOut_end
LED2_Blinks	0025 	Aux0DigOut_end, LED2_Start, LED2_Blink_end
LED2_Count	002B 	Aux0DigOut_end, LED2_Blinking, LED2_NextBlink
LED2_Lat	LATA,LED2_Bit	LED2_Blink_end, Aux1DigOut_1
LED2_NextBlink ^	0075 	LED2_Blinking
LED2_Start ^	0073 	LED2_Blinking
LED2_Tris	TRISA,LED2_Bit	ProgStartVector, Aux0DigOut_end, LED2_NextBlink, Aux1DigOut_2
LED3_Bit	0003 	ProgStartVector, Aux1DigOut_end, LED3_NextBlink, LED3_Blink_end, Aux2DigOut_1
		Aux2DigOut_2
LED3_BlinkCount	0029 	Aux1DigOut_end, LED3_Blinking, LED3_Start
LED3_Blink_end ^	00B0 	Aux1DigOut_end, LED3_Blinking
LED3_Blinking ^	009B 	Aux1DigOut_end
LED3_Blinks	0026 	Aux1DigOut_end, LED3_Start, LED3_Blink_end
LED3_Count	002C 	Aux1DigOut_end, LED3_Blinking, LED3_NextBlink
LED3_Lat	LATA,LED3_Bit	LED3_Blink_end, Aux2DigOut_1
LED3_NextBlink ^	00AB 	LED3_Blinking
LED3_Start ^	00A9 	LED3_Blinking
LED3_Tris	TRISA,LED3_Bit	ProgStartVector, Aux1DigOut_end, LED3_NextBlink, Aux2DigOut_2
LEDErrorTime	000A 	ML_1
LEDFastTime	0014 	LED1_NextBlink, LED2_NextBlink, LED3_NextBlink
LEDTIME	0064 	LED1_Blinking, LED2_Blinking, LED3_Blinking, ML_1, InitializeIO
SerialServo.asm   X-Ref Table                                            Page: 59
/Users/davidflynn/Projects/SerialServo/Firmware/

LWLO	0005 	WriteProgBlock, WriteProgBlock_Wr
LastRAMParam	SysFlags	CopyToRam_L1, SaveParams_L1
LoadProgAddr ^	1F72 	ReadProgBlock, EraseProgBlock, WriteProgBlock
MD3_FFwd	ssStatus,0	DM3_CalcCurPos, DM3_GoRev, DM3_IdleServo, DM3_IdleInactive
MD3_FRev	ssStatus,1	DM3_CalcCurPos, DM3_GoRev, DM3_IdleServo, DM3_IdleInactive
ML_1 ^	029F 	MainLoop
ML_Ser_End ^	02C5 	ML_Ser_Out
ML_Ser_Out ^	02BE 	No_NewDataAN0
MSN_Done	IH_Flags,0	BootLoaderStart, BLP_L1, BLP_TestNum_1
MagEnc_CLK	MagEnc_CSLAT,MagEnc_CLKBit	ReadEncoder
MagEnc_CLKBit	0004 	ReadEncoder_L1
MagEnc_CS	MagEnc_CSLAT,MagEnc_CSBit	ReadEncoder
MagEnc_CSBit	0000 	ReadEncoder, ReadEncoder_L1
MagEnc_CSLAT	010D 	ReadEncoder
MagEnc_Data	MagEnc_DataPort,MagEnc_DataBit	ReadEncoder, ReadEncoder_L1
MagEnc_DataBit	0006 	ReadEncoder_L1
MagEnc_DataPort	000C 	ReadEncoder, ReadEncoder_L1
MagEnc_HighZone	EncoderFlags,0	ReadEncoder, ReadEncoder_L1, ReadEncoder_2
MagEnc_Homed	EncoderFlags,4	ReadEncoder, ReadEncoder_2, SaveHomePos
MagEnc_Index	EncoderFlags,2	ReadEncoder, ReadEncoder_2
MagEnc_IndexLatch	EncoderFlags,3	ReadEncoder, ReadEncoder_L1, ReadEncoder_1, ReadEncoder_2
MagEnc_LowZone	EncoderFlags,1	ReadEncoder, ReadEncoder_1, ReadEncoder_2
MainLoop ^	0295 	ModeReturn
ModeReturn ^	02CD 	DoModeZero, DoModeOne, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_Go
		DoModeTwo_1, DM3_UpdatePos, DM3_IdleInactive, DM4_NotOverCurrent, DoMode4_Go, DoMode4_1
ModeZeroPot	Cur_AN4	DoModeZero, DoModeOne, Cmd_GetBattVolts
NOT_WPUEN	0007 	InitializeIO, InitializeBLIO
NewDataAN0	ANFlags,0	ML_1, ReadAN_AN0
NewDataAN4	ANFlags,1	ReadAN_AN4
NewDataAN7	ANFlags,2	ReadAN_TryAN4
No_NewDataAN0 ^	02B3 	ML_1
OERR	0001 	RX_TheByte_Err, GetChar_Err
OPTION_REG	0095 	InitializeIO, InitializeBLIO
OSCCON	0099 	InitializeIO, InitializeBLIO
OSCCON_Value	00F0 	InitializeIO, InitializeBLIO
OldAN0Value	00BF 	ML_1
OverCurrentFlag	ssTempFlags,3	CheckCurrent, DoModeTwo, DoModeThree, DoMode4
PCLATH	000A 	ProgStartVector
PEIE	0006 	InitializeIO
PIE1	0091 	InitializeIO
PIR1	0011 	ProgStartVector, Aux2DigOut_end, IRQ_Servo1_X, IRQ_Servo1_End, No_NewDataAN0
		GetChar, SendChar
POP_SerOut_End ^	01E9 	StoreSerOut
PORTA	000C 	SystemBlink_end, Aux0DigOut_end, Aux1DigOut_end, Cmd_GetAuxNValue_Dig
		Cmd_GetAuxNValue_Dig1, Cmd_GetAuxNValue_Dig2, ReadEncoder, InitializeIO, InitializeBLIO
PORTB	000D 	InitializeIO, InitializeBLIO
PR2	001B 	InitializeIO
PR2_Value	007D 	InitializeIO
PROG_ADDR_HI	0021 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PROG_ADDR_LO	0020 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PS0	0000 	InitializeIO, InitializeBLIO
PS1	0001 	InitializeIO, InitializeBLIO
PS2	0002 	InitializeIO, InitializeBLIO
PSA	0003 	InitializeIO, InitializeBLIO
Param76	0076 	ReadEncoder_L1, ReadEncoder_1, ReadEncoder_2
Param77	0077 	DelayWuS, DelayWuS_Loop, ReadEncoder_L1, ReadEncoder_1, ReadEncoder_2
		CompareBlock_L1, CB_NotBlank
Param78	0078 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_Byte, RS232_Parse_Sync2
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
		RS232_Parse_L1, RS232_ClearTXData, RS232_ClearTXData_L1, ML_Ser_Out, CheckCurrent
		CheckGripCurrent, DM3_CalcCurPos, ReadAN, ReadAN_TryAN2, ReadAN_TryAN3, ReadAN_TryAN4
		ReadAN_AN4, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2, ReadAN_AN0_3, ReadAN_1, HandleRXData_1
		Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetAuxNValue
		Cmd_SetAuxNDigOut, Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana, Cmd_GetAuxNValue_Dig
		Cmd_GetAuxNValue_Btn, ReadEncoder, ReadEncoder_L1, ReadEncoder_2, Home_Absolute_1
		Home_Absolute_2, Home_Absolute_3, BLP_L2, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2
		BLP_IHS_CSum, BufferIHData, CompareBlock_L1, CB_NotBlank
Param79	0079 	RS232_Send, RS232_Send_L1, DoModeOne, CheckCurrent, CheckGripCurrent
		DM3_SetServoPWM, DM3_NoDB, DM3_PosLimit, DM3_CalcSCmd, DM3_CalcSCmd_2s, DM3_CalcSCmd_1
		Cmd_SendIDString, Cmd_SendIDString_L1, ReadEncoder, ReadEncoder_2, Home_Absolute_1
		Home_Absolute_2, Home_Absolute_3, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, TestErased
		TestErased_L1, CompareBlock, CB_Next, EraseSourceBuffer, EraseBlock_L1, ReadProgBlock
		ReadProgBlock_L1, WriteProgBlock
Param7A	007A 	RS232_Send, RS232_Send_L1, DoModeOne, DM3_SetServoPWM, DM3_NoDB, DM3_PosLimit
		ReadEncoder, ReadEncoder_2
Param7C	007C 	DoModeZero, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_MovPlus, DoModeTwo_Go
		DM3_NotOverCurrent, DM3_SetServoPWM, DM3_ErrIsPos, DM3_CalcSCmd_1, DM3_IdleServo
		DM4_NotOverCurrent, DoMode4_MovPlus, DoMode4_Go, Copy7CToSig, Copy7CToSig_1, SetMiddlePosition
		ClampInt_E2, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh
Param7D	007D 	DoModeZero, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_MovPlus, DoModeTwo_Go
		DM3_NotOverCurrent, DM3_SetServoPWM, DM3_ErrIsPos, DM3_CalcSCmd_1, DM3_IdleServo
		DM4_NotOverCurrent, DoMode4_MovPlus, DoMode4_Go, Copy7CToSig, Copy7CToSig_1, SetMiddlePosition
		ClampInt_E2, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh
Param7F	007F 	ClearRam, ClearRam_2, ClearRam_L2
PortADDRBits	00FF 	InitializeIO, InitializeBLIO
PortAValue	0000 	InitializeIO, InitializeBLIO
PortBDDRBits	00E6 	InitializeIO, InitializeBLIO
PortBValue	0011 	InitializeIO, InitializeBLIO
ProgStartVector ^	0002 	BootLoader_End
ProgWordCount	0022 	BootLoaderStart, BIHD_PutInBuff, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
PulseSent	ssTempFlags,0	Aux2DigOut_end, DM2_NotOverCurrent, DM3_CalcCurPos, DM4_NotOverCurrent
RCIE	0005 	InitializeIO
RCIF	0005 	IRQ_Servo1_End, GetChar
RCREG	0199 	RX_TheByte, RX_TheByte_Err, GetChar, GetChar_Err
RCSTA	019D 	RX_TheByte, RX_TheByte_Err, InitializeIO, GetChar, GetChar_Err, InitializeBLIO
RCSTA_Value	0090 	InitializeIO, InitializeBLIO
RD	0000 	EERead, ReadEEData, ReadProgBlock_L1
RP_DataBytes	0004 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_ClearTXData
		RS232_Send
SerialServo.asm   X-Ref Table                                            Page: 60
/Users/davidflynn/Projects/SerialServo/Firmware/

RP_LongAddr	0000 	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Send
RS232_ClearTXData ^	026C 	RS232_Send_L1
RS232_ClearTXData_L1 ^	0274 	RS232_ClearTXData_L1
RS232_MasterAddr	0059 	RS232_Parse_SALo, RS232_Send, Cmd_SetMasterAddr
RS232_Parse ^	01FC 	MainLoop
RS232_Parse_Byte ^	0207 	RS232_Parse
RS232_Parse_DALo_End ^	023E 	RS232_Parse_SALo_end
RS232_Parse_Data_end ^	024F 	RS232_Parse_DALo_End
RS232_Parse_Error ^	026A 	RS232_Parse_Sync2, RS232_Parse_Data_end
RS232_Parse_L1 ^	025D 	RS232_Parse_L1
RS232_Parse_Rtn ^	022E 	RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo_end
		RS232_Parse_DALo_End
RS232_Parse_SALo ^	021E 	RS232_Parse_Sync2
RS232_Parse_SALo_end ^	0230 	RS232_Parse_SALo
RS232_Parse_Sync2 ^	0216 	RS232_Parse_Byte
RS232_Send ^	0279 	RS232_Send_S0
RS232_Send_L1 ^	0288 	RS232_Send_L1
RS232_Send_S0 ^	0800 	Cmd_GetMode, Cmd_GetCmdPos, Cmd_GetMaxI, Cmd_GetFFwd, Cmd_GetFRev
		Cmd_GetMin_uS, Cmd_GetMax_uS, Cmd_GetRevDir, Cmd_GetEnaOvrCur, Cmd_GetStopCenter
		Cmd_GetSpeed, Cmd_GetUseIdleCenter, Cmd_GetDeadBand, Cmd_GetUseFastPWM, Cmd_GetGripI
		Cmd_GetAuxConfig, Cmd_GetAuxNValue_Ana, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1
		Cmd_GetAuxNValue_Dig2, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1, Cmd_GetAuxNValue_Btn2
		Cmd_GetEncoderOffset, Cmd_GetI, Cmd_GetEnc, Cmd_GetEncAbs, Cmd_GetBattVolts, Cmd_GetStatus
		Cmd_SetMasterAddr, Cmd_SetSlaveAddr
RS232_SlaveAddr	005A 	RS232_Parse_SALo_end, RS232_Send, Cmd_SetSlaveAddr
RXByte	0038 	RX_TheByte, RX_TheByte_Err, No_NewDataAN0
RXDataIsNew	RX_Flags,1	RS232_Parse, RS232_Parse_L1, MainLoop, HandleRXData
RXDataValidFlag	RX_Flags,0	RS232_Parse, RS232_Parse_L1, HandleRXData
RXDstIsMe	RX_Flags,3	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_L1
RXSrcIsMaster	RX_Flags,2	RS232_Parse, RS232_Parse_SALo, RS232_Parse_L1
RXTimeout	0005 	RS232_Parse_Byte
RX_CSUM	00A3 	RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_Data	00AA 	RS232_Parse_Data_end, HandleRXData_1
RX_DataCount	00A2 	RS232_Parse_SALo, RS232_Parse_DALo_End
RX_DstAdd	00A5 	RS232_Parse_SALo_end
RX_Flags	00A1 	RS232_Parse, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_L1
		MainLoop, HandleRXData
RX_ParseFlags	00A0 	RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo
		RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_Parse_Error
RX_SrcAdd	00A4 	RS232_Parse_SALo
RX_TempData	00A6 	RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_TheByte ^	0196 	IRQ_Servo1_End
RX_TheByte_Err ^	01A0 	RX_TheByte
ReadAN ^	048E 	ML_1
ReadAN0_ColdStart ^	04FA 	start, ReadAN
ReadAN_1 ^	04ED 	ReadAN_TryAN4, ReadAN_AN4, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2
		ReadAN_AN0_3
ReadAN_AN0 ^	04C8 	ReadAN
ReadAN_AN0_1 ^	04D3 	ReadAN_AN1
ReadAN_AN0_2 ^	04DA 	ReadAN_AN2
ReadAN_AN0_3 ^	04E1 	ReadAN_AN3
ReadAN_AN1 ^	04E4 	ReadAN
ReadAN_AN2 ^	04E7 	ReadAN_TryAN2
ReadAN_AN3 ^	04EA 	ReadAN_TryAN3
ReadAN_AN4 ^	04C1 	ReadAN_TryAN4
ReadAN_Rtn ^	0503 	ReadAN
ReadAN_TryAN2 ^	04A4 	ReadAN
ReadAN_TryAN3 ^	04AD 	ReadAN_TryAN2
ReadAN_TryAN4 ^	04B6 	ReadAN_TryAN3
ReadEEData ^	1F04 	BootLoaderStart
ReadEncoder ^	0A0C 	No_NewDataAN0
ReadEncoder_1 ^	0A39 	ReadEncoder_L1
ReadEncoder_2 ^	0A47 	ReadEncoder_L1, ReadEncoder_1
ReadEncoder_L1 ^	0A1A 	ReadEncoder_L1
ReadProgBlock ^	1F51 	BLP_WriteBuffer
ReadProgBlock_1 ^	1F61 	ReadProgBlock_L1
ReadProgBlock_L1 ^	1F56 	ReadProgBlock_1
SPBRGH	019C 	InitializeIO, InitializeBLIO
SPBRGL	019B 	InitializeIO, InitializeBLIO
STATUS	0003 	ProgStartVector, SystemBlink_end, LED1_Blinking, LED1_Blink_end, Aux0DigOut_end
		LED2_Blinking, LED2_Blink_end, Aux1DigOut_end, LED3_Blinking, LED3_Blink_end, CopyToRam_L1
		SaveParams_L1, DecTimer, RX_TheByte, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse
		RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End
		RS232_Parse_Data_end, MainLoop, DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_CPV_End
		DM3_CalcCurPos, DM3_GoRev, DM3_SetServoPWM, DM3_ErrIsPos, DM3_NoDB, DM3_PosLimit
		DM3_CalcSCmd, DM4_NotOverCurrent, DoMode4_MovPlus, HandleButtons, ReadAN, ReadAN_TryAN2
		ReadAN_TryAN3, ReadAN_TryAN4, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2, Copy7CToSig
		ClampInt_E2, ClampInt_1, HandleRXData_1, Dispatcher_1, Dispatcher_2, Dispatcher_3
		Dispatcher_4, Dispatcher_5, Cmd_SetMode, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_SetUseIdleCenter
		Cmd_SetUseFastPWM, Cmd_SetAuxConfig, Cmd_GetAuxConfig, Cmd_SetAuxNValue, Cmd_GetAuxNValue
		Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1
		Cmd_SendIDString_L1, ReadEncoder_L1, ReadEncoder_1, ReadEncoder_2, BootLoaderStart
		BLP_L2, BLP_TestNum, BLP_IHS_Length, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
		BLP_Validate, BufferIHData, BIHD_PutInBuff_L1, GetChar, TestErased_L1, CompareBlock_L1
		CB_NotBlank, WriteProgBlock_L1
SW1_Flag	SysFlags,0	SystemBlink_end, HandleButtons, HdlBtn_1, Cmd_GetAuxNValue_Btn
SW1_In	PORTA,1	SystemBlink_end, Cmd_GetAuxNValue_Dig
SW2_Flag	SysFlags,1	Aux0DigOut_end, HandleButtons, HdlBtn_1, Cmd_GetAuxNValue_Btn1
SW2_In	PORTA,2	Aux0DigOut_end, Cmd_GetAuxNValue_Dig1
SW3_Flag	SysFlags,2	Aux1DigOut_end, HandleButtons, HdlBtn_1, Cmd_GetAuxNValue_Btn2
SW3_In	PORTA,3	Aux1DigOut_end, Cmd_GetAuxNValue_Dig2
SW4_Flag	SysFlags,3	ProgStartVector, HandleButtons, HdlBtn_1
SaveHomePos ^	0ABB 	ReadEncoder_2
SaveParams ^	012E 	Cmd_SaveParams, Cmd_SetMasterAddr, Cmd_SetSlaveAddr, SaveHomePos
SaveParams_L1 ^	0133 	SaveParams_L1
SendChar ^	1EFE 	BootLoaderStart, BLP_IHS_Length, BLP_IHS_CSum, BLPV_EndCmd, BLPV_Exit
		SendChar
SerFlags	0039 	TX_TheByte, RX_TheByte, No_NewDataAN0, ML_Ser_Out
Ser_Buff_Bank	2	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes, StoreSerOut, GetSerOut
SerialServo.asm   X-Ref Table                                            Page: 61
/Users/davidflynn/Projects/SerialServo/Firmware/

Ser_In_Buff	0126 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut
Ser_In_Bytes	0120 	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes
Ser_In_InPtr	0122 	StoreSerIn, FlushInBuff
Ser_In_OutPtr	0123 	GetSerIn, FlushInBuff
Ser_Out_Buff	0146 	StoreSerOut, GetSerOut
Ser_Out_Bytes	0121 	GetSerInBytes, StoreSerOut, GetSerOut
Ser_Out_InPtr	0124 	StoreSerOut
Ser_Out_OutPtr	0125 	GetSerOut
SerialBuffer	2180 	BootLoaderStart, FSR0_SerialBuffer
ServoCurrent	Cur_AN0	CheckCurrent, CheckGripCurrent
ServoFastForward	004F 	DM1_FF, Cmd_SetFFwd, Cmd_GetFFwd
ServoFastReverse	004D 	DM1_FR, ClampIntMD3, Cmd_SetFRev, Cmd_GetFRev
ServoIdle	ssTempFlags,2	IRQ_Servo1_1, DoModeOne, DoModeTwo_1, DM3_IdleServo, DM3_IdleInactive
		DoMode4_1, Copy7CToSig_Done, SetMiddlePosition
ServoMax_uS	0055 	Cmd_SetMax_uS, Cmd_GetMax_uS
ServoMin_uS	0053 	ClampInt, Cmd_SetMin_uS, Cmd_GetMin_uS
ServoOff	ssTempFlags,1	Aux2DigOut_end, StartServo, SetMiddlePosition, InitializeIO
ServoSpeed	0057 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus
		DM3_CPV_End, DM3_CalcCurPos, DM3_GoRev, DM4_NotOverCurrent, DoMode4_Minus, DoMode4_MovPlus
		DoMode4_Plus, Cmd_SetSpeed, Cmd_GetSpeed
ServoStopCenter	0051 	DM3_CalcSCmd_1, DM3_IdleServo, Cmd_SetStopCenter, Cmd_GetStopCenter
SetMiddlePosition ^	0530 	StartServo
SigOutTime	02A0 	IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, Copy7CToSig, Copy7CToSig_1
SigOutTimeH	02A1 	Copy7CToSig, Copy7CToSig_1
SourceAddHiRXd	RX_ParseFlags,3	RS232_Parse
SourceAddLoRXd	RX_ParseFlags,2	RS232_Parse, RS232_Parse_SALo
SourceBuffer	2100 	BootLoaderStart, BIHD_PutInBuff_E2, BLP_WriteBuffer, FSR1_SourceBuffer
StartServo ^	0519 	start
StoreSerIn ^	01A8 	No_NewDataAN0
StoreSerOut ^	01D5 	RS232_Send, RS232_Send_L1, StoreSerOut_S0
StoreSerOut_S0 ^	0A08 	Cmd_SendIDString_L1
SyncByte1RXd	RX_ParseFlags,0	RS232_Parse, RS232_Parse_Byte
SyncByte2RXd	RX_ParseFlags,1	RS232_Parse, RS232_Parse_Sync2
SysFlags	0062 	ProgStartVector, SystemBlink_end, Aux0DigOut_end, Aux1DigOut_end, CopyToRam_L1
		SaveParams_L1, HandleButtons, HdlBtn_1, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1
		Cmd_GetAuxNValue_Btn2
SysLEDCount	0023 	ProgStartVector, SystemBlink_Std, InitializeIO
SysLED_Bit	0007 	ProgStartVector, SystemBlink_Std
SysLED_BlinkCount	0022 	SystemBlink_Std
SysLED_Blinks	0021 	ProgStartVector
SysLED_Time	0020 	SystemBlink_Std, ML_1, InitializeIO
SysLED_Tris	TRISA,SysLED_Bit	ProgStartVector, SystemBlink_Std
SysMode	0058 	ML_Ser_End, Cmd_SetMode, Cmd_GetMode, InitializeIO
SystemBlink_Std ^	0018 	ProgStartVector
SystemBlink_end ^	001D 	ProgStartVector
SystemTick_end ^	00C0 	ProgStartVector
T1CON	0018 	InitializeIO
T1CON_Val	0021 	InitializeIO
T1GCON	0019 	InitializeIO
T2CON	001C 	InitializeIO
T2CON_Value	004F 	InitializeIO
TMR0CS	0005 	InitializeIO, InitializeBLIO
TMR1GE	0007 	InitializeIO
TMR1H	0017 	StartServo
TMR1L	0016 	StartServo
TMR2IE	0001 	InitializeIO
TMR2IF	0001 	ProgStartVector
TRISA	008C 	ProgStartVector, SystemBlink_Std, SystemBlink_end, LED1_NextBlink, Aux0DigOut_2
		Aux0DigOut_end, LED2_NextBlink, Aux1DigOut_2, Aux1DigOut_end, LED3_NextBlink, Aux2DigOut_2
		InitializeIO, InitializeBLIO
TRISB	008D 	InitializeIO, InitializeBLIO
TXByte	0037 	TX_TheByte, ML_Ser_Out
TXIF	0004 	No_NewDataAN0, SendChar
TXREG	019A 	TX_TheByte, SendChar
TXSTA	019E 	InitializeIO, InitializeBLIO
TXSTA_Value	0024 	InitializeIO, InitializeBLIO
TX_ACK ^	0A07 	Cmd_SetMode, Cmd_SetCmdPos, Cmd_SetMaxI, Cmd_SetFFwd, Cmd_SetFRev
		Cmd_SetMin_uS, Cmd_SetMax_uS, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_SetStopCenter
		Cmd_SetSpeed, Cmd_SetUseIdleCenter, Cmd_SetDeadBand, Cmd_SetUseFastPWM, Cmd_SetGripI
		Cmd_SetAuxConfig, Cmd_SetAuxNValue, Cmd_SetAuxNDigOut, Cmd_SetEncoderOffset, Cmd_SaveParams
		Cmd_RestoreParams
TX_Data	00AE 	RS232_ClearTXData, RS232_Send, HandleRXData_1
TX_TheByte ^	018E 	No_NewDataAN0
TestErased ^	1F1F 	BLP_WriteBuffer
TestErased_L1 ^	1F21 	TestErased_L1
Timer1Hi	0030 	DecTimer1, DecTimer
Timer1Lo	002F 	DecTimer, RS232_Parse, RS232_Parse_Byte
Timer2Hi	0032 	DecTimer2, DecTimer
Timer2Lo	0031 	DecTimer
Timer3Hi	0034 	DecTimer3, DecTimer
Timer3Lo	0033 	DecTimer
Timer4Hi	0036 	DecTimer4, DecTimer
Timer4Lo	0035 	DecTimer, HandleButtons, HdlBtn_DB, InitializeIO
UseAltSerialPort	0000 	InitializeBLIO
UseEEParams	0001 	ClearRam, CopyToRam
UsePID	0000 	InitializeBLIO, ClampInt_tooHigh, RS232_Send_S0, Dispatcher_2, Dispatcher_3
		Cmd_GetI
UseRS232Chksum	0001 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_Send_L1
UseRS232SendSyncBytes	0000 	RS232_Parse, RS232_Send
UseRS232SyncBytes	0001 	RS232_Parse, RS232_Parse_Byte
W	0000 	SystemBlink_Std, SystemBlink_end, LED1_Blinking, LED1_Start, LED1_Blink_end
		Aux0DigOut_end, LED2_Blinking, LED2_Start, LED2_Blink_end, Aux1DigOut_end, LED3_Blinking
		LED3_Start, LED3_Blink_end, IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, IRQ_Servo1_Dwell
		CopyToRam_L1, SaveParams_L1, DecTimer, EERead, EEWrite, TX_TheByte, RX_TheByte
		RX_TheByte_Err, StoreSerIn, GetSerIn, GetSerInBytes, StoreSerOut, GetSerOut, RS232_Parse_Byte
		RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End
		RS232_Parse_Data_end, RS232_Send, RS232_Send_L1, ML_1, No_NewDataAN0, ML_Ser_End
		DoModeZero, DoModeOne, DM1_FF, DM1_FR, CheckCurrent, CheckGripCurrent, DM2_NotOverCurrent
		DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus, DoModeTwo_NoSpeed, DoModeTwo_Go
SerialServo.asm   X-Ref Table                                            Page: 62
/Users/davidflynn/Projects/SerialServo/Firmware/

		DM3_ServoHere, DM3_NotOverCurrent, DM3_ServoThere, DM3_CalcCurPos, DM3_GoRev, DM3_SetServoPWM
		DM3_ErrIsPos, DM3_NoDB, DM3_PosLimit, DM3_CalcSCmd, DM3_CalcSCmd_2s, DM3_CalcSCmd_1
		DM3_IdleServo, DM4_NotOverCurrent, DoMode4_Minus, DoMode4_MovPlus, DoMode4_Plus
		DoMode4_Go, ReadAN, ReadAN_TryAN2, ReadAN_TryAN3, ReadAN_TryAN4, ReadAN_AN0, ReadAN_AN0_1
		ReadAN_AN0_2, ReadAN_1, Copy7CToSig, Copy7CToSig_1, ClampInt_E2, ClampInt_1, HandleRXData_1
		Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetMode
		Cmd_GetMode, Cmd_GetCmdPos, Cmd_GetMaxI, Cmd_GetFFwd, Cmd_GetFRev, Cmd_GetMin_uS
		Cmd_GetMax_uS, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_GetStopCenter, Cmd_GetSpeed
		Cmd_SetUseIdleCenter, Cmd_GetDeadBand, Cmd_SetUseFastPWM, Cmd_GetGripI, Cmd_SetAuxConfig
		Cmd_GetAuxConfig, Cmd_SetAuxNValue, Cmd_SetAuxNDigOut, Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana
		Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Btn, Cmd_GetEncoderOffset, Cmd_GetI, Cmd_GetEnc
		Cmd_GetEncAbs, Cmd_GetBattVolts, Cmd_GetStatus, Cmd_SendIDString_L1, ReadEncoder
		ReadEncoder_L1, ReadEncoder_1, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2
		Home_Absolute_3, SaveHomePos, HA_SetIt, InitializeIO, BLP_L2, BLP_TestNum, BLP_TestNum_1
		BLP_TestNum_2, BLP_IHS_Length, BLP_SaveIH_Length, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB
		BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate, BufferIHData, BIHD_PutInBuff
		BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, GetChar, GetChar_Err, ReadEEData, CompareBlock_L1
		CB_NotBlank, ReadProgBlock_L1, LoadProgAddr, WriteProgBlock_L1
WDTCON	0097 	InitializeIO, InitializeBLIO
WPUA	020C 	InitializeIO, InitializeBLIO
WPUA5	0005 	InitializeIO, InitializeBLIO
WR	0001 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
WREG	0009 	ReadAN_1, ReadAN0_ColdStart, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2
		Home_Absolute_3, BLP_WriteBuffer
WREN	0002 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock
		WriteProgBlock_Wr
WriteEEData ^	1F0D 	BootLoaderStart
WriteEEData_L1 ^	1F1A 	WriteEEData_L1
WriteProgBlock ^	1F7A 	BLP_WriteBuffer
WriteProgBlock_L1 ^	1F81 	WriteProgBlock_L1
WriteProgBlock_Wr ^	1F93 	WriteProgBlock_L1
Z	0002 	ProgStartVector, SystemBlink_end, LED1_Blinking, LED1_Blink_end, Aux0DigOut_end
		LED2_Blinking, LED2_Blink_end, Aux1DigOut_end, LED3_Blinking, LED3_Blink_end, CopyToRam_L1
		SaveParams_L1, DecTimer, RX_TheByte, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse
		RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End
		RS232_Parse_Data_end, MainLoop, DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_CPV_End
		DM3_CalcCurPos, DM3_SetServoPWM, DM3_ErrIsPos, DM3_NoDB, DM3_PosLimit, DM3_CalcSCmd
		DM4_NotOverCurrent, DoMode4_MovPlus, HandleButtons, ReadAN, ReadAN_TryAN2, ReadAN_TryAN3
		ReadAN_TryAN4, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2, Copy7CToSig, HandleRXData_1
		Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetRevDir
		Cmd_SetEnaOvrCur, Cmd_SetUseIdleCenter, Cmd_SetUseFastPWM, Cmd_GetAuxNValue_Dig
		Cmd_GetAuxNValue_Dig1, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1, Cmd_SendIDString_L1
		ReadEncoder_L1, ReadEncoder_1, ReadEncoder_2, BootLoaderStart, BLP_L2, BLP_TestNum
		BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate, BufferIHData, BIHD_PutInBuff_L1
		GetChar, TestErased_L1, CompareBlock_L1, CB_NotBlank, WriteProgBlock_L1
_C	STATUS,C	DM2_NotOverCurrent, DM4_NotOverCurrent, ReadEncoder_L1
_Z	STATUS,Z	WriteProgBlock_L1
kAuxIOAnalogIn	0004 	ReadAN, ReadAN_TryAN2, ReadAN_TryAN3, ReadAN_AN0, ReadAN_AN0_1
		ReadAN_AN0_2
kAuxIODigitalOut	0003 	LED1_Blink_end, LED2_Blink_end, LED3_Blink_end
kAuxIOLEDBtn	0001 	SystemBlink_end, Aux0DigOut_end, Aux1DigOut_end
kDeadBand	0064 	InitializeBLIO
kGripI	0028 	InitializeBLIO
kGripperHC	0004 	CheckGripCurrent
kMaxMode	0004 	Cmd_SetMode
kMaxPulseWidth	0F9C 	InitializeBLIO
kMaxT	076C 	ReadEncoder_2, Home_Absolute_2, Home_Absolute_3
kMidPulseWidth	0BB8 	SetMiddlePosition
kMinPulseWidth	0064 	InitializeBLIO
kRS232SyncByteValue	00DD 	RS232_Parse_Byte, RS232_Parse_Sync2
kRS232_MasterAddr	0001 	InitializeBLIO
kRS232_SlaveAddr	0002 	InitializeBLIO
kServoCenterStop	0B81 	InitializeBLIO
kServoDwellTime	9C40 	IRQ_Servo1_20mS, IRQ_Servo1_Idle, StartServo, SetMiddlePosition
kServoFastDwellTime	4E20 	IRQ_Servo1_OH
kServoFastForward	0BE5 	InitializeBLIO
kServoFastReverse	0B1D 	InitializeBLIO
kServoSpeed	000A 	InitializeBLIO
kSysFlags	0000 	InitializeBLIO
kSysMode	0003 	InitializeBLIO
kUpper2Bits	000C 	ReadEncoder_L1, ReadEncoder_1, ReadEncoder_2
kssFlags	0019 	InitializeBLIO
kssMaxI	0032 	InitializeBLIO
nDataBits	000C 	ReadEncoder
nvDeadBand	0015 	InitializeBLIO
nvEncoderFlags	0000 	InitializeBLIO, CopyToRam, SaveParams
nvEncoderHome	0001 	InitializeBLIO
nvEncoderOffset	0003 	InitializeBLIO
nvFirstParamByte	nvEncoderFlags	InitializeBLIO, CopyToRam, SaveParams
nvLastParamByte	nvSysFlags	InitializeBLIO
nvRS232_MasterAddr	0011 	InitializeBLIO
nvRS232_SlaveAddr	0012 	InitializeBLIO
nvServoFastForward	0007 	InitializeBLIO
nvServoFastReverse	0005 	InitializeBLIO
nvServoMax_uS	000D 	InitializeBLIO
nvServoMin_uS	000B 	InitializeBLIO
nvServoSpeed	000F 	InitializeBLIO
nvServoStopCenter	0009 	InitializeBLIO
nvSysFlags	001A 	InitializeBLIO
nvSysMode	0010 	InitializeBLIO
nvssAux0Config	0017 	InitializeBLIO
nvssAux1Config	0018 	InitializeBLIO
nvssAux2Config	0019 	InitializeBLIO
nvssFlags	0013 	InitializeBLIO
nvssGripI	0016 	InitializeBLIO
nvssMaxI	0014 	InitializeBLIO
oldCode	0000 	DecTimer
ssAux0Config	005F 	SystemBlink_end, LED1_Blink_end, ReadAN, ReadAN_AN0, Cmd_SetAuxConfig
SerialServo.asm   X-Ref Table                                            Page: 63
/Users/davidflynn/Projects/SerialServo/Firmware/

		Cmd_GetAuxConfig, Cmd_SetAuxNValue, Cmd_GetAuxNValue
ssAux1Config	0060 	Aux0DigOut_end, LED2_Blink_end, ReadAN_TryAN2, ReadAN_AN0_1
ssAux2Config	0061 	Aux1DigOut_end, LED3_Blink_end, ReadAN_TryAN3, ReadAN_AN0_2
ssCmdPos	003A 	DoModeTwo, DM2_NotOverCurrent, DoModeTwo_NoSpeed, DoModeThree, DM3_NotOverCurrent
		DM3_ServoThere, DM3_CalcCurPos, DM3_GoRev, DoMode4, DM4_NotOverCurrent, Cmd_SetCmdPos
		Cmd_GetCmdPos, InitializeIO
ssCmdPosVerified	ssStatus+1,2	DM3_NotOverCurrent, Cmd_GetCmdPos
ssCurPos	003C 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_Plus, DoModeTwo_NoSpeed
		DoModeTwo_Go, DM3_ServoHere, DM3_ServoThere, DM3_CalcCurPos, DM3_GoRev, DM3_SetServoPWM
		DM4_NotOverCurrent, DoMode4_Minus_1, DoMode4_Plus_1, DoMode4_Go
ssEnableFastPWM	ssFlags,4	IRQ_Servo1_OH, Cmd_SetUseFastPWM, Cmd_GetUseFastPWM
ssEnableOverCur	ssFlags,0	CheckCurrent, Cmd_SetEnaOvrCur, Cmd_GetEnaOvrCur
ssFlags	005B 	IRQ_Servo1_OH, CheckCurrent, DM3_CalcSCmd, DM3_IdleServo, Cmd_SetRevDir
		Cmd_GetRevDir, Cmd_SetEnaOvrCur, Cmd_GetEnaOvrCur, Cmd_SetUseIdleCenter, Cmd_GetUseIdleCenter
		Cmd_SetUseFastPWM, Cmd_GetUseFastPWM
ssGripI	005E 	CheckGripCurrent, Cmd_SetGripI, Cmd_GetGripI
ssGripMCur	ssStatus,5	CheckGripCurrent, Cmd_GetStatus
ssGripOCur	ssStatus,4	CheckGripCurrent, Cmd_GetStatus
ssMaxI	005C 	CheckCurrent, Cmd_SetMaxI, Cmd_GetMaxI
ssMode3IdleCenter	ssFlags,3	DM3_IdleServo, Cmd_SetUseIdleCenter, Cmd_GetUseIdleCenter
ssRX_Timeout	ssStatus,3	RS232_Parse, Cmd_GetStatus
ssReverseDir	ssFlags,1	DM3_CalcSCmd, Cmd_SetRevDir, Cmd_GetRevDir
ssStatus	003F 	RS232_Parse, ML_1, CheckGripCurrent, DoModeTwo, DM2_NotOverCurrent
		DoModeThree, DM3_NotOverCurrent, DM3_CalcCurPos, DM3_GoRev, DM3_IdleServo, DM3_IdleInactive
		DoMode4, DM4_NotOverCurrent, Cmd_GetCmdPos, Cmd_GetStatus
ssTempFlags	003E 	Aux2DigOut_end, IRQ_Servo1_1, DoModeOne, CheckCurrent, CheckGripCurrent
		DoModeTwo, DM2_NotOverCurrent, DoModeTwo_1, DoModeThree, DM3_CalcCurPos, DM3_IdleServo
		DM3_IdleInactive, DoMode4, DM4_NotOverCurrent, DoMode4_Hold, DoMode4_MovPlus, DoMode4_Go
		DoMode4_1, Copy7CToSig_Done, StartServo, SetMiddlePosition, InitializeIO
ssio_OverCurSD	ssStatus,2	ML_1, DoModeTwo, DM2_NotOverCurrent, DoModeThree, DM3_NotOverCurrent
		DoMode4, DM4_NotOverCurrent
start ^	0290 	ProgStartVector
useRS232	0001 	InitializeIO
 

X-Ref Table (The UnCalled)
Bank0_Rtn !	0503 	
BootLoader !	1E00 	
Cmd_GetCalPot !	09C1 	
Cmd_GetCmdPos_end !	08AA 	
Delay100uS !	0162 	
Delay10uS !	0160 	
Delay40uS !	0164 	
EEReadW !	016B 	
EraseBlock !	1F48 	
GetSerOutBytes !	01D1 	
HA_SetItPos !	0AC4 	
Home_Absolute !	0A6A 	
IRQ_Ser !	00FE 	
IRQ_Servo1 !	00C0 	
POP_SerOut !	01E3 	
RS232_Parse_DALo !	0230 	
RS232_Parse_Data !	023E 	
ReadAN_3 !	0502 	
StopServo !	0535 	
SystemBlink_DoIt !	001A 	
TestT1_Zero !	015C 	
TestT2_Zero !	0158 	
TestT3_Zero !	0154 	
TestT4_Zero !	0150 	
WriteProgBlock_end !	1F9C 	
 

Memory Usage Map ('X' = Used, '-' = Unused)
 
0000  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXX------------- ----------------
0800  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0AC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
SerialServo.asm   Memory Usage Map                                       Page: 64
/Users/davidflynn/Projects/SerialServo/Firmware/

0B00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXX------ ----------------
1E00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1EC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1FC0  : XXXXXXXX-------- ---------------- ---------------- ----------------
 
Program Memory Words Used:2645
Program Memory Words Free:5547
 
UserID
8000  :XXXX
 
Config
8007  :XX
 
EEPROM
F000  : XXXXXXXXXXXXXXXX XXXXXXXXXXX----- ---------------- ----------------
F0C0  : ---------------- ---------------- ---------------- ---------------X
 
Data EEPROM Bytes Used:28
Data EEPROM Bytes Free:228
