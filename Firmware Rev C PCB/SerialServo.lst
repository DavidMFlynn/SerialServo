SerialServo.asm                                                       Page: 1
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00001 0000 	;====================================================================================================
00002 0000 	;
00003 0000 	;    Filename:      SerialServo.asm
00004 0000 	;    Created:       4/26/2018
00005 0000 	;    File Version:  1.1b5   8/30/2020
00006 0000 	;
00007 0000 	;    Author:        David M. Flynn
00008 0000 	;    Company:       Oxford V.U.E., Inc.
00009 0000 	;    E-Mail:        dflynn@oxfordvue.com
00010 0000 	;    Web Site:      http://www.oxfordvue.com/
00011 0000 	;
00012 0000 	;====================================================================================================
00013 0000 	;    SerialServo is sample code.
00014 0000 	;    Controls a single robot arm joint using an R/C servo (SG90) modified
00015 0000 	;    for continuous rotation.  Features and configurations will be added as needed.
00016 0000 	;
00017 0000 	;    Features: 	TTL Packet Serial
00018 0000 	;	R/C Servo PWM output
00019 0000 	;	Current sensing.
00020 0000 	;	3 Buttons/LEDs for config
00021 0000 	;	Absolute magnetic encoder
00022 0000 	;
00023 0000 	;Mode 0: (LED 1 = off) servo test mode, copy AN4 Pot value x 2 + 1976 to servo PWM.
00024 0000 	;Mode 1: (LED 1 = 1 flash) servo and encoder test mode, AN4 Pot value + 950 - EncoderVal to servo dir.
00025 0000 	;Mode 2: Basic Serial Servo, output servo pulse of ssCmdPos x 0.5uS.
00026 0000 	;Mode 3: Absolute encoder position control. ssCmdPos = 0..4095
00027 0000 	;Mode 4: Gripper force control.
00028 0000 	;
00029 0000 	;    History:
00030 0000 	; 1.1b5   8/30/2020    Added support for Rev D PCB, Aux3...
00031 0000 	; 1.1b4   8/26/2020    Addded kCmd_SetKp..., Fixed Batt Volts (AN1), ClampInt bug fixed.
00032 0000 	; 1.1b3   4/10/2020    Improved Mode 3
00033 0000 	; 1.1b2   8/11/2019	Continue fixes for 14bit encoder. New defaults Mode 3 (2950 Â±100, fast, Idle center)
00034 0000 	; 1.1b1   3/21/2019	Port for Rev C PCB
00035 0000 	; 1.0b7   10/3/2018	Mode 3 is working for 4-wheel rover corner pivot motors.
00036 0000 	; 1.0b6   8/18/2018	Moved analog variables to bank 1. Fast blink on error. EncoderOffset for mode3
00037 0000 	; 1.0b5   7/23/2018	Aux IO
00038 0000 	; 1.0b4   7/14/2018	Better defaults. Gripper mode (4).
00039 0000 	; 1.0b3   6/19/2018	Added ssEnableFastPWM
00040 0000 	; 1.0b2   6/3/2018	Servo current is averaged, DD DD Sync bytes and checksum.
00041 0000 	; 1.0b1   6/1/2018	Modes 2 and 3 are working. No current limit yet.
00042 0000 	; 1.0a3   5/31/2018    Added Speed, StopCenter.
00043 0000 	; 1.0a2   5/25/2018	Added some more commands.
00044 0000 	; 1.0a1   5/24/2018	It begins to work.
00045 0000 	; 1.0d1   4/26/2018	First code.
00046 0000 	;
00047 0000 	;====================================================================================================
00048 0000 	; ToDo:
00049 0000 	;
00050 0000 	;
00051 0000 	;====================================================================================================
00052 0000 	;====================================================================================================
00053 0000 	; What happens next:
00054 0000 	;   At power up the system LED will blink.
00055 0000 	;   Mode 0: (LED 1 = off) servo test mode, copy AN4 Pot value to servo.
00056 0000 	;   Mode 1: (LED 1 = 1 flash) servo  and encoder test mode, AN4 Pot value - EncoderVal to servo dir.
00057 0000 	;   Mode 2: Basic Serial Servo, output servo pulse of CmdPos * 0.5uS.
00058 0000 	;   Mode 3: Absolute encoder position control, Single rotation of encoder, Continuous rotation servo.
00059 0000 	;   Mode 4: Gripper force control.
00060 0000 	;====================================================================================================
00061 0000 	;
00062 0000 	;   Pin 1 (RA2/AN2) SW1/LED1 (Active Low Input/Output)
00063 0000 	;   Pin 2 (RA3/AN3) SW2/LED2 (Active Low Input/Output)
00064 0000 	;   Pin 3 (RA4/AN4) SW3/LED3 (Active Low Input/Output) Rev D only
00065 0000 	;   Pin 4 (RA5/MCLR*) VPP/MCLR*
00066 0000 	;   Pin 5 (GND) Ground
00067 0000 	;   Pin 6 (RB0) MagEnc_CSBit (Active Low Output)
00068 0000 	;   Pin 7 (RB1/AN11/SDA1) MISO MagEnc_DataBit (Digital Input)
00069 0000 	;   Pin 8 (RB2/AN10/TX) TTL Serial RX
00070 0000 	;   Pin 9 (RB3/CCP1) Pulse output for Servo
00071 0000 	;
00072 0000 	;   Pin 10 (RB4/AN8/SLC1) SCL1 MagEnc_CLKBit
00073 0000 	;   Pin 11 (RB5/AN7) TTL Serial TX
00074 0000 	;   Pin 12 (RB6/AN5/CCP2) ICSPCLK
00075 0000 	;   Pin 13 (RB7/AN6) ICSPDAT
00076 0000 	;   Pin 14 (Vcc) +5 volts
00077 0000 	;   Pin 15 (RA6) MOSI MagEnc_DataBit (Digital Output)
00078 0000 	;   Pin 16 (RA7/CCP2) LED3 (Active Low Output)(System LED)
00079 0000 	;   Pin 17 (RA0/AN0) Current sensing analog input
00080 0000 	;   Pin 18 (RA1/AN1) Battery voltage sensing analog input
00081 0000 	;
00082 0000 	;====================================================================================================
00083 0000 	;
00084 0000 	;
00085 0000 		list	p=16f1847,r=hex,W=1	; list directive to define processor
00001 0000 		nolist
00002 0000 	;
00003 0000 	;==========================================================================
00004 0000 	;  MPASM PIC16F1847 processor include
00005 0000 	; 
00006 0000 	;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
00007 0000 	;  Modified by DMF 11/16/2013
00008 0000 	;==========================================================================
00009 0000 	;
01163 0000 		NOLIST
01164 0000 	;
00088 0000 		list
00089 0000 	;
00090 8007 EFA4 		__CONFIG _CONFIG1,_FOSC_INTOSC & _WDTE_OFF & _MCLRE_OFF & _IESO_OFF
SerialServo.asm                                                       Page: 2
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00091 0000 	;
00092 0000 	;
00093 0000 	; INTOSC oscillator: I/O function on CLKIN pin
00094 0000 	; WDT disabled
00095 0000 	; PWRT disabled
00096 0000 	; MCLR/VPP pin function is digital input
00097 0000 	; Program memory code protection is disabled
00098 0000 	; Data memory code protection is disabled
00099 0000 	; Brown-out Reset enabled
00100 0000 	; CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin
00101 0000 	; Internal/External Switchover mode is disabled
00102 0000 	; Fail-Safe Clock Monitor is enabled
00103 0000 	;
00104 8008 DFFF 		__CONFIG _CONFIG2,_WRT_OFF & _PLLEN_ON & _LVP_OFF
00105 0000 	;
00106 0000 	; Write protection off
00107 0000 	; 4x PLL Enabled
00108 0000 	; Stack Overflow or Underflow will cause a Reset
00109 0000 	; Brown-out Reset Voltage (Vbor), low trip point selected.
00110 0000 	; Low-voltage programming enabled
00111 0000 	;
00112 0000 	; '__CONFIG' directive is used to embed configuration data within .asm file.
00113 0000 	; The lables following the directive are located in the respective .inc file.
00114 0000 	; See respective data sheet for additional information on configuration word.
00115 0000 	;
00116 0000 		constant	oldCode=0
00117 0000 		constant	useRS232=1
00118 0000 		constant	UseEEParams=1
00119 0000 		constant	UseAuxLEDBlinking=0
00120 0000 	;
00121 0000 		constant	UseAltSerialPort=1
00122 0000 		constant	RP_LongAddr=0
00123 0000 		constant	RP_AddressBytes=1
00124 0000 		constant	RP_DataBytes=4
00125 0000 		constant	UseRS232SyncBytes=1
00126 0000 00DD 	kRS232SyncByteValue	EQU	0xDD
00127 0000 		constant	UseRS232Chksum=1
00128 0000 		constant               UsePID=0
00129 0000 	;
00130 0000 0001 	kRS232_MasterAddr	EQU	0x01	;Master's Address
00131 0000 0002 	kRS232_SlaveAddr	EQU	0x02	;This Slave's Address
00132 0000 0003 	kSysMode	EQU	.3	;Default Mode
00133 0000 0020 	Default_Kp	EQU	.32	;Fxd4.4 10*16
00134 0000 0000 	Default_Ki	EQU	0	; max gain is 255 = 15 15/16
00135 0000 0000 	Default_Kd	EQU	0
00136 0000 0004 	kGripperHC	EQU	0x04	;Gripper hysteresis
00137 0000 	;
00138 0000 0003 	#Define	_C	STATUS,C
00139 0000 0003 	#Define	_Z	STATUS,Z
00140 0000 	;
00141 0000 	;====================================================================================================
00144 0000 		nolist
00145 0000 	;
00146 0000 	;    Port A bits
00147 0000 00BF 	PortADDRBits	EQU	b'10111111'
00148 0000 0000 	PortAValue	EQU	b'00000000'
00149 0000 0003 	ANSELA_Val	EQU	b'00000011'	;RA0/AN0, RA4/AN4
00150 0000 018C 	#Define                Aux0_ANSEL_Bit         ANSELA,2
00151 0000 018C 	#Define                Aux1_ANSEL_Bit         ANSELA,3
00152 0000 018C 	#Define                Aux2_ANSEL_Bit         ANSELA,4
00153 0000 	;
00154 0000 000C 	#Define	RA0_In	PORTA,0	;Current, Analog Input
00155 0000 000C 	#Define	RA1_In	PORTA,1	;Battery Volts, Analog Input
00156 0000 000C 	#Define	SW1_In	PORTA,2	;SW1/LED1
00157 0000 000C 	#Define	SW2_In	PORTA,3	;SW2/LED2
00158 0000 000C 	#Define	SW3_In	PORTA,4	;SW3/LED3, n/c on Rev C
00159 0000 000C 	#Define	RA5_In	PORTA,5	;VPP/MCLR*
00160 0000 000C 	#Define	RA6_Out	PORTA,6	;MagEnc_DataBit Encoder MOSI (SPI, Digital Output)
00161 0000 000C 	#Define	RA7_In	PORTA,7	;LED3 (Active Low Output)(System LED)
00162 0000 0002 	LED1_Bit	EQU	2	;LED1 (Active Low Output)
00163 0000 0003 	LED2_Bit	EQU	3	;LED2 (Active Low Output)
00164 0000 0004 	LED3_Bit               EQU                    4
00165 0000 0007 	SysLED_Bit	EQU	7	;Sys_LED (Active Low Output)
00166 0000 008C 	#Define	SysLED_Tris	TRISA,SysLED_Bit	;Sys_LED (Active Low Output)
00167 0000 	;
00168 0000 008C 	#Define	Aux0_LED1_TRIS	TRISA,LED1_Bit	;LED1 (Active Low Output)
00169 0000 000C 	#Define                Aux0_SW1_PORT          PORTA,LED1_Bit         
00170 0000 010C 	#Define	Aux0_LED1_Lat	LATA,LED1_Bit	;LED1 (Active Low Output)
00171 0000 	;
00172 0000 008C 	#Define	Aux1_LED2_TRIS	TRISA,LED2_Bit	;LED2 (Active Low Output)
00173 0000 000C 	#Define                Aux1_SW2_PORT          PORTA,LED2_Bit         
00174 0000 010C 	#Define	Aux1_LED2_Lat	LATA,LED2_Bit	;LED2 (Active Low Output)
00175 0000 	;
00176 0000 008C 	#Define	Aux2_LED3_TRIS	TRISA,LED3_Bit	;LED3 (Active Low Output)
00177 0000 000C 	#Define                Aux2_SW3_PORT          PORTA,LED3_Bit         
00178 0000 010C 	#Define	Aux2_LED3_Lat	LATA,LED3_Bit	;LED3 (Active Low Output)
00179 0000 	;
00180 0000 00F8 	Servo_AddrDataMask	EQU	0xF8
00181 0000 	;
00182 0000 	;
00183 0000 	;    Port B bits
00184 0000 00C6 	PortBDDRBits	EQU	b'11000110'	;MagEnc_CSBit, CCP1, MagEnc_CLKBit
00185 0000 0011 	PortBValue	EQU	b'00010001'
00186 0000 0000 	ANSELB_Val	EQU	b'00000000'	;RB5/AN7
00187 0000 	;
00188 0000 010D 	#Define	RB0_Out	LATB,0	;MagEnc_CSBit (Active Low Output)
00189 0000 000D 	#Define	RB1_In	PORTB,1	;MISO MagEnc_DataBit (Digital Input)
00190 0000 000D 	#Define	RB2_In	PORTB,2	;RX Serial Data
00191 0000 000D 	#Define	RB3_Out	PORTB,3	;CCP1 Output
SerialServo.asm                                                       Page: 3
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00192 0000 000D 	#Define	RB4_In	PORTB,4	;SCL1 MagEnc_CLKBit
00193 0000 000D 	#Define	RB5_In	PORTB,5	;TX Serial Data
00194 0000 000D 	#Define	RB6_In	PORTB,6	;ICSPCLK
00195 0000 000D 	#Define	RB7_In	PORTB,7	;ICSPDAT
00196 0000 	;
00197 0000 	;
00198 0000 	;========================================================================================
00199 0000 	;========================================================================================
00200 0000 	;
00201 0000 	;Constants
00202 0000 00FF 	All_In	EQU	0xFF
00203 0000 0000 	All_Out	EQU	0x00
00204 0000 	;
00205 0000 0009 	CCP1CON_Clr	EQU	b'00001001'
00206 0000 0008 	CCP1CON_Set	EQU	b'00001000'
00207 0000 000A 	CCP1CON_Idle	EQU	b'00001010'
00208 0000 	;
00209 0000 	;OSCCON_Value	EQU	b'01110010'	; 8 MHz
00210 0000 00F0 	OSCCON_Value	EQU	b'11110000'	;32MHz
00211 0000 	;
00212 0000 	;T2CON_Value	EQU	b'01001110'	;T2 On, /16 pre, /10 post
00213 0000 004F 	T2CON_Value	EQU	b'01001111'	;T2 On, /64 pre, /10 post
00214 0000 007D 	PR2_Value	EQU	.125
00215 0000 	;
00216 0000 0064 	LEDTIME	EQU	d'100'	;1.00 seconds
00217 0000 000A 	LEDErrorTime	EQU	d'10'
00218 0000 0014 	LEDFastTime	EQU	d'20'
00219 0000 	;
00220 0000 	;T1CON_Val	EQU	b'00000001'	;Fosc=8MHz, PreScale=1,Fosc/4,Timer ON
00221 0000 0021 	T1CON_Val	EQU	b'00100001'	;Fosc=32MHz, PreScale=4,Fosc/4,Timer ON
00222 0000 	;
00223 0000 	;TXSTA_Value	EQU	b'00100000'	;8 bit, TX enabled, Async, low speed
00224 0000 0024 	TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, high speed
00225 0000 0090 	RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00226 0000 0008 	BAUDCON_Value	EQU	b'00001000'	;BRG16=1
00227 0000 	; 8MHz clock low speed (BRGH=0,BRG16=1)
00228 0000 	;Baud_300	EQU	d'1666'	;0.299, -0.02%
00229 0000 	;Baud_1200	EQU	d'416'	;1.199, -0.08%
00230 0000 	;Baud_2400	EQU	d'207'	;2.404, +0.16%
00231 0000 	;Baud_9600	EQU	d'51'	;9.615, +0.16%
00232 0000 	; 32MHz clock low speed (BRGH=1,BRG16=1)
00233 0000 682A 	Baud_300	EQU	.26666	;300, 0.00%
00234 0000 1A0A 	Baud_1200	EQU	.6666	;1200, 0.00%
00235 0000 0D04 	Baud_2400	EQU	.3332	;2400, +0.01%
00236 0000 0340 	Baud_9600	EQU	.832	;9604, +0.04%
00237 0000 01A0 	Baud_19200	EQU	.416	;19.18k, -0.08%
00238 0000 00CF 	Baud_38400	EQU	.207	;38.46k, +0.16%
00239 0000 008A 	Baud_57600	EQU	.138	;57.55k, -0.08%
00240 0000 00CF 	BaudRate	EQU	Baud_38400
00241 0000 	;
00242 0000 9C40 	kServoDwellTime	EQU	.40000	;20mS
00243 0000 4E20 	kServoFastDwellTime	EQU	.20000	;10mS
00244 0000 000A 	kServoSpeed	EQU	.10	;Slow 5uS/Update
00245 0000 0019 	kssFlags	EQU	b'00011001'	;ssEnableFastPWM,ssMode3IdleCenter,ssEnableOverCur=true
00246 0000 0032 	kssMaxI	EQU	.50	;Low
00247 0000 0BB8 	kMidPulseWidth	EQU	.3000	;1500uS
00248 0000 	;
00249 0000 	                       if kSysMode==3
00250 0000 0064 	kMinPulseWidth	EQU	.100	;100 encoder counts
00251 0000 3F98 	kMaxPulseWidth	EQU	.16280	;Max encoder value for ssCmdPos
00252 0000 	                       else
00255 0000 	                       endif
00256 0000 	;
00257 0000 0B81 	kServoCenterStop	EQU	.2945                  ;test value
00258 0000 0BE5 	kServoFastForward	EQU	kServoCenterStop+.100
00259 0000 0B1D 	kServoFastReverse	EQU	kServoCenterStop-.100
00260 0000 0064 	kDeadBand	EQU	.100	;100 encoder counts
00261 0000 0000 	kSysFlags	EQU	.0
00262 0000 0028 	kGripI	EQU	.40
00263 0000 	;
00264 0000 000A 	DebounceTime	EQU	.10
00265 0000 0004 	kMaxMode	EQU	.4
00266 0000 	;
00267 0000 	; AuxIO modes, SWn/LEDn setup options
00268 0000 0000 	kAuxIOnone	EQU	0x00                   ;unused
00269 0000 0001 	kAuxIOLEDBtn	EQU	0x01                   ;LED/Button
00270 0000 0002 	kAuxIODigitalIn	EQU	0x02                   ;Digital Input
00271 0000 0003 	kAuxIODigitalOut	EQU	0x03                   ;Digital Output
00272 0000 0004 	kAuxIOAnalogIn	EQU	0x04                   ;Analog Input
00273 0000 0005 	kAuxIOHomeSw	EQU	0x05                   ;Home Switch
00274 0000 0006 	kAuxIOFwdLimit	EQU	0x06                   ;Forward Limit Switch
00275 0000 0007 	kAuxIORevLimit	EQU	0x07                   ;Reverse Limit Switch
00276 0000 	;
00277 0000 	;================================================================================================
00278 0000 	;***** VARIABLE DEFINITIONS
00279 0000 	; there are 256 bytes of ram, Bank0 0x20..0x7F, Bank1 0xA0..0xEF, Bank2 0x120..0x16F
00280 0000 	; there are 256 bytes of EEPROM starting at 0x00 the EEPROM is not mapped into memory but
00281 0000 	;  accessed through the EEADR and EEDATA registers
00282 0000 	;================================================================================================
00283 0000 	;  Bank0 Ram 020h-06Fh 80 Bytes
00284 0000 	;
00285 0000 		cblock	0x20
00286 0000 	;
00287 0000 0020 		SysLED_Time		;sys LED time
00288 0000 0021 		SysLED_Blinks		;0=1 flash,1,2,3
00289 0000 0022 		SysLED_BlinkCount
00290 0000 0023 		SysLEDCount		;sys LED Timer tick count
00291 0000 	;
00292 0000 	                       if UseAuxLEDBlinking
SerialServo.asm                                                       Page: 4
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00302 0000 		endif
00303 0000 	;
00304 0000 0024 		SysFlags1
00305 0000 0025 		SysFlags2
00306 0000 	;
00307 0000 0026 		EEAddrTemp		;EEProm address to read or write
00308 0000 0027 		EEDataTemp		;Data to be writen to EEProm
00309 0000 	;
00310 0000 0028 		Timer1Lo		;1st 16 bit timer
00311 0000 0029 		Timer1Hi		; 50 mS RX timeiout
00312 0000 002A 		Timer2Lo		;2nd 16 bit timer
00313 0000 002B 		Timer2Hi		;
00314 0000 002C 		Timer3Lo		;3rd 16 bit timer
00315 0000 002D 		Timer3Hi		;GP wait timer
00316 0000 002E 		Timer4Lo		;4th 16 bit timer
00317 0000 002F 		Timer4Hi		; debounce timer
00318 0000 	;
00319 0000 0030 		TXByte		;Next byte to send
00320 0000 0031 		RXByte		;Last byte received
00321 0000 0032 		SerFlags
00322 0000 	;
00323 0000 	;
00324 0000 0033 		ssCmdPos:2		;Commanded position, 0=not used
00325 0000 0035 		ssCurPos:2                                    ;Servo signal in 1/2 microseconds
00326 0000 		                                              ;Mode 3: Target Position
00327 0000 0037 		ssTempFlags
00328 0000 0038 		ssStatus:4		;Status and condition flags for the user.
00329 0000 	;
00330 0000 003C 		EncoderAccum:3		;Accumulated distance
00331 0000 003F 		EncoderVal:2		;Value last read, raw 12 bit data
00332 0000 	;-----------------------
00333 0000 	;Below here are saved in eprom
00334 0000 0041 		EncoderFlags
00335 0000 0042 	                       EncoderHome:2                                 ;Absolute Home
00336 0000 0044 	                       EncoderOffset:2		;Used in mode 2 for single rotation
00337 0000 	;
00338 0000 0046 		ServoFastReverse:2                            ;ServoFastReverse is less than
00339 0000 0048 		ServoFastForward:2                            ; ServoFastForward
00340 0000 004A 		ServoStopCenter:2		;Mode 3 Idle position
00341 0000 004C 		ServoMin_uS:2
00342 0000 004E 		ServoMax_uS:2
00343 0000 0050 		ServoSpeed		;0 = off, 1..63 position change per cycle
00344 0000 	;
00345 0000 	                       if UsePID
00349 0000 		endif
00350 0000 	;
00351 0000 0051 		SysMode
00352 0000 0052 		RS232_MasterAddr
00353 0000 0053 		RS232_SlaveAddr
00354 0000 0054 		ssFlags		;Serial Servo flags
00355 0000 0055 		ssMaxI		;Max Current 0=off
00356 0000 0056 		DeadBand		;Used by Mode 2
00357 0000 0057 		ssGripI		;Gripper tension
00358 0000 0058 		ssAux0Config
00359 0000 0059 		ssAux1Config
00360 0000 005A 		ssAux2Config
00361 0000 005B 		SysFlags		;saved in eprom 0x64 must
00362 0000 				; move something to another
00363 0000 				; bank before adding anything new
00364 0000 	;
00365 0000 		endc
00366 0000 	;--------------------------------------------------------------
00367 0000 	;---SysFlags1 bits---
00368 0000 0024 	#Define	Aux0_SW1_Active	SysFlags1,0
00369 0000 0024 	#Define	Aux0_SW1_Debounce	SysFlags1,1
00370 0000 0024 	#Define	Aux0_LED1_Active	SysFlags1,2
00371 0000 0024 	#Define	Aux1_SW2_Active	SysFlags1,3
00372 0000 0024 	#Define	Aux1_SW2_Debounce	SysFlags1,4
00373 0000 0024 	#Define	Aux1_LED2_Active	SysFlags1,5
00374 0000 0024 	#Define	Aux2_SW3_Active	SysFlags1,6
00375 0000 0024 	#Define	Aux2_SW3_Debounce	SysFlags1,7
00376 0000 	;
00377 0000 	;---SysFlags2 bits---
00378 0000 0025 	#Define	Aux2_LED3_Active	SysFlags2,0
00379 0000 	;
00380 0000 	;
00381 0000 004C 	MD3_MinCmd             equ                    ServoMin_uS
00382 0000 004E 	MD3_MaxCmd             equ                    ServoMax_uS
00383 0000 	;
00384 0000 	;---SerFlags bits---
00385 0000 0032 	#Define	DataReceivedFlag	SerFlags,1
00386 0000 0032 	#Define	DataSentFlag	SerFlags,2
00387 0000 	;
00388 0000 	;---ssTempFlags bits---
00389 0000 0037 	#Define	PulseSent	ssTempFlags,0
00390 0000 0037 	#Define	ServoOff	ssTempFlags,1
00391 0000 0037 	#Define	ServoIdle	ssTempFlags,2
00392 0000 0037 	#Define	OverCurrentFlag	ssTempFlags,3
00393 0000 0037 	#Define	GripIMet	ssTempFlags,4
00394 0000 0037 	#Define	GripIOver	ssTempFlags,5
00395 0000 	;
00396 0000 	;----ssStatus bits
00397 0000 0038 	#Define	MD3_FFwd	ssStatus,0
00398 0000 0038 	#Define	MD3_FRev	ssStatus,1
00399 0000 0038 	#Define	ssio_OverCurSD	ssStatus,2	;Servo stopped for over-current
00400 0000 0038 	#Define	ssRX_Timeout	ssStatus,3	;cleared by host read
00401 0000 0038 	#Define	ssGripOCur	ssStatus,4	;cleared by host read
00402 0000 0038 	#Define	ssGripMCur	ssStatus,5	;cleared by host read
00403 0000 	;
SerialServo.asm                                                       Page: 5
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00404 0000 	; all bits of ssStatus+1 are cleared by a host kCmd_GetStatus command.
00405 0000 0039 	#Define	ssEncParityError	ssStatus+1,0	;cleared by host read
00406 0000 0039 	#Define	ssEncCmdError	ssStatus+1,1	;cleared by host read	
00407 0000 0039 	#Define                ssCmdPosVerified       ssStatus+1,2
00408 0000 0039 	#Define	ForwardLimit	ssStatus+1,3
00409 0000 0039 	#Define	ReverseLimit	ssStatus+1,4
00410 0000 0039 	#Define	HomeSwitch	ssStatus+1,5
00411 0000 	;
00412 0000 	;---------------
00413 0000 0041 	#Define	FirstRAMParam	EncoderFlags
00414 0000 005B 	#Define	LastRAMParam	SysFlags
00415 0000 	;
00416 0000 	;---ssFlags bits---
00417 0000 0054 	#Define	ssEnableOverCur	ssFlags,0	;disable if current is too high
00418 0000 0054 	#Define	ssReverseDir	ssFlags,1	;if set ServoFastForward<=>ServoFastReverse
00419 0000 	;
00420 0000 0054 	#Define	ssMode3IdleCenter	ssFlags,3	;0= Disable PWM, 1= output ServoStopCenter
00421 0000 0054 	#Define	ssEnableFastPWM	ssFlags,4	;0= 20mS PWM, 1= 10mS PWM
00422 0000 0054 	#Define	ssEnableAN4	ssFlags,5	;0= Mode 0,1 disabled; 1= Enabled;
00423 0000 	;
00424 0000 005B 	#Define	SW1_Flag	SysFlags,0
00425 0000 005B 	#Define	SW2_Flag	SysFlags,1
00426 0000 005B 	#Define	SW3_Flag	SysFlags,2
00427 0000 005B 	#Define	SW4_Flag	SysFlags,3
00428 0000 	;
00429 0000 	;================================================================================================
00430 0000 	;  Bank1 Ram 0A0h-0EFh 80 Bytes
00431 0000 		cblock	0x0A0
00432 0000 00A0 		RX_ParseFlags
00433 0000 00A1 		RX_Flags
00434 0000 00A2 		RX_DataCount
00435 0000 00A3 		RX_CSUM
00436 0000 00A4 		RX_SrcAdd:RP_AddressBytes
00437 0000 00A5 		RX_DstAdd:RP_AddressBytes
00438 0000 00A6 		RX_TempData:RP_DataBytes
00439 0000 00AA 		RX_Data:RP_DataBytes
00440 0000 00AE 		TX_Data:RP_DataBytes
00441 0000 	;
00442 0000 00B2 		ANFlags
00443 0000 00B3 		ANxActive		;Skip if 0
00444 0000 00B4 		ANCount		;Current AN being serviced
00445 0000 00B5 		Cur_AN0:2		;IServo
00446 0000 00B7 		Cur_AN1:2		;Battery Volts
00447 0000 00B9 		Cur_AN2:2		;Aux0_SW1_LED1
00448 0000 00BB 		Cur_AN3:2		;Aux1_SW2_LED2
00449 0000 00BD 		Cur_AN4:2                                     ;Aux2_SW3_LED3, n/c on Rev C
00450 0000 	;
00451 0000 00BF 		OldAN0Value:2
00452 0000 		endc
00453 0000 	;
00454 0000 0004 	LastAN	EQU	.4	;Sevice 5 AN inputs
00455 0000 00B5 	FirstANData	EQU	Cur_AN0
00456 0000 	;
00457 0000 00B5 	#Define	ServoCurrent	Cur_AN0
00458 0000 00B7 	#Define	BattVolts	Cur_AN1
00459 0000 00B9 	#Define	ModeZeroPot	Cur_AN2
00460 0000 00B9 	#Define                AN_Aux0                Cur_AN2
00461 0000 00BB 	#Define                AN_Aux1                Cur_AN3
00462 0000 00BD 	#Define                AN_Aux2                Cur_AN4
00463 0000 	;
00464 0000 	;---ANFlags bits---
00465 0000 00B2 	#Define	NewDataAN0	ANFlags,0
00466 0000 00B2 	#Define	NewDataAN1	ANFlags,1
00467 0000 00B2 	#Define	NewDataAN2	ANFlags,1
00468 0000 00B2 	#Define	NewDataAN3	ANFlags,1
00469 0000 00B2 	#Define	NewDataAN4	ANFlags,1
00470 0000 	;
00471 0000 	;---ANxActive bits---
00472 0000 00B3 	#Define	AN0_ActiveBit	ANxActive,0
00473 0000 00B3 	#Define	AN1_ActiveBit	ANxActive,1
00474 0000 00B3 	#Define	AN2_ActiveBit	ANxActive,2
00475 0000 00B3 	#Define	AN3_ActiveBit	ANxActive,3
00476 0000 00B3 	#Define	AN4_ActiveBit	ANxActive,4
00477 0000 00B3 	#Define	AN_Aux0_ActiveBit	ANxActive,3	;Names used by Serial Comms
00478 0000 00B3 	#Define	AN_Aux1_ActiveBit	ANxActive,4
00479 0000 00B3 	#Define	AN_Aux2_ActiveBit	ANxActive,5
00480 0000 	;
00481 0000 007C 	ANNumMask	EQU	0x7C
00482 0000 0000 	AN0_Val	EQU	0x00                   ;Current
00483 0000 0004 	AN1_Val	EQU	0x04                   ;Volts
00484 0000 0008 	AN2_Val	EQU	0x08                   ;SW1/LED1/Aux0
00485 0000 000C 	AN3_Val	EQU	0x0C                   ;SW2/LED2/Aux1
00486 0000 0010 	AN4_Val	EQU	0x10                   ;SW2/LED2/Aux2
00487 0000 	;AN7_Val	EQU	0x1C
00488 0000 	;
00489 0000 	;================================================================================================
00490 0000 	;  Bank2 Ram 120h-16Fh 80 Bytes
00491 0000 	;
00492 0000 0002 	#Define	Ser_Buff_Bank	2
00493 0000 	;
00494 0000 		cblock	0x120
00495 0000 0120 		Ser_In_Bytes		;Bytes in Ser_In_Buff
00496 0000 0121 		Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00497 0000 0122 		Ser_In_InPtr
00498 0000 0123 		Ser_In_OutPtr
00499 0000 0124 		Ser_Out_InPtr
00500 0000 0125 		Ser_Out_OutPtr
00501 0000 0126 		Ser_In_Buff:20
00502 0000 0146 		Ser_Out_Buff:20
SerialServo.asm                                                       Page: 6
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00503 0000 		endc
00504 0000 	;
00505 0000 	;================================================================================================
00506 0000 	;  Bank3 Ram 1A0h-1EFh 80 Bytes
00507 0000 01A0 	MathAddress	EQU	0x1A0
00508 0000 		include	MathEQUs.inc
00001 0000 	;===================================================================================
00002 0000 	;  EUQ's for DMFMath.inc and PIDInt.inc
00003 0000 	;  FileName: MathEQUs.inc
00004 0000 	;  Date: 3/29/2020
00005 0000 	;  File Version: 1.0.3 3/29/2020
00006 0000 	;  
00007 0000 	;  Author: David M. Flynn
00008 0000 	;  Company: Oxford V.U.E., Inc.
00009 0000 	;
00010 0000 	;======================================================================================
00011 0000 	; PID vars
00012 0000 		cblock	MathAddress
00013 0000 01A0 		derivCount		;This value determins how many times the Derivative term is
00014 0000 				;calculated based on each Integral term.
00015 0000 01A1 		pidOut0		;24-bit Final Result of PID for the "Plant"
00016 0000 01A2 		pidOut1
00017 0000 01A3 		pidOut2
00018 0000 01A4 		error0		;16-bit error, passed to the PID
00019 0000 01A5 		error1
00020 0000 01A6 		a_Error0		;24-bit accumulated error, used for Integral term
00021 0000 01A7 		a_Error1
00022 0000 01A8 		a_Error2
00023 0000 01A9 		p_Error0		;16-bit previous error, used for Derivative term
00024 0000 01AA 		p_Error1
00025 0000 01AB 		d_Error0		;16-bit delta error (error - previous error)
00026 0000 01AC 		d_Error1
00027 0000 	;
00028 0000 01AD 		prop0		;24-bit proportional value
00029 0000 01AE 		prop1
00030 0000 01AF 		prop2
00031 0000 01B0 		integ0		;24-bit Integral value
00032 0000 01B1 		integ1
00033 0000 01B2 		integ2
00034 0000 01B3 		deriv0		;24-bit Derivative value
00035 0000 01B4 		deriv1
00036 0000 01B5 		deriv2
00037 0000 	;
00038 0000 01B6 		pidStat1		;PID bit-status register
00039 0000 01B7 		pidStat2		;PID bit-status register2
00040 0000 	;
00041 0000 	; PIDMath
00042 0000 01B8 		PRODL
00043 0000 01B9 		PRODH
00044 0000 01BA 		AccB0		;LSB
00045 0000 01BB 		AccB1
00046 0000 01BC 		AccB2
00047 0000 01BD 		AccB3		;MSB
00048 0000 01BE 		AArgB0
00049 0000 01BF 		AArgB1
00050 0000 01C0 		AArgB2
00051 0000 01C1 		AArgB3
00052 0000 01C2 		BArgB0
00053 0000 01C3 		BArgB1
00054 0000 01C4 		BArgB2
00055 0000 01C5 		BArgB3
00056 0000 01C6 		RemB0
00057 0000 01C7 		RemB1
00058 0000 01C8 		RemB2
00059 0000 01C9 		RemB3
00060 0000 		endc
00061 0000 	;
00062 0000 	;___________________________ pidStat1 register ________________________________________________
00063 0000 	;|  bit 7   |   bit 6    |  bit 5 |    bit 4   |   bit 3    |  bit 2   |   bit 1    |  bit 0   |
00064 0000 	;| pid_sign | d_err_sign |        | p_err_sign | a_err_sign | err_sign |  a_err_z   |  err_z   |
00065 0000 	;|__________|____________|________|____________|____________|__________|____________|__________|
00066 0000 	;
00067 0000 01B6 	#Define	err_z	pidStat1,0	;error zero flag, Zero = set
00068 0000 01B6 	#Define	a_err_z	pidStat1,1	;a_error zero flag, Zero = set
00069 0000 01B6 	#Define	err_sign	pidStat1,2	;error sign flag, Pos = set/ Neg = clear
00070 0000 01B6 	#Define	a_err_sign	pidStat1,3	;a_error sign flag, Pos = set/ Neg = clear
00071 0000 01B6 	#Define	p_err_sign	pidStat1,4	;p_error sign flag, Pos = set/ Neg = clear
00072 0000 	;
00073 0000 01B6 	#Define	d_err_sign	pidStat1,6	;d_error sign flag, Pos = set/ Neg = clear
00074 0000 01B6 	#Define	pid_sign	pidStat1,7	;PID result sign flag, Pos = set/ Neg = clear
00075 0000 	;
00076 0000 	;________________________________ pidStat2 register______________________________________
00077 0000 	;| bit 7 |  bit 6  |  bit 5   |    bit 4   |   bit 3    |  bit 2    |   bit 1    |  bit 0   |
00078 0000 	;|       |         |          | error_limit| deriv_sign | BArg_sign | AArg_Sign  | d_err_z  |
00079 0000 	;|_______|_________|__________|____________|____________|___________|____________|__________|
00080 0000 	;
00081 0000 01B7 	#Define	d_err_z	pidStat2,0	;d_error zero flag, Zero = set
00082 0000 01B7 	#Define	AArg_sign	pidStat2,1	;AArg sign flag, Pos = set/ Neg = clear
00083 0000 01B7 	#Define	BArg_sign	pidStat2,2	;BArg sign flag, Pos = set/ Neg = clear
00084 0000 01B7 	#Define	deriv_sign	pidStat2,3	;deriv sign flag, Pos = set/ Neg = clear
00085 0000 01B7 	#Define	error_limit	pidStat2,4	;Error limit exceeded flag, error = set/ no error = clear
00086 0000 	;
00509 0000 	;
00510 0000 	;=========================================================================================
00511 0000 	;  Bank4 Ram 220h-26Fh 80 Bytes
00512 0000 	;=========================================================================================
00513 0000 	;  Bank5 Ram 2A0h-2EFh 80 Bytes
00514 0000 	;
00515 0000 		cblock	0x2A0
SerialServo.asm                                                       Page: 7
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00516 0000 02A0 		SigOutTime
00517 0000 02A1 		SigOutTimeH
00518 0000 02A2 		CalcdDwell
00519 0000 02A3 		CalcdDwellH
00520 0000 		endc
00521 0000 	;
00522 0000 	;=======================================================================================================
00523 0000 	;  Common Ram 70-7F same for all banks
00524 0000 	;      except for ISR_W_Temp these are used for paramiter passing and temp vars
00525 0000 	;=======================================================================================================
00526 0000 	;
00527 0000 		cblock	0x70
00528 0000 0070 		Param70
00529 0000 0071 		Param71
00530 0000 0072 		Param72
00531 0000 0073 		Param73
00532 0000 0074 		Param74
00533 0000 0075 		Param75
00534 0000 0076 		Param76
00535 0000 0077 		Param77
00536 0000 0078 		Param78
00537 0000 0079 		Param79
00538 0000 007A 		Param7A
00539 0000 007B 		Param7B
00540 0000 007C 		Param7C
00541 0000 007D 		Param7D
00542 0000 007E 		Param7E
00543 0000 007F 		Param7F
00544 0000 		endc
00545 0000 	;
00546 0000 	;=========================================================================================
00547 0000 	;Conditions
00548 0000 0080 	HasISR	EQU	0x80	;used to enable interupts 0x80=true 0x00=false
00549 0000 	;
00550 0000 0070 	AS5047D_Flags	EQU	Param70	;Check that Param70 is OK to use
00551 0000 	;
00552 0000 0070 	#Define	ParityErrFlag	AS5047D_Flags,0
00553 0000 0070 	#Define	AngleReadFlag	AS5047D_Flags,1
00554 0000 0070 	#define	ContinueReadFlag	AS5047D_Flags,2
00555 0000 0070 	#Define	CmdErrorFlag	AS5047D_Flags,3
00556 0000 	;
00557 0000 	;=========================================================================================
00558 0000 	;==============================================================================================
00559 0000 	; ID Locations
00560 0000 		__idlocs	0x10b4
00561 0000 	;
00562 0000 	;==============================================================================================
00563 0000 	; EEPROM locations (NV-RAM) 0x00..0x7F (offsets)
00564 0000 	;
00565 0000 	; default values
00566 0000 		ORG	0xF000
00567 F000 0000 		de	0x00	;nvEncoderFlags
00568 F001 0000 0000 		de	0x00,0x00	;nvEncoderHome
00569 F003 0000 0000 		de	0x00,0x00	;nvEncoderOffset
00570 F005 001D 		de	low kServoFastReverse
00571 F006 000B 		de	high kServoFastReverse
00572 F007 00E5 		de	low kServoFastForward
00573 F008 000B 		de	high kServoFastForward
00574 F009 0081 		de	low kServoCenterStop	;nvServoStopCenter
00575 F00A 000B 		de	high kServoCenterStop
00576 F00B 0064 		de	low kMinPulseWidth	;nvServoMin_uS
00577 F00C 0000 		de	high kMinPulseWidth
00578 F00D 0098 		de	low kMaxPulseWidth	;nvServoMax_uS
00579 F00E 003F 		de	high kMaxPulseWidth
00580 F00F 000A 		de	kServoSpeed	;nvServoSpeed
00581 F010 		if UsePID
00585 F010 		endif
00586 F010 0003 		de	kSysMode	;nvSysMode
00587 F011 0001 		de	kRS232_MasterAddr	;nvRS232_MasterAddr, 0x0F
00588 F012 0002 		de	kRS232_SlaveAddr	;nvRS232_SlaveAddr, 0x10
00589 F013 0019 		de	kssFlags	;nvssFlags
00590 F014 0032 		de	kssMaxI	;nvssMaxI
00591 F015 0064 		de	kDeadBand	;nvDeadBand
00592 F016 0028 		de	kGripI
00593 F017 0000 		de	0x00	;ssAux0Config
00594 F018 0000 		de	0x00	;ssAux1Config
00595 F019 0000 		de	0x00	;ssAux2Config
00596 F01A 0000 		de	kSysFlags	;nvSysFlags
00597 F01B 	;
00598 F01B 		ORG	0xF0FF
00599 F0FF 0000 		de	0x00	;Skip BootLoader
00600 F100 	;
00601 F100 		cblock	0x0000
00602 F100 	;
00603 F100 0000 		nvEncoderFlags
00604 F100 0001 	                       nvEncoderHome:2
00605 F100 0003 	                       nvEncoderOffset:2
00606 F100 	;
00607 F100 0005 		nvServoFastReverse:2
00608 F100 0007 		nvServoFastForward:2
00609 F100 0009 		nvServoStopCenter:2
00610 F100 000B 		nvServoMin_uS:2
00611 F100 000D 		nvServoMax_uS:2
00612 F100 000F 		nvServoSpeed
00613 F100 	;
00614 F100 		if UsePID
00618 F100 	                       endif
00619 F100 	;
00620 F100 0010 		nvSysMode
SerialServo.asm                                                       Page: 8
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00621 F100 0011 		nvRS232_MasterAddr
00622 F100 0012 		nvRS232_SlaveAddr
00623 F100 0013 		nvssFlags
00624 F100 0014 		nvssMaxI
00625 F100 0015 		nvDeadBand
00626 F100 0016 		nvssGripI
00627 F100 0017 		nvssAux0Config
00628 F100 0018 		nvssAux1Config
00629 F100 0019 		nvssAux2Config
00630 F100 001A 		nvSysFlags
00631 F100 		endc
00632 F100 	;
00633 F100 0000 	#Define	nvFirstParamByte	nvEncoderFlags
00634 F100 001A 	#Define	nvLastParamByte	nvSysFlags
00635 F100 	;
00636 F100 	;
00637 F100 	;==============================================================================================
00638 F100 	;============================================================================================
00639 F100 	;
00640 F100 1E00 	BootLoaderStart	EQU	0x1E00
00641 F100 	;
00642 F100 		ORG	0x000	; processor reset vector
00643 0000 319E 		movlp	BootLoaderStart
00644 0001 2E00 		goto	BootLoaderStart
00645 0002 018A 	ProgStartVector	CLRF	PCLATH
00646 0003 29EB 	  	goto	start	; go to beginning of program
00647 0004 	;
00648 0004 	;===============================================================================================
00649 0004 	; Interupt Service Routine
00650 0004 	;
00651 0004 	; we loop through the interupt service routing every 0.008192 seconds
00652 0004 	;
00653 0004 	;
00654 0004 		ORG	0x004	; interrupt vector location
00655 0004 018A 		CLRF	PCLATH
00656 0005 0188 		CLRF	BSR	; bank0
00657 0006 	;
00658 0006 	;
00659 0006 1C91 		BTFSS	PIR1,TMR2IF
00660 0007 281B 		goto	SystemTick_end
00661 0008 	;
00662 0008 1091 		BCF	PIR1,TMR2IF	; reset interupt flag bit
00663 0009 	;------------------
00664 0009 	; These routines run 100 times per second
00665 0009 	;
00666 0009 	;------------------
00667 0009 	;Decrement timers until they are zero
00668 0009 	;
00669 0009 209D 		call	DecTimer1	;if timer 1 is not zero decrement
00670 000A 209B 		call	DecTimer2
00671 000B 2099 		call	DecTimer3
00672 000C 2097 		call	DecTimer4
00673 000D 	;
00674 000D 	;-----------------------------------------------------------------
00675 000D 	; blink LEDs
00676 000D 	;
00677 000D 	; All LEDs off
00678 000D 0021 		movlb	0x01	;bank 1
00679 000E 178C 		bsf	SysLED_Tris
00680 000F 	;
00681 000F 	; Read Switches
00682 000F 0020 		movlb	0x00	;bank 0
00683 0010 	;--------------------
00684 0010 	; Sys LED time
00685 0010 0BA3 		DECFSZ	SysLEDCount,F	;Is it time?
00686 0011 3208 		bra	SystemBlink_end	; No, not yet
00687 0012 	;
00688 0012 08A1 		movf	SysLED_Blinks,F
00689 0013 		SKPNZ		;Standard Blinking?
00689 0013 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00690 0014 3200 		bra	SystemBlink_Std	; Yes
00691 0015 	;
00692 0015 	; custom blinking
00693 0015 	;
00694 0015 01A2 	SystemBlink_Std	CLRF	SysLED_BlinkCount
00695 0016 0820 		MOVF	SysLED_Time,W
00696 0017 00A3 	SystemBlink_DoIt	MOVWF	SysLEDCount
00697 0018 0021 		movlb	0x01	;bank 1
00698 0019 138C 		bcf	SysLED_Tris	;LED ON
00699 001A 	SystemBlink_end:
00700 001A 	;
00701 001A 2482 		call	HandleAuxIO
00702 001B 	;
00703 001B 	;
00704 001B 	SystemTick_end:
00705 001B 	;
00706 001B 	;==================================================================================
00707 001B 	;
00708 001B 	; Handle CCP1 Interupt Flag, Enter w/ bank 0 selected
00709 001B 	;
00710 001B 0020 	IRQ_Servo1	MOVLB	0	;bank 0
00711 001C 1D11 		BTFSS	PIR1,CCP1IF
00712 001D 323B 		bra	IRQ_Servo1_End
00713 001E 	;
00714 001E 1437 		bsf	PulseSent	;ok to update CurPos
00715 001F 	;
00716 001F 1CB7 		BTFSS	ServoOff	;Are we sending a pulse?
00717 0020 3204 		bra	IRQ_Servo1_1	; Yes
00718 0021 	;
SerialServo.asm                                                       Page: 9
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00719 0021 	;Servo is off, idle CCP1 and keep output low
00720 0021 0025 		MOVLB	0x05	;Bank 5
00721 0022 300A 		movlw	CCP1CON_Idle
00722 0023 0093 		movwf	CCP1CON
00723 0024 322E 		bra	IRQ_Servo1_Dwell
00724 0025 	;
00725 0025 1937 	IRQ_Servo1_1	btfsc	ServoIdle
00726 0026 321E 		bra	IRQ_Servo1_Idle
00727 0027 0025 		MOVLB	0x05	;Bank 5
00728 0028 1893 		BTFSC	CCP1CON,CCP1M1	;Idling?
00729 0029 3227 		bra	IRQ_Servo1_OL	; Yes, go high after dwell
00730 002A 1813 		BTFSC	CCP1CON,CCP1M0	;Cleared output on match?
00731 002B 3225 		bra	IRQ_Servo1_OL	; No
00732 002C 	; An output just went high
00733 002C 	;
00734 002C 0820 	IRQ_Servo1_OH	MOVF	SigOutTime,W	;Put the pulse into the CCP reg.
00735 002D 0791 		ADDWF	CCPR1L,F
00736 002E 0821 		MOVF	SigOutTime+1,W
00737 002F 3D92 		ADDWFC	CCPR1H,F
00738 0030 3009 		MOVLW	CCP1CON_Clr	;Clear output on match
00739 0031 0093 		MOVWF	CCP1CON	;CCP1 clr on match
00740 0032 	;Calculate dwell time
00741 0032 0020 		movlb	0	;bank 0
00742 0033 1E54 		btfss	ssEnableFastPWM
00743 0034 3206 		bra	IRQ_Servo1_20mS
00744 0035 0025 		movlb	5	;Bank 5
00745 0036 3020 		MOVLW	LOW kServoFastDwellTime
00746 0037 00A2 		MOVWF	CalcdDwell
00747 0038 304E 		MOVLW	HIGH kServoFastDwellTime
00748 0039 00A3 		MOVWF	CalcdDwellH
00749 003A 3205 		bra	IRQ_Servo1_CalcDwell
00750 003B 	;
00751 003B 0025 	IRQ_Servo1_20mS	movlb	5	;Bank 5
00752 003C 3040 		MOVLW	LOW kServoDwellTime
00753 003D 00A2 		MOVWF	CalcdDwell
00754 003E 309C 		MOVLW	HIGH kServoDwellTime
00755 003F 00A3 		MOVWF	CalcdDwellH
00756 0040 	;
00757 0040 0820 	IRQ_Servo1_CalcDwell	MOVF	SigOutTime,W
00758 0041 02A2 		SUBWF	CalcdDwell,F
00759 0042 0821 		MOVF	SigOutTime+1,W
00760 0043 3BA3 		SUBWFB	CalcdDwellH,F
00761 0044 3212 		bra	IRQ_Servo1_X
00762 0045 	;
00763 0045 0025 	IRQ_Servo1_Idle	MOVLB	0x05
00764 0046 1893 		BTFSC	CCP1CON,CCP1M1	;Idling?
00765 0047 320B 		bra	IRQ_Servo1_Dwell	; yes, continue idling.
00766 0048 1C13 		BTFSS	CCP1CON,CCP1M0	;Just went low?
00767 0049 33E2 		bra	IRQ_Servo1_OH	; No, finish pulse
00768 004A 300A 		movlw	CCP1CON_Idle	; Yes, start idling
00769 004B 0093 		movwf	CCP1CON
00770 004C 3040 		MOVLW	LOW kServoDwellTime
00771 004D 00A2 		MOVWF	CalcdDwell
00772 004E 309C 		MOVLW	HIGH kServoDwellTime
00773 004F 00A3 		MOVWF	CalcdDwellH
00774 0050 3202 		bra	IRQ_Servo1_Dwell
00775 0051 	;
00776 0051 	; output went low so this cycle is done
00777 0051 3008 	IRQ_Servo1_OL	MOVLW	CCP1CON_Set	;Set output on match
00778 0052 0093 		MOVWF	CCP1CON
00779 0053 	;
00780 0053 0822 	IRQ_Servo1_Dwell	MOVF	CalcdDwell,W
00781 0054 0791 		ADDWF	CCPR1L,F
00782 0055 0823 		MOVF	CalcdDwellH,W
00783 0056 3D92 		ADDWFC	CCPR1H,F
00784 0057 	;
00785 0057 0020 	IRQ_Servo1_X	MOVLB	0x00
00786 0058 1111 		BCF	PIR1,CCP1IF
00787 0059 	IRQ_Servo1_End:
00788 0059 	;-----------------------------------------------------------------------------------------
00789 0059 	;AUSART Serial ISR
00790 0059 	;
00791 0059 1E91 	IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00792 005A 3201 		BRA	IRQ_Ser_End
00793 005B 20F1 		CALL	RX_TheByte
00794 005C 	;
00795 005C 	IRQ_Ser_End:
00796 005C 	;-----------------------------------------------------------------------------------------
00797 005C 0009 		retfie		; return from interrupt
00798 005D 	;
00799 005D 	;
00800 005D 	;=========================================================================================
00801 005D 	;*****************************************************************************************
00802 005D 	;=========================================================================================
00803 005D 	;
00804 005D 		include <F1847_Common.inc>
00001 005D 	;=========================================================================================
00002 005D 	; Commonly used routines PIC16F1847 version
00003 005D 	;
00004 005D 	;    Filename:      F1847 Common.inc
00005 005D 	;    Date:          4/6/2019
00006 005D 	;    File Version:  1.0.2
00007 005D 	;
00008 005D 	;    Author:        David M. Flynn
00009 005D 	;    Company:       Oxford V.U.E., Inc.
00010 005D 	;    E-Mail:        dflynn@oxfordvue.com
00011 005D 	;    Web Site:      http://www.oxfordvue.com/
00012 005D 	;
00013 005D 	;=========================================================================================
SerialServo.asm                                                       Page: 10
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00014 005D 	;    History:
00015 005D 	;
00016 005D 	; 1.0.2  4/6/2019	Fixes to EERead/EEwrite
00017 005D 	; 1.0.2 2/16/2019	Fix: added FSR0H to DecTimer.
00018 005D 	; 1.0.1 11/21/2015	Updates DecTimer.
00019 005D 	; 1.0   11/16/2013	Updated from F648A Common.inc
00020 005D 	;
00021 005D 	;=========================================================================================
00022 005D 	; Routines:
00023 005D 	;
00024 005D 	; ClearRam	(2+0) Clears all RAM, call once before initializing variables, FSR0
00025 005D 	; CopyToRam	(1+0) copy param memory (EEPROM) to ram, call once, FSR0
00026 005D 	; SaveParams	(1+0) copy ram to param memory (EEPROM), FSR0
00027 005D 	;
00028 005D 	;  Set FSR0H before calling these routines
00029 005D 	; DecTimer4	(0+0) Decrement routine for 16 bit timers, FSR0
00030 005D 	; DecTimer3
00031 005D 	; DecTimer2
00032 005D 	; DecTimer1
00033 005D 	; DecTimer	(0+0) High byte of counter address in W
00034 005D 	;
00035 005D 	; TestT4_Zero	Test for 16 bit timers = zero
00036 005D 	; TestT3_Zero	If Timer is zero return Z flag,1 else Z=0
00037 005D 	; TestT2_Zero
00038 005D 	; TestT1_Zero
00039 005D 	;
00040 005D 	; Delay10uS	(0+0)Delay uS    1 cycle = 1uS, 8Mhz clock version
00041 005D 	; Delay100uS
00042 005D 	; Delay40uS
00043 005D 	; DelayWuS
00044 005D 	;
00045 005D 	; EEReadW	(0+0) Read EEPROM address in W
00046 005D 	; EERead	(0+0) Read EEPROM address in EEAddrTemp
00047 005D 	; EEWriteW	(0+0) Write EEPROM address in W, Data in EEDataTemp
00048 005D 	; EEWrite	(0+0) Write EEPROM address in EEAdrTemp, Data in EEDataTemp, FSR0
00049 005D 	;
00050 005D 	;=========================================================================================
00051 005D 		ifndef UseEEParams
00053 005D 		endif
00054 005D 	;=========================================================================================
00055 005D 	; Clears all RAM
00056 005D 	; Entry: none
00057 005D 	; Exit: none
00058 005D 	; RAM used: All
00059 005D 	; Calls:(2+0) ClearRam_L2
00060 005D 	;
00061 005D 0020 	ClearRam	MOVLB	0x00
00062 005E 305F 		MOVLW	0x5F	;Clear 20h-7Eh, 95 bytes
00063 005F 00FF 		MOVWF	Param7F
00064 0060 3020 		MOVLW	0x20
00065 0061 0084 		MOVWF	FSR0
00066 0062 0185 		CLRF	FSR0H
00067 0063 2077 		CALL	ClearRam_L2
00068 0064 	;
00069 0064 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00070 0065 00FF 		MOVWF	Param7F
00071 0066 30A0 		MOVLW	0xA0
00072 0067 0084 		MOVWF	FSR0
00073 0068 2077 		CALL	ClearRam_L2
00074 0069 	;
00075 0069 0A85 		INCF	FSR0H,F	
00076 006A 206E 		CALL	ClearRam_2	;Banks 2,3
00077 006B 0A85 		INCF	FSR0H,F	
00078 006C 206E 		CALL	ClearRam_2	;Banks 4,5
00079 006D 0A85 		INCF	FSR0H,F	;Banks 6,7
00080 006E 	;	
00081 006E 3050 	ClearRam_2	MOVLW	0x50	;Clear 120h-16Fh, 80 bytes
00082 006F 00FF 		MOVWF	Param7F
00083 0070 3020 		MOVLW	0x20
00084 0071 0084 		MOVWF	FSR0
00085 0072 2077 		CALL	ClearRam_L2
00086 0073 	;
00087 0073 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00088 0074 00FF 		MOVWF	Param7F
00089 0075 30A0 		MOVLW	0xA0
00090 0076 0084 		MOVWF	FSR0
00091 0077 	;
00092 0077 0180 	ClearRam_L2	CLRF	INDF0
00093 0078 0A84 		INCF	FSR0,F
00094 0079 0BFF 		DECFSZ	Param7F,F
00095 007A 33FC 		bra	ClearRam_L2
00096 007B 0008 		RETURN
00097 007C 	;
00098 007C 		if UseEEParams
00099 007C 	;==========================================================================
00100 007C 	; copy param memory to ram
00101 007C 	;
00102 007C 3000 	CopyToRam	MOVLW	nvFirstParamByte
00103 007D 00A6 		MOVWF	EEAddrTemp
00104 007E 3041 		MOVLW	FirstRAMParam
00105 007F 0084 		MOVWF	FSR0L
00106 0080 0185 		CLRF	FSR0H
00107 0081 20C7 	CopyToRam_L1	CALL	EERead
00108 0082 001A 		movwi	FSR0++
00109 0083 0AA6 		INCF	EEAddrTemp,F
00110 0084 305C 		MOVLW	LastRAMParam+1
00111 0085 0204 		SUBWF	FSR0L,W
00112 0086 		SKPZ
00112 0086 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
SerialServo.asm                                                       Page: 11
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00113 0087 33F9 		BRA	CopyToRam_L1
00114 0088 0008 		RETURN
00115 0089 	;
00116 0089 	;===========================================================================
00117 0089 	; copy ram to param memory
00118 0089 	;
00119 0089 3000 	SaveParams	MOVLW	nvFirstParamByte
00120 008A 00A6 		MOVWF	EEAddrTemp
00121 008B 3041 		MOVLW	FirstRAMParam
00122 008C 0084 		MOVWF	FSR0L
00123 008D 0185 		CLRF	FSR0H
00124 008E 0012 	SaveParams_L1	moviw	FSR0++
00125 008F 00A7 		MOVWF	EEDataTemp
00126 0090 20D1 		CALL	EEWrite
00127 0091 0AA6 		INCF	EEAddrTemp,F
00128 0092 305C 		MOVLW	LastRAMParam+1	;last byte
00129 0093 0204 		SUBWF	FSR0L,W
00130 0094 		SKPZ
00130 0094 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00131 0095 33F8 		BRA	SaveParams_L1
00132 0096 0008 		RETURN
00133 0097 	;
00134 0097 		endif
00135 0097 	;=====================================================================================================
00136 0097 	;=========================================================================================================
00137 0097 	; Decrement routine for 16 bit timers
00138 0097 	; Set FSR0H before calling these routines.
00139 0097 	;
00140 0097 302F 	DecTimer4	movlw	Timer4Hi
00141 0098 3205 		bra	DecTimer
00142 0099 302D 	DecTimer3	movlw	Timer3Hi
00143 009A 3203 		bra	DecTimer
00144 009B 302B 	DecTimer2	movlw	Timer2Hi
00145 009C 3201 		bra	DecTimer
00146 009D 3029 	DecTimer1	movlw	Timer1Hi
00147 009E 	;DecTimer
00148 009E 	; entry: FSR=Timer(n)Hi
00149 009E 0084 	DecTimer	MOVWF	FSR0L
00150 009F 3000 		movlw	High Timer4Hi
00151 00A0 0085 		movwf	FSR0H
00152 00A1 0013 		MOVIW	FSR0--	;TimerNHi
00153 00A2 0400 		IORWF	INDF0,W	;TimerNLo
00154 00A3 		SKPNZ
00154 00A3 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00155 00A4 0008 		RETURN
00156 00A5 3001 		MOVLW	0x01
00157 00A6 0280 		SUBWF	INDF0,F	;TimerNLo
00158 00A7 0A84 		INCF	FSR0L,F
00159 00A8 0103 		CLRW
00160 00A9 3B80 		SUBWFB	INDF0,F	;TimerNHi
00161 00AA 0008 		RETURN
00162 00AB 	;
00163 00AB 	;==============================================================================================
00164 00AB 	; Test for 16 bit timers = zero
00165 00AB 	;If Timer is zero return Z flag,1 else Z=0
00166 00AB 	;
00167 00AB 0020 	TestT4_Zero	movlb	0
00168 00AC 082E 		movf	Timer4Lo,W
00169 00AD 042F 		iorwf	Timer4Hi,W
00170 00AE 0008 		return
00171 00AF 	;
00172 00AF 0020 	TestT3_Zero	movlb	0
00173 00B0 082C 		movf	Timer3Lo,W
00174 00B1 042D 		iorwf	Timer3Hi,W
00175 00B2 0008 		return
00176 00B3 	;
00177 00B3 0020 	TestT2_Zero	movlb	0
00178 00B4 082A 		movf	Timer2Lo,W
00179 00B5 042B 		iorwf	Timer2Hi,W
00180 00B6 0008 		return
00181 00B7 	;
00182 00B7 0020 	TestT1_Zero	movlb	0
00183 00B8 0828 		movf	Timer1Lo,W
00184 00B9 0429 		iorwf	Timer1Hi,W
00185 00BA 0008 		return	
00186 00BB 	;
00187 00BB 		if oldCode
00203 00BB 		endif
00204 00BB 	;======================================================================================
00205 00BB 	;Delay uS    1 cycle = .125uS, 32MHz clock version
00206 00BB 	; RAM used: Param77
00207 00BB 	; Calls:(0) none
00208 00BB 	;
00209 00BB 3005 	Delay10uS	MOVLW	0x05	;(2*3+5)/2=10
00210 00BC 3203 		bra	DelayWuS
00211 00BD 3041 	Delay100uS	MOVLW	d'65'	;(28*3+5)/2=100
00212 00BE 3201 		bra	DelayWuS
00213 00BF 3019 	Delay40uS	MOVLW	d'25'	;(11*3+5)=40
00214 00C0 00F7 	DelayWuS	MOVWF	Param77
00215 00C1 0000 	DelayWuS_Loop	nop
00216 00C2 0000 		nop
00217 00C3 0BF7 		DECFSZ	Param77,F
00218 00C4 33FC 		bra	DelayWuS_Loop
00219 00C5 0008 		RETURN
00220 00C6 	;==============================================================================================
00221 00C6 	; Read EEPROM
00222 00C6 	; entry: EEPROM address to read in W
00223 00C6 	;        Bank 0 selected
00224 00C6 	; exit: W=EEDATA, Bank 0 selected
SerialServo.asm                                                       Page: 12
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00225 00C6 	;
00226 00C6 00A6 	EEReadW	movwf	EEAddrTemp
00227 00C7 	;
00228 00C7 	;==============================================================================================
00229 00C7 	; Read EEPROM
00230 00C7 	; entry: EEPROM address to read in EEAddrTemp
00231 00C7 	;        Bank 0 selected
00232 00C7 	; exit: W=EEDATA, Bank 0 selected
00233 00C7 	;
00234 00C7 0826 	EERead	movf	EEAddrTemp,W
00235 00C8 0023 		MOVLB	0x03	;Bank 3
00236 00C9 0091 		movwf	EEADR	;Address to read
00237 00CA 1315 		bcf	EECON1,CFGS	;not config mem
00238 00CB 1395 		bcf	EECON1,EEPGD	;Data memory
00239 00CC 1415 		bsf	EECON1,RD
00240 00CD 0813 		movf	EEDAT,W	;W=EEDAT
00241 00CE 0020 		MOVLB	0x00	;Bank 0
00242 00CF 0008 		return
00243 00D0 	;
00244 00D0 	;==============================================================================================
00245 00D0 	; Write EEPROM
00246 00D0 	; entry: EEPROM address to write in W
00247 00D0 	;        EEPROM data to write in EEDataTemp
00248 00D0 	;        Bank 0 selected
00249 00D0 	; exit: Bank 0 selected
00250 00D0 	;
00251 00D0 00A6 	EEWriteW	movwf	EEAddrTemp
00252 00D1 	;
00253 00D1 	;==============================================================================================
00254 00D1 	; Write EEPROM
00255 00D1 	; entry: EEPROM address to write in EEAdrTemp
00256 00D1 	;        EEPROM data to write in EEDataTemp
00257 00D1 	;        Bank 0 selected
00258 00D1 	; exit: Bank 0 selected
00259 00D1 	;
00260 00D1 0826 	EEWrite	MOVF	EEAddrTemp,W
00261 00D2 0023 		MOVLB	0x03	;Bank 3
00262 00D3 0091 		movwf	EEADR	;Address to write
00263 00D4 0020 		movlb	0x00	; bank 0
00264 00D5 0827 		movf	EEDataTemp,W
00265 00D6 0023 		movlb	0x03
00266 00D7 0093 		movwf	EEDAT
00267 00D8 1315 		bcf	EECON1,CFGS	;not config mem
00268 00D9 1395 		bcf	EECON1,EEPGD	;Data memory
00269 00DA 1515 		bsf	EECON1,WREN
00270 00DB 138B 		bcf	INTCON,GIE	;Disale Ints
00271 00DC 1B8B 		btfsc	INTCON,GIE
00272 00DD 33FD 		bra	$-2
00273 00DE 3055 		movlw	0x55
00274 00DF 0096 		movwf	EECON2	;write 55
00275 00E0 30AA 		movlw	0xAA
00276 00E1 0096 		movwf	EECON2	;write AA
00277 00E2 1495 		bsf	EECON1,WR
00278 00E3 1895 	EEWriteLoop	btfsc	EECON1,WR	
00279 00E4 33FE 		bra	EEWriteLoop
00280 00E5 1115 		bcf	EECON1,WREN
00281 00E6 178B 		bsf	INTCON,GIE
00282 00E7 0020 		MOVLB	0x00	;Bank 0
00283 00E8 0008 		return
00284 00E9 	;
00285 00E9 	;	
00286 00E9 	;=========================================================================================
00287 00E9 	;=========================================================================================
00288 00E9 	;
00289 00E9 	;
00290 00E9 	;
00291 00E9 	;
00805 00E9 		include <SerBuff1938.inc>
00001 00E9 	;=========================================================================================
00002 00E9 	;
00003 00E9 	;    Filename:      SerBuff.inc
00004 00E9 	;    Date:          5/24/2018                                    
00005 00E9 	;    File Version:  1.0.5
00006 00E9 	;
00007 00E9 	;    Author:        David M. Flynn
00008 00E9 	;    Company:       Oxford V.U.E., Inc.
00009 00E9 	;    E-Mail:        dflynn@oxfordvue.com
00010 00E9 	;
00011 00E9 	;=========================================================================================
00012 00E9 	;=========================================================================================
00013 00E9 	; Notes:
00014 00E9 	;
00015 00E9 	; History:
00016 00E9 	; 1.0.5    5/24/2018   Added GetSerInBytes.
00017 00E9 	; 1.0.4    5/23/2018	Added FlushInBuff.
00018 00E9 	; 1.0.3    12/15/2015	Optimized some code to be segment independent.
00019 00E9 	; 1.0.2    10/23/2015	Modified for 'F1938
00020 00E9 	; 1.0.1    12/6/2013	Modified for 'F1847
00021 00E9 	; 1.0      5/25/2008	First Rev'd version
00022 00E9 	;
00023 00E9 	;=========================================================================================
00024 00E9 	; Bank0 Variables:
00025 00E9 	;
00026 00E9 	;	cblock	0x20
00027 00E9 	;	TXByte		;Next byte to send
00028 00E9 	;	RXByte		;Last byte received
00029 00E9 	;	SerFlags
00030 00E9 	;	endc
00031 00E9 	;
SerialServo.asm                                                       Page: 13
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00032 00E9 	;#Define	DataReceivedFlag	SerFlags,1
00033 00E9 	;#Define	DataSentFlag	SerFlags,2
00034 00E9 	;
00035 00E9 	; Bank2 Variables:
00036 00E9 	;#Define	Ser_Buff_Bank	2
00037 00E9 	;	cblock	0x120
00038 00E9 	;	Ser_In_Bytes		;Bytes in Ser_In_Buff
00039 00E9 	;	Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00040 00E9 	;	Ser_In_InPtr
00041 00E9 	;	Ser_In_OutPtr
00042 00E9 	;	Ser_Out_InPtr
00043 00E9 	;	Ser_Out_OutPtr
00044 00E9 	;	Ser_In_Buff:20
00045 00E9 	;	Ser_Out_Buff:20
00046 00E9 	;	endc
00047 00E9 	;
00048 00E9 	;=========================================================================================
00049 00E9 	; Routines	(Bank In/Bank Out)
00050 00E9 	;
00051 00E9 	; TX_TheByte	(0+0) Send one byte to UART
00052 00E9 	; RX_TheByte	(0+0) Receive one byte from UART
00053 00E9 	; StoreSerIn	(X/0) Put the byte in W into the serial input buffer, FSR0
00054 00E9 	; GetSerIn	(X/0) Get a byte from the serial input buffer, FSR0
00055 00E9 	; FlushInBuff	(X/0) Flush the serial incoming buffer.
00056 00E9 	; GetSerInBytes	(X/0) Get the number of bytes in the serial input buffer
00057 00E9 	; GetSerOutBytes	(X/0) Get the number of bytes in the serial ouput buffer
00058 00E9 	; StoreSerOut	(X/0) Put the byte in W into the serial output buffer, FSR0
00059 00E9 	; POP_SerOut	(X/0) Remove the last char stored in the output buffer
00060 00E9 	; GetSerOut	(X/0) Get a byte from the serial Output buffer, FSR0
00061 00E9 	;	       W=Byte, Param78:0=ValidFlag
00062 00E9 	;=========================================================================================
00063 00E9 	;=========================================================================================
00064 00E9 	; *** Put in main loop ***
00065 00E9 	;
00066 00E9 	; Handle Serial Communications
00067 00E9 	;	BTFSC	PIR1,TXIF	;TX done?
00068 00E9 	;	CALL	TX_TheByte	; Yes
00069 00E9 	;
00070 00E9 	; move any serial data received into the 32 byte input buffer
00071 00E9 	;	BTFSS	DataReceivedFlag
00072 00E9 	;	BRA	ML_Ser_Out
00073 00E9 	;	MOVF	RXByte,W
00074 00E9 	;	BCF	DataReceivedFlag
00075 00E9 	;	CALL	StoreSerIn
00076 00E9 	;
00077 00E9 	;=========================================================================================
00078 00E9 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00079 00E9 	;
00080 00E9 	;ML_Ser_Out	BTFSS	DataSentFlag
00081 00E9 	;	BRA	ML_Ser_End
00082 00E9 	;	CALL	GetSerOut
00083 00E9 	;	BTFSS	Param78,0
00084 00E9 	;	BRA	ML_Ser_End
00085 00E9 	;	MOVWF	TXByte
00086 00E9 	;	BCF	DataSentFlag
00087 00E9 	;ML_Ser_End
00088 00E9 	;
00089 00E9 	;=========================================================================================
00090 00E9 	; *** Put in Init section ***
00091 00E9 	;BAUDCON_Value	EQU	b'00001000'
00092 00E9 	;TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, High speed
00093 00E9 	;RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00094 00E9 	;; 8MHz clock low speed (BRGH=0,BRG16=1)
00095 00E9 	;;Baud_300	EQU	d'1666'	;0.299, -0.02%
00096 00E9 	;;Baud_1200	EQU	d'416'	;1.199, -0.08%
00097 00E9 	;;Baud_2400	EQU	d'207'	;2.404, +0.16%
00098 00E9 	;;Baud_9600	EQU	d'51'	;9.615, +0.16%
00099 00E9 	;; 8MHz clock high speed (BRGH=1,BRG16=1)
00100 00E9 	;Baud_300	EQU	d'6666'	;0.299, -0.02%
00101 00E9 	;Baud_1200	EQU	d'1666'	;1.199, -0.08%
00102 00E9 	;Baud_2400	EQU	d'832'	;2.404, +0.16%
00103 00E9 	;Baud_9600	EQU	d'207'	;9.615, +0.16%
00104 00E9 	;Baud_19_2	EQU	d'103'	;19.23k, +0.16
00105 00E9 	;Baud_57_6	EQU	d'34'	;57.14k, -0.79
00106 00E9 	;BaudRate	EQU	Baud_9600
00107 00E9 	;-------------
00108 00E9 	;
00109 00E9 	; setup serial I/O
00110 00E9 	;	movlb	0x03	; bank 3
00111 00E9 	;	MOVLW	TXSTA_Value
00112 00E9 	;	MOVWF	TXSTA
00113 00E9 	;	MOVLW	low BaudRate
00114 00E9 	;	MOVWF	SPBRGL
00115 00E9 	;	MOVLW	high BaudRate
00116 00E9 	;	MOVWF	SPBRGH
00117 00E9 	;	MOVLW	RCSTA_Value
00118 00E9 	;	MOVWF	RCSTA
00119 00E9 	;
00120 00E9 	;	movlb	0x01	; bank 1
00121 00E9 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00122 00E9 	;	movlb	0x00	; bank 0
00123 00E9 	;	BSF	INTCON,PEIE	;Peripheral IRQ Enable
00124 00E9 	;	BSF	INTCON,GIE
00125 00E9 	;
00126 00E9 	;=========================================================================================
00127 00E9 	; *** Put in ISR ***
00128 00E9 	;-----------------------------------------------------------------------------------------
00129 00E9 	;AUSART Serial ISR
00130 00E9 	;
SerialServo.asm                                                       Page: 14
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00131 00E9 	;IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00132 00E9 	;	BRA	IRQ_Ser_End
00133 00E9 	;	CALL	RX_TheByte
00134 00E9 	;
00135 00E9 	;IRQ_Ser_End
00136 00E9 	;
00137 00E9 	;=========================================================================================
00138 00E9 	; Send one byte
00139 00E9 	; Entry: Bank0
00140 00E9 	; Exit: Bank0
00141 00E9 	;
00142 00E9 	;
00143 00E9 1932 	TX_TheByte	BTFSC	DataSentFlag
00144 00EA 0008 		RETURN
00145 00EB 0830 		MOVF	TXByte,W	
00146 00EC 0023  a		MOVLB	TXREG	;banksel
00145 00ED 		BANKSEL	TXREG
00147 00ED 009A 		MOVWF	TXREG
00148 00EE 0020 		MOVLB	0
00149 00EF 1532 		BSF	DataSentFlag
00150 00F0 0008 		RETURN
00151 00F1 	;
00152 00F1 	;=========================================================================================
00153 00F1 	;
00154 00F1 	RX_TheByte:
00155 00F1 0023  a		MOVLB	RCSTA	;banksel
00154 00F2 		BANKSEL	RCSTA	; bank 3
00156 00F2 081D 		MOVF	RCSTA,W
00157 00F3 3906 		ANDLW	0x06
00158 00F4 		SKPZ		;Frame or Overrun Err?
00158 00F4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00159 00F5 3205 		BRA	RX_TheByte_Err	; yes
00160 00F6 0819 		MOVF	RCREG,W
00161 00F7 	;
00162 00F7 0020 		movlb	0x00	; bank 0
00163 00F8 00B1 		MOVWF	RXByte
00164 00F9 14B2 		BSF	DataReceivedFlag
00165 00FA 0008 		RETURN
00166 00FB 	;
00167 00FB 0819 	RX_TheByte_Err	MOVF	RCREG,W	;bad byte so drop it
00168 00FC 01B1 		CLRF	RXByte
00169 00FD 121D 		BCF	RCSTA,CREN
00170 00FE 111D 		BCF	RCSTA,FERR
00171 00FF 109D 		BCF	RCSTA,OERR
00172 0100 161D 		BSF	RCSTA,CREN
00173 0101 0020 		movlb	0x00
00174 0102 0008 		RETURN
00175 0103 	;
00176 0103 	;=========================================================================================
00177 0103 	;=========================================================================================
00178 0103 	; Put the byte in W into the serial input buffer
00179 0103 	;
00180 0103 	; Entry: W = byte to store
00181 0103 	; Exit: none
00182 0103 	; Ram Used: Param78, FSR
00183 0103 	;
00184 0103 00F8 	StoreSerIn	MOVWF	Param78
00185 0104 0022 		MOVLB	Ser_Buff_Bank
00186 0105 0AA0 		INCF	Ser_In_Bytes,F
00187 0106 	;	
00188 0106 0822 		MOVF	Ser_In_InPtr,W
00189 0107 391F 		ANDLW	0x1F
00190 0108 0AA2 		INCF	Ser_In_InPtr,F
00191 0109 3E26 		ADDLW	low Ser_In_Buff
00192 010A 0084 		MOVWF	FSR0
00193 010B 3001 		MOVLW	high Ser_In_Buff
00194 010C 0085 		MOVWF	FSR0H
00195 010D 0878 		MOVF	Param78,W
00196 010E 0080 		MOVWF	INDF0
00197 010F 0020 		MOVLB	0x00
00198 0110 0008 		RETURN
00199 0111 	;
00200 0111 	;=========================================================================================
00201 0111 	; Get a byte from the serial input buffer
00202 0111 	;
00203 0111 	; Entry: none
00204 0111 	; Exit: W=byte from buffer, Param78,0=valid
00205 0111 	;
00206 0111 0022 	GetSerIn	MOVLB	Ser_Buff_Bank
00207 0112 1078 		BCF	Param78,0	;no data
00208 0113 08A0 		MOVF	Ser_In_Bytes,F
00209 0114 		SKPNZ
00209 0114 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00210 0115 320A 		bra	GetSerIn_End
00211 0116 1478 		BSF	Param78,0
00212 0117 03A0 		DECF	Ser_In_Bytes,F
00213 0118 0823 		MOVF	Ser_In_OutPtr,W
00214 0119 391F 		ANDLW	0x1F
00215 011A 0AA3 		INCF	Ser_In_OutPtr,F
00216 011B 3E26 		ADDLW	low Ser_In_Buff
00217 011C 0084 		MOVWF	FSR0L
00218 011D 3001 		MOVLW	high Ser_In_Buff
00219 011E 0085 		MOVWF	FSR0H
00220 011F 0800 		MOVF	INDF0,W
00221 0120 0020 	GetSerIn_End	movlb	0
00222 0121 0008 		return
00223 0122 	;
00224 0122 	;=========================================================================================
00225 0122 	; Flush the serial incoming buffer
SerialServo.asm                                                       Page: 15
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00226 0122 	; Entry: none
00227 0122 	; Exit: bank 0
00228 0122 	;
00229 0122 0022 	FlushInBuff	movlb	Ser_Buff_Bank
00230 0123 01A0 		clrf	Ser_In_Bytes
00231 0124 01A3 		clrf	Ser_In_OutPtr
00232 0125 01A2 		clrf	Ser_In_InPtr
00233 0126 0020 		movlb	0
00234 0127 0008 		return
00235 0128 	;
00236 0128 	;=========================================================================================
00237 0128 	; Get the number of bytes in the serial input buffer
00238 0128 	;
00239 0128 	; Entry: none
00240 0128 	; Exit: W=bytes in buffer, Z
00241 0128 	;
00242 0128 0022 	GetSerInBytes	MOVLB	Ser_Buff_Bank
00243 0129 0820 		MOVF	Ser_In_Bytes,W
00244 012A 0020 		movlb	0
00245 012B 0008 		return
00246 012C 	;
00247 012C 	;=========================================================================================
00248 012C 	; Get the number of bytes in the serial ouput buffer
00249 012C 	;
00250 012C 	; Entry: none
00251 012C 	; Exit: W=bytes in buffer, Z
00252 012C 	;
00253 012C 0022 	GetSerOutBytes	MOVLB	Ser_Buff_Bank
00254 012D 0821 		MOVF	Ser_Out_Bytes,W
00255 012E 0020 		movlb	0
00256 012F 0008 		return
00257 0130 	;
00258 0130 	;=========================================================================================
00259 0130 	; Put the byte in W into the serial output buffer
00260 0130 	;
00261 0130 	; Entry: W = byte to store
00262 0130 	; Exit: Param78 & W = byte stored, Bank 0
00263 0130 	; Ram used: Param78, FSR0
00264 0130 	; Calls: (0) none
00265 0130 	;
00266 0130 00F8 	StoreSerOut	MOVWF	Param78
00267 0131 0022 		MOVLB	Ser_Buff_Bank
00268 0132 0AA1 		INCF	Ser_Out_Bytes,F
00269 0133 	;	
00270 0133 0824 		MOVF	Ser_Out_InPtr,W
00271 0134 391F 		ANDLW	0x1F
00272 0135 0AA4 		INCF	Ser_Out_InPtr,F
00273 0136 3E46 		ADDLW	low Ser_Out_Buff
00274 0137 0084 		MOVWF	FSR0
00275 0138 3001 		MOVLW	high Ser_In_Buff
00276 0139 0085 		MOVWF	FSR0H
00277 013A 0878 		MOVF	Param78,W
00278 013B 0080 		MOVWF	INDF0
00279 013C 0020 		movlb	0
00280 013D 0008 		return
00281 013E 	;
00282 013E 	;=========================================================================================
00283 013E 	; Remove the last char stored in the output buffer
00284 013E 	;
00285 013E 0022 	POP_SerOut	MOVLB	Ser_Buff_Bank
00286 013F 08A1 		MOVF	Ser_Out_Bytes,F
00287 0140 		SKPNZ
00287 0140 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00288 0141 3202 		bra	POP_SerOut_End
00289 0142 03A1 		DECF	Ser_Out_Bytes,F
00290 0143 03A4 		DECF	Ser_Out_InPtr,F
00291 0144 0020 	POP_SerOut_End	movlb	0
00292 0145 0008 		return
00293 0146 	;
00294 0146 	;=========================================================================================
00295 0146 	; Get a byte from the serial Output buffer
00296 0146 	;
00297 0146 	; Entry: none
00298 0146 	; Exit: W=byte from buffer, Param78,0=valid
00299 0146 	;
00300 0146 0022 	GetSerOut	MOVLB	Ser_Buff_Bank
00301 0147 1078 		BCF	Param78,0	;no data
00302 0148 08A1 		MOVF	Ser_Out_Bytes,F
00303 0149 		SKPNZ
00303 0149 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00304 014A 320A 		bra	GetSerOut_End
00305 014B 1478 		BSF	Param78,0
00306 014C 03A1 		DECF	Ser_Out_Bytes,F
00307 014D 0825 		MOVF	Ser_Out_OutPtr,W
00308 014E 391F 		ANDLW	0x1F
00309 014F 0AA5 		INCF	Ser_Out_OutPtr,F
00310 0150 3E46 		ADDLW	low Ser_Out_Buff
00311 0151 0084 		MOVWF	FSR0L
00312 0152 3001 		MOVLW	high Ser_In_Buff
00313 0153 0085 		MOVWF	FSR0H
00314 0154 0800 		MOVF	INDF0,W
00315 0155 0020 	GetSerOut_End	movlb	0
00316 0156 0008 		return
00317 0157 	;
00318 0157 	;=========================================================================================
00319 0157 	;
00320 0157 	;
00321 0157 	;
00322 0157 	;
SerialServo.asm                                                       Page: 16
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00323 0157 	;
00324 0157 	;
00325 0157 	;
00326 0157 	;
00327 0157 	;
00328 0157 	;
00329 0157 	;
00330 0157 	;
00331 0157 	;
00332 0157 	;
00333 0157 	;
00334 0157 	;
00335 0157 	;
00336 0157 	;
00337 0157 	;
00338 0157 	;
00806 0157 		include <RS232_Parse.inc>
00001 0157 	;=========================================================================================
00002 0157 	;
00003 0157 	;    Filename:      RS232_Parse.inc
00004 0157 	;    Date:          5/25/2018
00005 0157 	;    File Version:  1.0d5
00006 0157 	;
00007 0157 	;    Author:        David M. Flynn
00008 0157 	;    Company:       Oxford V.U.E., Inc.
00009 0157 	;    E-Mail:        dflynn@oxfordvue.com
00010 0157 	;
00011 0157 	;=========================================================================================
00012 0157 	; Routines:
00013 0157 	;
00014 0157 	; RS232_Parse	Call from main loop
00015 0157 	; RS232_ClearTXData	Clear the TX data, FSR1
00016 0157 	; RS232_Send	Send the data at TX_data, FSR0, FSR1
00017 0157 	;
00018 0157 	;=========================================================================================
00019 0157 	; Notes:
00020 0157 	;
00021 0157 	; History:
00022 0157 	; 1.0b5  5/25/2018	RS232_MasterAddr, RS232_SlaveAddr now in ram
00023 0157 	; 1.0d4  5/18/2018	Added RS232_ClearTXData, RS232_Send.
00024 0157 	; 1.0d3  5/17/2018	Used Timer1Lo for RXTimeout.
00025 0157 	; 1.0d2  4/26/2018	Comments, used in robot arm project.
00026 0157 	; 1.0d1  1/12/2016	Modified for I2C to RS-232 8 byte packets.
00027 0157 	; 1.0d1  11/9/2015	Adapted for QD Tester
00028 0157 	; 1.0    12/6/2013	First Rev'd version
00029 0157 	;
00030 0157 	; RS232_Parse	(X/0) Parse any bytes received by the serial port
00031 0157 	; Packet format: (FF FF) SA0 (SA1) DA0 (DA1) D0 D1 D2 D3 D4 D5 D6 D7 (CS)
00032 0157 	;  FF = Sync byte, SAn = Source Address, DA = Destination Address,
00033 0157 	;       Dn = Data, CS Check Sum (xor of Address and Data bytes)
00034 0157 	;  SA must be RS232_RAddr ( the boss )
00035 0157 	;  DA must be RS232_MyAddr ( this program )
00036 0157 	;  If the checksum matches put the data bytes in the RX_Data buffer,
00037 0157 	;   set RXDataValidFlag and RXDataIsNew.
00038 0157 	;=========================================================================================
00039 0157 	;	constant RP_LongAddr=1		;16 bit addresses
00040 0157 	; default to a 6 byte packet SA DA D0 D1 D2 D3
00041 0157 	;
00042 0157 		ifndef UseRS232SyncBytes
00044 0157 		endif
00045 0157 	;
00046 0157 		ifndef UseRS232SendSyncBytes
00048 0157 		endif
00049 0157 	;
00050 0157 		ifndef RP_LongAddr
00052 0157 		endif
00053 0157 	;
00054 0157 		ifndef RP_DataBytes
00056 0157 		endif
00057 0157 	;
00058 0157 		ifndef UseRS232Chksum
00060 0157 		endif
00061 0157 	;
00062 0157 		constant RXTimeout=5		;50 mS max between incoming bytes
00063 0157 	;=========================================================================================
00064 0157 	; Bank0 variable used by RS232_Parse:
00065 0157 	;
00066 0157 	;	cblock
00067 0157 	;	RS232_MasterAddr
00068 0157 	;	RS232_SlaveAddr
00069 0157 	;	endc
00070 0157 	;
00071 0157 	; Bank1 variable used by RS232_Parse:
00072 0157 	;
00073 0157 	;	cblock
00074 0157 	;	RX_ParseFlags
00075 0157 	;	RX_Flags
00076 0157 	;	RX_DataCount
00077 0157 	;	RX_CSUM
00078 0157 	;	RX_TempData:RP_DataBytes
00079 0157 	;	RX_Data:RP_DataBytes
00080 0157 	;	TX_Data:RP_DataBytes
00081 0157 	;	endc
00082 0157 	;RX_ParseFlags Bits
00083 0157 00A0 	#Define	SyncByte1RXd	RX_ParseFlags,0
00084 0157 00A0 	#Define	SyncByte2RXd	RX_ParseFlags,1
00085 0157 00A0 	#Define	SourceAddLoRXd	RX_ParseFlags,2
00086 0157 00A0 	#Define	SourceAddHiRXd	RX_ParseFlags,3
00087 0157 00A0 	#Define	DestAddLoRXd	RX_ParseFlags,4
SerialServo.asm                                                       Page: 17
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00088 0157 00A0 	#Define	DestAddHiRXd	RX_ParseFlags,5
00089 0157 00A0 	#Define	AllDataRXd	RX_ParseFlags,6
00090 0157 	;
00091 0157 	;RX_Flags Bits
00092 0157 00A1 	#Define	RXDataValidFlag	RX_Flags,0
00093 0157 00A1 	#Define	RXDataIsNew	RX_Flags,1
00094 0157 00A1 	#Define	RXSrcIsMaster	RX_Flags,2
00095 0157 00A1 	#Define	RXDstIsMe	RX_Flags,3
00096 0157 	;
00097 0157 	;
00098 0157 	; *** put in main loop
00099 0157 	;	CALL	RS232_Parse
00100 0157 	; if RXDataValidFlag is set data may be used
00101 0157 	;
00102 0157 	;=========================================================================================
00103 0157 	; Parse any bytes received by the serial port
00104 0157 	;
00105 0157 	; Receive 0xFF,0xFF,SA0,(SA1),DA0,(DA1),Cmd,Data0,Data1,Data2,CS
00106 0157 	;
00107 0157 	;
00108 0157 	; Entry: none
00109 0157 	; Exit: none
00110 0157 	; Ram Used: Param78, FSR
00111 0157 	; Calls (1+0): GetSerIn
00112 0157 	;
00113 0157 0021 	RS232_Parse	movlb	0x01	;bank 1
00114 0158 08A0 		movf	RX_ParseFlags,F
00115 0159 		SKPNZ		;Receive in process?
00115 0159 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00116 015A 3207 		bra	RS232_Parse_Byte	; no
00117 015B 	;
00118 015B 0020 		movlb	0	;bank 0
00119 015C 08A8 		movf	Timer1Lo,F
00120 015D 		SKPZ		;Timed out?
00120 015D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00121 015E 3203 		bra	RS232_Parse_Byte	; no
00122 015F 	;timed out
00123 015F 15B8 		bsf	ssRX_Timeout
00124 0160 0021 		movlb	0x01	;bank 1
00125 0161 01A0 		clrf	RX_ParseFlags
00126 0162 	;
00127 0162 2111 	RS232_Parse_Byte	CALL	GetSerIn
00128 0163 1C78 		BTFSS	Param78,0	;Got a byte?
00129 0164 0008 		RETURN		; No
00130 0165 	;
00131 0165 00F8 		MOVWF	Param78	;Data Byte RXd
00132 0166 3005 		movlw	RXTimeout	;Reset time-out timer
00133 0167 00A8 		movwf	Timer1Lo
00134 0168 	; Command inturpreter
00135 0168 		if UseRS232SyncBytes
00136 0168 	;
00137 0168 0021 		movlb	0x01	;bank 1
00138 0169 08A0 		MOVF	RX_ParseFlags,F
00139 016A 		SKPZ		;Beginning new packet?
00139 016A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00140 016B 3205 		BRA	RS232_Parse_Sync2	; No
00141 016C 30DD 		MOVLW	kRS232SyncByteValue
00142 016D 0278 		SUBWF	Param78,W
00143 016E 		SKPNZ		;Sync byte OK?
00143 016E 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00144 016F 1420 		BSF	SyncByte1RXd	; Yes
00145 0170 3218 		bra	RS232_Parse_Rtn
00146 0171 	;
00147 0171 18A0 	RS232_Parse_Sync2	btfsc	SyncByte2RXd
00148 0172 3206 		bra	RS232_Parse_SALo
00149 0173 30DD 		movlw	kRS232SyncByteValue
00150 0174 0278 		subwf	Param78,W
00151 0175 		SKPZ
00151 0175 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00152 0176 29C5 		goto	RS232_Parse_Error
00153 0177 14A0 		bsf	SyncByte2RXd
00154 0178 3210 		bra	RS232_Parse_Rtn
00155 0179 	;
00156 0179 		endif
00157 0179 	;
00158 0179 	; LSB of Source Address
00159 0179 0021 	RS232_Parse_SALo	movlb	0x01	;bank 1
00160 017A 1920 		btfsc	SourceAddLoRXd
00161 017B 320F 		bra	RS232_Parse_SALo_end
00162 017C 	;
00163 017C 01A3 		clrf	RX_CSUM
00164 017D 01A2 		clrf	RX_DataCount
00165 017E 1521 		bsf	RXSrcIsMaster
00166 017F 0020 		movlb	0
00167 0180 0852 		movf	RS232_MasterAddr,W
00168 0181 0021 		movlb	1
00169 0182 0278 		subwf	Param78,W
00170 0183 		SKPZ
00170 0183 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00171 0184 1121 		bcf	RXSrcIsMaster
00172 0185 1520 		bsf	SourceAddLoRXd
00173 0186 0878 		movf	Param78,W
00174 0187 00A4 		movwf	RX_SrcAdd
00175 0188 06A3 		xorwf	RX_CSUM,F
00176 0189 0020 	RS232_Parse_Rtn	movlb	0x00	;bank 0
00177 018A 0008 		return
00178 018B 	RS232_Parse_SALo_end:
00179 018B 	;
00180 018B 	; MSB of Source Address
SerialServo.asm                                                       Page: 18
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00181 018B 		if RP_LongAddr
00196 018B 		endif
00197 018B 	;
00198 018B 	; LSB of Destination Address
00199 018B 1A20 	RS232_Parse_DALo	btfsc	DestAddLoRXd
00200 018C 320C 		bra	RS232_Parse_DALo_End
00201 018D 15A1 		bsf	RXDstIsMe
00202 018E 0020 		movlb	0
00203 018F 0853 		movf	RS232_SlaveAddr,W
00204 0190 0021 		movlb	1
00205 0191 0278 		subwf	Param78,W
00206 0192 		SKPZ
00206 0192 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00207 0193 11A1 		bcf	RXDstIsMe
00208 0194 1620 		bsf	DestAddLoRXd
00209 0195 0878 		movf	Param78,W
00210 0196 00A5 		movwf	RX_DstAdd
00211 0197 06A3 		xorwf	RX_CSUM,F
00212 0198 33F0 		bra	RS232_Parse_Rtn
00213 0199 	RS232_Parse_DALo_End:
00214 0199 	;
00215 0199 	; MSB of Destination Address
00216 0199 		if RP_LongAddr
00231 0199 		endif
00232 0199 	;
00233 0199 1B20 	RS232_Parse_Data	btfsc	AllDataRXd
00234 019A 320F 		bra	RS232_Parse_Data_end
00235 019B 0822 		movf	RX_DataCount,W
00236 019C 3EA6 		addlw	low RX_TempData
00237 019D 0084 		movwf	FSR0L
00238 019E 3000 		movlw	high RX_TempData
00239 019F 0085 		movwf	FSR0H
00240 01A0 0878 		movf	Param78,W
00241 01A1 06A3 		xorwf	RX_CSUM,F
00242 01A2 0080 		movwf	INDF0
00243 01A3 0AA2 		incf	RX_DataCount,F
00244 01A4 3004 		movlw	RP_DataBytes
00245 01A5 0222 		subwf	RX_DataCount,W
00246 01A6 		SKPZ
00246 01A6 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00247 01A7 33E1 		bra	RS232_Parse_Rtn
00248 01A8 1720 		bsf	AllDataRXd
00249 01A9 	;
00250 01A9 		if UseRS232Chksum
00251 01A9 33DF 		bra	RS232_Parse_Rtn
00252 01AA 		endif
00253 01AA 	RS232_Parse_Data_end
00254 01AA 	;
00255 01AA 		if UseRS232Chksum
00256 01AA 	; checksum
00257 01AA 0878 		movf	Param78,W
00258 01AB 0223 		subwf	RX_CSUM,W
00259 01AC 		SKPZ		;Checksum matches?
00259 01AC 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00260 01AD 3217 		bra	RS232_Parse_Error	; No
00261 01AE 	;
00262 01AE 		endif
00263 01AE 	;
00264 01AE 30A6 		movlw	low RX_TempData
00265 01AF 0084 		movwf	FSR0L
00266 01B0 3000 		movlw	high RX_TempData
00267 01B1 0085 		movwf	FSR0H
00268 01B2 	;
00269 01B2 30AA 		movlw	low RX_Data
00270 01B3 0086 		movwf	FSR1L
00271 01B4 3000 		movlw	high RX_Data
00272 01B5 0087 		movwf	FSR1H
00273 01B6 	;
00274 01B6 3004 		movlw	RP_DataBytes
00275 01B7 00F8 		movwf	Param78
00276 01B8 0012 	RS232_Parse_L1	moviw	FSR0++
00277 01B9 001E 		movwi	FSR1++
00278 01BA 0BF8 		decfsz	Param78,F
00279 01BB 33FC 		bra	RS232_Parse_L1
00280 01BC 	;
00281 01BC 14A1 		bsf	RXDataIsNew	;good packet rx'd
00282 01BD 1421 		bsf	RXDataValidFlag
00283 01BE 1D21 		btfss	RXSrcIsMaster	;from master?
00284 01BF 1021 		bcf	RXDataValidFlag	; no
00285 01C0 1DA1 		btfss	RXDstIsMe	;to me?
00286 01C1 1021 		bcf	RXDataValidFlag	; no
00287 01C2 	;
00288 01C2 01A0 		clrf	RX_ParseFlags
00289 01C3 0020 		movlb	0x00
00290 01C4 0008 		return
00291 01C5 	;
00292 01C5 	;
00293 01C5 	; We didn't get the sync byte we were expecting so restart the parser
00294 01C5 01A0 	RS232_Parse_Error	CLRF	RX_ParseFlags
00295 01C6 2922 		goto	FlushInBuff
00296 01C7 	;
00297 01C7 	;=========================================================================================
00298 01C7 	; Clear the TX data, unused bytes are sent as 0x00
00299 01C7 	; Entry: none
00300 01C7 	; Exit: Bank 0
00301 01C7 	; Ram used: Param78, FSR1
00302 01C7 	; Calls: none
00303 01C7 3001 	RS232_ClearTXData	movlw	1	;bank 1
00304 01C8 3004 		movlw	RP_DataBytes
SerialServo.asm                                                       Page: 19
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00305 01C9 00F8 		movwf	Param78
00306 01CA 30AE 		movlw	low TX_Data
00307 01CB 0086 		movwf	FSR1L
00308 01CC 3000 		movlw	high TX_Data
00309 01CD 0087 		movwf	FSR1H
00310 01CE 3000 		movlw	0x00
00311 01CF 001E 	RS232_ClearTXData_L1	movwi	FSR1++
00312 01D0 0BF8 		decfsz	Param78,F
00313 01D1 33FD 		bra	RS232_ClearTXData_L1
00314 01D2 0020 		movlb	0x00
00315 01D3 0008 		return
00316 01D4 	;
00317 01D4 	;=========================================================================================
00318 01D4 	; Send a data packet
00319 01D4 	;
00320 01D4 	;Entry: TX_Data = Data to send 
00321 01D4 	;Exit: TX_Data is cleared
00322 01D4 	;Ram used: Param78,Param79,Param7A,FSR0,FSR1
00323 01D4 	;Calls: (1+0) StoreSerOut
00324 01D4 	;
00325 01D4 	RS232_Send:
00326 01D4 	;
00327 01D4 		if UseRS232SendSyncBytes
00334 01D4 		endif
00335 01D4 	;
00336 01D4 0020 		movlb	0x00	;bank 0
00337 01D5 01FA 		clrf	Param7A	;CSum
00338 01D6 0853 		movf	RS232_SlaveAddr,W	;source address
00339 01D7 06FA 		xorwf	Param7A,F
00340 01D8 2130 		call	StoreSerOut
00341 01D9 	;
00342 01D9 		if RP_LongAddr
00346 01D9 		endif
00347 01D9 	;
00348 01D9 0852 		movf	RS232_MasterAddr,W	;destination address
00349 01DA 06FA 		xorwf	Param7A,F
00350 01DB 2130 		call	StoreSerOut
00351 01DC 	;
00352 01DC 		if RP_LongAddr
00356 01DC 		endif
00357 01DC 	;
00358 01DC 0021 		movlb	1	;bank 1
00359 01DD 3004 		movlw	RP_DataBytes
00360 01DE 00F9 		movwf	Param79
00361 01DF 30AE 		movlw	low TX_Data
00362 01E0 0086 		movwf	FSR1L
00363 01E1 3000 		movlw	high TX_Data
00364 01E2 0087 		movwf	FSR1H
00365 01E3 	;
00366 01E3 0016 	RS232_Send_L1	moviw	FSR1++
00367 01E4 06FA 		xorwf	Param7A,F
00368 01E5 2130 		call	StoreSerOut
00369 01E6 0BF9 		decfsz	Param79,F
00370 01E7 33FB 		bra	RS232_Send_L1
00371 01E8 	;
00372 01E8 		if UseRS232Chksum
00373 01E8 087A 		movf	Param7A,W
00374 01E9 2130 		call	StoreSerOut
00375 01EA 		endif
00376 01EA 	;
00377 01EA 29C7 		goto	RS232_ClearTXData
00378 01EB 	;
00379 01EB 	;=========================================================================================
00380 01EB 	;
00381 01EB 	;
00382 01EB 	;
00383 01EB 	;
00384 01EB 	;
00385 01EB 	;
00386 01EB 	;
00387 01EB 	;
00388 01EB 	;
00389 01EB 	;
00390 01EB 	;
00391 01EB 	;
00392 01EB 	;
00393 01EB 	;
00394 01EB 	;
00395 01EB 	;
00396 01EB 	;
00397 01EB 	;
00398 01EB 	;
00399 01EB 	;
00400 01EB 	;
00401 01EB 	;
00402 01EB 	;
00403 01EB 	;
00807 01EB 	;
00808 01EB 	;=========================================================================================
00809 01EB 	;
00810 01EB 	start	mLongCall	InitializeIO
00810 01EB 318B      M		movlp	InitializeIO	                       movlp                  Destination
00810 01EC 23F1      M		call	InitializeIO	                       call                   Destination
00810 01ED 3181      M		movlp	$	                       movlp                  $
00811 01EE 	;
00812 01EE 2438 		CALL	StartServo
00813 01EF 2410 		CALL	ReadAN0_ColdStart
00814 01F0 	;
00815 01F0 	;=========================================================================================
SerialServo.asm                                                       Page: 20
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00816 01F0 	;*****************************************************************************************
00817 01F0 	;=========================================================================================
00818 01F0 0064 	MainLoop	CLRWDT
00819 01F1 	;
00820 01F1 2128 		call	GetSerInBytes
00821 01F2 		SKPZ		;Any data?
00821 01F2 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00822 01F3 2157 		CALL	RS232_Parse	; yes
00823 01F4 	;
00824 01F4 0021 		movlb	1
00825 01F5 1CA1 		btfss	RXDataIsNew
00826 01F6 3203 		bra	ML_1
00827 01F7 		mLongCall	HandleRXData
00827 01F7 3188      M		movlp	HandleRXData	                       movlp                  Destination
00827 01F8 2004      M		call	HandleRXData	                       call                   Destination
00827 01F9 3181      M		movlp	$	                       movlp                  $
00828 01FA 	ML_1:
00829 01FA 	;
00830 01FA 	; Fast blink the system LED is the servo is stopped because of an error
00831 01FA 0020 		MOVLB	0x00
00832 01FB 3064 		MOVLW	LEDTIME
00833 01FC 1938 		btfsc	ssio_OverCurSD
00834 01FD 300A 		movlw	LEDErrorTime
00835 01FE 00A0 		MOVWF	SysLED_Time
00836 01FF 	;
00837 01FF 23E9 		CALL	ReadAN
00838 0200 	;
00839 0200 	; Average AN0
00840 0200 0021  a		MOVLB	Cur_AN0	;banksel
00839 0201 		BankSel	Cur_AN0
00841 0201 1C32 		btfss	NewDataAN0
00842 0202 320B 		bra	No_NewDataAN0
00843 0203 1032 		bcf	NewDataAN0
00844 0204 083F 		movf	OldAN0Value,W
00845 0205 07B5 		addwf	Cur_AN0,F
00846 0206 0840 		movf	OldAN0Value+1,W
00847 0207 3DB6 		addwfc	Cur_AN0+1,F
00848 0208 3636 		lsrf	Cur_AN0+1,W
00849 0209 00B6 		movwf	Cur_AN0+1
00850 020A 00C0 		movwf	OldAN0Value+1
00851 020B 0C35 		rrf	Cur_AN0,W
00852 020C 00B5 		movwf	Cur_AN0
00853 020D 00BF 		movwf	OldAN0Value
00854 020E 	;
00855 020E 	No_NewDataAN0:
00856 020E 		mLongCall	ReadEncoder
00856 020E 318A      M		movlp	ReadEncoder	                       movlp                  Destination
00856 020F 228F      M		call	ReadEncoder	                       call                   Destination
00856 0210 3182      M		movlp	$	                       movlp                  $
00857 0211 	;
00858 0211 23CD 		call	HandleButtons
00859 0212 	;
00860 0212 	;---------------------
00861 0212 	; Handle Serial Communications
00862 0212 1A11 		BTFSC	PIR1,TXIF	;TX done?
00863 0213 20E9 		CALL	TX_TheByte	; Yes
00864 0214 	;
00865 0214 	; move any serial data received into the 32 byte input buffer
00866 0214 1CB2 		BTFSS	DataReceivedFlag
00867 0215 3203 		BRA	ML_Ser_Out
00868 0216 0831 		MOVF	RXByte,W
00869 0217 10B2 		BCF	DataReceivedFlag
00870 0218 2103 		CALL	StoreSerIn
00871 0219 	;
00872 0219 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00873 0219 	;
00874 0219 1D32 	ML_Ser_Out	BTFSS	DataSentFlag
00875 021A 3205 		BRA	ML_Ser_End
00876 021B 2146 		CALL	GetSerOut
00877 021C 1C78 		BTFSS	Param78,0
00878 021D 3202 		BRA	ML_Ser_End
00879 021E 00B0 		MOVWF	TXByte
00880 021F 1132 		BCF	DataSentFlag
00881 0220 	ML_Ser_End:
00882 0220 	;----------------------
00883 0220 	;
00884 0220 0020 		movlb	0x00	;bank 0
00885 0221 0851 		movf	SysMode,W
00886 0222 000B 		brw
00887 0223 2A29 		goto	DoModeZero
00888 0224 2A35 		goto	DoModeOne
00889 0225 2A97 		goto	DoModeTwo	
00890 0226 2AD9 		goto	DoModeThree
00891 0227 2B81 		goto	DoMode4
00892 0228 	;
00893 0228 	ModeReturn:
00894 0228 	;
00895 0228 29F0 		goto	MainLoop
00896 0229 	;=========================================================================================
00897 0229 	;*****************************************************************************************
00898 0229 	;=========================================================================================
00899 0229 	;Simple servo testing
00900 0229 	; copy AN4 value x2 + .1976 to servo value
00901 0229 	;
00902 0229 	DoModeZero:
00903 0229 0021  a		MOVLB	ModeZeroPot	;banksel
00902 022A 		BankSel	ModeZeroPot
00904 022A 3539 		lslf	ModeZeroPot,W
00905 022B 00FC 		movwf	Param7C
SerialServo.asm                                                       Page: 21
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00906 022C 0D3A 		rlf	ModeZeroPot+1,W
00907 022D 00FD 		movwf	Param7D
00908 022E 30B8 		movlw	low .1976
00909 022F 07FC 		addwf	Param7C,F
00910 0230 3007 		movlw	high .1976
00911 0231 3DFD 		addwfc	Param7D,F
00912 0232 	;
00913 0232 2465 		call	ClampInt
00914 0233 2424 		call	Copy7CToSig
00915 0234 	;
00916 0234 2A28 		goto	ModeReturn
00917 0235 	;=========================================================================================
00918 0235 	;Testing servo and encoder
00919 0235 	; if AN4 + .950 > EncoderVal set servo to ServoFastForward
00920 0235 	; elseif AN4 + .1050 < EncoderVal set servo to ServoFastReverse
00921 0235 	; else Set ServoIdle
00922 0235 	;
00923 0235 	DoModeOne:
00924 0235 0021  a		MOVLB	ModeZeroPot	;banksel
00923 0236 		BankSel	ModeZeroPot
00925 0236 	;
00926 0236 	;Param7A:Param79 = Cur_AN4 + .950
00927 0236 30B6 		movlw	low .950
00928 0237 0739 		addwf	ModeZeroPot,W
00929 0238 00F9 		movwf	Param79
00930 0239 3003 		movlw	high .950
00931 023A 3D3A 		addwfc	ModeZeroPot+1,W
00932 023B 00FA 		movwf	Param7A
00933 023C 	;
00934 023C 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
00935 023C 0020  a		MOVLB	EncoderVal	;banksel
00934 023D 		BankSel	EncoderVal
00936 023D 083F 		movf	EncoderVal,W
00937 023E 02F9 		subwf	Param79,F
00938 023F 0840 		movf	EncoderVal+1,W
00939 0240 3BFA 		subwfb	Param7A,F
00940 0241 	;
00941 0241 1FFA 		btfss	Param7A,7	;Param7A:Param79 < 0?
00942 0242 3210 		bra	DM1_FF	; No, EncoderVal <= (AN4 + .950)
00943 0243 	;
00944 0243 	;Param7A:Param79 = Cur_AN4 + .1050
00945 0243 0021  a		MOVLB	ModeZeroPot	;banksel
00944 0244 		BankSel	ModeZeroPot
00946 0244 301A 		movlw	low .1050
00947 0245 0739 		addwf	ModeZeroPot,W
00948 0246 00F9 		movwf	Param79
00949 0247 3004 		movlw	high .1050
00950 0248 3D3A 		addwfc	ModeZeroPot+1,W
00951 0249 00FA 		movwf	Param7A
00952 024A 	;
00953 024A 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
00954 024A 0020  a		MOVLB	EncoderVal	;banksel
00953 024B 		BankSel	EncoderVal
00955 024B 083F 		movf	EncoderVal,W
00956 024C 02F9 		subwf	Param79,F
00957 024D 0840 		movf	EncoderVal+1,W
00958 024E 3BFA 		subwfb	Param7A,F
00959 024F 	;
00960 024F 1BFA 		btfsc	Param7A,7	;Param7A:Param79 < 0?
00961 0250 3208 		bra	DM1_FR	; Yes, EncoderVal > (AN4 + .1050)
00962 0251 	;
00963 0251 	; EncoderVal > (ModeZeroPot + .950) && EncoderVal <= (ModeZeroPot + .1050)
00964 0251 1537 		bsf	ServoIdle
00965 0252 2A28 		goto	ModeReturn
00966 0253 	;
00967 0253 0848 	DM1_FF	movf	ServoFastForward,W
00968 0254 00FC 		movwf	Param7C
00969 0255 0849 		movf	ServoFastForward+1,W
00970 0256 00FD 		movwf	Param7D
00971 0257 2424 		call	Copy7CToSig
00972 0258 2A28 		goto	ModeReturn
00973 0259 	;
00974 0259 0846 	DM1_FR	movf	ServoFastReverse,W
00975 025A 00FC 		movwf	Param7C
00976 025B 0847 		movf	ServoFastReverse+1,W
00977 025C 00FD 		movwf	Param7D
00978 025D 2424 		call	Copy7CToSig
00979 025E 2A28 		goto	ModeReturn
00980 025F 	;
00981 025F 	;=========================================================================================
00982 025F 	; if ssEnableOverCur and Cur_AN0>ssMaxI*4 then
00983 025F 	;   OverCurrentFlag=true
00984 025F 0020 	CheckCurrent	movlb	0x00	;Bank 0
00985 0260 1C54 		btfss	ssEnableOverCur
00986 0261 0008 		return
00987 0262 	;Param79:Param78 = ssMaxI * 4
00988 0262 01F9 		clrf	Param79
00989 0263 3555 		lslf	ssMaxI,W
00990 0264 00F8 		movwf	Param78
00991 0265 0DF9 		rlf	Param79,F
00992 0266 35F8 		lslf	Param78,F
00993 0267 0DF9 		rlf	Param79,F
00994 0268 	;Param79:Param78 -= Cur_AN0
00995 0268 0021 		movlb	ServoCurrent
00996 0269 0835 		movf	ServoCurrent,W
00997 026A 02F8 		subwf	Param78,F
00998 026B 0836 		movf	ServoCurrent+1,W
00999 026C 3BF9 		subwfb	Param79,F
01000 026D 0020 		movlb	0x00	;Bank 0
SerialServo.asm                                                       Page: 22
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01001 026E 	;
01002 026E 1BF9 		btfsc	Param79,7	;Cur_AN0>ssMaxI*4?
01003 026F 15B7 		bsf	OverCurrentFlag
01004 0270 0008 		return
01005 0271 	;
01006 0271 	;=========================================================================================
01007 0271 	; if Cur_AN0>ssGripI*4 then
01008 0271 	;   GripIMet=true
01009 0271 	; if Cur_AN0>(ssGripI+0x10)*4 then
01010 0271 	;   GripIOver=true
01011 0271 0020 	CheckGripCurrent	movlb	0x00	;Bank 0
01012 0272 	;Param79:Param78 = ssGripI * 4
01013 0272 01F9 		clrf	Param79
01014 0273 3557 		lslf	ssGripI,W
01015 0274 00F8 		movwf	Param78
01016 0275 0DF9 		rlf	Param79,F
01017 0276 35F8 		lslf	Param78,F
01018 0277 0DF9 		rlf	Param79,F
01019 0278 	;Param79:Param78 -= Cur_AN0
01020 0278 0021  a		MOVLB	ServoCurrent	;banksel
01019 0279 		BankSel	ServoCurrent
01021 0279 0835 		movf	ServoCurrent,W
01022 027A 02F8 		subwf	Param78,F
01023 027B 0836 		movf	ServoCurrent+1,W
01024 027C 3BF9 		subwfb	Param79,F
01025 027D 0020 		movlb	0x00	;Bank 0
01026 027E 	;
01027 027E 1BF9 		btfsc	Param79,7	;Cur_AN0>ssGripI*4?
01028 027F 1637 		bsf	GripIMet	; Yes
01029 0280 1BF9 		btfsc	Param79,7	;Cur_AN0>ssGripI*4?
01030 0281 16B8 		bsf	ssGripMCur
01031 0282 	;Param79:Param78 = (ssGripI+0x10) * 4
01032 0282 01F9 		clrf	Param79
01033 0283 3004 		movlw	kGripperHC
01034 0284 0757 		addwf	ssGripI,W
01035 0285 00F8 		movwf	Param78
01036 0286 3000 		movlw	0x00
01037 0287 3DF9 		addwfc	Param79,F
01038 0288 35F8 		lslf	Param78,F
01039 0289 0DF9 		rlf	Param79,F
01040 028A 35F8 		lslf	Param78,F
01041 028B 0DF9 		rlf	Param79,F
01042 028C 	;Param79:Param78 -= Cur_AN0
01043 028C 0021  a		MOVLB	ServoCurrent	;banksel
01042 028D 		BankSel	ServoCurrent
01044 028D 0835 		movf	ServoCurrent,W
01045 028E 02F8 		subwf	Param78,F
01046 028F 0836 		movf	ServoCurrent+1,W
01047 0290 3BF9 		subwfb	Param79,F
01048 0291 0020 		movlb	0x00	;Bank 0
01049 0292 	;
01050 0292 1BF9 		btfsc	Param79,7	;Cur_AN0>(ssGripI+10)*4?
01051 0293 16B7 		bsf	GripIOver
01052 0294 1BF9 		btfsc	Param79,7	;Cur_AN0>(ssGripI+10)*4?
01053 0295 1638 		bsf	ssGripOCur
01054 0296 0008 		return
01055 0297 	;
01056 0297 	;=========================================================================================
01057 0297 	;Idle routine for Basic Serial Servo mode
01058 0297 	;
01059 0297 0020 	DoModeTwo	movlb	0
01060 0298 1BB4 		btfsc	ssCmdPos+1,7	;Any command issued?
01061 0299 323D 		bra	DoModeTwo_1	; No, Idle the servo
01062 029A 	;
01063 029A 	;Check for over current, kill position command if over current is detected.
01064 029A 225F 		call	CheckCurrent
01065 029B 1DB7 		btfss	OverCurrentFlag
01066 029C 3206 		bra	DM2_NotOverCurrent
01067 029D 01B3 		clrf	ssCmdPos
01068 029E 01B4 		clrf	ssCmdPos+1
01069 029F 17B4 		bsf	ssCmdPos+1,7
01070 02A0 1538 		bsf	ssio_OverCurSD
01071 02A1 11B7 		bcf	OverCurrentFlag
01072 02A2 3234 		bra	DoModeTwo_1
01073 02A3 	;
01074 02A3 	DM2_NotOverCurrent:
01075 02A3 1138 		bcf	ssio_OverCurSD
01076 02A4 08D0 		movf	ServoSpeed,F
01077 02A5 		SKPNZ		;Speed = 0?
01077 02A5 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01078 02A6 3225 		bra	DoModeTwo_NoSpeed	; yes
01079 02A7 1C37 		btfss	PulseSent	;Time to update?
01080 02A8 2A28 		goto	ModeReturn	; No
01081 02A9 1037 		bcf	PulseSent
01082 02AA 	;Param7D:Param7C = Cmd-Cur
01083 02AA 0835 		movf	ssCurPos,W
01084 02AB 0233 		subwf	ssCmdPos,W
01085 02AC 00FC 		movwf	Param7C
01086 02AD 0836 		movf	ssCurPos+1,W
01087 02AE 3B34 		subwfb	ssCmdPos+1,W
01088 02AF 00FD 		movwf	Param7D
01089 02B0 	; if Param7D:Param7C = 0 then we are In Position
01090 02B0 047C 		iorwf	Param7C,W
01091 02B1 		SKPNZ
01091 02B1 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01092 02B2 321D 		bra	DoModeTwo_Go	; if Cmd = Cur Go
01093 02B3 	;
01094 02B3 	;
01095 02B3 1FFD 		BTFSS	Param7D,7	;Cmd<Cur? Set if Cur>Cmd
SerialServo.asm                                                       Page: 23
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01096 02B4 2AC0 		GOTO	DoModeTwo_MovPlus	; Yes
01097 02B5 	;Move minus
01098 02B5 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01099 02B6 2ABB 		GOTO	DoModeTwo_Minus	; No
01100 02B7 0850 		MOVF	ServoSpeed,W
01101 02B8 077C 		ADDWF	Param7C,W
01102 02B9 1803 		BTFSC	_C	;Dist<Speed?
01103 02BA 3211 		bra	DoModeTwo_NoSpeed	; No
01104 02BB 	;
01105 02BB 	; Subtract speed from current position
01106 02BB 0850 	DoModeTwo_Minus	MOVF	ServoSpeed,W
01107 02BC 02B5 		SUBWF	ssCurPos,F	;SigOutTime
01108 02BD 3000 		MOVLW	0x00
01109 02BE 3BB6 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01110 02BF 3210 		bra	DoModeTwo_Go
01111 02C0 	;
01112 02C0 	;=============================
01113 02C0 	; 7D:7C = distance to go
01114 02C0 	;
01115 02C0 08FD 	DoModeTwo_MovPlus	MOVF	Param7D,F
01116 02C1 		SKPZ		;Dist>255 to go?
01116 02C1 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01117 02C2 3204 		bra	DoModeTwo_Plus	; Yes
01118 02C3 0850 		MOVF	ServoSpeed,W
01119 02C4 027C 		SUBWF	Param7C,W	;Dist-Speed
01120 02C5 		SKPNB		;Speed>Dist?
01120 02C5 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01121 02C6 3205 		bra	DoModeTwo_NoSpeed	; Yes
01122 02C7 	;
01123 02C7 0850 	DoModeTwo_Plus	MOVF	ServoSpeed,W	;7D:7C = CurPos + Speed
01124 02C8 07B5 		ADDWF	ssCurPos,F
01125 02C9 0103 		CLRW
01126 02CA 3DB6 		ADDWFC	ssCurPos+1,F
01127 02CB 3204 		bra	DoModeTwo_Go
01128 02CC 	;
01129 02CC 	;
01130 02CC 	; set current position at command position
01131 02CC 0833 	DoModeTwo_NoSpeed	movf	ssCmdPos,W
01132 02CD 00B5 		movwf	ssCurPos
01133 02CE 0834 		movf	ssCmdPos+1,W
01134 02CF 00B6 		movwf	ssCurPos+1
01135 02D0 	; make it so
01136 02D0 0835 	DoModeTwo_Go	movf	ssCurPos,W
01137 02D1 00FC 		movwf	Param7C
01138 02D2 0836 		movf	ssCurPos+1,W
01139 02D3 00FD 		movwf	Param7D
01140 02D4 2465 		call	ClampInt
01141 02D5 2424 		call	Copy7CToSig
01142 02D6 2A28 		goto	ModeReturn
01143 02D7 	;
01144 02D7 	DoModeTwo_1:
01145 02D7 1537 		bsf	ServoIdle	;power down servo
01146 02D8 2A28 		goto	ModeReturn
01147 02D9 	;
01148 02D9 	;=========================================================================================
01149 02D9 	;Idle routine for Absolute encoder position control w/ continuous rotation servo.
01150 02D9 	;
01151 02D9 	;Entry: ssCmdPos = user's command, ssCurPos
01152 02D9 	;
01153 02D9 	;error = ((EncoderVal + EncoderOffset) mod 16384)-ssCmdPos
01154 02D9 	;if DeadBand>0 then
01155 02D9 	;  if abs(error)<DeadBand then error=0
01156 02D9 	;
01157 02D9 	;if error=0 then
01158 02D9 	;  IdleServo
01159 02D9 	;else
01160 02D9 	;  if error<-128 then error= -128
01161 02D9 	;  if error>127 then error = 127
01162 02D9 	;  servo=ServoStopCenter-error
01163 02D9 	;
01164 02D9 	; Ram Used:Param79,Param7A,Param7C,Param7D
01165 02D9 	;
01166 02D9 0020 	DoModeThree	movlb	0	;bank 0
01167 02DA 1BB4 		btfsc	ssCmdPos+1,7
01168 02DB 3208 		bra	DM3_ServoHere
01169 02DC 	;
01170 02DC 	;Check for over current, kill position command if over current is detected.
01171 02DC 225F 		call	CheckCurrent
01172 02DD 1DB7 		btfss	OverCurrentFlag
01173 02DE 320C 		bra	DM3_NotOverCurrent
01174 02DF 	;
01175 02DF 1538 		bsf	ssio_OverCurSD
01176 02E0 11B7 		bcf	OverCurrentFlag
01177 02E1 	;Flag as no cmd pos.
01178 02E1 01B3 		clrf	ssCmdPos
01179 02E2 01B4 		clrf	ssCmdPos+1
01180 02E3 17B4 		bsf	ssCmdPos+1,7
01181 02E4 	; Servo Here
01182 02E4 083F 	DM3_ServoHere	movf	EncoderVal,W
01183 02E5 0744 		addwf	EncoderOffset,W
01184 02E6 00B5 	                       movwf                  ssCurPos
01185 02E7 0840 		movf	EncoderVal+1,W
01186 02E8 3D45 		addwfc	EncoderOffset+1,W
01187 02E9 00B6 	                       movwf                  ssCurPos+1
01188 02EA 	;
01189 02EA 3286 		bra	DM3_IdleServo
01190 02EB 	;
01191 02EB 1138 	DM3_NotOverCurrent	bcf	ssio_OverCurSD
01192 02EC 1939 	                       btfsc                  ssCmdPosVerified       ;Has been verified?
SerialServo.asm                                                       Page: 24
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01193 02ED 320A 	                       bra                    DM3_CPV_End            ; Yes
01194 02EE 0833 	                       movf                   ssCmdPos,W             ; No, Clamp and mark as verified.
01195 02EF 00FC 	                       movwf                  Param7C
01196 02F0 0834 	                       movf                   ssCmdPos+1,W
01197 02F1 00FD 	                       movwf                  Param7D
01198 02F2 2465 	                       call                   ClampInt               ;MD3_MinCmd<=ssCurPos<=MD3_MaxCmd
01199 02F3 087C 	                       movf                   Param7C,W
01200 02F4 00B3 	                       movwf                  ssCmdPos
01201 02F5 087D 	                       movf                   Param7D,W
01202 02F6 00B4 	                       movwf                  ssCmdPos+1
01203 02F7 1539 	                       bsf                    ssCmdPosVerified
01204 02F8 	DM3_CPV_End:
01205 02F8 	;
01206 02F8 	; if speed = 0 then just be there
01207 02F8 08D0 	                       movf                   ServoSpeed,F
01208 02F9 	                       SKPZ
01208 02F9 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01209 02FA 3205 	                       bra                    DM3_CalcCurPos
01210 02FB 0833 	DM3_ServoThere         movf                   ssCmdPos,W
01211 02FC 00B5 	                       movwf                  ssCurPos
01212 02FD 0834 	                       movf                   ssCmdPos+1,W
01213 02FE 00B6 	                       movwf                  ssCurPos+1
01214 02FF 3226 	                       bra                    DM3_SetServoPWM
01215 0300 	;
01216 0300 1C37 	DM3_CalcCurPos         btfss	PulseSent	;Time to update?
01217 0301 3224 		bra	DM3_SetServoPWM	; No
01218 0302 1037 		bcf	PulseSent
01219 0303 	;
01220 0303 	;if ssCmdPos<>ssCurPos then
01221 0303 	;  if ssCmdPos>ssCurPos then
01222 0303 	;    if ssCmdPos>ssCurPos+ServoSpeed then
01223 0303 	;      ssCurPos += ServoSpeed
01224 0303 	;    else
01225 0303 	;      ssCurPos = ssCmdPos
01226 0303 	;  else
01227 0303 	;    if ssCmdPos<ssCurPos-ServoSpeed then
01228 0303 	;      ssCurPos -= ServoSpeed
01229 0303 	;    else
01230 0303 	;      ssCurPos = ssCmdPos
01231 0303 	;
01232 0303 0833 	                       movf                   ssCmdPos,W             ;ssCurPos-ssCmdPos
01233 0304 0235 	                       subwf                  ssCurPos,W
01234 0305 00F8 	                       movwf                  Param78
01235 0306 0834 	                       movf                   ssCmdPos+1,W
01236 0307 3B36 	                       subwfb                 ssCurPos+1,W
01237 0308 0478 	                       iorwf                  Param78,W
01238 0309 	                       SKPNZ                                         ;ssCmdPos=ssCurPos/
01238 0309 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01239 030A 321B 	                       bra                    DM3_SetServoPWM        ; Yes
01240 030B 	;
01241 030B 	                       SKPB                                          ;ssCmdPos>ssCurPos?
01241 030B 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01242 030C 320D 	                       bra                    DM3_GoRev              ; No
01243 030D 	; ssCmdPos>ssCurPos forward
01244 030D 1438 	                       bsf                    MD3_FFwd
01245 030E 10B8 	                       bcf                    MD3_FRev
01246 030F 	;ssCurPos += ServoSpeed
01247 030F 0850 	                       movf                   ServoSpeed,W
01248 0310 07B5 	                       addwf                  ssCurPos,F
01249 0311 3000 	                       movlw                  0x00
01250 0312 3DB6 	                       addwfc                 ssCurPos+1,F
01251 0313 	;
01252 0313 0833 	                       movf                   ssCmdPos,W             ;(ssCurPos+Speed)-ssCmdPos
01253 0314 0235 	                       subwf                  ssCurPos,W
01254 0315 0834 	                       movf                   ssCmdPos+1,W
01255 0316 3B36 	                       subwfb                 ssCurPos+1,W
01256 0317 	                       SKPB
01256 0317 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01257 0318 33E2 	                       bra                    DM3_ServoThere
01258 0319 320C 	                       bra                    DM3_SetServoPWM
01259 031A 	;                       
01260 031A 	; ssCmdPos<ssCurPos reverse
01261 031A 1038 	DM3_GoRev              bcf                    MD3_FFwd
01262 031B 14B8 	                       bsf                    MD3_FRev
01263 031C 	;
01264 031C 0850 	                       movf                   ServoSpeed,W
01265 031D 02B5 	                       subwf                  ssCurPos,F
01266 031E 3000 	                       movlw                  0x00
01267 031F 3BB6 	                       subwfb                 ssCurPos+1,F
01268 0320 	;
01269 0320 0833 	                       movf                   ssCmdPos,W             ;(ssCurPos-Speed)-ssCmdPos
01270 0321 0235 	                       subwf                  ssCurPos,W
01271 0322 0834 	                       movf                   ssCmdPos+1,W
01272 0323 3B36 	                       subwfb                 ssCurPos+1,W
01273 0324 	                       SKPNB
01273 0324 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01274 0325 33D5 	                       bra                    DM3_ServoThere
01275 0326 	;
01276 0326 	;Param7A:Param79 = ((EncoderVal + EncoderOffset) mod 16384)
01277 0326 083F 	DM3_SetServoPWM	movf	EncoderVal,W
01278 0327 0744 		addwf	EncoderOffset,W
01279 0328 00F9 		movwf	Param79
01280 0329 0840 		movf	EncoderVal+1,W
01281 032A 3D45 		addwfc	EncoderOffset+1,W
01282 032B 393F 		andlw	0x3F
01283 032C 00FA 		movwf	Param7A
01284 032D 	; Calculate Error
01285 032D 	;Param7A:Param79 = ((EncoderVal + EncoderOffset) mod 16384) - ssCurPos
01286 032D 0835 		movf	ssCurPos,W	;(EncoderVal + EncoderOffset) mod 16384
SerialServo.asm                                                       Page: 25
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01287 032E 02F9 		subwf	Param79,F
01288 032F 0836 		movf	ssCurPos+1,W
01289 0330 3BFA 		subwfb	Param7A,F
01290 0331 	; if error = 0 then idle
01291 0331 0879 	                       movf                   Param79,W
01292 0332 047A 	                       iorwf                  Param7A,W
01293 0333 	                       SKPNZ
01293 0333 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01294 0334 323C 	                       bra                    DM3_IdleServo
01295 0335 	; if DeadBand = 0 then skip DB check
01296 0335 08D6 	                       movf                   DeadBand,F
01297 0336 	                       SKPNZ
01297 0336 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01298 0337 3213 	                       bra                    DM3_NoDB
01299 0338 	; if error<0 then Error_a=abs(error), Param7D:Param7C=abs(Param7A:Param79)
01300 0338 0879 	                       movf                   Param79,W
01301 0339 00FC 	                       movwf                  Param7C
01302 033A 087A 	                       movf                   Param7A,W
01303 033B 00FD 	                       movwf                  Param7D
01304 033C 1FFA 	                       btfss                  Param7A,7
01305 033D 3206 	                       bra                    DM3_ErrIsPos
01306 033E 01FC 	                       clrf                   Param7C
01307 033F 01FD 	                       clrf                   Param7D
01308 0340 0879 	                       movf                   Param79,W
01309 0341 02FC 	                       subwf                  Param7C,F
01310 0342 087A 	                       movf                   Param7A,W
01311 0343 3BFD 	                       subwfb                 Param7D,F
01312 0344 	;
01313 0344 	;if Error_a>255 then ignor DB
01314 0344 08FD 	DM3_ErrIsPos           movf                   Param7D,F
01315 0345 	                       SKPZ                                          ;Error>255?
01315 0345 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01316 0346 3204 	                       bra                    DM3_NoDB               ; Yes
01317 0347 0856 	                       movf                   DeadBand,W
01318 0348 02FC 	                       subwf                  Param7C,F              ;Param7C = Error - DB
01319 0349 	                       SKPNB                                         ;DB>Error?
01319 0349 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01320 034A 3226 	                       bra                    DM3_IdleServo          ; Yes
01321 034B 	;
01322 034B 	; if error<-128 then error = -128
01323 034B 1FFA 	DM3_NoDB               btfss                  Param7A,7              ;Error is negative?
01324 034C 3209 	                       bra                    DM3_PosLimit           ; No
01325 034D 307F 	                       movlw                  0x7F
01326 034E 0479 	                       iorwf                  Param79,W              ;high bit only
01327 034F 057A 	                       andwf                  Param7A,W
01328 0350 3AFF 	                       xorlw                  0xFF
01329 0351 	                       SKPNZ                                         ;< -128?
01329 0351 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01330 0352 320A 	                       bra                    DM3_CalcSCmd           ; No
01331 0353 3080 	                       movlw                  0x80                   ;-128
01332 0354 00F9 	                       movwf                  Param79
01333 0355 3207 	                       bra                    DM3_CalcSCmd
01334 0356 	;
01335 0356 	; if error >= 128 then error = 127
01336 0356 3080 	DM3_PosLimit           movlw                  0x80
01337 0357 0579 	                       andwf                  Param79,W              ;hi bit only
01338 0358 047A 	                       iorwf                  Param7A,W              ;or w/ hi byte
01339 0359 	                       SKPNZ                                         ;>= 128?
01339 0359 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01340 035A 3202 	                       bra                    DM3_CalcSCmd           ; No
01341 035B 307F 	                       movlw                  0x7F
01342 035C 00F9 	                       movwf                  Param79
01343 035D 	;
01344 035D 1CD4 	DM3_CalcSCmd           btfss                  ssReverseDir           ;Moves reversed?
01345 035E 3209 	                       bra                    DM3_CalcSCmd_1         ; No
01346 035F 0879 	                       movf                   Param79,W
01347 0360 3C80 	                       sublw                  0x80                   ;test for -128
01348 0361 	                       SKPZ                                          ;Is -128?
01348 0361 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01349 0362 3202 	                       bra                    DM3_CalcSCmd_2s
01350 0363 3081 	                       movlw                  0x81                   ; Yes, Make it -127
01351 0364 00F9 	                       movwf                  Param79
01352 0365 0879 	DM3_CalcSCmd_2s        movf                   Param79,W
01353 0366 3C00 	                       sublw                  0x00                   ; Yes, 2's comp
01354 0367 00F9 	                       movwf                  Param79
01355 0368 	DM3_CalcSCmd_1:      
01356 0368 	;
01357 0368 	;0.5 x gain
01358 0368 	;                       asrf                   Param79,W
01359 0368 	;
01360 0368 	;
01361 0368 0879 	                       movf                   Param79,W
01362 0369 024A 	                       subwf                  ServoStopCenter,W
01363 036A 00FC 	                       movwf                  Param7C
01364 036B 3000 	                       movlw                  0x00
01365 036C 1BF9 	                       btfsc                  Param79,7              ;is neg?
01366 036D 30FF 	                       movlw                  0xFF                   ; yes, sign extend it
01367 036E 3B4B 	                       subwfb                 ServoStopCenter+1,W
01368 036F 00FD 	                       movwf                  Param7D
01369 0370 3209 	                       bra	DM3_UpdatePos
01370 0371 	;
01371 0371 	;
01372 0371 	; abs(Error) <= DeadBand
01373 0371 	; if ssMode3IdleCenter then
01374 0371 	;   servo=ServoStopCenter
01375 0371 	; else
01376 0371 	;   ServoIdle=true
01377 0371 	;
01378 0371 1DD4 	DM3_IdleServo	btfss	ssMode3IdleCenter
SerialServo.asm                                                       Page: 26
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01379 0372 320A 		bra	DM3_IdleInactive
01380 0373 084A 		movf	ServoStopCenter,W
01381 0374 00FC 		movwf	Param7C
01382 0375 084B 		movf	ServoStopCenter+1,W
01383 0376 00FD 		movwf	Param7D
01384 0377 1038 	                       bcf                    MD3_FFwd
01385 0378 10B8 	                       bcf                    MD3_FRev
01386 0379 1137 		bcf	ServoIdle
01387 037A 	;
01388 037A 	; set current position at destination position
01389 037A 	; Entry: Param7D:Param7C servo signal in 1/2 microseconds
01390 037A 	;
01391 037A 2460 	DM3_UpdatePos	call	ClampIntMD3
01392 037B 2424 		call	Copy7CToSig
01393 037C 2A28 		goto	ModeReturn
01394 037D 	;
01395 037D 	;
01396 037D 1537 	DM3_IdleInactive	bsf	ServoIdle
01397 037E 1038 	                       bcf                    MD3_FFwd
01398 037F 10B8 	                       bcf                    MD3_FRev
01399 0380 2A28 		goto	ModeReturn
01400 0381 	;
01401 0381 	;=============================
01402 0381 	;=========================================================================================
01403 0381 	;Idle routine for Gripper Serial Servo mode
01404 0381 	; Servo is set to idle only is no command or over current.
01405 0381 	;
01406 0381 0020 	DoMode4	movlb	0
01407 0382 1BB4 		btfsc	ssCmdPos+1,7	;Any command issued?
01408 0383 3245 		bra	DoMode4_1	; No, Idle the servo
01409 0384 	;
01410 0384 	;Check for over current, kill position command if over current is detected.
01411 0384 225F 		call	CheckCurrent
01412 0385 2271 		call	CheckGripCurrent
01413 0386 1DB7 		btfss	OverCurrentFlag
01414 0387 3206 		bra	DM4_NotOverCurrent
01415 0388 01B3 		clrf	ssCmdPos	;kill the command
01416 0389 01B4 		clrf	ssCmdPos+1
01417 038A 17B4 		bsf	ssCmdPos+1,7
01418 038B 1538 		bsf	ssio_OverCurSD
01419 038C 11B7 		bcf	OverCurrentFlag
01420 038D 323B 		bra	DoMode4_1	;Idle the servo
01421 038E 	;
01422 038E 	DM4_NotOverCurrent:
01423 038E 	; Speed cannot be 0, if 0 set to 1 (slow)
01424 038E 1138 		bcf	ssio_OverCurSD
01425 038F 08D0 		movf	ServoSpeed,F
01426 0390 		SKPNZ		;Speed = 0?
01426 0390 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01427 0391 0AD0 		incf	ServoSpeed,F	; yes, make it 1
01428 0392 1C37 		btfss	PulseSent	;Time to update?
01429 0393 2A28 		goto	ModeReturn	; No
01430 0394 1037 		bcf	PulseSent
01431 0395 	;Param7D:Param7C = Cmd-Cur
01432 0395 0835 		movf	ssCurPos,W
01433 0396 0233 		subwf	ssCmdPos,W
01434 0397 00FC 		movwf	Param7C
01435 0398 0836 		movf	ssCurPos+1,W
01436 0399 3B34 		subwfb	ssCmdPos+1,W
01437 039A 00FD 		movwf	Param7D
01438 039B 	; if Param7D:Param7C = 0 then we are In Position
01439 039B 047C 		iorwf	Param7C,W
01440 039C 		SKPNZ
01440 039C 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01441 039D 320F 		bra	DoMode4_Hold	; if Cmd = Cur Go
01442 039E 	;
01443 039E 	;Sign bit set if Cur>Cmd
01444 039E 1FFD 		BTFSS	Param7D,7	;Cmd>Cur?
01445 039F 3211 		bra	DoMode4_MovPlus	; Yes
01446 03A0 	;Move minus
01447 03A0 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01448 03A1 2BA8 		GOTO	DoMode4_Minus	; No
01449 03A2 0850 		MOVF	ServoSpeed,W
01450 03A3 077C 		ADDWF	Param7C,W
01451 03A4 1C03 		BTFSS	_C	;Dist<Speed?
01452 03A5 3202 		bra	DoMode4_Minus	; Yes
01453 03A6 3001 		movlw	0x01	; No, use 1 as speed
01454 03A7 3201 		bra	DoMode4_Minus_1
01455 03A8 	;
01456 03A8 	; Subtract speed from current position
01457 03A8 0850 	DoMode4_Minus	MOVF	ServoSpeed,W
01458 03A9 02B5 	DoMode4_Minus_1	SUBWF	ssCurPos,F	;SigOutTime
01459 03AA 3000 		MOVLW	0x00
01460 03AB 3BB6 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01461 03AC 3213 		bra	DoMode4_Go
01462 03AD 	;
01463 03AD 	;=============================
01464 03AD 	; if Cur_AN0>(ssGripI+0x10)*4 then move minus 1
01465 03AD 1EB7 	DoMode4_Hold	btfss	GripIOver	;Gripping too hard?
01466 03AE 2BC0 		goto	DoMode4_Go	; No
01467 03AF 3001 		movlw	0x01	; No, use 2 as speed
01468 03B0 33F8 		bra	DoMode4_Minus_1
01469 03B1 	;
01470 03B1 	;=============================
01471 03B1 	; 7D:7C = distance to go
01472 03B1 	;
01473 03B1 1A37 	DoMode4_MovPlus	btfsc	GripIMet	;Servo Current > ssGripI?
01474 03B2 33FA 		bra	DoMode4_Hold	; Yes, don't move more closed.
01475 03B3 	;
SerialServo.asm                                                       Page: 27
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01476 03B3 08FD 		MOVF	Param7D,F
01477 03B4 		SKPZ		;Dist>255 to go?
01477 03B4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01478 03B5 3206 		bra	DoMode4_Plus	; Yes
01479 03B6 0850 		MOVF	ServoSpeed,W
01480 03B7 027C 		SUBWF	Param7C,W	;Dist-Speed
01481 03B8 		SKPB		;Speed>Dist?
01481 03B8 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01482 03B9 3202 		bra	DoMode4_Plus	; No
01483 03BA 3001 		movlw	0x01	;Use 1 as speed
01484 03BB 3201 		bra	DoMode4_Plus_1
01485 03BC 	;
01486 03BC 0850 	DoMode4_Plus	MOVF	ServoSpeed,W	;CurPos += Speed
01487 03BD 07B5 	DoMode4_Plus_1	ADDWF	ssCurPos,F
01488 03BE 0103 		CLRW
01489 03BF 3DB6 		ADDWFC	ssCurPos+1,F
01490 03C0 	;
01491 03C0 	; make it so
01492 03C0 0835 	DoMode4_Go	movf	ssCurPos,W	;7D:7C = CurPos
01493 03C1 00FC 		movwf	Param7C
01494 03C2 0836 		movf	ssCurPos+1,W
01495 03C3 00FD 		movwf	Param7D
01496 03C4 2465 		call	ClampInt
01497 03C5 2424 		call	Copy7CToSig
01498 03C6 1237 		bcf	GripIMet
01499 03C7 12B7 		bcf	GripIOver
01500 03C8 2A28 		goto	ModeReturn
01501 03C9 	;
01502 03C9 	DoMode4_1:
01503 03C9 1537 		bsf	ServoIdle	;power down servo
01504 03CA 1237 		bcf	GripIMet
01505 03CB 12B7 		bcf	GripIOver
01506 03CC 2A28 		goto	ModeReturn
01507 03CD 	;
01508 03CD 	;=========================================================================================
01509 03CD 	;=========================================================================================
01510 03CD 	;DebounceTime,kMaxMode
01511 03CD 	;Timer4Lo,SysMode
01512 03CD 0020 	HandleButtons	movlb	0x00	;bank 0
01513 03CE 08AE 		movf	Timer4Lo,F
01514 03CF 		SKPNZ		;Debounced?
01514 03CF 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01515 03D0 320B 		bra	HdlBtn_1	; Yes
01516 03D1 	;
01517 03D1 185B 		btfsc	SW1_Flag
01518 03D2 3206 		bra	HdlBtn_DB
01519 03D3 18DB 		btfsc	SW2_Flag
01520 03D4 3204 		bra	HdlBtn_DB
01521 03D5 195B 		btfsc	SW3_Flag
01522 03D6 3202 		bra	HdlBtn_DB
01523 03D7 1DDB 		btfss	SW4_Flag
01524 03D8 0008 		return
01525 03D9 	;
01526 03D9 300A 	HdlBtn_DB	movlw	DebounceTime
01527 03DA 00AE 		movwf	Timer4Lo
01528 03DB 0008 		return
01529 03DC 	; we are de-bounced
01530 03DC 185B 	HdlBtn_1	btfsc	SW1_Flag
01531 03DD 3207 		bra	HdlBtn_Btn1
01532 03DE 18DB 		btfsc	SW2_Flag
01533 03DF 3206 		bra	HdlBtn_Btn2
01534 03E0 195B 		btfsc	SW3_Flag
01535 03E1 3205 		bra	HdlBtn_Btn3
01536 03E2 19DB 		btfsc	SW4_Flag
01537 03E3 3204 		bra	HdlBtn_Btn4
01538 03E4 0008 		return
01539 03E5 	;
01540 03E5 	; Mode
01541 03E5 	HdlBtn_Btn1:
01542 03E5 2BD9 		goto	HdlBtn_DB
01543 03E6 	;
01544 03E6 	HdlBtn_Btn2:
01545 03E6 2BD9 		goto	HdlBtn_DB
01546 03E7 	;
01547 03E7 	HdlBtn_Btn3:
01548 03E7 2BD9 		goto	HdlBtn_DB
01549 03E8 	; not used
01550 03E8 	HdlBtn_Btn4:
01551 03E8 2BD9 		goto	HdlBtn_DB
01552 03E9 	;
01553 03E9 	;=========================================================================================
01554 03E9 	; Read analog inputs in sequence, Call from main loop
01555 03E9 	; Use with PIC16F1847, sets up and manages the ADC
01556 03E9 	;
01557 03E9 	; Entry: ANCount, FirstANData.., LastAN, ANFlags, ANxActive
01558 03E9 	; Exit: ANCount, ANFlags
01559 03E9 	; Ram Used: Param78
01560 03E9 	; Calls: ANx_GetADPCHVal
01561 03E9 	;
01562 03E9 0021 	ReadAN	movlb	ADCON0	;bank 1
01563 03EA 1C1D 		BTFSS	ADCON0,ADON	;Is the Analog input ON?
01564 03EB 3224 		BRA	ReadAN0_ColdStart	; No, go start it
01565 03EC 	;
01566 03EC 189D 		BTFSC	ADCON0,GO_NOT_DONE	;Conversion done?
01567 03ED 322C 		BRA	ReadAN_Rtn	; No
01568 03EE 	;
01569 03EE 3000 		movlw	HIGH FirstANData
01570 03EF 0085 		movwf	FSR0H
01571 03F0 081D 		movf	ADCON0,W
SerialServo.asm                                                       Page: 28
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01572 03F1 3534 		lslf                   ANCount,W
01573 03F2 3EB5 		addlw                  LOW FirstANData
01574 03F3 0084 		movwf                  FSR0L
01575 03F4 	; move result into ram
01576 03F4 081B 	                       MOVF	ADRESL,W
01577 03F5 001A 		MOVWI	FSR0++
01578 03F6 081C 		MOVF	ADRESH,W
01579 03F7 001A 		MOVWI	FSR0++
01580 03F8 	; notify app of new data
01581 03F8 0A34 	                       incf                   ANCount,W
01582 03F9 00F8 	                       movwf                  Param78
01583 03FA 	;
01584 03FA 0103 	                       clrw
01585 03FB 1403 	                       bsf                    _C
01586 03FC 0D89 	ReadAN_L2              rlf                    WREG,F
01587 03FD 0BF8 	                       decfsz                 Param78,F
01588 03FE 33FD 	                       bra                    ReadAN_L2
01589 03FF 04B2 	                       iorwf                  ANFlags,F	;set the new data bit
01590 0400 	;
01591 0400 	; setup for next AN
01592 0400 3004 	ReadAN_Next            movlw                  LastAN
01593 0401 0234 	                       subwf	ANCount,W
01594 0402 	                       SKPNZ                                         ;Last one?
01594 0402 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01595 0403 320F 		bra	ReadAN_Start0	; Yes, start over w/ AN0
01596 0404 0AB4 		incf	ANCount,F	;AN#++
01597 0405 0A34 		incf	ANCount,W	;W = AN#+1
01598 0406 00F8 		movwf	Param78
01599 0407 0103 		clrw
01600 0408 1403 		bsf	_C
01601 0409 0D89 	ReadAN_L1	rlf	WREG,F
01602 040A 0BF8 		decfsz	Param78,F
01603 040B 33FD 		bra	ReadAN_L1
01604 040C 0533 		andwf	ANxActive,W	;Is this one active?
01605 040D 		SKPNZ
01605 040D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01606 040E 33F1 		bra	ReadAN_Next	; No
01607 040F 	;
01608 040F 3204 		bra	ReadAN_Start
01609 0410 	;
01610 0410 	;===========================================                       
01611 0410 	;
01612 0410 0021 	ReadAN0_ColdStart	MOVLB	1
01613 0411 30E0 		MOVLW	b'11100000'	;Right Just, fosc/64
01614 0412 	;	MOVLW	b'11110000'	;Right Just, Frc
01615 0412 009E 		MOVWF	ADCON1
01616 0413 	;
01617 0413 	; Start acquisition of AN0
01618 0413 01B4 	ReadAN_Start0	CLRF	ANCount
01619 0414 241C 	ReadAN_Start	call	ANx_GetADPCHVal
01620 0415 1409 	                       BSF	WREG,0	;ADC ON
01621 0416 009D 		MOVWF	ADCON0
01622 0417 3004 		movlw	0x04	;Acquisition time 5uS
01623 0418 20C0 		call	DelayWuS
01624 0419 149D 	                       BSF	ADCON0,GO
01625 041A 	ReadAN_Rtn:
01626 041A 0020 		movlb	0                      ;bank 0
01627 041B 0008 		return
01628 041C 	;
01629 041C 0834 	ANx_GetADPCHVal	movf	ANCount,W	;0..LastAN
01630 041D 3907 	                       andlw                  0x07
01631 041E 000B 		brw
01632 041F 3400 		retlw	AN0_Val	;Servo Current
01633 0420 3404 		retlw	AN1_Val	;Batt Volts
01634 0421 3408 		retlw	AN2_Val	;Aux 0
01635 0422 340C 		retlw	AN3_Val	;Aux 1
01636 0423 3410 		retlw	AN4_Val	;Aux 2
01637 0424 	;
01638 0424 	;=========================================================================================
01639 0424 	;
01640 0424 	; Don't disable interrupts if you don't need to...
01641 0424 0025 	Copy7CToSig	MOVLB	0x05	;bank 5
01642 0425 087C 		MOVF	Param7C,W
01643 0426 0220 		SUBWF	SigOutTime,W
01644 0427 		SKPZ
01644 0427 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01645 0428 3204 		bra	Copy7CToSig_1
01646 0429 087D 		MOVF	Param7D,W
01647 042A 0221 		SUBWF	SigOutTimeH,W
01648 042B 		SKPNZ
01648 042B 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01649 042C 3208 		bra	Copy7CToSig_Done
01650 042D 	;
01651 042D 138B 	Copy7CToSig_1	bcf	INTCON,GIE
01652 042E 1B8B 		btfsc	INTCON,GIE
01653 042F 33FD 		bra	Copy7CToSig_1
01654 0430 087C 		MOVF	Param7C,W
01655 0431 00A0 		MOVWF	SigOutTime
01656 0432 087D 		MOVF	Param7D,W
01657 0433 00A1 		MOVWF	SigOutTimeH
01658 0434 178B 		bsf	INTCON,GIE
01659 0435 0020 	Copy7CToSig_Done	movlb	0	;bank 0
01660 0436 1137 		BCF	ServoIdle
01661 0437 0008 		return
01662 0438 	;
01663 0438 	;=========================================================================================
01664 0438 	;=========================================================================================
01665 0438 	; Set CCP1 to go high is 0x100 clocks
01666 0438 	;
SerialServo.asm                                                       Page: 29
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01667 0438 0020 	StartServo	MOVLB	0	;bank 0
01668 0439 1CB7 		BTFSS	ServoOff
01669 043A 0008 		RETURN
01670 043B 10B7 		BCF	ServoOff
01671 043C 	;
01672 043C 244F 		CALL	SetMiddlePosition
01673 043D 2424 		CALL	Copy7CToSig
01674 043E 	;
01675 043E 0025 		movlb	0x05	;bank 5
01676 043F 3040 		MOVLW	LOW kServoDwellTime
01677 0440 00A2 		MOVWF	CalcdDwell
01678 0441 309C 		MOVLW	HIGH kServoDwellTime
01679 0442 00A3 		MOVWF	CalcdDwellH
01680 0443 0020 		movlb	0	;bank 0
01681 0444 	;
01682 0444 3000 		MOVLW	0x00	;start in 0x100 clocks
01683 0445 0096 		MOVWF	TMR1L
01684 0446 30FF 		MOVLW	0xFF
01685 0447 0097 		MOVWF	TMR1H
01686 0448 	;
01687 0448 0025 		MOVLB	0x05
01688 0449 0192 		CLRF	CCPR1H
01689 044A 0191 		CLRF	CCPR1L
01690 044B 3008 		MOVLW	CCP1CON_Set
01691 044C 0093 		MOVWF	CCP1CON	;go high on match
01692 044D 0020 		MOVLB	0x00	;Bank 0
01693 044E 0008 		RETURN
01694 044F 	;
01695 044F 	;=========
01696 044F 	;
01697 044F 30B8 	SetMiddlePosition	MOVLW	LOW kMidPulseWidth
01698 0450 00FC 		MOVWF	Param7C
01699 0451 300B 		MOVLW	HIGH kMidPulseWidth
01700 0452 00FD 		MOVWF	Param7D
01701 0453 0008 		Return
01702 0454 	;
01703 0454 	;=========================================================================================
01704 0454 0020 	StopServo	movlb	0	;bank 0
01705 0455 18B7 		BTFSC	ServoOff
01706 0456 0008 		RETURN
01707 0457 	;
01708 0457 0025 		movlb	0x05	;bank 5
01709 0458 3040 		MOVLW	LOW kServoDwellTime
01710 0459 00A2 		MOVWF	CalcdDwell
01711 045A 309C 		MOVLW	HIGH kServoDwellTime
01712 045B 00A3 		MOVWF	CalcdDwellH
01713 045C 0020 		movlb	0	;bank 0
01714 045D 1537 		BSF	ServoIdle
01715 045E 14B7 		BSF	ServoOff
01716 045F 0008 		return
01717 0460 	;
01718 0460 	;=========================================================================================
01719 0460 	; ClampIntMD3(Param7D:Param7C,ServoFastReverse,ServoFastForward)
01720 0460 	;
01721 0460 	ClampIntMD3            mMOVLF                 ServoFastReverse,FSR0
01721 0460 3046      M		movlw	low ServoFastReverse	                       movlw                  low ADDRESS
01721 0461 0084      M		movwf	FSR0	                       movwf                  DEST
01721 0462 3000      M		movlw	high ServoFastReverse	                       movlw                  high ADDRESS
01721 0463 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
01722 0464 3204 	                       bra                    ClampInt_E2
01723 0465 	;
01724 0465 	;---------------------
01725 0465 	; ClampInt(Param7D:Param7C,ServoMin_uS,ServoMax_uS)
01726 0465 	;
01727 0465 	; Entry: Param7D:Param7C
01728 0465 	; Exit: Param7D:Param7C=ClampInt(Param7D:Param7C,ServoMin_uS,ServoMax_uS)
01729 0465 	; Ram Used: FSR0
01730 0465 	;
01731 0465 	ClampInt	mMOVLF                 ServoMin_uS,FSR0
01731 0465 304C      M		movlw	low ServoMin_uS	                       movlw                  low ADDRESS
01731 0466 0084      M		movwf	FSR0	                       movwf                  DEST
01731 0467 3000      M		movlw	high ServoMin_uS	                       movlw                  high ADDRESS
01731 0468 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
01732 0469 0020 	ClampInt_E2            movlb	0
01733 046A 	;W = Cmd - Max
01734 046A 3F02 	                       moviw                  2[FRS0]
01735 046B 027C 	                       subwf                  Param7C,W
01736 046C 3F03 	                       moviw                  3[FRS0]
01737 046D 3B7D 	                       subwfb                 Param7D,W
01738 046E 	                       SKPB                                          ;Cmd > Max?
01738 046E 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01739 046F 320D 	                       bra                    ClampInt_tooHigh       ; Yes, Fix it
01740 0470 3200 	                       bra                    ClampInt_1             ; No, check for < Min
01741 0471 	;
01742 0471 	; W=Cmd - Min
01743 0471 3F00 	ClampInt_1             moviw                  0[FRS0]
01744 0472 027C 	                       subwf                  Param7C,W
01745 0473 3F01 	                       moviw                  1[FSR0]
01746 0474 3B7D 	                       subwfb                 Param7D,W
01747 0475 	                       SKPB                                          ;Cmd > Min?
01747 0475 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01748 0476 0008 	                       return                                        ; Yes
01749 0477 3200 	                       bra                    ClampInt_tooLow        ; No, Fix it
01750 0478 	;
01751 0478 3F00 	ClampInt_tooLow	moviw                  0[FRS0]
01752 0479 00FC 		MOVWF	Param7C
01753 047A 3F01 		moviw                  1[FRS0]
01754 047B 00FD 		MOVWF	Param7D
01755 047C 0008 		RETURN
SerialServo.asm                                                       Page: 30
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01756 047D 	;
01757 047D 3F02 	ClampInt_tooHigh	moviw                  2[FRS0]
01758 047E 00FC 		MOVWF	Param7C
01759 047F 3F03 		moviw                  3[FRS0]
01760 0480 00FD 		MOVWF	Param7D
01761 0481 0008 		RETURN
01762 0482 	;
01763 0482 	;=========================================================================================
01764 0482 	; ***************************************************************************************
01765 0482 	;=========================================================================================
01766 0482 	; Interupt Service Routine for Aux IO
01767 0482 	; Call from ISR every 1/100th second.
01768 0482 	;
01769 0482 	HandleAuxIO:
01770 0482 	;-------------------------------
01771 0482 	; Aux0 LED/Switch
01772 0482 0020 		movlb                  0                      ;bank 0
01773 0483 0858 		movf	ssAux0Config,W
01774 0484 3907 		andlw	0x07	;keep mode
01775 0485 000B 		brw
01776 0486 3235 		bra	Aux0_ISR_End	;kAuxIOnone
01777 0487 3206 		bra	Aux0_LEDBtn	;kAuxIOLEDBtn
01778 0488 3210 		bra	Aux0_Digital_In	;kAuxIODigitalIn
01779 0489 3211 		bra	Aux0_Digital_Out	;kAuxIODigitalOut
01780 048A 3231 		bra	Aux0_ISR_End	;kAuxIOAnalogIn
01781 048B 321A 		bra	Aux0_HomeSW	;kAuxIOHomeSw
01782 048C 321E 		bra	Aux0_FwdLimit	;kAuxIOFwdLimit
01783 048D 3222 		bra	Aux0_RevLimit	;kAuxIORevLimit
01784 048E 		
01785 048E 	;
01786 048E 0021 	Aux0_LEDBtn	movlb                  1                      ;bank 1
01787 048F 150C 	                       bsf	Aux0_LED1_TRIS	;LED off
01788 0490 0000 		nop
01789 0491 0000 		nop
01790 0492 0000 		nop
01791 0493 24B5 		call	Read_Aux0_Sw1
01792 0494 	;
01793 0494 1D24 		btfss	Aux0_LED1_Active	;LED Active?
01794 0495 3226 		bra	Aux0_ISR_End
01795 0496 0021 		movlb                  1                      ;bank 1
01796 0497 110C 		bcf	Aux0_LED1_TRIS	; Yes, LED On
01797 0498 3223 		bra	Aux0_ISR_End
01798 0499 	;
01799 0499 24B5 	Aux0_Digital_In	call	Read_Aux0_Sw1
01800 049A 3221 		bra	Aux0_ISR_End
01801 049B 	;
01802 049B 0103 	Aux0_Digital_Out       clrw
01803 049C 1824 	                       btfsc                  Aux0_SW1_Active
01804 049D 1409 	                       bsf                    WREG,0
01805 049E 0022 	                       movlb                  2                      ;bank 2
01806 049F 1809 	                       btfsc                  WREG,0
01807 04A0 150C 	                       bsf                    Aux0_LED1_Lat
01808 04A1 1C09 	                       btfss                  WREG,0
01809 04A2 110C 	                       bcf                    Aux0_LED1_Lat
01810 04A3 0021 	                       movlb                  1                      ;bank 1
01811 04A4 110C 	                       bcf                    Aux0_LED1_TRIS         ;output
01812 04A5 3216 	                       bra                    Aux0_ISR_End
01813 04A6 	;
01814 04A6 24B5 	Aux0_HomeSW	call	Read_Aux0_Sw1
01815 04A7 	;
01816 04A7 12B9 		bcf	HomeSwitch
01817 04A8 1824 		btfsc	Aux0_SW1_Active	;Active?
01818 04A9 16B9 		bsf	HomeSwitch	; Yes
01819 04AA 3211 		bra	Aux0_ISR_End
01820 04AB 	;
01821 04AB 24B5 	Aux0_FwdLimit	call	Read_Aux0_Sw1
01822 04AC 	;
01823 04AC 11B9 		bcf	ForwardLimit
01824 04AD 1824 		btfsc	Aux0_SW1_Active	;Active?
01825 04AE 15B9 		bsf	ForwardLimit	; Yes
01826 04AF 320C 		bra	Aux0_ISR_End
01827 04B0 	;
01828 04B0 24B5 	Aux0_RevLimit	call	Read_Aux0_Sw1
01829 04B1 	;
01830 04B1 1239 		bcf	ReverseLimit
01831 04B2 1824 		btfsc	Aux0_SW1_Active	;Active?
01832 04B3 1639 		bsf	ReverseLimit	; Yes
01833 04B4 3207 		bra	Aux0_ISR_End
01834 04B5 	;
01835 04B5 0020 	Read_Aux0_Sw1	movlb                  0                      ;bank 0
01836 04B6 1024 	                       bcf	Aux0_SW1_Active
01837 04B7 1D0C 		btfss	Aux0_SW1_PORT	;Switch input low?
01838 04B8 1424 		bsf	Aux0_SW1_Active	; Yes
01839 04B9 1C24 		btfss	Aux0_SW1_Active	;Active?
01840 04BA 10A4 		bcf	Aux0_SW1_Debounce	; No
01841 04BB 0008 		return
01842 04BC 	;
01843 04BC 	Aux0_ISR_End:
01844 04BC 	;
01845 04BC 	;-------------------------------
01846 04BC 	; Aux1 LED/Switch
01847 04BC 0020 		movlb                  0                      ;bank 0
01848 04BD 0859 		movf	ssAux1Config,W
01849 04BE 3907 		andlw	0x07	;keep mode
01850 04BF 000B 		brw
01851 04C0 3235 		bra	Aux1_ISR_End	;kAuxIOnone
01852 04C1 3206 		bra	Aux1_LEDBtn	;kAuxIOLEDBtn
01853 04C2 3210 		bra	Aux1_Digital_In	;kAuxIODigitalIn
01854 04C3 3211 		bra	Aux1_Digital_Out	;kAuxIODigitalOut
SerialServo.asm                                                       Page: 31
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01855 04C4 3231 		bra	Aux1_ISR_End	;kAuxIOAnalogIn
01856 04C5 321A 		bra	Aux1_HomeSW	;kAuxIOHomeSw
01857 04C6 321E 		bra	Aux1_FwdLimit	;kAuxIOFwdLimit
01858 04C7 3222 		bra	Aux1_RevLimit	;kAuxIORevLimit
01859 04C8 		
01860 04C8 	;
01861 04C8 0021 	Aux1_LEDBtn	movlb                  1                      ;bank 1
01862 04C9 158C 	                       bsf	Aux1_LED2_TRIS	;LED off
01863 04CA 0000 		nop
01864 04CB 0000 		nop
01865 04CC 0000 		nop
01866 04CD 24EF 		call	Read_Aux1_Sw2
01867 04CE 	;
01868 04CE 1EA4 		btfss	Aux1_LED2_Active	;LED Active?
01869 04CF 3226 		bra	Aux1_ISR_End
01870 04D0 0021 		movlb                  1                      ;bank 1
01871 04D1 118C 		bcf	Aux1_LED2_TRIS	; Yes, LED On
01872 04D2 3223 		bra	Aux1_ISR_End
01873 04D3 	;
01874 04D3 24EF 	Aux1_Digital_In	call	Read_Aux1_Sw2
01875 04D4 3221 		bra	Aux1_ISR_End
01876 04D5 	;
01877 04D5 0103 	Aux1_Digital_Out       clrw
01878 04D6 19A4 	                       btfsc                  Aux1_SW2_Active
01879 04D7 1409 	                       bsf                    WREG,0
01880 04D8 0022 	                       movlb                  2                      ;bank 2
01881 04D9 1809 	                       btfsc                  WREG,0
01882 04DA 158C 	                       bsf                    Aux1_LED2_Lat
01883 04DB 1C09 	                       btfss                  WREG,0
01884 04DC 118C 	                       bcf                    Aux1_LED2_Lat
01885 04DD 0021 	                       movlb                  1                      ;bank 1
01886 04DE 118C 	                       bcf                    Aux1_LED2_TRIS         ;output
01887 04DF 3216 	                       bra                    Aux1_ISR_End
01888 04E0 	;
01889 04E0 24EF 	Aux1_HomeSW	call	Read_Aux1_Sw2
01890 04E1 	;
01891 04E1 12B9 		bcf	HomeSwitch
01892 04E2 19A4 		btfsc	Aux1_SW2_Active	;Active?
01893 04E3 16B9 		bsf	HomeSwitch	; Yes
01894 04E4 3211 		bra	Aux1_ISR_End
01895 04E5 	;
01896 04E5 24EF 	Aux1_FwdLimit	call	Read_Aux1_Sw2
01897 04E6 	;
01898 04E6 11B9 		bcf	ForwardLimit
01899 04E7 19A4 		btfsc	Aux1_SW2_Active	;Active?
01900 04E8 15B9 		bsf	ForwardLimit	; Yes
01901 04E9 320C 		bra	Aux1_ISR_End
01902 04EA 	;
01903 04EA 24EF 	Aux1_RevLimit	call	Read_Aux1_Sw2
01904 04EB 	;
01905 04EB 1239 		bcf	ReverseLimit
01906 04EC 19A4 		btfsc	Aux1_SW2_Active	;Active?
01907 04ED 1639 		bsf	ReverseLimit	; Yes
01908 04EE 3207 		bra	Aux1_ISR_End
01909 04EF 	;
01910 04EF 0020 	Read_Aux1_Sw2	movlb                  0                      ;bank 0
01911 04F0 11A4 	                       bcf	Aux1_SW2_Active
01912 04F1 1D8C 		btfss	Aux1_SW2_PORT	;Switch input low?
01913 04F2 15A4 		bsf	Aux1_SW2_Active	; Yes
01914 04F3 1DA4 		btfss	Aux1_SW2_Active	;Active?
01915 04F4 1224 		bcf	Aux1_SW2_Debounce	; No
01916 04F5 0008 		return
01917 04F6 	;
01918 04F6 	Aux1_ISR_End:
01919 04F6 	;
01920 04F6 	;-------------------------------
01921 04F6 	; Aux2 LED/Switch
01922 04F6 0020 		movlb                  0                      ;bank 0
01923 04F7 085A 		movf	ssAux2Config,W
01924 04F8 3907 		andlw	0x07	;keep mode
01925 04F9 000B 		brw
01926 04FA 3235 		bra	Aux2_ISR_End	;kAuxIOnone
01927 04FB 3206 		bra	Aux2_LEDBtn	;kAuxIOLEDBtn
01928 04FC 3210 		bra	Aux2_Digital_In	;kAuxIODigitalIn
01929 04FD 3211 		bra	Aux2_Digital_Out	;kAuxIODigitalOut
01930 04FE 3231 		bra	Aux2_ISR_End	;kAuxIOAnalogIn
01931 04FF 321A 		bra	Aux2_HomeSW	;kAuxIOHomeSw
01932 0500 321E 		bra	Aux2_FwdLimit	;kAuxIOFwdLimit
01933 0501 3222 		bra	Aux2_RevLimit	;kAuxIORevLimit
01934 0502 		
01935 0502 	;
01936 0502 0022 	Aux2_LEDBtn	movlb                  2                      ;bank 2
01937 0503 160C 	                       bsf	Aux2_LED3_TRIS	;LED off
01938 0504 0000 		nop
01939 0505 0000 		nop
01940 0506 0000 		nop
01941 0507 2529 		call	Read_Aux2_Sw3
01942 0508 	;
01943 0508 1C25 		btfss	Aux2_LED3_Active	;LED Active?
01944 0509 3226 		bra	Aux2_ISR_End
01945 050A 0021 		movlb                  1                      ;bank 1
01946 050B 120C 		bcf	Aux2_LED3_TRIS	; Yes, LED On
01947 050C 3223 		bra	Aux2_ISR_End
01948 050D 	;
01949 050D 2529 	Aux2_Digital_In	call	Read_Aux2_Sw3
01950 050E 3221 		bra	Aux2_ISR_End
01951 050F 	;
01952 050F 0103 	Aux2_Digital_Out       clrw
01953 0510 1B24 	                       btfsc                  Aux2_SW3_Active
SerialServo.asm                                                       Page: 32
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01954 0511 1409 	                       bsf                    WREG,0
01955 0512 0022 	                       movlb                  2                      ;bank 2
01956 0513 1809 	                       btfsc                  WREG,0
01957 0514 160C 	                       bsf                    Aux2_LED3_Lat
01958 0515 1C09 	                       btfss                  WREG,0
01959 0516 120C 	                       bcf                    Aux2_LED3_Lat
01960 0517 0021 	                       movlb                  1                      ;bank 1
01961 0518 120C 	                       bcf                    Aux2_LED3_TRIS         ;output
01962 0519 3216 	                       bra                    Aux2_ISR_End
01963 051A 	;
01964 051A 2529 	Aux2_HomeSW	call	Read_Aux2_Sw3
01965 051B 	;
01966 051B 12B9 		bcf	HomeSwitch
01967 051C 1B24 		btfsc	Aux2_SW3_Active	;Active?
01968 051D 16B9 		bsf	HomeSwitch	; Yes
01969 051E 3211 		bra	Aux2_ISR_End
01970 051F 	;
01971 051F 2529 	Aux2_FwdLimit	call	Read_Aux2_Sw3
01972 0520 	;
01973 0520 11B9 		bcf	ForwardLimit
01974 0521 1B24 		btfsc	Aux2_SW3_Active	;Active?
01975 0522 15B9 		bsf	ForwardLimit	; Yes
01976 0523 320C 		bra	Aux2_ISR_End
01977 0524 	;
01978 0524 2529 	Aux2_RevLimit	call	Read_Aux2_Sw3
01979 0525 	;
01980 0525 1239 		bcf	ReverseLimit
01981 0526 1B24 		btfsc	Aux2_SW3_Active	;Active?
01982 0527 1639 		bsf	ReverseLimit	; Yes
01983 0528 3207 		bra	Aux2_ISR_End
01984 0529 	;
01985 0529 0020 	Read_Aux2_Sw3	movlb                  0                      ;bank 0
01986 052A 1324 	                       bcf	Aux2_SW3_Active
01987 052B 1E0C 		btfss	Aux2_SW3_PORT	;Switch input low?
01988 052C 1724 		bsf	Aux2_SW3_Active	; Yes
01989 052D 1F24 		btfss	Aux2_SW3_Active	;Active?
01990 052E 13A4 		bcf	Aux2_SW3_Debounce	; No
01991 052F 0008 		return
01992 0530 	;
01993 0530 	Aux2_ISR_End:
01994 0530 0020 	                       movlb                  0                      ;bank 0
01995 0531 0008 	                       return
01996 0532 	;
01997 0532 	                       if oldCode
02139 0532 	                       endif
02140 0532 	;
02141 0532 	;=========================================================================================
02142 0532 	;=========================================================================================
02143 0532 	;
02144 0532 	                       if UsePID
02147 0532 		endif
02148 0532 	;
02149 0532 	;
02150 0532 	;
02151 0532 		org 0x800
02152 0800 		include <SerialServoCmds.inc>
00001 0800 	;=========================================================================================
00002 0800 	;
00003 0800 	;    Filename:      SerialServoCmds.inc
00004 0800 	;    Date:          6/1/2018
00005 0800 	;    File Version:  1.1
00006 0800 	;
00007 0800 	;    Author:        David M. Flynn
00008 0800 	;    Company:       Oxford V.U.E., Inc.
00009 0800 	;    E-Mail:        dflynn@oxfordvue.com
00010 0800 	;    Web Site:      http://www.oxfordvue.com/
00011 0800 	;
00012 0800 	;=========================================================================================
00013 0800 	; Notes:
00014 0800 	;  Command interpreter for SerialServo
00015 0800 	;
00016 0800 	; History
00017 0800 	; 1.1    6/1/2018	All commands are here now.
00018 0800 	; 1.0    5/25/2018	Moved out of SerialServo.asm
00019 0800 	;=========================================================================================
00020 0800 	;
00021 0800 0081 	kCmd_SetMode	EQU	0x81	;+1 data (SysMode), return ACK
00022 0800 0001 	kCmd_GetMode	EQU	0x01
00023 0800 0082 	kCmd_SetCmdPos	EQU	0x82	;+2 data (ssCmdPos), return ACK
00024 0800 0002 	kCmd_GetCmdPos	EQU	0x02
00025 0800 0083 	kCmd_SetMaxI	EQU	0x83	;+1 data (ssMaxI), return ACK
00026 0800 0003 	kCmd_GetMaxI	EQU	0x03
00027 0800 0084 	kCmd_SetFFwd	EQU	0x84	;+2 data (ServoFastForward), return ACK
00028 0800 0004 	kCmd_GetFFwd	EQU	0x04
00029 0800 0085 	kCmd_SetFRev	EQU	0x85	;+2 data (ServoFastReverse), return ACK
00030 0800 0005 	kCmd_GetFRev	EQU	0x05
00031 0800 0086 	kCmd_SetMin_uS	EQU	0x86	;+2 data (ServoMin_uS), return ACK
00032 0800 0006 	kCmd_GetMin_uS	EQU	0x06
00033 0800 0087 	kCmd_SetMax_uS	EQU	0x87	;+2 data (ServoMax_uS), return ACK
00034 0800 0007 	kCmd_GetMax_uS	EQU	0x07
00035 0800 0088 	kCmd_SetRevDir	EQU	0x88	;+1 data (ssReverseDir), return ACK
00036 0800 0008 	kCmd_GetRevDir	EQU	0x08
00037 0800 0089 	kCmd_SetEnaOvrCur	EQU	0x89	;+1 data (ssEnableOverCur), return ACK
00038 0800 0009 	kCmd_GetEnaOvrCur	EQU	0x09
00039 0800 	;
00040 0800 008B 	kCmd_SetStopCenter	EQU	0x8B	;+2 data (ServoStopCenter), return ACK
00041 0800 000B 	kCmd_GetStopCenter	EQU	0x0B
00042 0800 008C 	kCmd_SetSpeed	EQU	0x8C	;+1 data (ServoSpeed), return ACK
00043 0800 000C 	kCmd_GetSpeed	EQU	0x0C
SerialServo.asm                                                       Page: 33
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00044 0800 008D 	kCmd_SetUseIdleCenter	EQU	0x8D	;+1 data (ssMode3IdleCenter), return ACK
00045 0800 000D 	kCmd_GetUseIdleCenter	EQU	0x0D
00046 0800 008E 	kCmd_SetDeadBand	EQU	0x8E	;+1 data (DeadBand), return ACK
00047 0800 000E 	kCmd_GetDeadBand	EQU	0x0E
00048 0800 008F 	kCmd_SetUseFastPWM	EQU	0x8F	;+1 data (ssEnableFastPWM), return ACK
00049 0800 000F 	kCmd_GetUseFastPWM	EQU	0x0F
00050 0800 	;
00051 0800 00B1 	kCmd_SetGripI	EQU	0xB1	;+1 data (ssGripI), return ACK
00052 0800 0021 	kCmd_GetGripI	EQU	0x21
00053 0800 00B2 	kCmd_SetAuxConfig	EQU	0xB2	;+2 data (AuxNum,Value), return ACK
00054 0800 0022 	kCmd_GetAuxConfig	EQU	0x22	;+1 data (AuxNum)
00055 0800 00B3 	kCmd_SetAuxNValue	EQU	0xB3	;+2 data (AuxNum,Value), return ACK
00056 0800 0023 	kCmd_GetAuxNValue	EQU	0x23	;(AuxN,ValueL,ValueH)
00057 0800 00B4 	kCmd_SetEncoderOffset	EQU	0xB4	;+2 data (EncoderOffset), return ACK
00058 0800 0024 	kCmd_GetEncoderOffset	EQU	0x24
00059 0800 	                       if UsePID
00066 0800 	                       endif
00067 0800 	;
00068 0800 0091 	kCmd_GetI	EQU	0x91	;return Cur_AN0
00069 0800 0092 	kCmd_GetEnc	EQU	0x92	;return EncoderVal
00070 0800 0093 	kCmd_GetEncAbs	EQU	0x93	;return EncoderAccum
00071 0800 0094 	kCmd_SaveParams	EQU	0x94	;Save all eeprom params, return ACK
00072 0800 0095 	kCmd_RestoreParams	EQU	0x95	;Copy to ram, return ACK
00073 0800 0096 	kCmd_GetBattVolts	EQU	0x96	;return Cur_AN7
00074 0800 0097 	kCmd_GetCalPot	EQU	0x97	;return Cur_AN4
00075 0800 0098 	kCmd_GetStatus	EQU	0x98	;return ssStatus
00076 0800 0099 	kCmd_ReBoot	EQU	0x99	;ReBoot the controller
00077 0800 009A 	kCmd_RunBootloader	EQU	0x9A	;Set EEPROM (0xFF) = 0xFF and reboot
00078 0800 	;
00079 0800 	; these commands save params and return a 0,0,0,0 packet with the new address
00080 0800 00A1 	kCmd_SetMasterAddr	EQU	0xA1	;+1 data, return a zero packet
00081 0800 00A2 	kCmd_SetSlaveAddr	EQU	0xA2	;+1 data, return a zero packet
00082 0800 	;
00083 0800 	;Special packet (0xDD, 0xDD, 0x01, 0x02, 0xAA, 0x00, 0x00, 0x00, checksum)
00084 0800 00AA 	kCmd_SendIDString	EQU	0xAA	; returns "DMFE Serial Servo\n"
00085 0800 	;
00086 0800 	;=========================================================================================
00087 0800 	;
00088 0800 	RS232_Send_S0	mLongCall	RS232_Send
00088 0800 3181      M		movlp	RS232_Send	                       movlp                  Destination
00088 0801 21D4      M		call	RS232_Send	                       call                   Destination
00088 0802 3188      M		movlp	$	                       movlp                  $
00089 0803 0008 		return
00090 0804 	;
00091 0804 	;=========================================================================================
00092 0804 	; Entry: RXDataIsNew=1, data in RX_Data
00093 0804 	;
00094 0804 0021 	HandleRXData	movlb	RX_Flags	;bank 1
00095 0805 10A1 		bcf	RXDataIsNew
00096 0806 1821 		btfsc	RXDataValidFlag	;from master to me?
00097 0807 3202 		bra	HandleRXData_1
00098 0808 0020 	HandleRXData_Rtn	movlb	0	;bank 0
00099 0809 0008 		return		; no, ignore this packet
00100 080A 	;
00101 080A 0020 	HandleRXData_1	movlb	0	;bank 0
00102 080B 	                       mMOVLF	RX_Data,FSR1
00102 080B 30AA      M		movlw	low RX_Data	                       movlw                  low ADDRESS
00102 080C 0086      M		movwf	FSR1	                       movwf                  DEST
00102 080D 3000      M		movlw	high RX_Data	                       movlw                  high ADDRESS
00102 080E 0087      M		movwf	FSR1+1	                       movwf                  DEST+1
00103 080F 		mMOVLF	TX_Data,FSR0
00103 080F 30AE      M		movlw	low TX_Data	                       movlw                  low ADDRESS
00103 0810 0084      M		movwf	FSR0	                       movwf                  DEST
00103 0811 3000      M		movlw	high TX_Data	                       movlw                  high ADDRESS
00103 0812 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
00104 0813 	;Dispatcher
00105 0813 	;
00106 0813 0016 		moviw	FSR1++
00107 0814 00F8 		movwf	Param78	;aka RX_Data
00108 0815 39F0 		andlw                  0xF0
00109 0816 		SKPZ
00109 0816 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00110 0817 3213 		bra                    Dispatcher_1
00111 0818 0878 		movf                   Param78,W
00112 0819 390F 		andlw                  0x0F
00113 081A 	;Jump table for 0x00 to 0x0F
00114 081A 000B 	                       brw
00115 081B 0008 	                       return                                        ;0x00 not used
00116 081C 327F 	                       bra                    Cmd_GetMode
00117 081D 3286 	                       bra                    Cmd_GetCmdPos
00118 081E 28AD 	                       goto                   Cmd_GetMaxI
00119 081F 28B5 	                       goto                   Cmd_GetFFwd
00120 0820 28BF 	                       goto                   Cmd_GetFRev
00121 0821 28C9 	                       goto                   Cmd_GetMin_uS
00122 0822 28D3 	                       goto                   Cmd_GetMax_uS
00123 0823 28DE 	                       goto                   Cmd_GetRevDir
00124 0824 28E7 	                       goto                   Cmd_GetEnaOvrCur       ;9
00125 0825 0008 	                       return
00126 0826 28EF 	                       goto                   Cmd_GetStopCenter
00127 0827 28F8 	                       goto                   Cmd_GetSpeed
00128 0828 2901 	                       goto                   Cmd_GetUseIdleCenter
00129 0829 2907 	                       goto                   Cmd_GetDeadBand
00130 082A 2910 	                       goto                   Cmd_GetUseFastPWM
00131 082B 	;
00132 082B 3C80 	Dispatcher_1           sublw                  0x80
00133 082C 	                       SKPZ
00133 082C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00134 082D 3213 	                       bra                    Dispatcher_2
00135 082E 0878 	                       movf                   Param78,W
SerialServo.asm                                                       Page: 34
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00136 082F 390F 		andlw                  0x0F
00137 0830 	;Jump table for 0x80 to 0x8F
00138 0830 000B 	                       brw
00139 0831 0008 	                       return                                        ;0x80 not used
00140 0832 3262 	                       bra                    Cmd_SetMode
00141 0833 326B 	                       bra                    Cmd_SetCmdPos
00142 0834 28AA 	                       goto                   Cmd_SetMaxI
00143 0835 28B0 	                       goto                   Cmd_SetFFwd
00144 0836 28BA 	                       goto                   Cmd_SetFRev
00145 0837 28C4 	                       goto                   Cmd_SetMin_uS
00146 0838 28CE 	                       goto                   Cmd_SetMax_uS
00147 0839 28D8 	                       goto                   Cmd_SetRevDir
00148 083A 28E1 	                       goto                   Cmd_SetEnaOvrCur
00149 083B 0008 	                       return
00150 083C 28EA 	                       goto                   Cmd_SetStopCenter
00151 083D 28F4 	                       goto                   Cmd_SetSpeed
00152 083E 28FB 	                       goto                   Cmd_SetUseIdleCenter
00153 083F 2904 	                       goto                   Cmd_SetDeadBand
00154 0840 290A 	                       goto                   Cmd_SetUseFastPWM
00155 0841 	;
00156 0841 	;Jump table for 0x20 to 0x27
00157 0841 0878 	Dispatcher_2           movf                   Param78,W
00158 0842 39F0 	                       andlw                  0xF0
00159 0843 3C20 	                       sublw                  0x20
00160 0844 	                       SKPZ
00160 0844 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00161 0845 320D 	                       bra                    Dispatcher_3
00162 0846 19F8 	                       btfsc                  Param78,3              ;>7?
00163 0847 0008 	                       return                                        ; Yes, oops
00164 0848 3007 	                       movlw                  0x07
00165 0849 0578 	                       andwf                  Param78,W
00166 084A 000B 	                       brw
00167 084B 0008 	                       return
00168 084C 2916 	                       goto                   Cmd_GetGripI
00169 084D 2996 	                       goto                   Cmd_GetAuxConfig
00170 084E 29D1 	                       goto                   Cmd_GetAuxNValue
00171 084F 2A1B 	                       goto                   Cmd_GetEncoderOffset
00172 0850 	                       if UsePID
00176 0850 	                       else
00177 0850 0008 	                       return
00178 0851 0008 	                       return
00179 0852 0008 	                       return
00180 0853 	                       endif
00181 0853 	;
00182 0853 0878 	Dispatcher_3           movf                   Param78,W
00183 0854 39F0 	                       andlw                  0xF0
00184 0855 3CB0 	                       sublw                  0xB0
00185 0856 	                       SKPZ
00185 0856 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00186 0857 320D 	                       bra                    Dispatcher_4
00187 0858 19F8 	                       btfsc                  Param78,3              ;>7?
00188 0859 0008 	                       return                                        ; Yes, oops
00189 085A 3007 	                       movlw                  0x07
00190 085B 0578 	                       andwf                  Param78,W
00191 085C 000B 	                       brw
00192 085D 0008 	                       return
00193 085E 2913 	                       goto                   Cmd_SetGripI
00194 085F 2919 	                       goto                   Cmd_SetAuxConfig
00195 0860 29A2 	                       goto                   Cmd_SetAuxNValue
00196 0861 2A16 	                       goto                   Cmd_SetEncoderOffset
00197 0862 	                       if UsePID
00201 0862 	                       else
00202 0862 0008 	                       return
00203 0863 0008 	                       return
00204 0864 0008 	                       return
00205 0865 	                       endif
00206 0865 	;
00207 0865 	;Jump table for 0x90 to 0x9F
00208 0865 0878 	Dispatcher_4           movf                   Param78,W
00209 0866 39F0 	                       andlw                  0xF0
00210 0867 3C90 	                       sublw                  0x90
00211 0868 	                       SKPZ
00211 0868 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00212 0869 3213 	                       bra                    Dispatcher_5
00213 086A 300F 	                       movlw                  0x0F
00214 086B 0578 	                       andwf                  Param78,W
00215 086C 000B 	                       brw
00216 086D 0008 	                       return                                        ;0x90 not used
00217 086E 2A20 	                       goto                   Cmd_GetI
00218 086F 2A26 	                       goto                   Cmd_GetEnc
00219 0870 2A2B 	                       goto                   Cmd_GetEncAbs
00220 0871 2A36 	                       goto                   Cmd_SaveParams
00221 0872 2A3A 	                       goto                   Cmd_RestoreParams
00222 0873 2A3E 	                       goto                   Cmd_GetBattVolts
00223 0874 0008 	                       return                                        ;goto                   Cmd_GetCalPot
00224 0875 2A4A 	                       goto                   Cmd_GetStatus
00225 0876 0001 	                       reset                                         ;Cmd_ReBoot
00226 0877 2A57 	                       goto                   Cmd_RunBootloader
00227 0878 0008 	                       return
00228 0879 0008 	                       return
00229 087A 0008 	                       return
00230 087B 0008 	                       return
00231 087C 0008 	                       return
00232 087D 	;
00233 087D 	;Jump table for 0xA0 to 0xAF
00234 087D 0878 	Dispatcher_5           movf                   Param78,W
00235 087E 39F0 	                       andlw                  0xF0
00236 087F 3CA0 	                       sublw                  0xA0
00237 0880 	                       SKPZ
SerialServo.asm                                                       Page: 35
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00237 0880 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00238 0881 3203 	                       bra                    Dispatcher_6
00239 0882 300F 	                       movlw                  0x0F
00240 0883 0578 	                       andwf                  Param78,W
00241 0884 000B 	                       brw
00242 0885 0008 	Dispatcher_6           return                                        ;0xA0 not used
00243 0886 2A5D 	                       goto                   Cmd_SetMasterAddr
00244 0887 2A63 	                       goto                   Cmd_SetSlaveAddr
00245 0888 0008 	                       return
00246 0889 0008 	                       return
00247 088A 0008 	                       return
00248 088B 0008 	                       return
00249 088C 0008 	                       return
00250 088D 0008 	                       return
00251 088E 0008 	                       return
00252 088F 2A69 	                       goto                   Cmd_SendIDString       ;0xAA
00253 0890 0008 	                       return
00254 0891 0008 	                       return
00255 0892 0008 	                       return
00256 0893 0008 	                       return
00257 0894 0008 	                       return
00258 0895 	;
00259 0895 	;---kCmd_SetMode----------------
00260 0895 	; Set Mode
00261 0895 3005 	Cmd_SetMode	movlw	kMaxMode+1
00262 0896 0201 		subwf	INDF1,W
00263 0897 		SKPB		;kMaxMode+1>Data
00263 0897 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00264 0898 336F 		bra	HandleRXData_Rtn
00265 0899 	;
00266 0899 0016 		moviw	FSR1++
00267 089A 00D1 		movwf	SysMode
00268 089B 2A8A 		goto	TX_ACK
00269 089C 	;
00270 089C 	;---kCmd_GetMode------------------
00271 089C 0851 	Cmd_GetMode	movf	SysMode,W
00272 089D 001A 		movwi	FSR0++
00273 089E 2800 		goto	RS232_Send_S0
00274 089F 	;
00275 089F 	;---kCmd_SetCmdPos-------------------
00276 089F 	; Set Command Position
00277 089F 0016 	Cmd_SetCmdPos	moviw	FSR1++
00278 08A0 00B3 		movwf	ssCmdPos
00279 08A1 0016 		moviw	FSR1++
00280 08A2 00B4 		movwf	ssCmdPos+1
00281 08A3 2A8A 		goto	TX_ACK
00282 08A4 	;
00283 08A4 	;---kCmd_GetCmdPos------------------
00284 08A4 	; Get Command Position
00285 08A4 0833 	Cmd_GetCmdPos	movf	ssCmdPos,W
00286 08A5 001A 		movwi	FSR0++
00287 08A6 0834 		movf	ssCmdPos+1,W
00288 08A7 001A 		movwi	FSR0++
00289 08A8 1139 		bcf                    ssCmdPosVerified
00290 08A9 2800 		goto	RS232_Send_S0
00291 08AA 	;
00292 08AA 	Cmd_GetCmdPos_end:
00293 08AA 	;---kCmd_SetMaxI-------------------
00294 08AA 	; Set Max Current
00295 08AA 0016 	Cmd_SetMaxI	moviw	FSR1++
00296 08AB 00D5 		movwf	ssMaxI
00297 08AC 2A8A 		goto	TX_ACK
00298 08AD 	;
00299 08AD 	;---kCmd_GetMaxI-------------------
00300 08AD 	; Get Max Current
00301 08AD 0855 	Cmd_GetMaxI	movf	ssMaxI,W
00302 08AE 001A 		movwi	FSR0++
00303 08AF 2800 		goto	RS232_Send_S0
00304 08B0 	;
00305 08B0 	;---kCmd_SetFFwd-------------------
00306 08B0 	; Set ServoFastForward
00307 08B0 0016 	Cmd_SetFFwd	moviw	FSR1++
00308 08B1 00C8 		movwf	ServoFastForward
00309 08B2 0016 		moviw	FSR1++
00310 08B3 00C9 		movwf	ServoFastForward+1
00311 08B4 2A8A 		goto	TX_ACK
00312 08B5 	;
00313 08B5 	;---kCmd_GetFFwd-------------------
00314 08B5 	; Get ServoFastForward
00315 08B5 0848 	Cmd_GetFFwd	movf	ServoFastForward,W
00316 08B6 001A 		movwi	FSR0++
00317 08B7 0849 		movf	ServoFastForward+1,W
00318 08B8 001A 		movwi	FSR0++
00319 08B9 2800 		goto	RS232_Send_S0
00320 08BA 	;
00321 08BA 	;---kCmd_SetFRev-------------------
00322 08BA 	; Set ServoFastReverse
00323 08BA 0016 	Cmd_SetFRev	moviw	FSR1++
00324 08BB 00C6 		movwf	ServoFastReverse
00325 08BC 0016 		moviw	FSR1++
00326 08BD 00C7 		movwf	ServoFastReverse+1
00327 08BE 2A8A 		goto	TX_ACK
00328 08BF 	;
00329 08BF 	;---kCmd_GetFRev------------------
00330 08BF 	; Get ServoFastReverse
00331 08BF 0846 	Cmd_GetFRev	movf	ServoFastReverse,W
00332 08C0 001A 		movwi	FSR0++
00333 08C1 0847 		movf	ServoFastReverse+1,W
00334 08C2 001A 		movwi	FSR0++
SerialServo.asm                                                       Page: 36
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00335 08C3 2800 		goto	RS232_Send_S0
00336 08C4 	;
00337 08C4 	;---kCmd_SetMin_uS-------------------
00338 08C4 	; Set ServoMin_uS
00339 08C4 0016 	Cmd_SetMin_uS	moviw	FSR1++
00340 08C5 00CC 		movwf	ServoMin_uS
00341 08C6 0016 		moviw	FSR1++
00342 08C7 00CD 		movwf	ServoMin_uS+1
00343 08C8 2A8A 		goto	TX_ACK
00344 08C9 	;
00345 08C9 	;---kCmd_GetMin_uS----------------
00346 08C9 	; Get ServoMin_uS
00347 08C9 084C 	Cmd_GetMin_uS	movf	ServoMin_uS,W
00348 08CA 001A 		movwi	FSR0++
00349 08CB 084D 		movf	ServoMin_uS+1,W
00350 08CC 001A 		movwi	FSR0++
00351 08CD 2800 		goto	RS232_Send_S0
00352 08CE 	;
00353 08CE 	;---kCmd_SetMax_uS-------------------
00354 08CE 	; Set ServoMax_uS
00355 08CE 0016 	Cmd_SetMax_uS	moviw	FSR1++
00356 08CF 00CE 		movwf	ServoMax_uS
00357 08D0 0016 		moviw	FSR1++
00358 08D1 00CF 		movwf	ServoMax_uS+1
00359 08D2 2A8A 		goto	TX_ACK
00360 08D3 	;
00361 08D3 	;---kCmd_GetMax_uS-----------------
00362 08D3 	; Get ServoMax_uS
00363 08D3 084E 	Cmd_GetMax_uS	movf	ServoMax_uS,W
00364 08D4 001A 		movwi	FSR0++
00365 08D5 084F 		movf	ServoMax_uS+1,W
00366 08D6 001A 		movwi	FSR0++
00367 08D7 2800 		goto	RS232_Send_S0
00368 08D8 	;
00369 08D8 	;---kCmd_SetRevDir---------------
00370 08D8 10D4 	Cmd_SetRevDir	bcf	ssReverseDir
00371 08D9 3001 		movlw	0x01
00372 08DA 0601 		xorwf	INDF1,W
00373 08DB 		SKPNZ		;01h?
00373 08DB 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00374 08DC 14D4 		bsf	ssReverseDir	; Yes
00375 08DD 2A8A 		goto	TX_ACK
00376 08DE 	;
00377 08DE 	;---kCmd_GetRevDir---------------
00378 08DE 18D4 	Cmd_GetRevDir	btfsc	ssReverseDir
00379 08DF 1400 		bsf	INDF0,0
00380 08E0 2800 		goto	RS232_Send_S0
00381 08E1 	;
00382 08E1 	;---kCmd_SetEnaOvrCur------------
00383 08E1 1054 	Cmd_SetEnaOvrCur	bcf	ssEnableOverCur
00384 08E2 3001 		movlw	0x01
00385 08E3 0601 		xorwf	INDF1,W
00386 08E4 		SKPNZ
00386 08E4 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00387 08E5 1454 		bsf	ssEnableOverCur
00388 08E6 2A8A 		goto	TX_ACK
00389 08E7 	;
00390 08E7 	;---kCmd_GetEnaOvrCur------------
00391 08E7 1854 	Cmd_GetEnaOvrCur	btfsc	ssEnableOverCur
00392 08E8 1400 		bsf	INDF0,0
00393 08E9 2800 		goto	RS232_Send_S0
00394 08EA 	;
00395 08EA 	;---kCmd_SetStopCenter---------
00396 08EA 0016 	Cmd_SetStopCenter	moviw	FSR1++
00397 08EB 00CA 		movwf	ServoStopCenter
00398 08EC 0016 		moviw	FSR1++
00399 08ED 00CB 		movwf	ServoStopCenter+1
00400 08EE 2A8A 		goto	TX_ACK
00401 08EF 	;
00402 08EF 	;---kCmd_GetStopCenter---------
00403 08EF 084A 	Cmd_GetStopCenter	movf	ServoStopCenter,W
00404 08F0 001A 		movwi	FSR0++
00405 08F1 084B 		movf	ServoStopCenter+1,W
00406 08F2 001A 		movwi	FSR0++
00407 08F3 2800 		goto	RS232_Send_S0
00408 08F4 	;
00409 08F4 	;---kCmd_SetSpeed--------------
00410 08F4 0016 	Cmd_SetSpeed	moviw	FSR1++
00411 08F5 393F 		andlw	0x3F	;0..63
00412 08F6 00D0 		movwf	ServoSpeed
00413 08F7 2A8A 		goto	TX_ACK
00414 08F8 	;
00415 08F8 	;---kCmd_GetSpeed--------------
00416 08F8 0850 	Cmd_GetSpeed	movf	ServoSpeed,W
00417 08F9 001A 		movwi	FSR0++
00418 08FA 2800 		goto	RS232_Send_S0
00419 08FB 	;
00420 08FB 	;---kCmd_SetUseIdleCenter------
00421 08FB 11D4 	Cmd_SetUseIdleCenter	bcf	ssMode3IdleCenter
00422 08FC 3001 		movlw	0x01
00423 08FD 0601 		xorwf	INDF1,W
00424 08FE 		SKPNZ
00424 08FE 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00425 08FF 15D4 		bsf	ssMode3IdleCenter
00426 0900 2A8A 		goto	TX_ACK
00427 0901 	;
00428 0901 	;---kCmd_GetUseIdleCenter------
00429 0901 19D4 	Cmd_GetUseIdleCenter	btfsc	ssMode3IdleCenter
00430 0902 1400 		bsf	INDF0,0
SerialServo.asm                                                       Page: 37
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00431 0903 2800 		goto	RS232_Send_S0
00432 0904 	;
00433 0904 	;---kCmd_SetDeadBand------------
00434 0904 0016 	Cmd_SetDeadBand	moviw	FSR1++
00435 0905 00D6 		movwf	DeadBand
00436 0906 2A8A 		goto	TX_ACK	
00437 0907 	;
00438 0907 	;---kCmd_GetDeadBand------------
00439 0907 0856 	Cmd_GetDeadBand	movf	DeadBand,W
00440 0908 001A 		movwi	FSR0++
00441 0909 2800 		goto	RS232_Send_S0
00442 090A 	;
00443 090A 	;---kCmd_SetUseFastPWM----------	;+1 data (ssEnableFastPWM), return ACK
00444 090A 1254 	Cmd_SetUseFastPWM	bcf	ssEnableFastPWM
00445 090B 3001 		movlw	0x01
00446 090C 0601 		xorwf	INDF1,W
00447 090D 		SKPNZ
00447 090D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00448 090E 1654 		bsf	ssEnableFastPWM
00449 090F 2A8A 		goto	TX_ACK
00450 0910 	;
00451 0910 	;---kCmd_GetUseFastPWM----------
00452 0910 1A54 	Cmd_GetUseFastPWM	btfsc	ssEnableFastPWM
00453 0911 1400 		bsf	INDF0,0
00454 0912 2800 		goto	RS232_Send_S0
00455 0913 	;
00456 0913 	;---kCmd_SetGripI-------------------
00457 0913 	; Set Grip Current
00458 0913 0016 	Cmd_SetGripI	moviw	FSR1++
00459 0914 00D7 		movwf	ssGripI
00460 0915 2A8A 		goto	TX_ACK
00461 0916 	;
00462 0916 	;---kCmd_GetGripI-------------------
00463 0916 	; Get Grip Current
00464 0916 0857 	Cmd_GetGripI	movf	ssGripI,W
00465 0917 001A 		movwi	FSR0++
00466 0918 2800 		goto	RS232_Send_S0
00467 0919 	;
00468 0919 	;---kCmd_SetAuxConfig-----------	;+3 data (Aux0Config,Aux1Config,Aux2Config), return ACK
00469 0919 	; Set Aux N Config
00470 0919 0801 	Cmd_SetAuxConfig	movf	INDF1,W
00471 091A 3C02 		sublw	0x02	;2-AuxNum
00472 091B 		SKPNB		;<=2?
00472 091B 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00473 091C 2808 		goto	HandleRXData_Rtn	; no
00474 091D 	;
00475 091D 0016 		moviw	FSR1++
00476 091E 00F8 		movwf	Param78	;AuxNum
00477 091F 3C02 		sublw	0x02	;2-AuxNum
00478 0920 		SKPNB		;<=2?
00478 0920 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00479 0921 2808 		goto	HandleRXData_Rtn	; no
00480 0922 	;
00481 0922 0878 	                       movf                   Param78,W              ;AuxNum
00482 0923 3E58 		addlw	low ssAux0Config
00483 0924 0084 		movwf	FSR0L
00484 0925 3000 		movlw	high ssAux0Config
00485 0926 0085 		movwf	FSR0H
00486 0927 0016 		moviw	FSR1++	;New Config Value
00487 0928 3907 		andlw                  0x07
00488 0929 001A 		movwi	FSR0++
00489 092A 	;
00490 092A 	; Configure I/O Port
00491 092A 000B 	                       brw
00492 092B 3207 	                       bra                    Cmd_SetAuxNConfigNone
00493 092C 3206 	                       bra                    Cmd_SetAuxNConfigLEDBtn
00494 092D 3205 	                       bra                    Cmd_SetAuxNConfigDigIn
00495 092E 3225 	                       bra                    Cmd_SetAuxNConfigDigOut
00496 092F 3245 	                       bra                    Cmd_SetAuxNConfigAnalogIn
00497 0930 3202 	                       bra                    Cmd_SetAuxNConfigHomeSw
00498 0931 3201 	                       bra                    Cmd_SetAuxNConfigFwdLimit
00499 0932 3200 	                       bra                    Cmd_SetAuxNConfigRevLimit
00500 0933 	;
00501 0933 	Cmd_SetAuxNConfigNone:
00502 0933 	Cmd_SetAuxNConfigLEDBtn:
00503 0933 	Cmd_SetAuxNConfigDigIn:
00504 0933 	Cmd_SetAuxNConfigHomeSw:
00505 0933 	Cmd_SetAuxNConfigFwdLimit:
00506 0933 	Cmd_SetAuxNConfigRevLimit:
00507 0933 0878 	                       movf                   Param78,W              ;AuxNum
00508 0934 	                       SKPZ
00508 0934 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00509 0935 3209 	                       bra                    Cmd_SetAux1ConfigDigIn
00510 0936 	;
00511 0936 	Cmd_SetAux0ConfigDigIn:
00512 0936 0023 	                       movlb                  ANSELA                 ;bank 3
00513 0937 110C 	                       bcf                    Aux0_ANSEL_Bit         ;Digital
00514 0938 0021 	                       movlb                  1                      ;bank 1
00515 0939 11B3 	                       bcf                    AN_Aux0_ActiveBit      ;Don't Read AN
00516 093A 150C 	                       bsf                    Aux0_LED1_TRIS         ;Input
00517 093B 0022 	                       movlb                  2                      ;bank 2
00518 093C 110C 	                       bcf                    Aux0_LED1_Lat          ;0
00519 093D 0020 	                       movlb                  0                      ;bank 0
00520 093E 2A8A 	                       goto	TX_ACK
00521 093F 	;
00522 093F 	Cmd_SetAux1ConfigDigIn:
00523 093F 3C01 	                       sublw                  0x01
00524 0940 	                       SKPZ
00524 0940 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
SerialServo.asm                                                       Page: 38
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00525 0941 3209 	                       bra                    Cmd_SetAux2ConfigDigIn
00526 0942 0023 	                       movlb                  ANSELA                 ;bank 3
00527 0943 118C 	                       bcf                    Aux1_ANSEL_Bit         ;Digital
00528 0944 0021 	                       movlb                  1                      ;bank 1
00529 0945 1233 	                       bcf                    AN_Aux1_ActiveBit      ;Don't Read AN
00530 0946 158C 	                       bsf                    Aux1_LED2_TRIS         ;Input
00531 0947 0022 	                       movlb                  2                      ;bank 2
00532 0948 118C 	                       bcf                    Aux1_LED2_Lat          ;0
00533 0949 0020 	                       movlb                  0                      ;bank 0
00534 094A 2A8A 	                       goto	TX_ACK
00535 094B 	;
00536 094B 	Cmd_SetAux2ConfigDigIn:
00537 094B 0023 	                       movlb                  ANSELA                 ;bank 3
00538 094C 120C 	                       bcf                    Aux2_ANSEL_Bit         ;Digital
00539 094D 0021 	                       movlb                  1                      ;bank 1
00540 094E 12B3 	                       bcf                    AN_Aux2_ActiveBit      ;Don't Read AN
00541 094F 160C 	                       bsf                    Aux2_LED3_TRIS         ;Input
00542 0950 0022 	                       movlb                  2                      ;bank 2
00543 0951 120C 	                       bcf                    Aux2_LED3_Lat          ;0
00544 0952 0020 	                       movlb                  0                      ;bank 0
00545 0953 2A8A 	                       goto	TX_ACK
00546 0954 	;
00547 0954 	Cmd_SetAuxNConfigDigOut:
00548 0954 0878 	                       movf                   Param78,W              ;AuxNum
00549 0955 	                       SKPZ
00549 0955 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00550 0956 3209 	                       bra                    Cmd_SetAux1ConfigDigOut
00551 0957 	;
00552 0957 0023 	                       movlb                  ANSELA                 ;bank 3
00553 0958 110C 	                       bcf                    Aux0_ANSEL_Bit         ;Digital
00554 0959 0021 	                       movlb                  1                      ;bank 1
00555 095A 11B3 	                       bcf                    AN_Aux0_ActiveBit      ;Don't Read AN
00556 095B 110C 	                       bcf                    Aux0_LED1_TRIS         ;Output
00557 095C 0022 	                       movlb                  2                      ;bank 2
00558 095D 110C 	                       bcf                    Aux0_LED1_Lat          ;0
00559 095E 0020 	                       movlb                  0                      ;bank 0
00560 095F 2A8A 	                       goto	TX_ACK
00561 0960 	;
00562 0960 	Cmd_SetAux1ConfigDigOut:
00563 0960 3C01 	                       sublw                  0x01
00564 0961 	                       SKPZ
00564 0961 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00565 0962 3209 	                       bra                    Cmd_SetAux2ConfigDigOut
00566 0963 	;
00567 0963 0023 	                       movlb                  ANSELA                 ;bank 3
00568 0964 118C 	                       bcf                    Aux1_ANSEL_Bit         ;Digital
00569 0965 0021 	                       movlb                  1                      ;bank 1
00570 0966 1233 	                       bcf                    AN_Aux1_ActiveBit      ;Don't Read AN
00571 0967 118C 	                       bcf                    Aux1_LED2_TRIS         ;Output
00572 0968 0022 	                       movlb                  2                      ;bank 2
00573 0969 118C 	                       bcf                    Aux1_LED2_Lat          ;0
00574 096A 0020 	                       movlb                  0                      ;bank 0
00575 096B 2A8A 	                       goto	TX_ACK
00576 096C 	;        
00577 096C 	Cmd_SetAux2ConfigDigOut:
00578 096C 0023 	                       movlb                  ANSELA                 ;bank 3
00579 096D 120C 	                       bcf                    Aux2_ANSEL_Bit         ;Digital
00580 096E 0021 	                       movlb                  1                      ;bank 1
00581 096F 12B3 	                       bcf                    AN_Aux2_ActiveBit      ;Don't Read AN
00582 0970 120C 	                       bcf                    Aux2_LED3_TRIS         ;Output
00583 0971 0022 	                       movlb                  2                      ;bank 2
00584 0972 120C 	                       bcf                    Aux2_LED3_Lat          ;0
00585 0973 0020 	                       movlb                  0                      ;bank 0
00586 0974 2A8A 	                       goto	TX_ACK
00587 0975 	;
00588 0975 	Cmd_SetAuxNConfigAnalogIn:
00589 0975 0878 	                       movf                   Param78,W              ;AuxNum
00590 0976 	                       SKPZ
00590 0976 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00591 0977 3209 	                       bra                    Cmd_SetAux1ConfigAnalogIn
00592 0978 	;
00593 0978 0023 	                       movlb                  ANSELA                 ;bank 3
00594 0979 150C 	                       bsf                    Aux0_ANSEL_Bit         ;Digital
00595 097A 0021 	                       movlb                  1                      ;bank 1
00596 097B 15B3 	                       bsf                    AN_Aux0_ActiveBit      ;Don't Read AN
00597 097C 150C 	                       bsf                    Aux0_LED1_TRIS         ;Input
00598 097D 0022 	                       movlb                  2                      ;bank 2
00599 097E 110C 	                       bcf                    Aux0_LED1_Lat          ;0
00600 097F 0020 	                       movlb                  0                      ;bank 0
00601 0980 2A8A 	                       goto	TX_ACK
00602 0981 	;
00603 0981 	Cmd_SetAux1ConfigAnalogIn:
00604 0981 3C01 	                       sublw                  0x01
00605 0982 	                       SKPZ
00605 0982 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00606 0983 3209 	                       bra                    Cmd_SetAux2ConfigAnalogIn
00607 0984 	;
00608 0984 0023 	                       movlb                  ANSELA                 ;bank 3
00609 0985 158C 	                       bsf                    Aux1_ANSEL_Bit         ;Digital
00610 0986 0021 	                       movlb                  1                      ;bank 1
00611 0987 1633 	                       bsf                    AN_Aux1_ActiveBit      ;Don't Read AN
00612 0988 158C 	                       bsf                    Aux1_LED2_TRIS         ;Input
00613 0989 0022 	                       movlb                  2                      ;bank 2
00614 098A 118C 	                       bcf                    Aux1_LED2_Lat          ;0
00615 098B 0020 	                       movlb                  0                      ;bank 0
00616 098C 2A8A 	                       goto	TX_ACK
00617 098D 	;
00618 098D 	Cmd_SetAux2ConfigAnalogIn:
00619 098D 0023 	                       movlb                  ANSELA                 ;bank 3
SerialServo.asm                                                       Page: 39
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00620 098E 160C 	                       bsf                    Aux2_ANSEL_Bit         ;Digital
00621 098F 0021 	                       movlb                  1                      ;bank 1
00622 0990 16B3 	                       bsf                    AN_Aux2_ActiveBit      ;Don't Read AN
00623 0991 160C 	                       bsf                    Aux2_LED3_TRIS         ;Input
00624 0992 0022 	                       movlb                  2                      ;bank 2
00625 0993 120C 	                       bcf                    Aux2_LED3_Lat          ;0
00626 0994 0020 	                       movlb                  0                      ;bank 0
00627 0995 2A8A 	                       goto	TX_ACK
00628 0996 	;
00629 0996 	;
00630 0996 	;---kCmd_GetAuxConfig-----------
00631 0996 	; Get Aux N Config
00632 0996 0801 	Cmd_GetAuxConfig	movf	INDF1,W
00633 0997 3C02 		sublw	0x02	;2-AuxNum
00634 0998 		SKPNB		;<=2?
00634 0998 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00635 0999 2808 		goto	HandleRXData_Rtn	; no
00636 099A 	;
00637 099A 0801 		movf	INDF1,W
00638 099B 3E58 		addlw	low ssAux0Config
00639 099C 0086 		movwf	FSR1L
00640 099D 3000 		movlw	high ssAux0Config
00641 099E 0087 		movwf	FSR1H
00642 099F 	;
00643 099F 0801 		movf	INDF1,W
00644 09A0 001A 		movwi	FSR0++
00645 09A1 2800 		goto	RS232_Send_S0
00646 09A2 	;
00647 09A2 	;---kCmd_SetAuxNValue-----------	;+2 data (AuxNum,Value), return ACK
00648 09A2 	; Set Aux N Value
00649 09A2 0016 	Cmd_SetAuxNValue	moviw	FSR1++
00650 09A3 00F8 		movwf	Param78	;AuxNum
00651 09A4 3C02 		sublw	0x02	;2-AuxNum
00652 09A5 		SKPNB		;<=2?
00652 09A5 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00653 09A6 2808 		goto	HandleRXData_Rtn	; no
00654 09A7 	;
00655 09A7 0878 		movf	Param78,W	;AuxNum
00656 09A8 3E58 		addlw	low ssAux0Config
00657 09A9 0084 		movwf	FSR0L
00658 09AA 3000 		movlw	high ssAux0Config
00659 09AB 0085 		movwf	FSR0H
00660 09AC 	;
00661 09AC 0800 		movf	INDF0,W	;ssAuxXConfig
00662 09AD 3907 		andlw	0x07
00663 09AE 000B 		brw
00664 09AF 2A8A 		goto	TX_ACK	;kAuxIOnone
00665 09B0 321F 		bra	Cmd_SetAuxNLED	;kAuxIOLEDBtn
00666 09B1 2A8A 		goto	TX_ACK	;kAuxIODigitalIn
00667 09B2 3204 		bra	Cmd_SetAuxNDigOut	;kAuxIODigitalOut
00668 09B3 2A8A 		goto	TX_ACK	;kAuxIOAnalogIn
00669 09B4 2A8A 		goto	TX_ACK	;kAuxIOHomeSw
00670 09B5 2A8A 		goto	TX_ACK	;kAuxIOFwdLimit
00671 09B6 2A8A 		goto	TX_ACK	;kAuxIORevLimit
00672 09B7 	;
00673 09B7 	Cmd_SetAuxNDigOut:
00674 09B7 0878 	                       movf	Param78,W	;AuxNum
00675 09B8 	                       SKPZ
00675 09B8 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00676 09B9 3205 		bra	Cmd_SetAuxNValue_Dig1
00677 09BA 	;
00678 09BA 0016 		moviw	FSR1++	;AuxVal
00679 09BB 1024 	                       bcf                    Aux0_SW1_Active        ;default to 0
00680 09BC 1809 		btfsc                  WREG,0
00681 09BD 1424 		bsf	Aux0_SW1_Active
00682 09BE 2A8A 		goto	TX_ACK
00683 09BF 	;
00684 09BF 	Cmd_SetAuxNValue_Dig1:
00685 09BF 3C01 	                       sublw	0x01                   ;AuxNum=1?
00686 09C0 		SKPZ
00686 09C0 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00687 09C1 3205 		bra	Cmd_SetAuxNValue_Dig2  ; No
00688 09C2 	;
00689 09C2 0016 		moviw	FSR1++	;AuxVal
00690 09C3 11A4 	                       bcf                    Aux1_SW2_Active        ;default to 0
00691 09C4 1809 		btfsc                  WREG,0
00692 09C5 15A4 		bsf	Aux1_SW2_Active
00693 09C6 2A8A 		goto	TX_ACK
00694 09C7 	;
00695 09C7 	Cmd_SetAuxNValue_Dig2:
00696 09C7 0878 	                       movf	Param78,W	;AuxNum
00697 09C8 3C02 	                       sublw	0x02                   ;AuxNum=2?
00698 09C9 		SKPZ
00698 09C9 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00699 09CA 2A8A 		goto	TX_ACK                 ; No
00700 09CB 	;                       
00701 09CB 0016 		moviw	FSR1++	;AuxVal
00702 09CC 1324 	                       bcf                    Aux2_SW3_Active        ;default to 0
00703 09CD 1809 		btfsc                  WREG,0
00704 09CE 1724 		bsf	Aux2_SW3_Active
00705 09CF 2A8A 		goto	TX_ACK
00706 09D0 	;
00707 09D0 	Cmd_SetAuxNLED:
00708 09D0 		if UseAuxLEDBlinking
00716 09D0 		endif
00717 09D0 2A8A 		goto	TX_ACK
00718 09D1 	;
00719 09D1 	;---kCmd_GetAuxNValue-----------	;(AuxN,ValueL,ValueH)
00720 09D1 	; Get Aux N Value
SerialServo.asm                                                       Page: 40
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00721 09D1 0801 	Cmd_GetAuxNValue	movf	INDF1,W
00722 09D2 00F8 		movwf	Param78	;AuxNum
00723 09D3 3C02 		sublw	0x02	;2-AuxNum
00724 09D4 		SKPNB		;<=2?
00724 09D4 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00725 09D5 2808 		goto	HandleRXData_Rtn	; no
00726 09D6 	;
00727 09D6 0878 		movf	Param78,W	;AuxNum
00728 09D7 3E58 		addlw	low ssAux0Config
00729 09D8 0086 		movwf	FSR1L
00730 09D9 3000 		movlw	high ssAux0Config
00731 09DA 0087 		movwf	FSR1H
00732 09DB 	;
00733 09DB 0801 		movf	INDF1,W	;ssAuxXConfig
00734 09DC 3907 		andlw	0x07
00735 09DD 000B 		brw
00736 09DE 2808 		goto	HandleRXData_Rtn	;kAuxIOnone, not valid
00737 09DF 3223 		bra	Cmd_GetAuxNValue_Btn	;kAuxIOLEDBtn
00738 09E0 320F 		bra	Cmd_GetAuxNValue_Dig	;kAuxIODigitalIn
00739 09E1 320E 		bra	Cmd_GetAuxNValue_Dig	;kAuxIODigitalOut
00740 09E2 3203 		bra	Cmd_GetAuxNValue_Ana	;kAuxIOAnalogIn
00741 09E3 320C 		bra	Cmd_GetAuxNValue_Dig	;kAuxIOHomeSw
00742 09E4 320B 		bra	Cmd_GetAuxNValue_Dig	;kAuxIOFwdLimit
00743 09E5 320A 		bra	Cmd_GetAuxNValue_Dig	;kAuxIORevLimit
00744 09E6 	;
00745 09E6 3578 	Cmd_GetAuxNValue_Ana	lslf	Param78,W	;AuxNum X2
00746 09E7 3EB9 		addlw	low Cur_AN2            ;Aux0 = AN2
00747 09E8 0086 		movwf	FSR1L
00748 09E9 3000 		movlw	high Cur_AN2
00749 09EA 0087 		movwf	FSR1H
00750 09EB 0016 		moviw	FSR1++
00751 09EC 001A 		movwi	FSR0++
00752 09ED 0016 		moviw	FSR1++
00753 09EE 001A 		movwi	FSR0++
00754 09EF 2800 		goto	RS232_Send_S0
00755 09F0 	;
00756 09F0 	; Send the value of the port bit 0x00 or 0x01
00757 09F0 0878 	Cmd_GetAuxNValue_Dig	movf	Param78,W	;AuxNum
00758 09F1 		SKPZ
00758 09F1 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00759 09F2 3204 		bra	Cmd_GetAuxNValue_Dig1
00760 09F3 1824 		btfsc	Aux0_SW1_Active
00761 09F4 3001 		movlw	0x01
00762 09F5 001A 		movwi	FSR0++
00763 09F6 2800 		goto	RS232_Send_S0
00764 09F7 	;
00765 09F7 3C01 	Cmd_GetAuxNValue_Dig1	sublw	0x01
00766 09F8 		SKPZ
00766 09F8 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00767 09F9 3204 		bra	Cmd_GetAuxNValue_Dig2
00768 09FA 19A4 		btfsc	Aux1_SW2_Active
00769 09FB 3001 		movlw	0x01
00770 09FC 001A 		movwi	FSR0++
00771 09FD 2800 		goto	RS232_Send_S0
00772 09FE 	;
00773 09FE 0103 	Cmd_GetAuxNValue_Dig2	clrw
00774 09FF 1B24 		btfsc	Aux2_SW3_Active
00775 0A00 3001 		movlw	0x01
00776 0A01 001A 		movwi	FSR0++
00777 0A02 2800 		goto	RS232_Send_S0
00778 0A03 	; Send the Button value
00779 0A03 0878 	Cmd_GetAuxNValue_Btn	movf	Param78,W	;AuxNum
00780 0A04 		SKPZ
00780 0A04 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00781 0A05 3204 		bra	Cmd_GetAuxNValue_Btn1
00782 0A06 1824 		btfsc	Aux0_SW1_Active
00783 0A07 3001 		movlw	0x01
00784 0A08 001A 		movwi	FSR0++
00785 0A09 2800 		goto	RS232_Send_S0
00786 0A0A 	;
00787 0A0A 3C01 	Cmd_GetAuxNValue_Btn1	sublw	0x01
00788 0A0B 		SKPZ
00788 0A0B 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00789 0A0C 3204 		bra	Cmd_GetAuxNValue_Btn2
00790 0A0D 19A4 		btfsc	Aux1_SW2_Active
00791 0A0E 3001 		movlw	0x01
00792 0A0F 001A 		movwi	FSR0++
00793 0A10 2800 		goto	RS232_Send_S0
00794 0A11 	;
00795 0A11 0103 	Cmd_GetAuxNValue_Btn2	clrw
00796 0A12 1B24 		btfsc	Aux2_SW3_Active
00797 0A13 3001 		movlw	0x01
00798 0A14 001A 		movwi	FSR0++
00799 0A15 2800 		goto	RS232_Send_S0
00800 0A16 	;
00801 0A16 	;
00802 0A16 	;---kCmd_SetEncoderOffset-------  +2 data (EncoderOffset), return ACK
00803 0A16 	;
00804 0A16 0016 	Cmd_SetEncoderOffset	moviw	FSR1++
00805 0A17 00C4 		movwf	EncoderOffset
00806 0A18 0016 		moviw	FSR1++
00807 0A19 00C5 		movwf	EncoderOffset+1
00808 0A1A 2A8A 		goto	TX_ACK
00809 0A1B 	;
00810 0A1B 	;---kCmd_GetEncoderOffset-------
00811 0A1B 	;
00812 0A1B 0844 	Cmd_GetEncoderOffset	movf	EncoderOffset,W
00813 0A1C 001A 		movwi	FSR0++
00814 0A1D 0845 		movf	EncoderOffset+1,W
SerialServo.asm                                                       Page: 41
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00815 0A1E 001A 		movwi	FSR0++
00816 0A1F 2800 		goto	RS232_Send_S0
00817 0A20 	;
00818 0A20 	                       if UsePID
00848 0A20 	                       endif
00849 0A20 	;---kCmd_GetI-------------------
00850 0A20 	; Get servo current
00851 0A20 0021  a		MOVLB	Cur_AN0	;banksel
00850 0A21 	Cmd_GetI	BankSel	Cur_AN0
00852 0A21 0835 		movf	Cur_AN0,W
00853 0A22 001A 		movwi	FSR0++
00854 0A23 0836 		movf	Cur_AN0+1,W
00855 0A24 001A 		movwi	FSR0++
00856 0A25 2800 		goto	RS232_Send_S0
00857 0A26 	;
00858 0A26 	;---kCmd_GetEnc-------------------
00859 0A26 	; Get Encoder Raw Position
00860 0A26 083F 	Cmd_GetEnc	movf	EncoderVal,W
00861 0A27 001A 		movwi	FSR0++
00862 0A28 0840 		movf	EncoderVal+1,W
00863 0A29 001A 		movwi	FSR0++
00864 0A2A 2800 		goto	RS232_Send_S0
00865 0A2B 	;
00866 0A2B 	;---kCmd_GetEncAbs-------------------
00867 0A2B 	; Get Encoder Accumulated Position
00868 0A2B 083C 	Cmd_GetEncAbs	movf	EncoderAccum,W
00869 0A2C 001A 		movwi	FSR0++
00870 0A2D 083D 		movf	EncoderAccum+1,W
00871 0A2E 001A 		movwi	FSR0++
00872 0A2F 083E 		movf	EncoderAccum+2,W
00873 0A30 001A 		movwi	FSR0++
00874 0A31 3000 		movlw	0x00
00875 0A32 1BBE 		btfsc	EncoderAccum+2,7
00876 0A33 30FF 		movlw	0xFF
00877 0A34 001A 		movwi	FSR0++	;sign extrnded Int24
00878 0A35 2800 		goto	RS232_Send_S0
00879 0A36 	;
00880 0A36 	;---kCmd_SaveParams-----------------
00881 0A36 	Cmd_SaveParams	mLongCall	SaveParams
00881 0A36 3180      M		movlp	SaveParams	                       movlp                  Destination
00881 0A37 2089      M		call	SaveParams	                       call                   Destination
00881 0A38 318A      M		movlp	$	                       movlp                  $
00882 0A39 2A8A 		goto	TX_ACK
00883 0A3A 	;
00884 0A3A 	;---kCmd_RestoreParams--------------
00885 0A3A 	Cmd_RestoreParams	mLongCall	CopyToRam
00885 0A3A 3180      M		movlp	CopyToRam	                       movlp                  Destination
00885 0A3B 207C      M		call	CopyToRam	                       call                   Destination
00885 0A3C 318A      M		movlp	$	                       movlp                  $
00886 0A3D 2A8A 		goto	TX_ACK
00887 0A3E 	;
00888 0A3E 	;---kCmd_GetBattVolts---------------
00889 0A3E 	; Get battery volts
00890 0A3E 0021  a		MOVLB	BattVolts	;banksel
00889 0A3F 	Cmd_GetBattVolts	BankSel	BattVolts
00891 0A3F 0837 		movf	BattVolts,W
00892 0A40 001A 		movwi	FSR0++
00893 0A41 0838 		movf	BattVolts+1,W
00894 0A42 001A 		movwi	FSR0++
00895 0A43 2800 		goto	RS232_Send_S0
00896 0A44 	;
00897 0A44 	;---kCmd_GetCalPot------------------
00898 0A44 	; Get calibration pot
00899 0A44 0021 	Cmd_GetCalPot	movlb	ModeZeroPot
00900 0A45 0839 		movf	ModeZeroPot,W
00901 0A46 001A 		movwi	FSR0++
00902 0A47 083A 		movf	ModeZeroPot+1,W
00903 0A48 001A 		movwi	FSR0++
00904 0A49 2800 		goto	RS232_Send_S0
00905 0A4A 	;
00906 0A4A 	;---kCmd_GetStatus----------------
00907 0A4A 0838 	Cmd_GetStatus	movf	ssStatus,W
00908 0A4B 001A 		movwi	FSR0++
00909 0A4C 0839 		movf	ssStatus+1,W
00910 0A4D 001A 		movwi	FSR0++
00911 0A4E 083A 		movf	ssStatus+2,W
00912 0A4F 001A 		movwi	FSR0++
00913 0A50 083B 		movf	ssStatus+3,W
00914 0A51 001A 		movwi	FSR0++
00915 0A52 	;reset flags
00916 0A52 11B8 		bcf	ssRX_Timeout
00917 0A53 12B8 		bcf	ssGripMCur
00918 0A54 1238 		bcf	ssGripOCur
00919 0A55 	;
00920 0A55 01B9 		clrf	ssStatus+1
00921 0A56 	;	
00922 0A56 2800 		goto	RS232_Send_S0
00923 0A57 	;
00924 0A57 	;---kCmd_RunBootloader--------------
00925 0A57 30FF 	Cmd_RunBootloader	movlw	0xFF
00926 0A58 00A7 		movwf	EEDataTemp
00927 0A59 		mLongCall	EEWriteW	;Write EEPROM address in W
00927 0A59 3180      M		movlp	EEWriteW	                       movlp                  Destination
00927 0A5A 20D0      M		call	EEWriteW	                       call                   Destination
00927 0A5B 318A      M		movlp	$	                       movlp                  $
00928 0A5C 0001 		reset
00929 0A5D 	;
00930 0A5D 	;---kCmd_SetMasterAddr------------
00931 0A5D 0016 	Cmd_SetMasterAddr	moviw	FSR1++
SerialServo.asm                                                       Page: 42
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00932 0A5E 00D2 		movwf	RS232_MasterAddr
00933 0A5F 		mLongCall	SaveParams
00933 0A5F 3180      M		movlp	SaveParams	                       movlp                  Destination
00933 0A60 2089      M		call	SaveParams	                       call                   Destination
00933 0A61 318A      M		movlp	$	                       movlp                  $
00934 0A62 2800 		goto	RS232_Send_S0
00935 0A63 	;
00936 0A63 	;---kCmd_SetSlaveAddr-------------
00937 0A63 0016 	Cmd_SetSlaveAddr	moviw	FSR1++
00938 0A64 00D3 		movwf	RS232_SlaveAddr
00939 0A65 		mLongCall	SaveParams
00939 0A65 3180      M		movlp	SaveParams	                       movlp                  Destination
00939 0A66 2089      M		call	SaveParams	                       call                   Destination
00939 0A67 318A      M		movlp	$	                       movlp                  $
00940 0A68 2800 		goto	RS232_Send_S0
00941 0A69 	;
00942 0A69 	;---kCmd_SendIDString------------
00943 0A69 01F9 	Cmd_SendIDString	clrf	Param79
00944 0A6A 0879 	Cmd_SendIDString_L1	movf	Param79,W
00945 0A6B 2272 		call	IDString
00946 0A6C 3800 		iorlw	0x00
00947 0A6D 		SKPNZ
00947 0A6D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00948 0A6E 0008 		return
00949 0A6F 228B 		call	StoreSerOut_S0
00950 0A70 0AF9 		incf	Param79,F
00951 0A71 33F8 		bra	Cmd_SendIDString_L1
00952 0A72 	;
00953 0A72 000B 	IDString	brw
00954 0A73 3444 		retlw	'D'
00955 0A74 344D 		retlw	'M'
00956 0A75 3446 		retlw	'F'
00957 0A76 3445 		retlw	'E'
00958 0A77 3420 		retlw	' '
00959 0A78 3453 		retlw	'S'
00960 0A79 3465 		retlw	'e'
00961 0A7A 3472 		retlw	'r'
00962 0A7B 3469 		retlw	'i'
00963 0A7C 3461 		retlw	'a'
00964 0A7D 346C 		retlw	'l'
00965 0A7E 3420 		retlw	' '
00966 0A7F 3453 		retlw	'S'
00967 0A80 3465 		retlw	'e'
00968 0A81 3472 		retlw	'r'
00969 0A82 3476 		retlw	'v'
00970 0A83 346F 		retlw	'o'
00971 0A84 3420 		retlw	' '
00972 0A85 3472 		retlw	'r'
00973 0A86 3443 		retlw	'C'
00974 0A87 340A 		retlw	'\n'
00975 0A88 3400 		retlw	0x00
00976 0A89 	;
00977 0A89 	;--------------------------------
00978 0A89 0008 		return
00979 0A8A 	;
00980 0A8A 30FF 	TX_ACK	movlw	0xFF
00981 0A8B 	StoreSerOut_S0	mLongCall	StoreSerOut
00981 0A8B 3181      M		movlp	StoreSerOut	                       movlp                  Destination
00981 0A8C 2130      M		call	StoreSerOut	                       call                   Destination
00981 0A8D 318A      M		movlp	$	                       movlp                  $
00982 0A8E 0008 		return
00983 0A8F 	;
00984 0A8F 	;=========================================================================================
00985 0A8F 	;=========================================================================================
02153 0A8F 		include <MagEncoder.inc>
00001 0A8F 	;*****************************************************************************************
00002 0A8F 	;    Filename:      MagEncoder.inc
00003 0A8F 	;    Date:          8/11/2019
00004 0A8F 	;    File Version:  1.1.1
00005 0A8F 	;    
00006 0A8F 	;    Author:        David M. Flynn
00007 0A8F 	;    Company:       Oxford V.U.E., Inc.
00008 0A8F 	;    E-Mail:        dflynn@oxfordvue.com
00009 0A8F 	;    Web Site:      http://www.oxfordvue.com/
00010 0A8F 	;
00011 0A8F 	;*****************************************************************************************
00012 0A8F 	; Absolute Magnetic Encoder Reader
00013 0A8F 	; Written for the 16F1847 running at 32MHz
00014 0A8F 	; Add ReadEncoder to your main loop, must be call often enough so roll over/under
00015 0A8F 	;  is seen.
00016 0A8F 	; If the last ReadEncoder saw zero then MagEnc_Index is set.
00017 0A8F 	; If a roll over/under was detected MagEnc_IndexLatch will be set, you must clear it
00018 0A8F 	;  before calling ReadEncoder again.
00019 0A8F 	; Works in any segment, requires no additional stack.
00020 0A8F 	;
00021 0A8F 	; uses AS5047D_Lib.inc
00022 0A8F 	;
00023 0A8F 	; Constants for 14 bit encoder:
00024 0A8F 003C 	kUpper4Bits	EQU	0x3C	;test >= 0x3C00 or < 0x0400
00025 0A8F 	; 
00026 0A8F 	; History:
00027 0A8F 	;   1.1.1   8/11/2019	Updated for 14bit encoder.
00028 0A8F 	;   1.1     3/23/2019	Changed to use AS5047D
00029 0A8F 	;   1.0.1   5/28/2017  Added Home routines.
00030 0A8F 	;   1.0.0   5/27/2017  First Code and it WORKS!
00031 0A8F 	;*****************************************************************************************
00032 0A8F 	; Routines:
00033 0A8F 	;
00034 0A8F 	; ReadEncoder	Add change from last read to EncoderAccum,
SerialServo.asm                                                       Page: 43
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00035 0A8F 	;	 update MagEnc_Index and MagEnc_IndexLatch.
00036 0A8F 	; Home_Absolute        Home absolute, Set home as encoder zero.
00037 0A8F 	; Home_Here            Set Home as last read value.
00038 0A8F 	;*****************************************************************************************
00039 0A8F 	; Add the following to the Bank 0 variables.
00040 0A8F 	;	cblock		;Variables bank0
00041 0A8F 	;	EncoderAccum:3		;Accumulated distance
00042 0A8F 	;	EncoderVal:2		;Value last read, raw 12 bit data
00043 0A8F 	;	EncoderFlags                                  ;saved in eprom
00044 0A8F 	;                      EncoderHome:2                                 ;Absolute Home, saved in eprom
00045 0A8F 	;	endc
00046 0A8F 	;
00047 0A8F 0041 	#Define	MagEnc_HighZone	EncoderFlags,0	
00048 0A8F 0041 	#Define	MagEnc_LowZone	EncoderFlags,1
00049 0A8F 0041 	#Define	MagEnc_Index	EncoderFlags,2
00050 0A8F 0041 	#Define	MagEnc_IndexLatch	EncoderFlags,3	;set if zero is crossed or Encode value = zero
00051 0A8F 0041 	#Define                MagEnc_Homed           EncoderFlags,4
00052 0A8F 	;
00053 0A8F 	;=========================================
00054 0A8F 	; ReadEncoder
00055 0A8F 	; Entry: none
00056 0A8F 	; Exit: EncoderValue,EncoderAccum,EncoderFlags
00057 0A8F 	; Calls: none
00058 0A8F 	; Uses: Param76,Param77,Param78,Param79,Param7A FSR0
00059 0A8F 	;
00060 0A8F 236D 	ReadEncoder	call	AS5047_ReadPos
00061 0A90 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00062 0A90 	;
00063 0A90 0020 		movlb	0	;bank0
00064 0A91 	;
00065 0A91 1870 		btfsc	ParityErrFlag
00066 0A92 1439 		bsf	ssEncParityError
00067 0A93 	;	return
00068 0A93 	;
00069 0A93 19F0 		btfsc	CmdErrorFlag
00070 0A94 14B9 		bsf	ssEncCmdError
00071 0A95 	;	return
00072 0A95 	;	
00073 0A95 	;
00074 0A95 	;copy to temp Param77:Param76 = Enc Value, Param7A:Param79 = Old value
00075 0A95 0878 		movf	Param78,W
00076 0A96 00F6 		movwf	Param76
00077 0A97 0879 		movf	Param79,W
00078 0A98 00F7 		movwf	Param77
00079 0A99 	;
00080 0A99 083F 		movf	EncoderVal,W
00081 0A9A 00F9 		movwf	Param79                ;retain old value
00082 0A9B 0840 		movf	EncoderVal+1,W
00083 0A9C 00FA 		movwf	Param7A
00084 0A9D 	;
00085 0A9D 0876 		movf	Param76,W
00086 0A9E 00BF 		movwf	EncoderVal
00087 0A9F 0877 		movf	Param77,W
00088 0AA0 00C0 		movwf	EncoderVal+1
00089 0AA1 	;
00090 0AA1 	; handle overflow, goes from >0x3C00 to <0x0400
00091 0AA1 1C41 		btfss	MagEnc_HighZone
00092 0AA2 3206 		bra	ReadEncoder_1
00093 0AA3 303C 		movlw	kUpper4Bits
00094 0AA4 0577 		andwf	Param77,W
00095 0AA5 		SKPNZ		;Less than 4096?
00095 0AA5 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00096 0AA6 1777 		bsf	Param77,6	; yes, set 15th bit, aka add 0x4000
00097 0AA7 15C1 		bsf	MagEnc_IndexLatch	;crossed zero
00098 0AA8 320A 		bra	ReadEncoder_2
00099 0AA9 	;
00100 0AA9 	; handle underflow, goes from <0x0400 to <=0x3C00
00101 0AA9 1CC1 	ReadEncoder_1	btfss	MagEnc_LowZone
00102 0AAA 3208 		bra	ReadEncoder_2
00103 0AAB 303C 		movlw	kUpper4Bits
00104 0AAC 0577 		andwf	Param77,W
00105 0AAD 3A3C 		xorlw	kUpper4Bits
00106 0AAE 		SKPZ		;>=0x3C00?
00106 0AAE 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00107 0AAF 3203 		bra	ReadEncoder_2	; No
00108 0AB0 	;Val = value - 0x4000
00109 0AB0 3040 		movlw	0x40
00110 0AB1 02F7 		subwf	Param77,F
00111 0AB2 15C1 		bsf	MagEnc_IndexLatch	;crossed zero
00112 0AB3 	;
00113 0AB3 	; calculate new flag values
00114 0AB3 1141 	ReadEncoder_2	bcf	MagEnc_Index
00115 0AB4 083F 		movf	EncoderVal,W
00116 0AB5 0440 		iorwf	EncoderVal+1,W
00117 0AB6 		SKPNZ		;value is 0?
00117 0AB6 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00118 0AB7 1541 		bsf	MagEnc_Index	; Yes
00119 0AB8 	;
00120 0AB8 1941 		btfsc	MagEnc_Index
00121 0AB9 15C1 		bsf	MagEnc_IndexLatch
00122 0ABA 	;
00123 0ABA 10C1 		bcf	MagEnc_LowZone
00124 0ABB 303C 		movlw	kUpper4Bits
00125 0ABC 0540 		andwf	EncoderVal+1,W
00126 0ABD 		SKPNZ		;Less than 0x0400?
00126 0ABD 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00127 0ABE 14C1 		bsf	MagEnc_LowZone	; Yes
00128 0ABF 	;
00129 0ABF 1041 		bcf	MagEnc_HighZone
SerialServo.asm                                                       Page: 44
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00130 0AC0 303C 		movlw	kUpper4Bits
00131 0AC1 0540 		andwf	EncoderVal+1,W	;2 high bits
00132 0AC2 3A3C 		xorlw	kUpper4Bits
00133 0AC3 		SKPNZ		;both bits set, >=0x3C00
00133 0AC3 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00134 0AC4 1441 		bsf	MagEnc_HighZone	; yes
00135 0AC5 	;
00136 0AC5 	; calc change = new - old
00137 0AC5 0879 		movf	Param79,W	;old value
00138 0AC6 02F6 		subwf	Param76,F	;= new value - old value
00139 0AC7 087A 		movf	Param7A,W	;old value high byte
00140 0AC8 3BF7 		subwfb	Param77,F	;= new value - old value 
00141 0AC9 01F8 		clrf	Param78	;sign extend to 24 bits
00142 0ACA 30FF 		movlw	0xFF
00143 0ACB 1BF7 		btfsc	Param77,7	;sign bit set?
00144 0ACC 00F8 		movwf	Param78	; Yes
00145 0ACD 	;
00146 0ACD 	; add the change to the accumulated value
00147 0ACD 0876 		movf	Param76,W
00148 0ACE 07BC 		addwf	EncoderAccum,F
00149 0ACF 0877 		movf	Param77,W
00150 0AD0 3DBD 		addwfc	EncoderAccum+1,F
00151 0AD1 0878 		movf	Param78,W
00152 0AD2 3DBE 		addwfc	EncoderAccum+2,F
00153 0AD3 	;
00154 0AD3 0008 		return
00155 0AD4 	;
00156 0AD4 	;=========================================================================================
00157 0AD4 	; Home absolute, Set home as encoder HM absolute.
00158 0AD4 	; Call ReadEncoder once first.
00159 0AD4 	; Entry: HM = Absolute Home, EncoderVal = Current Position Absolute,
00160 0AD4 	;        kMaxT = Â±Max travel from HM,
00161 0AD4 	;        EncoderAccum = 0 = Current Position Incremental
00162 0AD4 	; Exit: EncoderAccum = Current Position Relitive
00163 0AD4 	;
00164 0AD4 	; The Math:
00165 0AD4 	;  ' tests for Current Position > HM
00166 0AD4 	;  if HM + kMaxT >= 4096 then 'Dual zone
00167 0AD4 	;    if EncoderVal > HM then 
00168 0AD4 	;      'Current Position is positive between HM and 4096
00169 0AD4 	;      EncoderAccum = EncoderVal - HM
00170 0AD4 	;    elseif EncoderVal < ((HM + kMaxT) mod 4096) then 
00171 0AD4 	;      'Current Position is positive between 0 and HM + kMaxT
00172 0AD4 	;      EncoderAccum = EncoderVal + 4096 - HM
00173 0AD4 	;  else 'Single zone
00174 0AD4 	;    if EncoderVal > HM and EncoderVal <= HM + kMaxT then
00175 0AD4 	;      'Current Position is positive between HM and HM + kMAxT
00176 0AD4 	;      EncoderAccum = EncoderVal - HM
00177 0AD4 	;
00178 0AD4 	;  ' test for Current Position < HM
00179 0AD4 	;  if HM - kMaxT < 0 then 'Dual zone
00180 0AD4 	;    if (EncoderVal < HM) then
00181 0AD4 	;      'Current Position is between HM and 0
00182 0AD4 	;      EncoderAccum = EncoderVal - HM
00183 0AD4 	;    elseif (EncoderVal > 8192 - HM - kMaxT) then
00184 0AD4 	;      'Current Position is between 0 and HM - kMaxT
00185 0AD4 	;      EncoderAccum = EncoderVal - 4096 - HM
00186 0AD4 	;  else 'Single zone
00187 0AD4 	;    if EncoderVal < HM and EncoderVal > HM - kMaxT then
00188 0AD4 	;      'Current Position is between HM and HM - kMaxT
00189 0AD4 	;      EncoderAccum = EncoderVal - HM
00190 0AD4 	;      
00191 0AD4 	;
00192 0AD4 076C 	kMaxT                  EQU                    .1900                  ;Less than a half turn
00193 0AD4 	;
00194 0AD4 233E 	Home_Absolute	call                   Home_Here
00195 0AD5 1E41 	                       btfss                  MagEnc_Homed           ;First boot?
00196 0AD6 324E 	                       bra                    SaveHomePos            ; Yes
00197 0AD7 	;
00198 0AD7 	;  ' tests for Current Position > HM
00199 0AD7 	;if HM + kMaxT >= 4096 then 'Dual zone
00200 0AD7 306C 	                       movlw                  low kMaxT
00201 0AD8 0742 	                       addwf                  EncoderHome,W
00202 0AD9 00F8 	                       movwf                  Param78
00203 0ADA 3007 	                       movlw                  high kMaxT
00204 0ADB 3D43 	                       addwfc                 EncoderHome+1,W
00205 0ADC 00F9 	                       movwf                  Param79
00206 0ADD 39F0 	                       andlw                  0xF0
00207 0ADE 	                       SKPNZ
00207 0ADE 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00208 0ADF 3207 	                       bra                    Home_Absolute_1
00209 0AE0 	;    if EncoderVal > HM then 
00210 0AE0 	;      'Current Position is positive between HM and 4096
00211 0AE0 	;      EncoderAccum = EncoderVal - HM
00212 0AE0 083F 	                       movf                   EncoderVal,W
00213 0AE1 0242 	                       subwf                  EncoderHome,W
00214 0AE2 0840 	                       movf                   EncoderVal+1,W
00215 0AE3 3B43 	                       subwfb                 EncoderHome+1,W
00216 0AE4 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > HM?
00217 0AE5 324D 	                       bra                    HA_SetIt               ; Yes
00218 0AE6 320C 	                       bra                    Home_Absolute_2
00219 0AE7 	;        
00220 0AE7 	;  else 'Single zone
00221 0AE7 	;    if EncoderVal > HM and EncoderVal < HM + kMaxT then
00222 0AE7 	;      'Current Position is positive between HM and HM + kMAxT
00223 0AE7 	;      EncoderAccum = EncoderVal - HM
00224 0AE7 0842 	Home_Absolute_1        movf                   EncoderHome,W
00225 0AE8 023F 	                       subwf                  EncoderVal,W
00226 0AE9 0843 	                       movf                   EncoderHome+1,W
SerialServo.asm                                                       Page: 45
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00227 0AEA 3B40 	                       subwfb                 EncoderVal+1,W
00228 0AEB 1F89 	                       btfss                  WREG,7
00229 0AEC 3206 	                       bra                    Home_Absolute_2
00230 0AED 0878 	                       movf                   Param78,W              ;HM + kMaxT
00231 0AEE 023F 	                       subwf                  EncoderVal,W
00232 0AEF 0879 	                       movf                   Param79,W
00233 0AF0 3B40 	                       subwfb                 EncoderVal+1,W
00234 0AF1 1B89 	                       btfsc                  WREG,7                 ;EncoderVal < HM + kMaxT?
00235 0AF2 3240 	                       bra                    HA_SetIt               ; Yes
00236 0AF3 	;
00237 0AF3 	;  ' test for Current Position < HM
00238 0AF3 	;  if HM - kMaxT < 0 then 'Dual zone
00239 0AF3 306C 	Home_Absolute_2        movlw                  low kMaxT
00240 0AF4 0242 	                       subwf                  EncoderHome,W
00241 0AF5 3007 	                       movlw                  high kMaxT
00242 0AF6 3B43 	                       subwfb                 EncoderHome+1,W
00243 0AF7 1F89 	                       btfss                  WREG,7                 ;HM - kMaxT < 0?
00244 0AF8 3219 	                       bra                    Home_Absolute_3        ; No, not dual zone
00245 0AF9 	;    if (EncoderVal < HM) then
00246 0AF9 	;      'Current Position is between HM and 0
00247 0AF9 	;      EncoderAccum = EncoderVal - HM
00248 0AF9 0842 	                       movf                   EncoderHome,W
00249 0AFA 023F 	                       subwf                  EncoderVal,W
00250 0AFB 0843 	                       movf                   EncoderHome+1,W
00251 0AFC 3B40 	                       subwfb                 EncoderVal+1,W
00252 0AFD 1B89 	                       btfsc                  WREG,7                 ;EncoderVal < HM?
00253 0AFE 3234 	                       bra                    HA_SetIt               ; Yes
00254 0AFF 	;    elseif (EncoderVal > 8192 - HM - kMaxT) then
00255 0AFF 	;      'Current Position is between 0 and HM - kMaxT
00256 0AFF 	;      EncoderAccum = EncoderVal - 4096 - HM
00257 0AFF 3000 	                       movlw                  low .8192              ;Param78:Param79 = .8192
00258 0B00 00F8 	                       movwf                  Param78
00259 0B01 3020 	                       movlw                  high .8192
00260 0B02 00F9 	                       movwf                  Param79
00261 0B03 0842 	                       movf                   EncoderHome,W          ;Param78:Param79 -= EncoderHome
00262 0B04 02F8 	                       subwf                  Param78,F
00263 0B05 0843 	                       movf                   EncoderHome+1,W
00264 0B06 3BF9 	                       subwfb                 Param79,F
00265 0B07 306C 	                       movlw                  low kMaxT              ;Param78:Param79 -= kMaxT
00266 0B08 02F8 	                       subwf                  Param78,F
00267 0B09 3007 	                       movlw                  high kMaxT
00268 0B0A 3BF9 	                       subwfb                 Param79,F
00269 0B0B 083F 	                       movf                   EncoderVal,W 
00270 0B0C 0278 	                       subwf                  Param78,W
00271 0B0D 0840 	                       movf                   EncoderVal+1,W
00272 0B0E 3B79 	                       subwfb                 Param79,W
00273 0B0F 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > Param78:Param79?
00274 0B10 3220 	                       bra                    HA_SetItNeg            ; Yes
00275 0B11 0008 	                       return                                        ; No, not in this zone
00276 0B12 	;
00277 0B12 	;  else 'Single zone
00278 0B12 	;    if EncoderVal < HM and EncoderVal > HM - kMaxT then
00279 0B12 	;      'Current Position is between HM and HM - kMaxT
00280 0B12 	;      EncoderAccum = EncoderVal - HM
00281 0B12 0842 	Home_Absolute_3        movf                   EncoderHome,W
00282 0B13 023F 	                       subwf                  EncoderVal,W
00283 0B14 0843 	                       movf                   EncoderHome+1,W
00284 0B15 3B40 	                       subwfb                 EncoderVal+1,W
00285 0B16 1F89 	                       btfss                  WREG,7                 ;EncoderVal < HM?
00286 0B17 0008 	                       return                                        ; No
00287 0B18 306C 	                       movlw                  low kMaxT              ;Param78:Param79 = EncoderHome - kMaxT
00288 0B19 0242 	                       subwf                  EncoderHome,W
00289 0B1A 00F8 	                       movwf                  Param78
00290 0B1B 3007 	                       movlw                  high kMaxT
00291 0B1C 3B43 	                       subwfb                 EncoderHome+1,W
00292 0B1D 00F9 	                       movwf                  Param79
00293 0B1E 083F 	                       movf                   EncoderVal,W
00294 0B1F 0278 	                       subwf                  Param78,W
00295 0B20 0840 	                       movf                   EncoderVal+1,W
00296 0B21 3B79 	                       subwfb                 Param79,W
00297 0B22 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > HM - kMaxT?
00298 0B23 320F 	                       bra                    HA_SetIt               ; Yes
00299 0B24 0008 	                       return                                        ; No, must be zero
00300 0B25 	;
00301 0B25 	;======================
00302 0B25 1641 	SaveHomePos            bsf                    MagEnc_Homed
00303 0B26 083F 	                       movf                   EncoderVal,W
00304 0B27 00C2 	                       movwf                  EncoderHome
00305 0B28 0840 	                       movf                   EncoderVal+1,W
00306 0B29 00C3 	                       movwf                  EncoderHome+1
00307 0B2A 	                       mLongCall              SaveParams
00307 0B2A 3180      M		movlp	SaveParams	                       movlp                  Destination
00307 0B2B 2089      M		call	SaveParams	                       call                   Destination
00307 0B2C 318B      M		movlp	$	                       movlp                  $
00308 0B2D 0008 	                       return
00309 0B2E 	;======================
00310 0B2E 	;EncoderAccum = EncoderVal + 4096 - HM
00311 0B2E 	;                      movlw                  low .4096
00312 0B2E 	;                      addwf                  EncoderVal,F
00313 0B2E 3010 	HA_SetItPos            movlw                  high .4096
00314 0B2F 3DC0 	                       addwfc                 EncoderVal+1,F
00315 0B30 3202 	                       bra                    HA_SetIt
00316 0B31 	;======================
00317 0B31 	;EncoderAccum = EncoderVal - 4096 - HM
00318 0B31 	;                      movlw                  low .4096
00319 0B31 	;                      subwf                  EncoderVal,F
00320 0B31 3010 	HA_SetItNeg            movlw                  high .4096
00321 0B32 3BC0 	                       subwfb                 EncoderVal+1,F
00322 0B33 	;======================
SerialServo.asm                                                       Page: 46
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00323 0B33 	;EncoderAccum = EncoderVal - HM
00324 0B33 0842 	HA_SetIt               movf                   EncoderHome,W
00325 0B34 023F 	                       subwf                  EncoderVal,W
00326 0B35 00BC 	                       movwf                  EncoderAccum
00327 0B36 0843 	                       movf                   EncoderHome+1,W
00328 0B37 3B40 	                       subwfb                 EncoderVal+1,W
00329 0B38 00BD 	                       movwf                  EncoderAccum+1
00330 0B39 30FF 	                       movlw                  0xFF
00331 0B3A 1FBD 	                       btfss                  EncoderAccum+1,7
00332 0B3B 3000 	                       movlw                  0x00
00333 0B3C 00BE 	                       movwf                  EncoderAccum+2
00334 0B3D 0008 	                       return
00335 0B3E 	;
00336 0B3E 	;                       
00337 0B3E 	;=========================================================================================
00338 0B3E 	; Set Home as last read value
00339 0B3E 	; Call ReadEncoder once first.
00340 0B3E 	;
00341 0B3E 0020 	Home_Here              movlb                  0
00342 0B3F 01BC 	                       clrf                   EncoderAccum
00343 0B40 01BD 	                       clrf                   EncoderAccum+1
00344 0B41 01BE 	                       clrf                   EncoderAccum+2
00345 0B42 0008 	                       return
00346 0B43 	;
00347 0B43 	;=========================================================================================
00348 0B43 	;=========================================================================================
00349 0B43 		
00350 0B43 		
00351 0B43 		
00352 0B43 		
00353 0B43 		
00354 0B43 		
00355 0B43 		
00356 0B43 		
00357 0B43 		
00358 0B43 		
00359 0B43 		
00360 0B43 		
00361 0B43 		
00362 0B43 		
00363 0B43 		
00364 0B43 		
00365 0B43 		
00366 0B43 		
00367 0B43 		
00368 0B43 		
02154 0B43 		include <AS5047D_Lib.inc>
00001 0B43 	;******************************************************************
00002 0B43 	; AS5047D Library for PIC16F1847
00003 0B43 	; Filename: AS5047D_Lib.inc
00004 0B43 	; Created: 1/12/2019
00005 0B43 	; Revision: 1.0d1 1/12/2019
00006 0B43 	;******************************************************************
00007 0B43 	; History:
00008 0B43 	;   1.0d1 1/12/2019	First Code
00009 0B43 	;******************************************************************
00010 0B43 	; Notes:
00011 0B43 	; SPI I/O for AS5047D Magnetic Shaft Angle Encoder.
00012 0B43 	; CKP=0, CKE=1, SMP=1
00013 0B43 	; RB0	SPI CSn
00014 0B43 	; RA6	SPI MOSI  aka SDO1
00015 0B43 	; RB1	SPI MISO  aka SDI1
00016 0B43 	; RB4	SPI CLK
00017 0B43 	;
00018 0B43 	;******************************************************************
00019 0B43 	; Rotines:	(Stack Words Used)
00020 0B43 	; Init_AS5047D	(0) Call once to setup SSP1
00021 0B43 	;
00022 0B43 	; AS5047D_WrtZPOSM	(1) call AS5047_Write with AS5047_ZPOSM and Prog_AS5047_ZPOSM
00023 0B43 	; AS5047D_WrtZPOSL	(1) call AS5047_Write with AS5047_ZPOSL and Prog_AS5047_ZPOSL
00024 0B43 	; AS5047D_WrtSettings2 (1) call AS5047_Write with AS5047_Settings2 and Prog_AS5047_Settings2
00025 0B43 	; AS5047D_WrtSettings1 (1) call AS5047_Write with AS5047_Settings1 and Prog_AS5047_Settings1
00026 0B43 	;
00027 0B43 	; AS5047_Write	(1) Write data to AS5047D
00028 0B43 	; AS5047_ReadPos	(1) AS5047_ANGLECOM >> SPI_SendRecWord
00029 0B43 	; AS5047_ReadANGLEUNCReg (1) AS5047_ANGLEUNC >> AS5047_Read
00030 0B43 	; AS5047_ReadDIAAGCReg (1) AS5047_DIAAGCReg >> AS5047_Read
00031 0B43 	; AS5047_ReadZPOSMReg	(1) AS5047_ZPOSM >> AS5047_Read
00032 0B43 	; AS5047_ReadZPOSLReg  (1) AS5047_ZPOSL >> AS5047_Read
00033 0B43 	; AS5047_ReadStgs1Reg	(1) AS5047_Settings1 >> AS5047_Read
00034 0B43 	; AS5047_ReadStgs2Reg	(1) AS5047_Settings2 >> AS5047_Read
00035 0B43 	; AS5047_ReadErrorReg  (1) AS5047_ErrReg >> AS5047_Read
00036 0B43 	; AS5047_Read	(1) Send a read command + NOP, returns data
00037 0B43 	; SPI_SendRecWord	(0) Send Param79:Param78, Receive Param79:Param78
00038 0B43 	;
00039 0B43 	; CalcParity	(0) Param79:Param78 = Parity Bit + 15 bit word
00040 0B43 	; CheckParity	(0) Param79:Param78 = unchanged, ParityErrFlag
00041 0B43 	;******************************************************************
00042 0B43 	;
00043 0B43 		ifndef kStandAlone
00045 0B43 		endif
00046 0B43 	;
00047 0B43 	; Bank 0 persistant variables used by stand alone version
00048 0B43 	;	Prog_AS5047_ZPOSM:2
00049 0B43 	;	Prog_AS5047_ZPOSL:2
00050 0B43 	;	Prog_AS5047_Settings2:2
00051 0B43 	;	Prog_AS5047_Settings1:2
00052 0B43 	;
00053 0B43 8000 	AS5047_ParityBit	EQU	0x8000	;P
SerialServo.asm                                                       Page: 47
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00054 0B43 4000 	AS5047_ReadBit	EQU	0x4000	; R
00055 0B43 C000 	AS5047_NOP	EQU	0xC000	;PR+0x0000
00056 0B43 	; Volatile Registers
00057 0B43 0001 	AS5047_ErrReg	EQU	0x0001	; R+0x0001
00058 0B43 0003 	AS5047_ProgReg	EQU	0x0003
00059 0B43 3FFC 	AS5047_DIAAGCReg	EQU	0x3FFC
00060 0B43 3FFD 	AS5047_MAGReg	EQU	0x3FFD
00061 0B43 7FFE 	AS5047_ANGLEUNC	EQU	0x3FFE+AS5047_ReadBit
00062 0B43 7FFF 	AS5047_ANGLECOM	EQU	0x3FFF+AS5047_ReadBit
00063 0B43 	; Non-Volatile Registers
00064 0B43 0016 	AS5047_ZPOSM	EQU	0x0016
00065 0B43 0017 	AS5047_ZPOSL	EQU	0x0017
00066 0B43 0018 	AS5047_Settings1	EQU	0x0018
00067 0B43 0019 	AS5047_Settings2	EQU	0x0019
00068 0B43 	;
00069 0B43 	; ***** Add to global declarations ****
00070 0B43 	;AS5047D_Flags	EQU	Param70	;Check that Param70 is OK to use
00071 0B43 	;
00072 0B43 	;#Define	ParityErrFlag	AS5047D_Flags,0
00073 0B43 	;#Define	AngleReadFlag	AS5047D_Flags,1
00074 0B43 	;#define	ContinueReadFlag	AS5047D_Flags,2
00075 0B43 	;#Define	CmdErrorFlag	AS5047D_Flags,3
00076 0B43 	;
00077 0B43 	;Diagnostics register bits
00078 0B43 0003 	MagFldLowErrBit	EQU	3
00079 0B43 0002 	MagFldHighErrBit	EQU	2
00080 0B43 	;
00081 0B43 	;******************************************************************
00082 0B43 	; Initialize the MSSP
00083 0B43 	; *SPI: CKP=0 Clock Idle is Low State,
00084 0B43 	; SPI: CKE=1 Transmit occurs on transition from active to Idle clock state
00085 0B43 	; *SPI: CKE=0 Transmit occurs on transition from Idle to active clock state
00086 0B43 	; *SPI: SMP=1 Input data sampled at end of data output time
00087 0B43 	; SPI master clock=Fosc/64
00088 0B43 	;
00089 0B43 0022 	SSP1CON1_Val	EQU	b'00100010'	;SSPEN=1, SPI Fosc/64
00090 0B43 010D 	#Define	SPI_CSn	LATB,0
00091 0B43 008D 	#Define	SPI_CSn_Tris	TRISB,0
00092 0B43 008C 	#Define	SPI_MOSI_Tris	TRISA,6
00093 0B43 008D 	#Define	SPI_MISO_Tris	TRISB,1
00094 0B43 008D 	#Define	SPI_CLK_Tris	TRISB,4
00095 0B43 	;
00096 0B43 0022 	Init_AS5047D	movlb	2	;bank 2
00097 0B44 140D 		bsf	SPI_CSn	;inactive
00098 0B45 	;
00099 0B45 0021 		movlb	1	;bank 1
00100 0B46 100D 		bcf	SPI_CSn_Tris	;output
00101 0B47 148D 		bsf	SPI_MISO_Tris	;input
00102 0B48 130C 		bcf	SPI_MOSI_Tris	;output
00103 0B49 120D 		bcf	SPI_CLK_Tris	;output
00104 0B4A 	;
00105 0B4A 0024 		movlb	4	;bank 4
00106 0B4B 3022 		movlw	SSP1CON1_Val
00107 0B4C 0095 		movwf	SSP1CON1
00108 0B4D 1794 		bsf	SSP1STAT,SMP
00109 0B4E 	;	bsf	SSP1STAT,CKE	;CKE=1
00110 0B4E 1314 		bcf	SSP1STAT,CKE	;CKE=1
00111 0B4F 	;
00112 0B4F 	;	BANKSEL	PEI1
00113 0B4F 	;	bsf	PIE1,SSP1	;enable interupt
00114 0B4F 0020 		movlb	0	;bank 0
00115 0B50 0008 		return
00116 0B51 	;
00117 0B51 		if kStandAlone
00194 0B51 		endif
00195 0B51 	;*******************************************************************
00196 0B51 	; Write data to AS5047D
00197 0B51 	;  Write address, dicard dummy data
00198 0B51 	;  Write data, save old data
00199 0B51 	;  Send NOP, save new data
00200 0B51 	;
00201 0B51 	; Entry: Param79:Param78 = Address, Param7B:Param7A = Data
00202 0B51 	; Exit: Param79:Param78 = Data read back 14 bit value, ParityErrFlag, CmdErrorFlag,
00203 0B51 	;   Param7B:Param7A = old data 16 bits including error and parity bits
00204 0B51 	; RAM Used: Param76..Param7A
00205 0B51 	; Calls:CalcParity, SPI_SendRecWord
00206 0B51 	;
00207 0B51 10F0 	AS5047_Write	bcf	AngleReadFlag
00208 0B52 1170 		bcf	ContinueReadFlag
00209 0B53 	;
00210 0B53 1379 		bcf	Param79,6	;Write Address, dicard dummy data
00211 0B54 23C9 		call	CalcParity
00212 0B55 23B4 		call	SPI_SendRecWord	;ignore rec'd word
00213 0B56 	;
00214 0B56 087B 		movf	Param7B,W	;Send data
00215 0B57 00F9 		movwf	Param79
00216 0B58 087A 		movf	Param7A,W
00217 0B59 00F8 		movwf	Param78
00218 0B5A 1379 		bcf	Param79,6	;Write data, save old value
00219 0B5B 23C9 		call	CalcParity
00220 0B5C 23B4 		call	SPI_SendRecWord
00221 0B5D 0879 		movf	Param79,W	;store old data
00222 0B5E 00FB 		movwf	Param7B
00223 0B5F 0878 		movf	Param78,W
00224 0B60 00FA 		movwf	Param7A
00225 0B61 	;
00226 0B61 3000 		movlw	low AS5047_NOP	;send NOP, save data for verify
00227 0B62 00F8 		movwf	Param78
00228 0B63 30C0 		movlw	high AS5047_NOP
SerialServo.asm                                                       Page: 48
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00229 0B64 00F9 		movwf	Param79
00230 0B65 23B4 		call	SPI_SendRecWord
00231 0B66 23DC 		call	CheckParity	;set ParityErrFlag
00232 0B67 11F0 		bcf	CmdErrorFlag
00233 0B68 1B79 		btfsc	Param79,6	;Cmd Error?
00234 0B69 15F0 		bsf	CmdErrorFlag
00235 0B6A 303F 		movlw	0x3F
00236 0B6B 05F9 		andwf	Param79,F
00237 0B6C 0008 		return
00238 0B6D 	;
00239 0B6D 	;*******************************************************************
00240 0B6D 	; Read the compensated position
00241 0B6D 	;
00242 0B6D 	; Entry: none
00243 0B6D 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00244 0B6D 	; RAM Used: Param76, Param77, Param78, Param79
00245 0B6D 	; Calls: SPI_SendRecWord, CheckParity
00246 0B6D 	;
00247 0B6D 30FF 	AS5047_ReadPos	movlw	low AS5047_ANGLECOM
00248 0B6E 00F8 		movwf	Param78
00249 0B6F 307F 		movlw	high AS5047_ANGLECOM
00250 0B70 00F9 		movwf	Param79
00251 0B71 	;
00252 0B71 23C9 		call	CalcParity
00253 0B72 23B4 		call	SPI_SendRecWord
00254 0B73 	;
00255 0B73 23DC 		call	CheckParity
00256 0B74 11F0 		bcf	CmdErrorFlag
00257 0B75 1B79 		btfsc	Param79,6	;Cmd Error?
00258 0B76 15F0 		bsf	CmdErrorFlag
00259 0B77 303F 		movlw	0x3F
00260 0B78 05F9 		andwf	Param79,F
00261 0B79 	;
00262 0B79 	; if (!ContinueReadFlag || !AngleReadFlag) then ignore data and read again
00263 0B79 1D70 		btfss	ContinueReadFlag
00264 0B7A 3203 		bra	AS5047_ReadPos_1
00265 0B7B 1CF0 		btfss	AngleReadFlag
00266 0B7C 3201 		bra	AS5047_ReadPos_1
00267 0B7D 0008 		return
00268 0B7E 	;
00269 0B7E 1570 	AS5047_ReadPos_1	bsf	ContinueReadFlag
00270 0B7F 14F0 		bsf	AngleReadFlag
00271 0B80 33EC 		bra	AS5047_ReadPos	;one more time
00272 0B81 	;
00273 0B81 	;*******************************************************************
00274 0B81 	; Read the Angle Uncompensated Register
00275 0B81 	;
00276 0B81 	; Entry: none
00277 0B81 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00278 0B81 	; RAM Used: Param76, Param77, Param78, Param79
00279 0B81 	; calls: AS5047_Read
00280 0B81 	;
00281 0B81 30FE 	AS5047_ReadANGLEUNCReg	movlw	low AS5047_ANGLEUNC
00282 0B82 00F8 		movwf	Param78
00283 0B83 307F 		movlw	high AS5047_ANGLEUNC
00284 0B84 00F9 		movwf	Param79
00285 0B85 2BA3 		goto	AS5047_ReadReg
00286 0B86 	;
00287 0B86 	;*******************************************************************
00288 0B86 	; Read the Diagnostics Register
00289 0B86 	;
00290 0B86 	; Entry: none
00291 0B86 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00292 0B86 	; RAM Used: Param76, Param77, Param78, Param79
00293 0B86 	; calls: AS5047_Read
00294 0B86 	;
00295 0B86 30FC 	AS5047_ReadDIAAGCReg	movlw	low AS5047_DIAAGCReg
00296 0B87 00F8 		movwf	Param78
00297 0B88 303F 		movlw	high AS5047_DIAAGCReg
00298 0B89 00F9 		movwf	Param79
00299 0B8A 2BA3 		goto	AS5047_ReadReg
00300 0B8B 	;
00301 0B8B 	;*******************************************************************
00302 0B8B 	; Read the Zero position MSB Register
00303 0B8B 	;
00304 0B8B 	; Entry: none
00305 0B8B 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00306 0B8B 	; RAM Used: Param76, Param77, Param78, Param79
00307 0B8B 	; calls: AS5047_Read
00308 0B8B 	;
00309 0B8B 3016 	AS5047_ReadZPOSMReg	movlw	low AS5047_ZPOSM
00310 0B8C 00F8 		movwf	Param78
00311 0B8D 3000 		movlw	high AS5047_ZPOSM
00312 0B8E 00F9 		movwf	Param79
00313 0B8F 2BA3 		goto	AS5047_ReadReg
00314 0B90 	;
00315 0B90 	;*******************************************************************
00316 0B90 	; Read the Zero position LSB Register
00317 0B90 	;
00318 0B90 	; Entry: none
00319 0B90 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00320 0B90 	; RAM Used: Param76, Param77, Param78, Param79
00321 0B90 	; calls: AS5047_Read
00322 0B90 	;
00323 0B90 3017 	AS5047_ReadZPOSLReg	movlw	low AS5047_ZPOSL
00324 0B91 00F8 		movwf	Param78
00325 0B92 3000 		movlw	high AS5047_ZPOSL
00326 0B93 00F9 		movwf	Param79
00327 0B94 2BA3 		goto	AS5047_ReadReg
SerialServo.asm                                                       Page: 49
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00328 0B95 	;
00329 0B95 	;*******************************************************************
00330 0B95 	; Read the Settings1 Register
00331 0B95 	;
00332 0B95 	; Entry: none
00333 0B95 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00334 0B95 	; RAM Used: Param76, Param77, Param78, Param79
00335 0B95 	; calls: AS5047_Read
00336 0B95 	;
00337 0B95 3018 	AS5047_ReadStgs1Reg	movlw	low AS5047_Settings1
00338 0B96 00F8 		movwf	Param78
00339 0B97 3000 		movlw	high AS5047_Settings1
00340 0B98 00F9 		movwf	Param79
00341 0B99 2BA3 		goto	AS5047_ReadReg
00342 0B9A 	;
00343 0B9A 	;*******************************************************************
00344 0B9A 	; Read the Settings2 Register
00345 0B9A 	;
00346 0B9A 	; Entry: none
00347 0B9A 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00348 0B9A 	; RAM Used: Param76, Param77, Param78, Param79
00349 0B9A 	; calls: AS5047_Read
00350 0B9A 	;
00351 0B9A 3019 	AS5047_ReadStgs2Reg	movlw	low AS5047_Settings2
00352 0B9B 00F8 		movwf	Param78
00353 0B9C 3000 		movlw	high AS5047_Settings2
00354 0B9D 00F9 		movwf	Param79
00355 0B9E 2BA3 		goto	AS5047_ReadReg
00356 0B9F 	;
00357 0B9F 	;*******************************************************************
00358 0B9F 	; Read the Error Register
00359 0B9F 	;
00360 0B9F 	; Entry: none
00361 0B9F 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00362 0B9F 	; RAM Used: Param76, Param77, Param78, Param79
00363 0B9F 	; calls: AS5047_Read
00364 0B9F 	;
00365 0B9F 3001 	AS5047_ReadErrorReg	movlw	low AS5047_ErrReg
00366 0BA0 00F8 		movwf	Param78
00367 0BA1 3000 		movlw	high AS5047_ErrReg
00368 0BA2 00F9 		movwf	Param79
00369 0BA3 	;
00370 0BA3 	; fall through to AS5047_ReadReg
00371 0BA3 	;*******************************************************************
00372 0BA3 	; Read any Register
00373 0BA3 	;
00374 0BA3 	; Entry: Param79:Param78 = 14 bit address to read
00375 0BA3 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00376 0BA3 	; RAM Used: Param76, Param77, Param78, Param79
00377 0BA3 	; calls: AS5047_Read
00378 0BA3 	;
00379 0BA3 23AB 	AS5047_ReadReg	call	AS5047_Read
00380 0BA4 	;
00381 0BA4 23DC 		call	CheckParity
00382 0BA5 11F0 		bcf	CmdErrorFlag
00383 0BA6 1B79 		btfsc	Param79,6	;Cmd Error?
00384 0BA7 15F0 		bsf	CmdErrorFlag
00385 0BA8 303F 		movlw	0x3F
00386 0BA9 05F9 		andwf	Param79,F
00387 0BAA 0008 		return
00388 0BAB 	;
00389 0BAB 	;*******************************************************************
00390 0BAB 	; Read Data
00391 0BAB 	;  Send a read command, dicards dummy data
00392 0BAB 	;  Send NOP, returns data
00393 0BAB 	;
00394 0BAB 	; Entry: Param79:Param78 = 14 bit Address
00395 0BAB 	; Exit: Param79:Param78 = Parity+EF+data
00396 0BAB 	; RAM Used: Param76,Param77,Param78, Param79
00397 0BAB 	; Calls: CalcParity,SPI_SendRecWord
00398 0BAB 	;
00399 0BAB 1170 	AS5047_Read	bcf	ContinueReadFlag
00400 0BAC 10F0 		bcf	AngleReadFlag
00401 0BAD 	;
00402 0BAD 1779 		bsf	Param79,6	;read bit
00403 0BAE 23C9 		call	CalcParity
00404 0BAF 23B4 		call	SPI_SendRecWord
00405 0BB0 3000 		movlw	low AS5047_NOP
00406 0BB1 00F8 		movwf	Param78
00407 0BB2 30C0 		movlw	high AS5047_NOP
00408 0BB3 00F9 		movwf	Param79
00409 0BB4 	;
00410 0BB4 	; fall through to SPI_SendRecWord
00411 0BB4 	;*******************************************************************
00412 0BB4 	; Send and Receive
00413 0BB4 	;
00414 0BB4 	; Entry: Param79:Param78 = word to send
00415 0BB4 	; Exit: Param79:Param78 = word received
00416 0BB4 	; RAM Used: Param78, Param79
00417 0BB4 	; Calls: none
00418 0BB4 	;
00419 0BB4 0022 	SPI_SendRecWord	movlb	2	;bank 2
00420 0BB5 100D 		bcf	SPI_CSn	;assert chip select
00421 0BB6 0024 		movlb	4	;bank 4
00422 0BB7 0879 		movf	Param79,W
00423 0BB8 0091 		movwf	SSP1BUF
00424 0BB9 0000 	SPI_SendRecWord_L1	nop
00425 0BBA 1C14 		btfss	SSP1STAT,BF
00426 0BBB 33FD 		bra	SPI_SendRecWord_L1
SerialServo.asm                                                       Page: 50
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00427 0BBC 0811 		movf	SSP1BUF,W
00428 0BBD 00F9 		movwf	Param79
00429 0BBE 	;
00430 0BBE 0878 		movf	Param78,W
00431 0BBF 0091 		movwf	SSP1BUF
00432 0BC0 0000 	SPI_SendRecWord_L2	nop
00433 0BC1 1C14 		btfss	SSP1STAT,BF
00434 0BC2 33FD 		bra	SPI_SendRecWord_L2
00435 0BC3 0811 		movf	SSP1BUF,W
00436 0BC4 00F8 		movwf	Param78
00437 0BC5 	;
00438 0BC5 0022 		movlb	2
00439 0BC6 140D 		bsf	SPI_CSn	;disable chip select
00440 0BC7 0020 		movlb	0	;bank 0
00441 0BC8 0008 		return
00442 0BC9 	;
00443 0BC9 	;*******************************************************************
00444 0BC9 	; Calculate Even Parity Bit for Param79:Param78
00445 0BC9 	;
00446 0BC9 	; Entry: Param79:Param78 = 15 bit word
00447 0BC9 	; Exit: Param79:Param78 = Parity Bit + 15 bit word
00448 0BC9 	; RAM Used: Param76,Param77,Param78,Param79
00449 0BC9 	; Calls: none
00450 0BC9 	;
00451 0BC9 01F6 	CalcParity	clrf	Param76
00452 0BCA 300F 		movlw	.15	;bit count
00453 0BCB 00F7 		movwf	Param77
00454 0BCC 0DF8 	CalcParity_L1	rlf	Param78,F
00455 0BCD 0DF9 		rlf	Param79,F
00456 0BCE 3080 		movlw	0x80
00457 0BCF 0579 		andwf	Param79,W
00458 0BD0 06F6 		xorwf	Param76,F
00459 0BD1 0BF7 		decfsz	Param77,F
00460 0BD2 33F9 		bra	CalcParity_L1
00461 0BD3 0DF8 		rlf	Param78,F
00462 0BD4 0DF9 		rlf	Param79,F	;LSb to _C
00463 0BD5 0DF8 		rlf	Param78,F	;_C to LSb
00464 0BD6 0DF9 		rlf	Param79,F
00465 0BD7 3080 		movlw	0x80
00466 0BD8 0576 		andwf	Param76,W	;get parity bit
00467 0BD9 13F9 		bcf	Param79,7	;force to 0 (default)
00468 0BDA 04F9 		iorwf	Param79,F	;set parity bit
00469 0BDB 0008 		return
00470 0BDC 	;
00471 0BDC 	;**********************************************************************
00472 0BDC 	; Check Even Parity Bit for Param79:Param78
00473 0BDC 	;
00474 0BDC 	; Entry: Param79:Param78 = Parity Bit + 15 bit word
00475 0BDC 	; Exit: Param79:Param78 = unchanged, ParityErrFlag
00476 0BDC 	; RAM Used: Param76,Param77,Param78,Param79
00477 0BDC 	; Calls: none
00478 0BDC 	;
00479 0BDC 01F6 	CheckParity	clrf	Param76
00480 0BDD 300F 		movlw	.15	;bit count
00481 0BDE 00F7 		movwf	Param77
00482 0BDF 0DF8 	CheckParity_L1	rlf	Param78,F
00483 0BE0 0DF9 		rlf	Param79,F
00484 0BE1 3080 		movlw	0x80
00485 0BE2 0579 		andwf	Param79,W
00486 0BE3 06F6 		xorwf	Param76,F
00487 0BE4 0BF7 		decfsz	Param77,F
00488 0BE5 33F9 		bra	CheckParity_L1
00489 0BE6 0DF8 		rlf	Param78,F
00490 0BE7 0DF9 		rlf	Param79,F	;LSb to _C
00491 0BE8 0DF8 		rlf	Param78,F	;_C to LSb
00492 0BE9 0DF9 		rlf	Param79,F
00493 0BEA 0876 		movf	Param76,W	;get calc'd parity bit
00494 0BEB 0679 		xorwf	Param79,W	;xor w/ parity bit
00495 0BEC 3980 		andlw	0x80
00496 0BED 1070 		bcf	ParityErrFlag
00497 0BEE 1B89 		btfsc	WREG,7
00498 0BEF 1470 		bsf	ParityErrFlag
00499 0BF0 0008 		return
00500 0BF1 	;
00501 0BF1 	;*************************************************************************
00502 0BF1 	;*************************************************************************
02155 0BF1 		include <ssInit.inc>
00001 0BF1 	;=========================================================================================
00002 0BF1 	; call once
00003 0BF1 	;=========================================================================================
00004 0BF1 	;
00005 0BF1 0021 	InitializeIO	MOVLB	0x01	; select bank 1
00006 0BF2 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00007 0BF3 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00008 0BF4 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00009 0BF5 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00010 0BF6 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00011 0BF7 1515 		bsf	OPTION_REG,PS2
00012 0BF8 	;
00013 0BF8 0021 		MOVLB	0x01	; bank 1
00014 0BF9 30F0 		MOVLW	OSCCON_Value
00015 0BFA 0099 		MOVWF	OSCCON
00016 0BFB 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00017 0BFC 0097 		movwf	WDTCON
00018 0BFD 	;
00019 0BFD 0024 		movlb	4	; bank 4
00020 0BFE 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00021 0BFF 	;
00022 0BFF 0023 		MOVLB	ANSELA	; bank 3
SerialServo.asm                                                       Page: 51
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00023 0C00 3003 		movlw	ANSELA_Val
00024 0C01 008C 		movwf	ANSELA
00025 0C02 3000 		movlw	ANSELB_Val
00026 0C03 008D 		movwf	ANSELB
00027 0C04 	;
00028 0C04 	;Setup T2 for 100/s
00029 0C04 0020 		movlb	0	; bank 0
00030 0C05 304F 		MOVLW	T2CON_Value
00031 0C06 009C 		MOVWF	T2CON
00032 0C07 307D 		MOVLW	PR2_Value
00033 0C08 009B 		MOVWF	PR2
00034 0C09 0021 		movlb	1	; bank 1
00035 0C0A 1491 		bsf	PIE1,TMR2IE	; enable Timer 2 interupt
00036 0C0B 	;
00037 0C0B 	; setup timer 1 for 0.5uS/count
00038 0C0B 	;
00039 0C0B 0020 		MOVLB	0x00	; bank 0
00040 0C0C 3021 		MOVLW	T1CON_Val
00041 0C0D 0098 		MOVWF	T1CON
00042 0C0E 1399 		bcf	T1GCON,TMR1GE	;always count
00043 0C0F 	;
00044 0C0F 	;SPI MISO >> SDI1 RB1, default
00045 0C0F 	;SPI CLK >> RB4, default
00046 0C0F 0022 		movlb	2	;bank 2
00047 0C10 179D 		bsf	APFCON0,RXDTSEL	;RX >> RB2
00048 0C11 141E 		bsf	APFCON1,TXCKSEL	;TX >> RB5
00049 0C12 171D 		bsf	APFCON0,SDO1SEL	;SPI MOSI >> SDO1 RA6
00050 0C13 	;	
00051 0C13 	; clear memory to zero
00052 0C13 		mLongCall	ClearRam
00052 0C13 3180      M		movlp	ClearRam	                       movlp                  Destination
00052 0C14 205D      M		call	ClearRam	                       call                   Destination
00052 0C15 318C      M		movlp	$	                       movlp                  $
00053 0C16 0064 		CLRWDT
00054 0C17 		mLongCall	CopyToRam
00054 0C17 3180      M		movlp	CopyToRam	                       movlp                  Destination
00054 0C18 207C      M		call	CopyToRam	                       call                   Destination
00054 0C19 318C      M		movlp	$	                       movlp                  $
00055 0C1A 	;
00056 0C1A 	; setup ccp1
00057 0C1A 	;
00058 0C1A 14B7 		BSF	ServoOff
00059 0C1B 	;	BANKSEL	APFCON
00060 0C1B 	;	BSF	APFCON,CCP1SEL	;CCP1 on RA5
00061 0C1B 0025  a		MOVLB	CCP1CON	;banksel
00060 0C1C 		BANKSEL	CCP1CON
00062 0C1C 0193 		CLRF	CCP1CON
00063 0C1D 	;
00064 0C1D 0021 		MOVLB	0x01	;Bank 1
00065 0C1E 1511 		bsf	PIE1,CCP1IE
00066 0C1F 	;
00067 0C1F 	;
00068 0C1F 0020 		MOVLB	0x00	;Bank 0
00069 0C20 	; setup data ports
00070 0C20 3011 		movlw	PortBValue
00071 0C21 008D 		movwf	PORTB	;init port B
00072 0C22 3000 		movlw	PortAValue
00073 0C23 008C 		movwf	PORTA
00074 0C24 0021 		MOVLB	0x01	; bank 1
00075 0C25 30BF 		movlw	PortADDRBits
00076 0C26 008C 		movwf	TRISA
00077 0C27 30C6 		movlw	PortBDDRBits	;setup for programer
00078 0C28 008D 		movwf	TRISB
00079 0C29 	;
00080 0C29 		if useRS232
00081 0C29 	; setup serial I/O
00082 0C29 0023  a		MOVLB	BAUDCON	;banksel
00081 0C2A 		BANKSEL	BAUDCON	; bank 3
00083 0C2A 3008 		movlw	BAUDCON_Value
00084 0C2B 009F 		movwf	BAUDCON
00085 0C2C 30CF 		MOVLW	low BaudRate
00086 0C2D 009B 		MOVWF	SPBRGL
00087 0C2E 3000 		MOVLW	high BaudRate
00088 0C2F 009C 		MOVWF	SPBRGH
00089 0C30 3024 		MOVLW	TXSTA_Value
00090 0C31 009E 		MOVWF	TXSTA
00091 0C32 3090 		MOVLW	RCSTA_Value
00092 0C33 009D 		MOVWF	RCSTA
00093 0C34 0021 		movlb	0x01	; bank 1
00094 0C35 1691 		BSF	PIE1,RCIE	; Serial Receive interupt
00095 0C36 0020 		movlb	0x00	; bank 0
00096 0C37 	;
00097 0C37 		endif
00098 0C37 	;
00099 0C37 0064 		CLRWDT
00100 0C38 	;-----------------------
00101 0C38 	;
00102 0C38 0020 		MOVLB	0x00
00103 0C39 3064 		MOVLW	LEDTIME
00104 0C3A 00A0 		MOVWF	SysLED_Time
00105 0C3B 3001 		movlw	0x01
00106 0C3C 00A3 		movwf	SysLEDCount	;start blinking right away
00107 0C3D 3064 		movlw	.100
00108 0C3E 00AE 		movwf	Timer4Lo	;ignor buttons for 1st second
00109 0C3F 	;
00110 0C3F 	;
00111 0C3F 	;if mode 3 don't move
00112 0C3F 17B4 		bsf	ssCmdPos+1,7
00113 0C40 	;
SerialServo.asm                                                       Page: 52
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00114 0C40 0064 		CLRWDT
00115 0C41 	;
00116 0C41 2343 		call	Init_AS5047D	;initialize the SPI encoder I/O
00117 0C42 	;
00118 0C42 0021 		movlb	1	; bank 0
00119 0C43 1433 		bsf	AN0_ActiveBit
00120 0C44 14B3 		bsf	AN1_ActiveBit
00121 0C45 	;
00122 0C45 2449 	                       call                   DoAuxConfig
00123 0C46 	;
00124 0C46 170B 		bsf	INTCON,PEIE	; enable periferal interupts
00125 0C47 178B 		bsf	INTCON,GIE	; enable interupts
00126 0C48 	;
00127 0C48 0008 		return
00128 0C49 	;=============================================================
00129 0C49 	;
00130 0C49 0858 	DoAuxConfig	movf                   ssAux0Config,W              ;AuxNum
00131 0C4A 000B 	                       brw
00132 0C4B 3207 	                       bra                    SetAux0ConfigNone
00133 0C4C 3206 	                       bra                    SetAux0ConfigLEDBtn
00134 0C4D 3205 	                       bra                    SetAux0ConfigDigIn
00135 0C4E 320D 	                       bra                    SetAux0ConfigDigOut
00136 0C4F 3215 	                       bra                    SetAux0ConfigAnalogIn
00137 0C50 3202 	                       bra                    SetAux0ConfigHomeSw
00138 0C51 3201 	                       bra                    SetAux0ConfigFwdLimit
00139 0C52 3200 	                       bra                    SetAux0ConfigRevLimit
00140 0C53 	;
00141 0C53 	SetAux0ConfigNone:
00142 0C53 	SetAux0ConfigLEDBtn:
00143 0C53 	SetAux0ConfigDigIn:
00144 0C53 	SetAux0ConfigHomeSw:
00145 0C53 	SetAux0ConfigFwdLimit:
00146 0C53 	SetAux0ConfigRevLimit:
00147 0C53 0023 	                       movlb                  ANSELA                 ;bank 3
00148 0C54 110C 	                       bcf                    Aux0_ANSEL_Bit         ;Digital
00149 0C55 0021 	                       movlb                  1                      ;bank 1
00150 0C56 11B3 	                       bcf                    AN_Aux0_ActiveBit      ;Don't Read AN
00151 0C57 150C 	                       bsf                    Aux0_LED1_TRIS         ;Input
00152 0C58 0022 	                       movlb                  2                      ;bank 2
00153 0C59 110C 	                       bcf                    Aux0_LED1_Lat          ;0
00154 0C5A 0020 	                       movlb                  0                      ;bank 0
00155 0C5B 3211 	                       bra                    SetAux1Config
00156 0C5C 	;
00157 0C5C 	SetAux0ConfigDigOut:
00158 0C5C 0023 	                       movlb                  ANSELA                 ;bank 3
00159 0C5D 110C 	                       bcf                    Aux0_ANSEL_Bit         ;Digital
00160 0C5E 0021 	                       movlb                  1                      ;bank 1
00161 0C5F 11B3 	                       bcf                    AN_Aux0_ActiveBit      ;Don't Read AN
00162 0C60 110C 	                       bcf                    Aux0_LED1_TRIS         ;Output
00163 0C61 0022 	                       movlb                  2                      ;bank 2
00164 0C62 110C 	                       bcf                    Aux0_LED1_Lat          ;0
00165 0C63 0020 	                       movlb                  0                      ;bank 0
00166 0C64 3208 	                       bra                    SetAux1Config
00167 0C65 	;
00168 0C65 	SetAux0ConfigAnalogIn:
00169 0C65 0023 	                       movlb                  ANSELA                 ;bank 3
00170 0C66 150C 	                       bsf                    Aux0_ANSEL_Bit         ;Digital
00171 0C67 0021 	                       movlb                  1                      ;bank 1
00172 0C68 15B3 	                       bsf                    AN_Aux0_ActiveBit      ;Don't Read AN
00173 0C69 150C 	                       bsf                    Aux0_LED1_TRIS         ;Input
00174 0C6A 0022 	                       movlb                  2                      ;bank 2
00175 0C6B 110C 	                       bcf                    Aux0_LED1_Lat          ;0
00176 0C6C 0020 	                       movlb                  0                      ;bank 0
00177 0C6D 	;
00178 0C6D 0859 	SetAux1Config	movf                   ssAux1Config,W              ;AuxNum
00179 0C6E 000B 	                       brw
00180 0C6F 3207 	                       bra                    SetAux1ConfigNone
00181 0C70 3206 	                       bra                    SetAux1ConfigLEDBtn
00182 0C71 3205 	                       bra                    SetAux1ConfigDigIn
00183 0C72 320D 	                       bra                    SetAux1ConfigDigOut
00184 0C73 3215 	                       bra                    SetAux1ConfigAnalogIn
00185 0C74 3202 	                       bra                    SetAux1ConfigHomeSw
00186 0C75 3201 	                       bra                    SetAux1ConfigFwdLimit
00187 0C76 3200 	                       bra                    SetAux1ConfigRevLimit
00188 0C77 	;
00189 0C77 	SetAux1ConfigNone:
00190 0C77 	SetAux1ConfigLEDBtn:
00191 0C77 	SetAux1ConfigDigIn:
00192 0C77 	SetAux1ConfigHomeSw:
00193 0C77 	SetAux1ConfigFwdLimit:
00194 0C77 	SetAux1ConfigRevLimit:
00195 0C77 0023 	                       movlb                  ANSELA                 ;bank 3
00196 0C78 118C 	                       bcf                    Aux1_ANSEL_Bit         ;Digital
00197 0C79 0021 	                       movlb                  1                      ;bank 1
00198 0C7A 1233 	                       bcf                    AN_Aux1_ActiveBit      ;Don't Read AN
00199 0C7B 158C 	                       bsf                    Aux1_LED2_TRIS         ;Input
00200 0C7C 0022 	                       movlb                  2                      ;bank 2
00201 0C7D 118C 	                       bcf                    Aux1_LED2_Lat          ;0
00202 0C7E 0020 	                       movlb                  0                      ;bank 0
00203 0C7F 3211 	                       bra                    SetAux2Config
00204 0C80 	;
00205 0C80 	SetAux1ConfigDigOut:
00206 0C80 0023 	                       movlb                  ANSELA                 ;bank 3
00207 0C81 118C 	                       bcf                    Aux1_ANSEL_Bit         ;Digital
00208 0C82 0021 	                       movlb                  1                      ;bank 1
00209 0C83 1233 	                       bcf                    AN_Aux1_ActiveBit      ;Don't Read AN
00210 0C84 118C 	                       bcf                    Aux1_LED2_TRIS         ;Output
00211 0C85 0022 	                       movlb                  2                      ;bank 2
00212 0C86 118C 	                       bcf                    Aux1_LED2_Lat          ;0
SerialServo.asm                                                       Page: 53
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00213 0C87 0020 	                       movlb                  0                      ;bank 0
00214 0C88 3208 	                       bra                    SetAux2Config
00215 0C89 	;
00216 0C89 	SetAux1ConfigAnalogIn:
00217 0C89 0023 	                       movlb                  ANSELA                 ;bank 3
00218 0C8A 158C 	                       bsf                    Aux1_ANSEL_Bit         ;Digital
00219 0C8B 0021 	                       movlb                  1                      ;bank 1
00220 0C8C 1633 	                       bsf                    AN_Aux1_ActiveBit      ;Don't Read AN
00221 0C8D 158C 	                       bsf                    Aux1_LED2_TRIS         ;Input
00222 0C8E 0022 	                       movlb                  2                      ;bank 2
00223 0C8F 118C 	                       bcf                    Aux1_LED2_Lat          ;0
00224 0C90 0020 	                       movlb                  0                      ;bank 0
00225 0C91 	;
00226 0C91 085A 	SetAux2Config	movf                   ssAux2Config,W              ;AuxNum
00227 0C92 000B 	                       brw
00228 0C93 3207 	                       bra                    SetAux2ConfigNone
00229 0C94 3206 	                       bra                    SetAux2ConfigLEDBtn
00230 0C95 3205 	                       bra                    SetAux2ConfigDigIn
00231 0C96 320D 	                       bra                    SetAux2ConfigDigOut
00232 0C97 3215 	                       bra                    SetAux2ConfigAnalogIn
00233 0C98 3202 	                       bra                    SetAux2ConfigHomeSw
00234 0C99 3201 	                       bra                    SetAux2ConfigFwdLimit
00235 0C9A 3200 	                       bra                    SetAux2ConfigRevLimit
00236 0C9B 	;
00237 0C9B 	SetAux2ConfigNone:
00238 0C9B 	SetAux2ConfigLEDBtn:
00239 0C9B 	SetAux2ConfigDigIn:
00240 0C9B 	SetAux2ConfigHomeSw:
00241 0C9B 	SetAux2ConfigFwdLimit:
00242 0C9B 	SetAux2ConfigRevLimit:
00243 0C9B 0023 	                       movlb                  ANSELA                 ;bank 3
00244 0C9C 120C 	                       bcf                    Aux2_ANSEL_Bit         ;Digital
00245 0C9D 0021 	                       movlb                  1                      ;bank 1
00246 0C9E 12B3 	                       bcf                    AN_Aux2_ActiveBit      ;Don't Read AN
00247 0C9F 160C 	                       bsf                    Aux2_LED3_TRIS         ;Input
00248 0CA0 0022 	                       movlb                  2                      ;bank 2
00249 0CA1 120C 	                       bcf                    Aux2_LED3_Lat          ;0
00250 0CA2 0020 	                       movlb                  0                      ;bank 0
00251 0CA3 0008 	                       return
00252 0CA4 	;
00253 0CA4 	SetAux2ConfigDigOut:
00254 0CA4 0023 	                       movlb                  ANSELA                 ;bank 3
00255 0CA5 120C 	                       bcf                    Aux2_ANSEL_Bit         ;Digital
00256 0CA6 0021 	                       movlb                  1                      ;bank 1
00257 0CA7 12B3 	                       bcf                    AN_Aux2_ActiveBit      ;Don't Read AN
00258 0CA8 120C 	                       bcf                    Aux2_LED3_TRIS         ;Output
00259 0CA9 0022 	                       movlb                  2                      ;bank 2
00260 0CAA 120C 	                       bcf                    Aux2_LED3_Lat          ;0
00261 0CAB 0020 	                       movlb                  0                      ;bank 0
00262 0CAC 0008 	                       return
00263 0CAD 	;
00264 0CAD 	SetAux2ConfigAnalogIn:
00265 0CAD 0023 	                       movlb                  ANSELA                 ;bank 3
00266 0CAE 160C 	                       bsf                    Aux2_ANSEL_Bit         ;Digital
00267 0CAF 0021 	                       movlb                  1                      ;bank 1
00268 0CB0 16B3 	                       bsf                    AN_Aux2_ActiveBit      ;Don't Read AN
00269 0CB1 160C 	                       bsf                    Aux2_LED3_TRIS         ;Input
00270 0CB2 0022 	                       movlb                  2                      ;bank 2
00271 0CB3 120C 	                       bcf                    Aux2_LED3_Lat          ;0
00272 0CB4 0020 	                       movlb                  0                      ;bank 0
00273 0CB5 0008 	                       return
00274 0CB6 	;
00275 0CB6 	;
00276 0CB6 	;
02156 0CB6 	;
02157 0CB6 		org BootLoaderStart
02158 1E00 		include <BootLoader1847.inc>
00001 1E00 	;************************************************
00002 1E00 	; BootLoader for PIC16F1847
00003 1E00 	; filename: Bootloader1847.inc
00004 1E00 	; Created: 3/21/2019
00005 1E00 	; Revision: 1.0a2 3/26/2020
00006 1E00 	;************************************************
00007 1E00 	; History
00008 1E00 	; 1.0a2 3/26/2020      Bug Fixes.
00009 1E00 	; 1.0a1 4/7/2019	First working version.
00010 1E00 	; 1.0d1 3/21/2019	first code
00011 1E00 	;************************************************
00012 1E00 	; Notes:
00013 1E00 	;
00014 1E00 	; WDT is not suported.
00015 1E00 	;
00016 1E00 	;  Does not program data EEProm, or other than prog mem 0..BootLoaderStart-1
00017 1E00 	;
00018 1E00 	; Must be the last thing in prog mem, will not overwrite itself or anything after it.
00019 1E00 	;
00020 1E00 	;BootLoaderStart	EQU	0x1E00
00021 1E00 	;	org BootLoaderStart
00022 1E00 	;	include <Bootloader1847.inc>
00023 1E00 	;
00024 1E00 	;  Reset vector:
00025 1E00 	;  	movlp	high BootLoaderStart
00026 1E00 	;    	goto	BootLoaderStart
00027 1E00 	;  ProgStartVector	CLRF	PCLATH
00028 1E00 	;	goto	Start
00029 1E00 	;
00030 1E00 	;  DataEEProm (0xFF) = 0xFF = run bootloader
00031 1E00 	;
00032 1E00 	; What happens next:
SerialServo.asm                                                       Page: 54
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00033 1E00 	;  If Data EEProm address (0xFF) <> 0xFF then goto ProgStartVector
00034 1E00 	;  Setup  UART for 38.4KBaud
00035 1E00 	;  Parse incoming text as .hex file
00036 1E00 	;   if program memory address > 0 and < BootLoader then
00037 1E00 	;    read block from prog mem
00038 1E00 	;    if compare blocks then
00039 1E00 	;      if prog mem is not blank then erase block
00040 1E00 	;    write block
00041 1E00 	;
00042 1E00 	;  DataEEProm (0xFF) = 0x00
00043 1E00 	;
00044 1E00 	;  reset
00045 1E00 	;************************************************
00046 1E00 	; .hex
00047 1E00 	;:020000040000FA 
00048 1E00 	;       ^^^^^^ Set high word of address to 0x0000
00049 1E00 	;:100010005A23582356235423422021000C16200033
00050 1E00 	;:100020003A100C1E3A14A10B053221000C122000CC
00051 1E00 	;^ Start code                             ^^ Checksum
00052 1E00 	; ^^ Bytes of data (0x10)
00053 1E00 	;   ^^^^ Address low word (0x0020)
00054 1E00 	;       ^^ Record type 0x00 = Data
00055 1E00 	;         ^^^^ LSB MSB of data for Addr / 2
00056 1E00 	;                                         
00057 1E00 	; Checksum is 2's complement of all other bytes added together
00058 1E00 	; Valid address range 0000 0000 .. 0000 3BFE (bootloader is at 0000 3C00 .. 0000 3FFF, 512 words)
00059 1E00 	;************************************************
00060 1E00 	;
00061 1E00 	;
00062 1E00 		cblock 0x20
00063 1E00 0020 		PROG_ADDR_LO                                  ;word address PC
00064 1E00 0021 		PROG_ADDR_HI                                  ; high 7 bits of PC
00065 1E00 0022 		ProgWordCount                                 ;Words in SourceBuffer
00066 1E00 		
00067 1E00 0023 		IH_Addr_Lo:2		;
00068 1E00 0025 		IH_Addr_Hi:2		;extended linear address, alway 0x0000 for Prog mem
00069 1E00 0027 		IH_Bytes
00070 1E00 0028 		IH_ByteCount
00071 1E00 0029 		IH_Type		;Record Type 0..5
00072 1E00 002A 		IH_State
00073 1E00 002B 		IH_TempVal
00074 1E00 002C 		IH_Flags
00075 1E00 002D 		ChkSum
00076 1E00 		endc
00077 1E00 	;
00078 1E00 002C 	#Define	MSN_Done	IH_Flags,0	;Most Significant Nibble
00079 1E00 002C 	#Define	DataInBuffer	IH_Flags,1             ;SourceBuffer has data
00080 1E00 	;
00081 1E00 	;IH_Type: Intel Hex Types
00082 1E00 0000 	IHT_Data	EQU	0x00
00083 1E00 0001 	IHT_End	EQU	0x01	;ie :00000001FF
00084 1E00 0002 	IHT_XSA	EQU	0x02	;extended segment address, not supported
00085 1E00 0003 	IHT_SSA	EQU	0x03	;start segment address, not supported
00086 1E00 0004 	IHT_HighAddr	EQU	0x04	;extended linear address, :02000004FFFFFC
00087 1E00 0005 	IHT_SLA	EQU	0x05	;start linear address, not supported, :04000005000000CD2A
00088 1E00 	;
00089 1E00 	;IH_State values
00090 1E00 0000 	IHS_WaitForColon	EQU	0x00
00091 1E00 0001 	IHS_Length	EQU	0x01
00092 1E00 0002 	IHS_AddrMSB	EQU	0x02
00093 1E00 0003 	IHS_AddrLSB	EQU	0x03
00094 1E00 0004 	IHS_DataType	EQU	0x04
00095 1E00 0005 	IHS_Data	EQU	0x05
00096 1E00 0006 	IHS_CSum	EQU	0x06	;waiting for check sum
00097 1E00 	;
00098 1E00 002B 	IH_ErrorBadLen	EQU	'+'	;>64 Too big
00099 1E00 002D 	IH_ErrorBadCSum	EQU	'-'	;Checksum didn't match
00100 1E00 003D 	IH_ErrorBadType        EQU                    '='                    ;IH_Type not recognized 
00101 1E00 002A 	IH_Ack	EQU	'*'	;We got a good Intel Hex line
00102 1E00 	;
00103 1E00 0040 	BlockSize	EQU	0x40
00104 1E00 0020 	BlockWords	EQU	BlockSize/2	;0x20
00105 1E00 00E0 	AddressMask	EQU	0xE0
00106 1E00 	;
00107 1E00 	;Contiguous ram 0x2000..0x23EF
00108 1E00 		cblock 0x2100		;0x0100 after start of ram
00109 1E00 2100 		SourceBuffer:BlockSize
00110 1E00 2140 		DestBuffer:BlockSize
00111 1E00 2180 		SerialBuffer:BlockSize
00112 1E00 		endc
00113 1E00 	;
00114 1E00 	;=========================================================================================
00115 1E00 	;
00116 1E00 	; Entry: DataEEProm255
00117 1E00 	; Exit: goto ProgStartVector
00118 1E00 	; Calls: none
00119 1E00 	; RAM used: ALL
00120 1E00 	;
00121 1E00 279E 	BootLoader	call	InitializeBLIO	;returns w/ bank 0 selected
00122 1E01 	;
00123 1E01 2704 		call	ReadEEData	;Get Data from EEPROM (0xFF) 
00124 1E02 3AFF 		xorlw	0xFF
00125 1E03 		SKPZ		;0xFF xor 0xFF = 0
00125 1E03 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00126 1E04 320B 		bra	BootLoader_End
00127 1E05 	;
00128 1E05 	; Bootloader is active send "**"
00129 1E05 302A 		movlw	IH_Ack
00130 1E06 26FE 		call	SendChar
SerialServo.asm                                                       Page: 55
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00131 1E07 302A 		movlw	IH_Ack
00132 1E08 26FE 		call	SendChar
00133 1E09 	;
00134 1E09 	;Initialize
00135 1E09 01A0 		clrf	PROG_ADDR_LO
00136 1E0A 01A1 		clrf	PROG_ADDR_HI
00137 1E0B 01A5 		clrf	IH_Addr_Hi
00138 1E0C 01A6 		clrf	IH_Addr_Hi+1
00139 1E0D 2746 		call	EraseSourceBuffer
00140 1E0E 	;
00141 1E0E 2612 		call	BL_Parse
00142 1E0F 	;	
00143 1E0F 	;if successful then clear EEProm(255)
00144 1E0F 270D 		call	WriteEEData
00145 1E10 	;
00146 1E10 3180 	BootLoader_End	movlp	0x00
00147 1E11 2802 		goto	ProgStartVector
00148 1E12 	;
00149 1E12 	;=========================================================================================
00150 1E12 	; Parse incoming data and do stuff
00151 1E12 	;
00152 1E12 10AC 	BL_Parse	bcf	DataInBuffer
00153 1E13 01AA 	BL_ParseNextLine	clrf	IH_State
00154 1E14 01A8 		clrf	IH_ByteCount
00155 1E15 01AD 		clrf	ChkSum
00156 1E16 26DE 		call                   FSR0_SerialBuffer
00157 1E17 	;
00158 1E17 102C 	BLP_L1	bcf	MSN_Done
00159 1E18 	;
00160 1E18 26ED 	BLP_L2	call	GetChar
00161 1E19 00F8 		movwf	Param78
00162 1E1A 303A 		movlw	':'
00163 1E1B 0278 		subwf	Param78,W
00164 1E1C 		SKPZ		;Char=":"
00164 1E1C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00165 1E1D 3203 		bra	BLP_TestNum	; No
00166 1E1E 	; It's a ":" so set state=1, wait for length
00167 1E1E 3001 		movlw	IHS_Length
00168 1E1F 00AA 		movwf	IH_State
00169 1E20 33F6 		bra	BLP_L1
00170 1E21 	;
00171 1E21 08AA 	BLP_TestNum	movf	IH_State,F
00172 1E22 		SKPNZ		;Are we waiting for a number?
00172 1E22 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00173 1E23 33F4 		bra	BLP_L2	; No
00174 1E24 	;
00175 1E24 3030 		movlw	0x30	;'0'
00176 1E25 0278 		subwf	Param78,W
00177 1E26 		SKPNB		;Char>="0"?
00177 1E26 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00178 1E27 33EB 		bra	BL_ParseNextLine	; No start over
00179 1E28 303A 		movlw	0x3A	;':'
00180 1E29 0278 		subwf	Param78,W
00181 1E2A 		SKPNB                                         ;>"9"?
00181 1E2A 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00182 1E2B 320A 		bra	BLP_TestNum_1          ; No, it's 0..9
00183 1E2C 3041 		movlw	0x41	;'A'
00184 1E2D 0278 		subwf	Param78,W
00185 1E2E 		SKPNB		;Char>="A"?
00185 1E2E 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00186 1E2F 33E3 		bra	BL_ParseNextLine	; No start over
00187 1E30 3047 		movlw	0x47	;'G'
00188 1E31 0278 		subwf	Param78,W
00189 1E32 		SKPB		;Char<"G"
00189 1E32 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00190 1E33 33DF 		bra	BL_ParseNextLine	; No, start over
00191 1E34 3007 		movlw	0x07	; Yes, A..F
00192 1E35 02F8 		subwf	Param78,F              ;  make "A" "0"+.10
00193 1E36 	;
00194 1E36 3030 	BLP_TestNum_1	movlw	0x30
00195 1E37 02F8 		subwf	Param78,F	;'0' >> 0x00
00196 1E38 182C 		btfsc	MSN_Done
00197 1E39 3204 		bra	BLP_TestNum_2	;do low nibble
00198 1E3A 0E78 		swapf	Param78,W
00199 1E3B 00AB 		movwf	IH_TempVal
00200 1E3C 142C 		bsf	MSN_Done
00201 1E3D 33DA 		bra	BLP_L2                 ;go get the next char
00202 1E3E 	;
00203 1E3E 0878 	BLP_TestNum_2	movf	Param78,W
00204 1E3F 07AB 		addwf	IH_TempVal,F           ;add the low nibble
00205 1E40 	;
00206 1E40 	; We have a number in IH_TempVal
00207 1E40 082A 	                       movf                   IH_State,W
00208 1E41 3907 	                       andlw                  0x07
00209 1E42 000B 	                       brw
00210 1E43 33CF 	                       bra                    BL_ParseNextLine       ;IHS_WaitForColon already handled
00211 1E44 3206 	                       bra                    BLP_IHS_Length         ;Waiting for length byte
00212 1E45 3211 	                       bra                    BLP_IHS_AddrMSB        ;IHS_AddrMSB
00213 1E46 3214 	                       bra                    BLP_IHS_AddrLSB        ;IHS_AddrLSB
00214 1E47 3217 	                       bra                    BLP_IHS_DataType       ;IHS_DataType
00215 1E48 321D 	                       bra                    BLP_IHS_Data           ;IHS_Data
00216 1E49 3225 	                       bra                    BLP_IHS_CSum           ;IHS_CSum
00217 1E4A 33C8 	                       bra                    BL_ParseNextLine       ;oops
00218 1E4B 	;	
00219 1E4B 3041 	BLP_IHS_Length	movlw	.65	; Yes, is it in range 0..64?
00220 1E4C 022B 		subwf	IH_TempVal,W
00221 1E4D 		SKPNB		;<=64?
00221 1E4D 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00222 1E4E 3203 		bra	BLP_SaveIH_Length
SerialServo.asm                                                       Page: 56
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00223 1E4F 	;
00224 1E4F 302B 		movlw	IH_ErrorBadLen
00225 1E50 26FE 		call	SendChar
00226 1E51 2E13 		goto	BL_ParseNextLine
00227 1E52 	;
00228 1E52 082B 	BLP_SaveIH_Length	movf	IH_TempVal,W
00229 1E53 00A7 		movwf	IH_Bytes
00230 1E54 07AD 		addwf	ChkSum,F
00231 1E55 0AAA 	BLP_NextState	incf	IH_State,F
00232 1E56 2E17 		goto	BLP_L1
00233 1E57 	;
00234 1E57 082B 	BLP_IHS_AddrMSB	movf	IH_TempVal,W
00235 1E58 00A4 		movwf	IH_Addr_Lo+1
00236 1E59 07AD 		addwf	ChkSum,F
00237 1E5A 33FA 		bra	BLP_NextState
00238 1E5B 	;
00239 1E5B 082B 	BLP_IHS_AddrLSB	movf	IH_TempVal,W
00240 1E5C 00A3 		movwf	IH_Addr_Lo
00241 1E5D 07AD 		addwf	ChkSum,F
00242 1E5E 33F6 		bra	BLP_NextState
00243 1E5F 	;
00244 1E5F 082B 	BLP_IHS_DataType	movf	IH_TempVal,W
00245 1E60 00A9 		movwf	IH_Type
00246 1E61 07AD 		addwf	ChkSum,F
00247 1E62 	; Ship IHS_Data if length = 0
00248 1E62 08A7 		movf	IH_Bytes,F
00249 1E63 		SKPNZ		;Expecting zero length data?
00249 1E63 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00250 1E64 0AAA 		incf	IH_State,F	; Yes
00251 1E65 33EF 		bra	BLP_NextState
00252 1E66 	;
00253 1E66 082B 	BLP_IHS_Data	movf	IH_TempVal,W
00254 1E67 001A 		movwi	FSR0++
00255 1E68 07AD 		addwf	ChkSum,F
00256 1E69 0AA8 		incf	IH_ByteCount,F
00257 1E6A 	; if IH_ByteCount=IH_Bytes then next state
00258 1E6A 0828 		movf	IH_ByteCount,W
00259 1E6B 0227 		subwf	IH_Bytes,W
00260 1E6C 		SKPZ		;Done with data?
00260 1E6C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00261 1E6D 2E17 		goto	BLP_L1	; No
00262 1E6E 33E6 		bra	BLP_NextState	; Yes
00263 1E6F 	;
00264 1E6F 	BLP_IHS_CSum:
00265 1E6F 	; get 2's comp
00266 1E6F 01F8 		clrf	Param78
00267 1E70 082D 		movf	ChkSum,W
00268 1E71 0278 		subwf	Param78,W
00269 1E72 022B 		subwf	IH_TempVal,W
00270 1E73 		SKPNZ		;Checksum matches?
00270 1E73 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00271 1E74 3203 		bra	BLP_Validate           ; Yes
00272 1E75 	;
00273 1E75 302D 		movlw	IH_ErrorBadCSum
00274 1E76 26FE 		call	SendChar
00275 1E77 2E13 		goto	BL_ParseNextLine
00276 1E78 	;
00277 1E78 	;===================
00278 1E78 	; We have received a complete Intel Hex command
00279 1E78 	;
00280 1E78 0829 	BLP_Validate	movf                   IH_Type,W
00281 1E79 39F8 	                       andlw                  0xF8
00282 1E7A 	                       SKPZ
00282 1E7A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00283 1E7B 3218 	                       bra                    BLPV_BadType
00284 1E7C 	;
00285 1E7C 0829 	                       movf                   IH_Type,W
00286 1E7D 000B 	                       brw
00287 1E7E 320B 	                       bra                    BLPV_Data              ;IHT_Data
00288 1E7F 3206 	                       bra                    BLPV_EndCmd            ;IHT_End
00289 1E80 3213 	                       bra                    BLPV_BadType           ;IHT_XSA
00290 1E81 3212 	                       bra                    BLPV_BadType           ;IHT_SSA
00291 1E82 3209 	                       bra                    BLPV_HighAddr          ;IHT_HighAddr
00292 1E83 3210 	                       bra                    BLPV_BadType           ;IHT_SLA
00293 1E84 320F 	                       bra                    BLPV_BadType           ;6
00294 1E85 320E 	                       bra                    BLPV_BadType           ;7
00295 1E86 	;---------------------
00296 1E86 	; handle end command
00297 1E86 18AC 	BLPV_EndCmd	btfsc	DataInBuffer
00298 1E87 26CD 		call	BLP_WriteBuffer
00299 1E88 302A 		movlw	IH_Ack
00300 1E89 2EFE 	                       goto	SendChar
00301 1E8A 	;
00302 1E8A 	;---------------------
00303 1E8A 	; handle data
00304 1E8A 2696 	BLPV_Data	call	BufferIHData           ;Move to source buffer
00305 1E8B 3205 	                       bra                    BLPV_Exit_Ack
00306 1E8C 	;
00307 1E8C 	;---------------------
00308 1E8C 	; handle high address change
00309 1E8C 26DE 	BLPV_HighAddr	call                   FSR0_SerialBuffer
00310 1E8D 0012 		moviw	FSR0++
00311 1E8E 00A6 		movwf	IH_Addr_Hi+1
00312 1E8F 0012 		moviw	FSR0++
00313 1E90 00A5 		movwf	IH_Addr_Hi
00314 1E91 302A 	BLPV_Exit_Ack	movlw	IH_Ack
00315 1E92 26FE 	BLPV_Exit	call	SendChar
00316 1E93 2E13 		goto	BL_ParseNextLine
00317 1E94 	;---------------------
SerialServo.asm                                                       Page: 57
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00318 1E94 303D 	BLPV_BadType           movlw                  IH_ErrorBadType
00319 1E95 33FC 	                       bra                    BLPV_Exit
00320 1E96 	;
00321 1E96 	;===========================================
00322 1E96 	; Validate address is in range and move to SourceBuffer
00323 1E96 	;
00324 1E96 	; Entry: DataInBuffer, IH_ByteCount, Data in SerialBuffer, 32bit address IH_Addr_Hi:IH_Addr_Lo
00325 1E96 	; Exit: SourceBuffer, DataInBuffer, ProgWordCount, PROG_ADDR_HI:PROG_ADDR_LO
00326 1E96 	; 
00327 1E96 	; check address range, max 32K program words
00328 1E96 0825 	BufferIHData	movf	IH_Addr_Hi,W
00329 1E97 0426 		iorwf	IH_Addr_Hi+1,W
00330 1E98 		SKPZ		;High address = 0x0000 ?
00330 1E98 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00331 1E99 0008 		return		; No, > 64KB or 32K words
00332 1E9A 	;
00333 1E9A 	; convert to words, IH_Addr_Lo = IH_Addr_Lo / 2
00334 1E9A 36A4 		lsrf	IH_Addr_Lo+1,F
00335 1E9B 0CA3 		rrf	IH_Addr_Lo,F
00336 1E9C 301E 		movlw	high BootLoaderStart   ;0x0E
00337 1E9D 0224 		subwf	IH_Addr_Lo+1,W
00338 1E9E 		SKPB		;BootLoaderStart > IH_Addr_Lo?
00338 1E9E 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00339 1E9F 0008 		return		; No, don't allow overwrite of bootloader
00340 1EA0 	;
00341 1EA0 1CAC 		btfss	DataInBuffer	;Any old data in the buffer?
00342 1EA1 320D 		bra	BIHD_PutInBuff	; No
00343 1EA2 	;
00344 1EA2 	; Continue filling buffer or flush and add to new buffer?
00345 1EA2 	;
00346 1EA2 0824 		movf	IH_Addr_Lo+1,W
00347 1EA3 0221 		subwf	PROG_ADDR_HI,W
00348 1EA4 		SKPZ		;MSB of Address Matches?
00348 1EA4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00349 1EA5 3208 		bra	BIHD_FlushBuff	; No, write current data to PFM
00350 1EA6 	;
00351 1EA6 30E0 		movlw	AddressMask
00352 1EA7 0520 		andwf	PROG_ADDR_LO,W
00353 1EA8 00F8 		movwf	Param78                ;Param78 = Prog Address LSB & 0xE0
00354 1EA9 30E0 		movlw	AddressMask
00355 1EAA 0523 		andwf	IH_Addr_Lo,W           ;W = IH Word Address LSB & 0xE0
00356 1EAB 0278 		subwf	Param78,W
00357 1EAC 		SKPNZ		;Row Address Matches?
00357 1EAC 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00358 1EAD 320A 		bra	BIHD_PutInBuff_E2	; Yes
00359 1EAE 	;
00360 1EAE 26CD 	BIHD_FlushBuff	call	BLP_WriteBuffer
00361 1EAF 	;
00362 1EAF 	; Entry: IH_Addr_Lo=Word Address
00363 1EAF 	; 
00364 1EAF 0823 	BIHD_PutInBuff	movf	IH_Addr_Lo,W           ;was converted to words
00365 1EB0 39E0 		andlw	AddressMask            ; 0xE0
00366 1EB1 00A0 		movwf	PROG_ADDR_LO
00367 1EB2 0824 		movf	IH_Addr_Lo+1,W
00368 1EB3 00A1 		movwf	PROG_ADDR_HI
00369 1EB4 	; ProgWordCount = 0x1F & IH_Addr_Lo
00370 1EB4 30FF 		movlw	0xFF
00371 1EB5 3AE0 		xorlw	AddressMask	;0x1F
00372 1EB6 0523 		andwf	IH_Addr_Lo,W	;Offset within block
00373 1EB7 00A2 		movwf	ProgWordCount
00374 1EB8 	;
00375 1EB8 26DE 	BIHD_PutInBuff_E2	call                   FSR0_SerialBuffer
00376 1EB9 	;
00377 1EB9 	; FSR1 = SourceBuffer + ProgWordCount * 2
00378 1EB9 3522 		lslf	ProgWordCount,W	;ProgWordCount * 2
00379 1EBA 3E00 		addlw	low SourceBuffer
00380 1EBB 0086 		movwf	FSR1L
00381 1EBC 3021 		movlw	high SourceBuffer
00382 1EBD 0087 		movwf	FSR1H
00383 1EBE 	;
00384 1EBE 	;Param79 = IH_ByteCount
00385 1EBE 0828 		movf	IH_ByteCount,W
00386 1EBF 00F9 		movwf	Param79
00387 1EC0 	;ProgWordCount += IH_ByteCount / 2
00388 1EC0 3628 		lsrf	IH_ByteCount,W	; divide by 2
00389 1EC1 07A2 		addwf	ProgWordCount,F
00390 1EC2 	;
00391 1EC2 0012 	BIHD_PutInBuff_L1	moviw	FSR0++                 ;move SerialBuffer
00392 1EC3 001E 		movwi	FSR1++                 ;to SourceBuffer
00393 1EC4 0BF9 		decfsz	Param79,F
00394 1EC5 33FC 		bra	BIHD_PutInBuff_L1
00395 1EC6 	;
00396 1EC6 14AC 		bsf	DataInBuffer
00397 1EC7 	;
00398 1EC7 3020 		movlw	BlockWords             ;0x20
00399 1EC8 0222 		subwf	ProgWordCount,W        ;W = ProgWordCount - 0x20
00400 1EC9 		SKPNZ		;buffer full?
00400 1EC9 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00401 1ECA 3202 		bra	BLP_WriteBuffer	; Yes, ProgWordCount = 0x20
00402 1ECB 		SKPNB		;Overflow? This should not happen.
00402 1ECB 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00403 1ECC 0008 		return		; No, ProgWordCount < 0x20
00404 1ECD 	;
00405 1ECD 	; fall thru to BLP_WriteBuffer
00406 1ECD 	;=============================================
00407 1ECD 	; Write SourceBuffer to Prog memory
00408 1ECD 	;
00409 1ECD 	; Entry: SourceBuffer, ProgWordCount, PROG_ADDR_HI:PROG_ADDR_LO
00410 1ECD 	;
SerialServo.asm                                                       Page: 58
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00411 1ECD 	BLP_WriteBuffer:
00412 1ECD 	; copy old prog mem to DestBuffer
00413 1ECD 26E3 		call                   FSR1_DestBuff
00414 1ECE 2751 		call	ReadProgBlock
00415 1ECF 	;
00416 1ECF 3000 		movlw	low SourceBuffer	;new data
00417 1ED0 0084 		movwf	FSR0L
00418 1ED1 3021 		movlw	high SourceBuffer
00419 1ED2 0085 		movwf	FSR0H	
00420 1ED3 26E3 		call                   FSR1_DestBuff          ;old data
00421 1ED4 272C 		call	CompareBlock
00422 1ED5 	;
00423 1ED5 1809 		btfsc	WREG,0	;Matches?
00424 1ED6 3206 		bra	BLP_WriteBuffer_end	; Yes
00425 1ED7 	;	
00426 1ED7 26E3 		call                   FSR1_DestBuff
00427 1ED8 271F 		call	TestErased
00428 1ED9 1C09 		btfss	WREG,0	;Erased?
00429 1EDA 2763 		call	EraseProgBlock	; No, Erase it.
00430 1EDB 	;
00431 1EDB 26E8 		call                   FSR1_SourceBuffer	
00432 1EDC 277A 		call	WriteProgBlock
00433 1EDD 	;
00434 1EDD 2F46 	BLP_WriteBuffer_end	goto	EraseSourceBuffer
00435 1EDE 	;
00436 1EDE 	;---------------------
00437 1EDE 3080 	FSR0_SerialBuffer      movlw	low SerialBuffer
00438 1EDF 0084 		movwf	FSR0L
00439 1EE0 3021 		movlw	high SerialBuffer
00440 1EE1 0085 		movwf	FSR0H
00441 1EE2 0008 		return
00442 1EE3 	;
00443 1EE3 	;---------------------
00444 1EE3 3040 	FSR1_DestBuff          movlw	low DestBuffer
00445 1EE4 0086 		movwf	FSR1L
00446 1EE5 3021 		movlw	high DestBuffer
00447 1EE6 0087 		movwf	FSR1H
00448 1EE7 0008 		return
00449 1EE8 	;
00450 1EE8 	;---------------------
00451 1EE8 3000 	FSR1_SourceBuffer      movlw	low SourceBuffer
00452 1EE9 0086 		movwf	FSR1L
00453 1EEA 3021 		movlw	high SourceBuffer
00454 1EEB 0087 		movwf	FSR1H
00455 1EEC 0008 		return
00456 1EED 	;
00457 1EED 	;==============================================
00458 1EED 	; Get a byte from UART, waits forever
00459 1EED 	;
00460 1EED 	; Entry: none
00461 1EED 	; Exit: W=Char
00462 1EED 	;
00463 1EED 0020 	GetChar	MOVLB	0x00
00464 1EEE 1E91 		BTFSS	PIR1,RCIF	;RX has a byte?
00465 1EEF 33FD 		BRA	GetChar
00466 1EF0 	;
00467 1EF0 0023 		movlb	RCSTA	; bank 3
00468 1EF1 081D 		MOVF	RCSTA,W
00469 1EF2 3906 		ANDLW	0x06
00470 1EF3 		SKPZ		;Frame or Overrun Err?
00470 1EF3 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00471 1EF4 3203 		BRA	GetChar_Err	; yes
00472 1EF5 0819 		MOVF	RCREG,W
00473 1EF6 	;
00474 1EF6 0020 		movlb	0x00	; bank 0
00475 1EF7 	;	goto	SendChar	; tc
00476 1EF7 0008 		RETURN
00477 1EF8 	;
00478 1EF8 0819 	GetChar_Err	MOVF	RCREG,W	;bad byte so drop it
00479 1EF9 121D 		BCF	RCSTA,CREN
00480 1EFA 111D 		BCF	RCSTA,FERR
00481 1EFB 109D 		BCF	RCSTA,OERR
00482 1EFC 161D 		BSF	RCSTA,CREN
00483 1EFD 33EF 		bra	GetChar
00484 1EFE 	;
00485 1EFE 	;==============================================
00486 1EFE 	; Send a byte to UART
00487 1EFE 	;
00488 1EFE 	; Entry: W=Char to send
00489 1EFE 	SendChar:
00490 1EFE 1E11 		BTFSS	PIR1,TXIF	;TX done?
00491 1EFF 33FE 		bra	SendChar
00492 1F00 0023 		movlb	TXREG
00493 1F01 009A 		MOVWF	TXREG
00494 1F02 0020 		MOVLB	0
00495 1F03 0008 		RETURN
00496 1F04 	;	
00497 1F04 	;==============================================
00498 1F04 	; Read EEProm(255)
00499 1F04 	;
00500 1F04 	ReadEEData:	
00501 1F04 0023 		movlb	EEADRL
00502 1F05 30FF 		MOVLW	0xFF
00503 1F06 0091 		MOVWF	EEADRL
00504 1F07 	;
00505 1F07 	;Data Memory
00506 1F07 	;Address to read ;Deselect Config space
00507 1F07 1315 		BCF	EECON1,CFGS
00508 1F08 1395 		BCF	EECON1,EEPGD
SerialServo.asm                                                       Page: 59
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00509 1F09 	;Point to DATA memory
00510 1F09 1415 		BSF	EECON1,RD	;EE Read
00511 1F0A 0813 		MOVF	EEDATL,W	;W = EEDATL
00512 1F0B 0020 		movlb	0
00513 1F0C 0008 		return
00514 1F0D 	;
00515 1F0D 	;==============================================
00516 1F0D 	; Clear EEProm(255)
00517 1F0D 	;
00518 1F0D 	WriteEEData:
00519 1F0D 0023 		movlb	EEADRL
00520 1F0E 30FF 		MOVLW	0xFF
00521 1F0F 0091 		MOVWF	EEADRL
00522 1F10 3000 		movlw	0x00
00523 1F11 0093 		movwf	EEDATL
00524 1F12 1315 		BCF	EECON1,CFGS	;not config mem
00525 1F13 1395 		BCF	EECON1,EEPGD	;not prog mem
00526 1F14 1515 		BSF	EECON1,WREN
00527 1F15 3055 		movlw	0x55
00528 1F16 0096 		movwf	EECON2
00529 1F17 30AA 		movlw	0xAA
00530 1F18 0096 		movwf	EECON2
00531 1F19 1495 		bsf	EECON1,WR
00532 1F1A 1895 	WriteEEData_L1	btfsc	EECON1,WR
00533 1F1B 33FE 		bra	WriteEEData_L1
00534 1F1C 1115 		bcf	EECON1,WREN
00535 1F1D 0020 		movlb	0
00536 1F1E 0008 		return
00537 1F1F 	;
00538 1F1F 	;==============================================
00539 1F1F 	; Test if block is erased
00540 1F1F 	;
00541 1F1F 	; Entry: FSR1 -> current data
00542 1F1F 	; Exit: W=1 if new = blank else W=0
00543 1F1F 	;
00544 1F1F 3020 	TestErased	movlw	BlockWords
00545 1F20 00F9 		movwf	Param79
00546 1F21 0016 	TestErased_L1	moviw	FSR1++	;LSB
00547 1F22 3CFF 		sublw	0xFF
00548 1F23 		SKPZ		;=0xFF?
00548 1F23 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00549 1F24 3400 		retlw	0x00	; No
00550 1F25 	;
00551 1F25 0016 		moviw	FSR1++	;MSB
00552 1F26 3C3F 		sublw	0x3F
00553 1F27 		SKPZ		;=0x3F?
00553 1F27 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00554 1F28 3400 		retlw	0x00	; No
00555 1F29 	;
00556 1F29 0BF9 		decfsz	Param79,F
00557 1F2A 33F6 		bra	TestErased_L1
00558 1F2B 3401 		retlw	0x01                   ;All words are 0x3FFF
00559 1F2C 	;
00560 1F2C 	;==============================================
00561 1F2C 	; Compare Block
00562 1F2C 	;
00563 1F2C 	; Entry: FSR0 -> new data, FSR1 -> current data
00564 1F2C 	; Exit: W=1 if new = current else W=0
00565 1F2C 	;
00566 1F2C 3020 	CompareBlock	movlw	BlockWords
00567 1F2D 00F9 		movwf	Param79
00568 1F2E 0012 	CompareBlock_L1	moviw	FSR0++	;LSB
00569 1F2F 00F7 		movwf	Param77
00570 1F30 0012 		moviw	FSR0++	;MSB
00571 1F31 00F8 		movwf	Param78
00572 1F32 	; skip?
00573 1F32 3C3F 		sublw	0x3F
00574 1F33 		SKPZ
00574 1F33 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00575 1F34 3206 		bra	CB_NotBlank
00576 1F35 0A77 		incf	Param77,W
00577 1F36 		SKPZ
00577 1F36 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00578 1F37 3203 		bra	CB_NotBlank
00579 1F38 0016 		moviw	FSR1++
00580 1F39 0016 		moviw	FSR1++
00581 1F3A 3208 		bra	CB_Next
00582 1F3B 	;
00583 1F3B 0016 	CB_NotBlank	moviw	FSR1++
00584 1F3C 0277 		subwf	Param77,W
00585 1F3D 		SKPZ		;Matches?
00585 1F3D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00586 1F3E 3400 		retlw	0x00	; No
00587 1F3F 0016 		moviw	FSR1++
00588 1F40 0278 		subwf	Param78,W
00589 1F41 		SKPZ		;Matches?
00589 1F41 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00590 1F42 3400 		retlw	0x00	; No
00591 1F43 	;
00592 1F43 0BF9 	CB_Next	decfsz	Param79,F
00593 1F44 33E9 		bra	CompareBlock_L1
00594 1F45 3401 		retlw	0x01	;It's a match!
00595 1F46 	;
00596 1F46 	;==============================================
00597 1F46 	; Fill SourceBuffer w/ 0x3FFF
00598 1F46 	;
00599 1F46 26E8 	EraseSourceBuffer	call                   FSR1_SourceBuffer
00600 1F47 10AC 	                       bcf	DataInBuffer           ;mark SourceBuffer as empty
00601 1F48 	;
SerialServo.asm                                                       Page: 60
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00602 1F48 	; Fall thru to EraseBlock
00603 1F48 	;==============================================
00604 1F48 	; Erase Block (Fill with 0x3FFF)
00605 1F48 	;
00606 1F48 	; Entry: FSR1
00607 1F48 	;
00608 1F48 3020 	EraseBlock	movlw	BlockWords
00609 1F49 00F9 		movwf	Param79
00610 1F4A 30FF 	EraseBlock_L1	movlw	0xFF
00611 1F4B 001E 		movwi	FSR1++
00612 1F4C 303F 		movlw	0x3F
00613 1F4D 001E 		movwi	FSR1++
00614 1F4E 0BF9 		decfsz	Param79,F
00615 1F4F 33FA 		bra	EraseBlock_L1
00616 1F50 0008 		return
00617 1F51 	;	
00618 1F51 	;==============================================
00619 1F51 	; Read Program memory block
00620 1F51 	;
00621 1F51 	; Entry: FSR1,PROG_ADDR_HI:PROG_ADDR_LO
00622 1F51 	; Exit: FSR1 changed, 32 words >> (FSR1++)
00623 1F51 	;
00624 1F51 2772 	ReadProgBlock	call	LoadProgAddr
00625 1F52 1315 		BCF	EECON1,CFGS	; Do not select Configuration Space
00626 1F53 1795 		BSF	EECON1,EEPGD	; Select Program Memory
00627 1F54 3020 		movlw	BlockWords	;Block is .32 words
00628 1F55 00F9 		movwf	Param79
00629 1F56 1415 	ReadProgBlock_L1	BSF	EECON1,RD	; Initiate read
00630 1F57 0000 		NOP		; skipped
00631 1F58 0000 		NOP		; do nothing
00632 1F59 0813 		MOVF	EEDATL,W	; Get LSB of word
00633 1F5A 001E 		movwi	FSR1++	; Store in user location
00634 1F5B 0814 		MOVF	EEDATH,W	; Get MSB of word
00635 1F5C 001E 		movwi	FSR1++	; Store in user location
00636 1F5D 0BF9 		decfsz	Param79,F
00637 1F5E 3202 		bra	ReadProgBlock_1
00638 1F5F 0020 		movlb	0
00639 1F60 0008 		return
00640 1F61 	;
00641 1F61 0A91 	ReadProgBlock_1	incf	EEADRL,F
00642 1F62 33F3 		bra	ReadProgBlock_L1
00643 1F63 	;
00644 1F63 	;=====================================================
00645 1F63 	; Erase Program memory block
00646 1F63 	;
00647 1F63 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO
00648 1F63 	;
00649 1F63 2772 	EraseProgBlock	call	LoadProgAddr
00650 1F64 1795 		BSF	EECON1,EEPGD	;Point to program memory
00651 1F65 1315 		BCF	EECON1,CFGS	;Not configuration space
00652 1F66 1615 		BSF	EECON1,FREE	;Specify an erase operation, automaticaly cleared
00653 1F67 1515 		BSF	EECON1,WREN	;Enable writes
00654 1F68 3055 		MOVLW	55h	;Start of required sequence to initiate erase
00655 1F69 0096 		MOVWF	EECON2	;Write 55h
00656 1F6A 30AA 		MOVLW	0AAh
00657 1F6B 0096 		MOVWF	EECON2	;Write AAh
00658 1F6C 1495 		BSF	EECON1,WR	;Set WR bit to begin erase
00659 1F6D 0000 		NOP		;Any instructions here are ignored as processor
00660 1F6E 0000 		NOP		; halts to begin erase sequence
00661 1F6F 				;Processor will stop here and wait for erase complete.
00662 1F6F 				;after erase processor continues with 3rd instruction
00663 1F6F 1115 		BCF	EECON1,WREN	;Disable writes
00664 1F70 0020 		movlb	0
00665 1F71 0008 		return
00666 1F72 	;
00667 1F72 	;=========================================================
00668 1F72 	; Load the program address PROG_ADDR_HI:PROG_ADDR_LO into EEADRH:EEADRL
00669 1F72 	;
00670 1F72 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, bank 0
00671 1F72 	; Exit: bank 16
00672 1F72 	;
00673 1F72 0821 	LoadProgAddr	movf	PROG_ADDR_HI,W
00674 1F73 0023 		movlb	EEADRH	;bank ?
00675 1F74 0092 		MOVWF	EEADRH	; Store MSB of address
00676 1F75 0020 		movlb	0	;bank 0
00677 1F76 0820 		movf	PROG_ADDR_LO,W
00678 1F77 0023 		movlb	EEADRH	;bank ?
00679 1F78 0091 		MOVWF	EEADRL	; Store LSB of address
00680 1F79 0008 		return
00681 1F7A 	;
00682 1F7A 	;==========================================================
00683 1F7A 	; Write Program memory block
00684 1F7A 	;
00685 1F7A 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, FSR1
00686 1F7A 	; Exit: FSR1 changed
00687 1F7A 	; 
00688 1F7A 2772 	WriteProgBlock	call	LoadProgAddr
00689 1F7B 1795 		BSF	EECON1,EEPGD	;Point to program memory
00690 1F7C 1315 		BCF	EECON1,CFGS	;Not configuration space
00691 1F7D 1515 		BSF	EECON1,WREN	;Enable writes
00692 1F7E 1695 		BSF	EECON1,LWLO	;Only Load Write Latches
00693 1F7F 3020 		movlw	BlockWords
00694 1F80 00F9 		movwf	Param79
00695 1F81 	;
00696 1F81 0016 	WriteProgBlock_L1	moviw	FSR1++
00697 1F82 0093 		movwf	EEDATL
00698 1F83 0016 		moviw	FSR1++
00699 1F84 0094 		movwf	EEDATH
00700 1F85 	;
SerialServo.asm                                                       Page: 61
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00701 1F85 0811 		movf	EEADRL,W
00702 1F86 3A1F 		xorlw	0x1F
00703 1F87 391F 		andlw	0x1F
00704 1F88 1903 		btfsc	_Z	;EEADRL = xxx1 1111?
00705 1F89 3209 		bra	WriteProgBlock_Wr	; Yes
00706 1F8A 	;
00707 1F8A 3055 		movlw	0x55	; Start of required write sequence:
00708 1F8B 0096 		movwf	EECON2
00709 1F8C 30AA 		movlw	0xAA
00710 1F8D 0096 		movwf	EECON2
00711 1F8E 1495 		bsf	EECON1,WR	; Set WR bit to begin write to latches
00712 1F8F 0000 		nop
00713 1F90 0000 		nop
00714 1F91 0A91 		incf	EEADRL,F
00715 1F92 33EE 		bra	WriteProgBlock_L1
00716 1F93 	;
00717 1F93 1295 	WriteProgBlock_Wr	bcf	EECON1,LWLO	; Write memory not latches
00718 1F94 3055 		movlw	0x55	; Start of required write sequence:
00719 1F95 0096 		movwf	EECON2
00720 1F96 30AA 		movlw	0xAA
00721 1F97 0096 		movwf	EECON2
00722 1F98 1495 		bsf	EECON1,WR	; Set WR bit to begin write
00723 1F99 0000 		nop
00724 1F9A 0000 		nop
00725 1F9B 	;
00726 1F9B 1115 		bcf	EECON1,WREN
00727 1F9C 	;
00728 1F9C 0020 	WriteProgBlock_end	movlb	0
00729 1F9D 0008 		return	
00730 1F9E 	;
00731 1F9E 	;============================================================
00732 1F9E 	; call once
00733 1F9E 	;
00734 1F9E 0021 	InitializeBLIO	MOVLB	0x01	; select bank 1
00735 1F9F 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00736 1FA0 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00737 1FA1 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00738 1FA2 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00739 1FA3 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00740 1FA4 1515 		bsf	OPTION_REG,PS2
00741 1FA5 	;
00742 1FA5 30F0 		MOVLW	OSCCON_Value
00743 1FA6 0099 		MOVWF	OSCCON
00744 1FA7 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00745 1FA8 0097 		movwf	WDTCON
00746 1FA9 	;
00747 1FA9 0024 		movlb	4	; bank 4
00748 1FAA 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00749 1FAB 	;
00750 1FAB 0023 		MOVLB	0x03	; bank 3
00751 1FAC 3003 		movlw	ANSELA_Val
00752 1FAD 008C 		movwf	ANSELA
00753 1FAE 3000 		movlw	ANSELB_Val
00754 1FAF 008D 		movwf	ANSELB
00755 1FB0 	;
00756 1FB0 	;
00757 1FB0 		if UseAltSerialPort
00758 1FB0 	;SPI MISO >> SDI1 RB1, default
00759 1FB0 	;SPI CLK >> RB4, default
00760 1FB0 0022 		movlb	2	;bank 2
00761 1FB1 179D 		bsf	APFCON0,RXDTSEL	;RX >> RB2
00762 1FB2 141E 		bsf	APFCON1,TXCKSEL	;TX >> RB5
00763 1FB3 171D 		bsf	APFCON0,SDO1SEL	;SPI MOSI >> SDO1 RA6
00764 1FB4 		endif
00765 1FB4 	;
00766 1FB4 0020 		MOVLB	0x00	;Bank 0
00767 1FB5 	; setup data ports
00768 1FB5 3011 		movlw	PortBValue
00769 1FB6 008D 		movwf	PORTB	;init port B
00770 1FB7 3000 		movlw	PortAValue
00771 1FB8 008C 		movwf	PORTA
00772 1FB9 0021 		MOVLB	0x01	; bank 1
00773 1FBA 30BF 		movlw	PortADDRBits
00774 1FBB 008C 		movwf	TRISA
00775 1FBC 30C6 		movlw	PortBDDRBits	;setup for programer
00776 1FBD 008D 		movwf	TRISB
00777 1FBE 	;
00778 1FBE 	; setup serial I/O
00779 1FBE 0023 		movlb	BAUDCON	; bank 3
00780 1FBF 3008 		movlw	BAUDCON_Value
00781 1FC0 009F 		movwf	BAUDCON
00782 1FC1 30CF 		MOVLW	low BaudRate
00783 1FC2 009B 		MOVWF	SPBRGL
00784 1FC3 3000 		MOVLW	high BaudRate
00785 1FC4 009C 		MOVWF	SPBRGH
00786 1FC5 3024 		MOVLW	TXSTA_Value
00787 1FC6 009E 		MOVWF	TXSTA
00788 1FC7 3090 		MOVLW	RCSTA_Value
00789 1FC8 009D 		MOVWF	RCSTA
00790 1FC9 	;	movlb	0x01	; bank 1
00791 1FC9 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00792 1FC9 0020 		movlb	0x00	; bank 0
00793 1FCA 	;
00794 1FCA 	;	bsf	INTCON,PEIE	; enable periferal interupts
00795 1FCA 138B 		bcf	INTCON,GIE	; disable interupts
00796 1FCB 	;
00797 1FCB 0008 		return
00798 1FCC 	;
00799 1FCC 	;
SerialServo.asm                                                       Page: 62
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00800 1FCC 	 
00801 1FCC 	 
00802 1FCC 	 
00803 1FCC 	 
00804 1FCC 	 
00805 1FCC 	 
00806 1FCC 	 
00807 1FCC 	 
00808 1FCC 	 
00809 1FCC 	 
00810 1FCC 	 
00811 1FCC 	 
00812 1FCC 	 
00813 1FCC 	 
00814 1FCC 	 
00815 1FCC 	 
00816 1FCC 	 
00817 1FCC 	 
00818 1FCC 	 
00819 1FCC 	 
00820 1FCC 	 
00821 1FCC 	 
00822 1FCC 	 
00823 1FCC 	 
00824 1FCC 	 
00825 1FCC 	 
00826 1FCC 	 
02159 1FCC 	;
02160 1FCC 	;
02161 1FCC 		END

X-Ref Table
ADCON0	009D 	ReadAN, ReadAN_Start
ADCON1	009E 	ReadAN0_ColdStart
ADON	0000 	ReadAN
ADRESH	009C 	ReadAN
ADRESL	009B 	ReadAN
AN0_ActiveBit	ANxActive,0	InitializeIO
AN0_Val	0000 	ANx_GetADPCHVal
AN1_ActiveBit	ANxActive,1	InitializeIO
AN1_Val	0004 	ANx_GetADPCHVal
AN2_Val	0008 	ANx_GetADPCHVal
AN3_Val	000C 	ANx_GetADPCHVal
AN4_Val	0010 	ANx_GetADPCHVal
ANCount	00B4 	ReadAN, ReadAN_Next, ReadAN_Start0, ANx_GetADPCHVal
ANFlags	00B2 	ML_1, ReadAN_L2
ANSELA	018C 	Cmd_SetAuxNConfigDigIn, Cmd_SetAux1ConfigDigIn, Cmd_SetAux2ConfigDigIn
		Cmd_SetAuxNConfigDigOut, Cmd_SetAux1ConfigDigOut, Cmd_SetAux2ConfigDigOut, Cmd_SetAuxNConfigAnalogIn
		Cmd_SetAux1ConfigAnalogIn, Cmd_SetAux2ConfigAnalogIn, InitializeIO, SetAux0ConfigDigIn
		SetAux0ConfigDigOut, SetAux0ConfigAnalogIn, SetAux1ConfigDigIn, SetAux1ConfigDigOut
		SetAux1ConfigAnalogIn, SetAux2ConfigDigIn, SetAux2ConfigDigOut, SetAux2ConfigAnalogIn
		InitializeBLIO
ANSELA_Val	0003 	InitializeIO, InitializeBLIO
ANSELB	018D 	InitializeIO, InitializeBLIO
ANSELB_Val	0000 	InitializeIO, InitializeBLIO
AN_Aux0_ActiveBit	ANxActive,3	Cmd_SetAuxNConfigDigIn, Cmd_SetAuxNConfigDigOut, Cmd_SetAuxNConfigAnalogIn
		SetAux0ConfigDigIn, SetAux0ConfigDigOut, SetAux0ConfigAnalogIn
AN_Aux1_ActiveBit	ANxActive,4	Cmd_SetAux1ConfigDigIn, Cmd_SetAux1ConfigDigOut, Cmd_SetAux1ConfigAnalogIn
		SetAux1ConfigDigIn, SetAux1ConfigDigOut, SetAux1ConfigAnalogIn
AN_Aux2_ActiveBit	ANxActive,5	Cmd_SetAux2ConfigDigIn, Cmd_SetAux2ConfigDigOut, Cmd_SetAux2ConfigAnalogIn
		SetAux2ConfigDigIn, SetAux2ConfigDigOut, SetAux2ConfigAnalogIn
ANxActive	00B3 	ReadAN_L1, Cmd_SetAuxNConfigDigIn, Cmd_SetAux1ConfigDigIn, Cmd_SetAux2ConfigDigIn
		Cmd_SetAuxNConfigDigOut, Cmd_SetAux1ConfigDigOut, Cmd_SetAux2ConfigDigOut, Cmd_SetAuxNConfigAnalogIn
		Cmd_SetAux1ConfigAnalogIn, Cmd_SetAux2ConfigAnalogIn, InitializeIO, SetAux0ConfigDigIn
		SetAux0ConfigDigOut, SetAux0ConfigAnalogIn, SetAux1ConfigDigIn, SetAux1ConfigDigOut
		SetAux1ConfigAnalogIn, SetAux2ConfigDigIn, SetAux2ConfigDigOut, SetAux2ConfigAnalogIn
ANx_GetADPCHVal ^	041C 	ReadAN_Start
APFCON0	011D 	InitializeIO, InitializeBLIO
APFCON1	011E 	InitializeIO, InitializeBLIO
AS5047D_Flags	0070 	ReadEncoder, Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_ReadReg
		AS5047_Read, CheckParity_L1
AS5047_ANGLECOM	7FFF 	AS5047_ReadPos
AS5047_ANGLEUNC	7FFE 	AS5047_ReadPos_1
AS5047_DIAAGCReg	3FFC 	AS5047_ReadPos_1
AS5047_ErrReg	0001 	AS5047_ReadPos_1
AS5047_NOP	C000 	Init_AS5047D, AS5047_Read
AS5047_Read ^	0BAB 	AS5047_ReadReg
AS5047_ReadBit	4000 	Init_AS5047D
AS5047_ReadPos ^	0B6D 	ReadEncoder, AS5047_ReadPos_1
AS5047_ReadPos_1 ^	0B7E 	AS5047_ReadPos
AS5047_ReadReg ^	0BA3 	AS5047_ReadPos_1
AS5047_Settings1	0018 	AS5047_ReadPos_1
AS5047_Settings2	0019 	AS5047_ReadPos_1
AS5047_ZPOSL	0017 	AS5047_ReadPos_1
AS5047_ZPOSM	0016 	AS5047_ReadPos_1
AddressMask	00E0 	BufferIHData, BIHD_PutInBuff
AllDataRXd	RX_ParseFlags,6	RS232_Parse, RS232_Parse_DALo_End
AngleReadFlag	AS5047D_Flags,1	Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read
Aux0_ANSEL_Bit	ANSELA,2	Cmd_SetAuxNConfigDigIn, Cmd_SetAuxNConfigDigOut, Cmd_SetAuxNConfigAnalogIn
		SetAux0ConfigDigIn, SetAux0ConfigDigOut, SetAux0ConfigAnalogIn
Aux0_Digital_In ^	0499 	HandleAuxIO
Aux0_Digital_Out ^	049B 	HandleAuxIO
Aux0_FwdLimit ^	04AB 	HandleAuxIO
Aux0_HomeSW ^	04A6 	HandleAuxIO
Aux0_ISR_End ^	04BC 	HandleAuxIO, Aux0_LEDBtn, Aux0_Digital_In, Aux0_Digital_Out
		Aux0_HomeSW, Aux0_FwdLimit, Aux0_RevLimit
Aux0_LED1_Active	SysFlags1,2	Aux0_LEDBtn
Aux0_LED1_Lat	LATA,LED1_Bit	Aux0_Digital_Out, Cmd_SetAuxNConfigDigIn, Cmd_SetAuxNConfigDigOut
		Cmd_SetAuxNConfigAnalogIn, SetAux0ConfigDigIn, SetAux0ConfigDigOut, SetAux0ConfigAnalogIn
SerialServo.asm   X-Ref Table                                            Page: 63
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

Aux0_LED1_TRIS	TRISA,LED1_Bit	Aux0_LEDBtn, Aux0_Digital_Out, Cmd_SetAuxNConfigDigIn
		Cmd_SetAuxNConfigDigOut, Cmd_SetAuxNConfigAnalogIn, SetAux0ConfigDigIn, SetAux0ConfigDigOut
		SetAux0ConfigAnalogIn
Aux0_LEDBtn ^	048E 	HandleAuxIO
Aux0_RevLimit ^	04B0 	HandleAuxIO
Aux0_SW1_Active	SysFlags1,0	Aux0_Digital_Out, Aux0_HomeSW, Aux0_FwdLimit, Aux0_RevLimit
		Read_Aux0_Sw1, Cmd_SetAuxNDigOut, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Btn
Aux0_SW1_Debounce	SysFlags1,1	Read_Aux0_Sw1
Aux0_SW1_PORT	PORTA,LED1_Bit	Read_Aux0_Sw1
Aux1_ANSEL_Bit	ANSELA,3	Cmd_SetAux1ConfigDigIn, Cmd_SetAux1ConfigDigOut, Cmd_SetAux1ConfigAnalogIn
		SetAux1ConfigDigIn, SetAux1ConfigDigOut, SetAux1ConfigAnalogIn
Aux1_Digital_In ^	04D3 	Aux0_ISR_End
Aux1_Digital_Out ^	04D5 	Aux0_ISR_End
Aux1_FwdLimit ^	04E5 	Aux0_ISR_End
Aux1_HomeSW ^	04E0 	Aux0_ISR_End
Aux1_ISR_End ^	04F6 	Aux0_ISR_End, Aux1_LEDBtn, Aux1_Digital_In, Aux1_Digital_Out
		Aux1_HomeSW, Aux1_FwdLimit, Aux1_RevLimit
Aux1_LED2_Active	SysFlags1,5	Aux1_LEDBtn
Aux1_LED2_Lat	LATA,LED2_Bit	Aux1_Digital_Out, Cmd_SetAux1ConfigDigIn, Cmd_SetAux1ConfigDigOut
		Cmd_SetAux1ConfigAnalogIn, SetAux1ConfigDigIn, SetAux1ConfigDigOut, SetAux1ConfigAnalogIn
Aux1_LED2_TRIS	TRISA,LED2_Bit	Aux1_LEDBtn, Aux1_Digital_Out, Cmd_SetAux1ConfigDigIn
		Cmd_SetAux1ConfigDigOut, Cmd_SetAux1ConfigAnalogIn, SetAux1ConfigDigIn, SetAux1ConfigDigOut
		SetAux1ConfigAnalogIn
Aux1_LEDBtn ^	04C8 	Aux0_ISR_End
Aux1_RevLimit ^	04EA 	Aux0_ISR_End
Aux1_SW2_Active	SysFlags1,3	Aux1_Digital_Out, Aux1_HomeSW, Aux1_FwdLimit, Aux1_RevLimit
		Read_Aux1_Sw2, Cmd_SetAuxNValue_Dig1, Cmd_GetAuxNValue_Dig1, Cmd_GetAuxNValue_Btn1
Aux1_SW2_Debounce	SysFlags1,4	Read_Aux1_Sw2
Aux1_SW2_PORT	PORTA,LED2_Bit	Read_Aux1_Sw2
Aux2_ANSEL_Bit	ANSELA,4	Cmd_SetAux2ConfigDigIn, Cmd_SetAux2ConfigDigOut, Cmd_SetAux2ConfigAnalogIn
		SetAux2ConfigDigIn, SetAux2ConfigDigOut, SetAux2ConfigAnalogIn
Aux2_Digital_In ^	050D 	Aux1_ISR_End
Aux2_Digital_Out ^	050F 	Aux1_ISR_End
Aux2_FwdLimit ^	051F 	Aux1_ISR_End
Aux2_HomeSW ^	051A 	Aux1_ISR_End
Aux2_ISR_End ^	0530 	Aux1_ISR_End, Aux2_LEDBtn, Aux2_Digital_In, Aux2_Digital_Out
		Aux2_HomeSW, Aux2_FwdLimit, Aux2_RevLimit
Aux2_LED3_Active	SysFlags2,0	Aux2_LEDBtn
Aux2_LED3_Lat	LATA,LED3_Bit	Aux2_Digital_Out, Cmd_SetAux2ConfigDigIn, Cmd_SetAux2ConfigDigOut
		Cmd_SetAux2ConfigAnalogIn, SetAux2ConfigDigIn, SetAux2ConfigDigOut, SetAux2ConfigAnalogIn
Aux2_LED3_TRIS	TRISA,LED3_Bit	Aux2_LEDBtn, Aux2_Digital_Out, Cmd_SetAux2ConfigDigIn
		Cmd_SetAux2ConfigDigOut, Cmd_SetAux2ConfigAnalogIn, SetAux2ConfigDigIn, SetAux2ConfigDigOut
		SetAux2ConfigAnalogIn
Aux2_LEDBtn ^	0502 	Aux1_ISR_End
Aux2_RevLimit ^	0524 	Aux1_ISR_End
Aux2_SW3_Active	SysFlags1,6	Aux2_Digital_Out, Aux2_HomeSW, Aux2_FwdLimit, Aux2_RevLimit
		Read_Aux2_Sw3, Cmd_SetAuxNValue_Dig2, Cmd_GetAuxNValue_Dig2, Cmd_GetAuxNValue_Btn2
Aux2_SW3_Debounce	SysFlags1,7	Read_Aux2_Sw3
Aux2_SW3_PORT	PORTA,LED3_Bit	Read_Aux2_Sw3
BAUDCON	019F 	InitializeIO, InitializeBLIO
BAUDCON_Value	0008 	InitializeIO, InitializeBLIO
BF	0000 	SPI_SendRecWord_L1, SPI_SendRecWord_L2
BIHD_FlushBuff ^	1EAE 	BufferIHData
BIHD_PutInBuff ^	1EAF 	BufferIHData
BIHD_PutInBuff_E2 ^	1EB8 	BufferIHData
BIHD_PutInBuff_L1 ^	1EC2 	BIHD_PutInBuff_L1
BLPV_BadType ^	1E94 	BLP_Validate
BLPV_Data ^	1E8A 	BLP_Validate
BLPV_EndCmd ^	1E86 	BLP_Validate
BLPV_Exit ^	1E92 	BLPV_BadType
BLPV_Exit_Ack ^	1E91 	BLPV_Data
BLPV_HighAddr ^	1E8C 	BLP_Validate
BLP_IHS_AddrLSB ^	1E5B 	BLP_TestNum_2
BLP_IHS_AddrMSB ^	1E57 	BLP_TestNum_2
BLP_IHS_CSum ^	1E6F 	BLP_TestNum_2
BLP_IHS_Data ^	1E66 	BLP_TestNum_2
BLP_IHS_DataType ^	1E5F 	BLP_TestNum_2
BLP_IHS_Length ^	1E4B 	BLP_TestNum_2
BLP_L1 ^	1E17 	BLP_L2, BLP_NextState, BLP_IHS_Data
BLP_L2 ^	1E18 	BLP_TestNum, BLP_TestNum_1
BLP_NextState ^	1E55 	BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
BLP_SaveIH_Length ^	1E52 	BLP_IHS_Length
BLP_TestNum ^	1E21 	BLP_L2
BLP_TestNum_1 ^	1E36 	BLP_TestNum
BLP_TestNum_2 ^	1E3E 	BLP_TestNum_1
BLP_Validate ^	1E78 	BLP_IHS_CSum
BLP_WriteBuffer ^	1ECD 	BLPV_EndCmd, BIHD_FlushBuff, BIHD_PutInBuff_L1
BLP_WriteBuffer_end ^	1EDD 	BLP_WriteBuffer
BL_Parse ^	1E12 	BootLoaderStart
BL_ParseNextLine ^	1E13 	BLP_TestNum, BLP_TestNum_2, BLP_IHS_Length, BLP_IHS_CSum
		BLPV_Exit
BSR	0008 	ProgStartVector
BattVolts	Cur_AN1	Cmd_GetBattVolts
BaudRate	00CF 	InitializeIO, InitializeBLIO
BlockSize	0040 	BootLoaderStart
BlockWords	0020 	BIHD_PutInBuff_L1, TestErased, CompareBlock, EraseSourceBuffer, ReadProgBlock
		WriteProgBlock
BootLoaderStart ^	1E00 	, SetAux2ConfigAnalogIn, BufferIHData
BootLoader_End ^	1E10 	BootLoaderStart
BufferIHData ^	1E96 	BLPV_Data
C	0000 	DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_CalcCurPos, DM3_GoRev, DM3_ErrIsPos
		DM4_NotOverCurrent, DoMode4_MovPlus, ReadAN, ReadAN_Next, ClampInt_E2, ClampInt_1
		Cmd_SetMode, Cmd_SetAuxConfig, Cmd_GetAuxConfig, Cmd_SetAuxNValue, Cmd_GetAuxNValue
		BLP_TestNum, BLP_IHS_Length, BufferIHData, BIHD_PutInBuff_L1
CB_Next ^	1F43 	CompareBlock_L1
CB_NotBlank ^	1F3B 	CompareBlock_L1
CCP1CON	0293 	SystemTick_end, IRQ_Servo1_1, IRQ_Servo1_OH, IRQ_Servo1_Idle, IRQ_Servo1_OL
		StartServo, InitializeIO
CCP1CON_Clr	0009 	IRQ_Servo1_OH
SerialServo.asm   X-Ref Table                                            Page: 64
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

CCP1CON_Idle	000A 	SystemTick_end, IRQ_Servo1_Idle
CCP1CON_Set	0008 	IRQ_Servo1_OL, StartServo
CCP1IE	0002 	InitializeIO
CCP1IF	0002 	SystemTick_end, IRQ_Servo1_X
CCP1M0	0000 	IRQ_Servo1_1, IRQ_Servo1_Idle
CCP1M1	0001 	IRQ_Servo1_1, IRQ_Servo1_Idle
CCPR1H	0292 	IRQ_Servo1_OH, IRQ_Servo1_Dwell, StartServo
CCPR1L	0291 	IRQ_Servo1_OH, IRQ_Servo1_Dwell, StartServo
CFGS	0006 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
CKE	0006 	Init_AS5047D
CREN	0004 	RX_TheByte_Err, GetChar_Err
CalcParity ^	0BC9 	Init_AS5047D, AS5047_ReadPos, AS5047_Read
CalcParity_L1 ^	0BCC 	CalcParity_L1
CalcdDwell	02A2 	IRQ_Servo1_OH, IRQ_Servo1_20mS, IRQ_Servo1_CalcDwell, IRQ_Servo1_Idle
		IRQ_Servo1_Dwell, StartServo, SetMiddlePosition
CalcdDwellH	02A3 	IRQ_Servo1_OH, IRQ_Servo1_20mS, IRQ_Servo1_CalcDwell, IRQ_Servo1_Idle
		IRQ_Servo1_Dwell, StartServo, SetMiddlePosition
CheckCurrent ^	025F 	DoModeTwo, DoModeThree, DoMode4
CheckGripCurrent ^	0271 	DoMode4
CheckParity ^	0BDC 	Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg
CheckParity_L1 ^	0BDF 	CheckParity_L1
ChkSum	002D 	BootLoaderStart, BL_ParseNextLine, BLP_SaveIH_Length, BLP_IHS_AddrMSB
		BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
ClampInt ^	0465 	DoModeZero, DoModeTwo_Go, DM3_NotOverCurrent, DoMode4_Go
ClampIntMD3 ^	0460 	DM3_UpdatePos
ClampInt_1 ^	0471 	ClampInt_E2
ClampInt_E2 ^	0469 	ClampIntMD3
ClampInt_tooHigh ^	047D 	ClampInt_E2
ClampInt_tooLow ^	0478 	ClampInt_1
ClearRam ^	005D 	InitializeIO
ClearRam_2 ^	006E 	ClearRam
ClearRam_L2 ^	0077 	ClearRam, ClearRam_2, ClearRam_L2
CmdErrorFlag	AS5047D_Flags,3	ReadEncoder, Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg
Cmd_GetAuxConfig ^	0996 	Dispatcher_2
Cmd_GetAuxNValue ^	09D1 	Dispatcher_2
Cmd_GetAuxNValue_Ana ^	09E6 	Cmd_GetAuxNValue
Cmd_GetAuxNValue_Btn ^	0A03 	Cmd_GetAuxNValue
Cmd_GetAuxNValue_Btn1 ^	0A0A 	Cmd_GetAuxNValue_Btn
Cmd_GetAuxNValue_Btn2 ^	0A11 	Cmd_GetAuxNValue_Btn1
Cmd_GetAuxNValue_Dig ^	09F0 	Cmd_GetAuxNValue
Cmd_GetAuxNValue_Dig1 ^	09F7 	Cmd_GetAuxNValue_Dig
Cmd_GetAuxNValue_Dig2 ^	09FE 	Cmd_GetAuxNValue_Dig1
Cmd_GetBattVolts ^	0A3E 	Dispatcher_4
Cmd_GetCmdPos ^	08A4 	HandleRXData_1
Cmd_GetDeadBand ^	0907 	HandleRXData_1
Cmd_GetEnaOvrCur ^	08E7 	HandleRXData_1
Cmd_GetEnc ^	0A26 	Dispatcher_4
Cmd_GetEncAbs ^	0A2B 	Dispatcher_4
Cmd_GetEncoderOffset ^	0A1B 	Dispatcher_2
Cmd_GetFFwd ^	08B5 	HandleRXData_1
Cmd_GetFRev ^	08BF 	HandleRXData_1
Cmd_GetGripI ^	0916 	Dispatcher_2
Cmd_GetI ^	0A20 	Dispatcher_4
Cmd_GetMaxI ^	08AD 	HandleRXData_1
Cmd_GetMax_uS ^	08D3 	HandleRXData_1
Cmd_GetMin_uS ^	08C9 	HandleRXData_1
Cmd_GetMode ^	089C 	HandleRXData_1
Cmd_GetRevDir ^	08DE 	HandleRXData_1
Cmd_GetSpeed ^	08F8 	HandleRXData_1
Cmd_GetStatus ^	0A4A 	Dispatcher_4
Cmd_GetStopCenter ^	08EF 	HandleRXData_1
Cmd_GetUseFastPWM ^	0910 	HandleRXData_1
Cmd_GetUseIdleCenter ^	0901 	HandleRXData_1
Cmd_RestoreParams ^	0A3A 	Dispatcher_4
Cmd_RunBootloader ^	0A57 	Dispatcher_4
Cmd_SaveParams ^	0A36 	Dispatcher_4
Cmd_SendIDString ^	0A69 	Dispatcher_6
Cmd_SendIDString_L1 ^	0A6A 	Cmd_SendIDString_L1
Cmd_SetAux1ConfigAnalogIn ^	0981 	Cmd_SetAuxNConfigAnalogIn
Cmd_SetAux1ConfigDigIn ^	093F 	Cmd_SetAuxNConfigDigIn
Cmd_SetAux1ConfigDigOut ^	0960 	Cmd_SetAuxNConfigDigOut
Cmd_SetAux2ConfigAnalogIn ^	098D 	Cmd_SetAux1ConfigAnalogIn
Cmd_SetAux2ConfigDigIn ^	094B 	Cmd_SetAux1ConfigDigIn
Cmd_SetAux2ConfigDigOut ^	096C 	Cmd_SetAux1ConfigDigOut
Cmd_SetAuxConfig ^	0919 	Dispatcher_3
Cmd_SetAuxNConfigAnalogIn ^	0975 	Cmd_SetAuxConfig
Cmd_SetAuxNConfigDigIn ^	0933 	Cmd_SetAuxConfig
Cmd_SetAuxNConfigDigOut ^	0954 	Cmd_SetAuxConfig
Cmd_SetAuxNConfigFwdLimit ^	0933 	Cmd_SetAuxConfig
Cmd_SetAuxNConfigHomeSw ^	0933 	Cmd_SetAuxConfig
Cmd_SetAuxNConfigLEDBtn ^	0933 	Cmd_SetAuxConfig
Cmd_SetAuxNConfigNone ^	0933 	Cmd_SetAuxConfig
Cmd_SetAuxNConfigRevLimit ^	0933 	Cmd_SetAuxConfig
Cmd_SetAuxNDigOut ^	09B7 	Cmd_SetAuxNValue
Cmd_SetAuxNLED ^	09D0 	Cmd_SetAuxNValue
Cmd_SetAuxNValue ^	09A2 	Dispatcher_3
Cmd_SetAuxNValue_Dig1 ^	09BF 	Cmd_SetAuxNDigOut
Cmd_SetAuxNValue_Dig2 ^	09C7 	Cmd_SetAuxNValue_Dig1
Cmd_SetCmdPos ^	089F 	Dispatcher_1
Cmd_SetDeadBand ^	0904 	Dispatcher_1
Cmd_SetEnaOvrCur ^	08E1 	Dispatcher_1
Cmd_SetEncoderOffset ^	0A16 	Dispatcher_3
Cmd_SetFFwd ^	08B0 	Dispatcher_1
Cmd_SetFRev ^	08BA 	Dispatcher_1
Cmd_SetGripI ^	0913 	Dispatcher_3
Cmd_SetMasterAddr ^	0A5D 	Dispatcher_6
Cmd_SetMaxI ^	08AA 	Dispatcher_1
Cmd_SetMax_uS ^	08CE 	Dispatcher_1
SerialServo.asm   X-Ref Table                                            Page: 65
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

Cmd_SetMin_uS ^	08C4 	Dispatcher_1
Cmd_SetMode ^	0895 	Dispatcher_1
Cmd_SetRevDir ^	08D8 	Dispatcher_1
Cmd_SetSlaveAddr ^	0A63 	Dispatcher_6
Cmd_SetSpeed ^	08F4 	Dispatcher_1
Cmd_SetStopCenter ^	08EA 	Dispatcher_1
Cmd_SetUseFastPWM ^	090A 	Dispatcher_1
Cmd_SetUseIdleCenter ^	08FB 	Dispatcher_1
CompareBlock ^	1F2C 	BLP_WriteBuffer
CompareBlock_L1 ^	1F2E 	CB_Next
ContinueReadFlag	AS5047D_Flags,2	Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read
Copy7CToSig ^	0424 	DoModeZero, DM1_FF, DM1_FR, DoModeTwo_Go, DM3_UpdatePos, DoMode4_Go
		StartServo
Copy7CToSig_1 ^	042D 	Copy7CToSig, Copy7CToSig_1
Copy7CToSig_Done ^	0435 	Copy7CToSig
CopyToRam ^	007C 	Cmd_RestoreParams, InitializeIO
CopyToRam_L1 ^	0081 	CopyToRam_L1
Cur_AN0	00B5 	ML_1, CheckCurrent, CheckGripCurrent, Cmd_GetI
Cur_AN1	00B7 	Cmd_GetBattVolts
Cur_AN2	00B9 	DoModeZero, DoModeOne, Cmd_GetAuxNValue_Ana, Cmd_GetBattVolts
DM1_FF ^	0253 	DoModeOne
DM1_FR ^	0259 	DoModeOne
DM2_NotOverCurrent ^	02A3 	DoModeTwo
DM3_CPV_End ^	02F8 	DM3_NotOverCurrent
DM3_CalcCurPos ^	0300 	DM3_CPV_End
DM3_CalcSCmd ^	035D 	DM3_NoDB, DM3_PosLimit
DM3_CalcSCmd_1 ^	0368 	DM3_CalcSCmd
DM3_CalcSCmd_2s ^	0365 	DM3_CalcSCmd
DM3_ErrIsPos ^	0344 	DM3_SetServoPWM
DM3_GoRev ^	031A 	DM3_CalcCurPos
DM3_IdleInactive ^	037D 	DM3_IdleServo
DM3_IdleServo ^	0371 	DM3_ServoHere, DM3_SetServoPWM, DM3_ErrIsPos
DM3_NoDB ^	034B 	DM3_SetServoPWM, DM3_ErrIsPos
DM3_NotOverCurrent ^	02EB 	DoModeThree
DM3_PosLimit ^	0356 	DM3_NoDB
DM3_ServoHere ^	02E4 	DoModeThree
DM3_ServoThere ^	02FB 	DM3_CalcCurPos, DM3_GoRev
DM3_SetServoPWM ^	0326 	DM3_ServoThere, DM3_CalcCurPos
DM3_UpdatePos ^	037A 	DM3_CalcSCmd_1
DM4_NotOverCurrent ^	038E 	DoMode4
DataInBuffer	IH_Flags,1	BootLoaderStart, BL_Parse, BLPV_EndCmd, BufferIHData, BIHD_PutInBuff_L1
		EraseSourceBuffer
DataReceivedFlag	SerFlags,1	RX_TheByte, No_NewDataAN0
DataSentFlag	SerFlags,2	TX_TheByte, ML_Ser_Out
DeadBand	0056 	DM3_SetServoPWM, DM3_ErrIsPos, Cmd_SetDeadBand, Cmd_GetDeadBand
DebounceTime	000A 	HdlBtn_DB
DecTimer ^	009E 	DecTimer4, DecTimer3, DecTimer2
DecTimer1 ^	009D 	ProgStartVector
DecTimer2 ^	009B 	ProgStartVector
DecTimer3 ^	0099 	ProgStartVector
DecTimer4 ^	0097 	ProgStartVector
DelayWuS ^	00C0 	DecTimer, ReadAN_Start
DelayWuS_Loop ^	00C1 	DelayWuS_Loop
DestAddHiRXd	RX_ParseFlags,5	RS232_Parse
DestAddLoRXd	RX_ParseFlags,4	RS232_Parse, RS232_Parse_SALo_end
DestBuffer	2140 	BootLoaderStart, FSR1_DestBuff
Dispatcher_1 ^	082B 	HandleRXData_1
Dispatcher_2 ^	0841 	Dispatcher_1
Dispatcher_3 ^	0853 	Dispatcher_2
Dispatcher_4 ^	0865 	Dispatcher_3
Dispatcher_5 ^	087D 	Dispatcher_4
Dispatcher_6 ^	0885 	Dispatcher_5
DoAuxConfig ^	0C49 	InitializeIO
DoMode4 ^	0381 	ML_Ser_End
DoMode4_1 ^	03C9 	DoMode4
DoMode4_Go ^	03C0 	DoMode4_Minus_1, DoMode4_Hold
DoMode4_Hold ^	03AD 	DM4_NotOverCurrent, DoMode4_MovPlus
DoMode4_Minus ^	03A8 	DM4_NotOverCurrent
DoMode4_Minus_1 ^	03A9 	DM4_NotOverCurrent, DoMode4_Hold
DoMode4_MovPlus ^	03B1 	DM4_NotOverCurrent
DoMode4_Plus ^	03BC 	DoMode4_MovPlus
DoMode4_Plus_1 ^	03BD 	DoMode4_MovPlus
DoModeOne ^	0235 	ML_Ser_End
DoModeThree ^	02D9 	ML_Ser_End
DoModeTwo ^	0297 	ML_Ser_End
DoModeTwo_1 ^	02D7 	DoModeTwo
DoModeTwo_Go ^	02D0 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_Plus
DoModeTwo_Minus ^	02BB 	DM2_NotOverCurrent
DoModeTwo_MovPlus ^	02C0 	DM2_NotOverCurrent
DoModeTwo_NoSpeed ^	02CC 	DM2_NotOverCurrent, DoModeTwo_MovPlus
DoModeTwo_Plus ^	02C7 	DoModeTwo_MovPlus
DoModeZero ^	0229 	ML_Ser_End
EEADR	0191 	EERead, EEWrite
EEADRH	0192 	LoadProgAddr
EEADRL	0191 	ReadEEData, WriteEEData, ReadProgBlock_1, LoadProgAddr, WriteProgBlock_L1
EEAddrTemp	0026 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DelayWuS_Loop
		EERead, EEWriteW, EEWrite
EECON1	0195 	EERead, EEWrite, EEWriteLoop, ReadEEData, WriteEEData, WriteEEData_L1
		ReadProgBlock, ReadProgBlock_L1, EraseProgBlock, WriteProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
EECON2	0196 	EEWrite, WriteEEData, EraseProgBlock, WriteProgBlock_L1, WriteProgBlock_Wr
EEDAT	0193 	EERead, EEWrite
EEDATH	0194 	ReadProgBlock_L1, WriteProgBlock_L1
EEDATL	0193 	ReadEEData, WriteEEData, ReadProgBlock_L1, WriteProgBlock_L1
EEDataTemp	0027 	SaveParams_L1, EEWrite, Cmd_RunBootloader
EEPGD	0007 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
EERead ^	00C7 	CopyToRam_L1
EEWrite ^	00D1 	SaveParams_L1
SerialServo.asm   X-Ref Table                                            Page: 66
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

EEWriteLoop ^	00E3 	EEWriteLoop
EEWriteW ^	00D0 	Cmd_RunBootloader
EncoderAccum	003C 	Cmd_GetEncAbs, ReadEncoder_2, HA_SetIt, Home_Here
EncoderFlags	0041 	CopyToRam, SaveParams, ReadEncoder, ReadEncoder_1, ReadEncoder_2
		SaveHomePos
EncoderHome	0042 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetIt
EncoderOffset	0044 	DM3_ServoHere, DM3_SetServoPWM, Cmd_SetEncoderOffset, Cmd_GetEncoderOffset
EncoderVal	003F 	DoModeOne, DM3_ServoHere, DM3_SetServoPWM, Cmd_GetEnc, ReadEncoder
		ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3, SaveHomePos, HA_SetItNeg
		HA_SetIt
EraseBlock_L1 ^	1F4A 	EraseBlock_L1
EraseProgBlock ^	1F63 	BLP_WriteBuffer
EraseSourceBuffer ^	1F46 	BootLoaderStart, BLP_WriteBuffer_end
F	0001 	ProgStartVector, IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, IRQ_Servo1_Dwell, ClearRam
		ClearRam_L2, CopyToRam_L1, SaveParams_L1, DecTimer, DelayWuS_Loop, StoreSerIn, GetSerIn
		StoreSerOut, GetSerOut, RS232_Parse, RS232_Parse_Byte, RS232_Parse_SALo, RS232_Parse_SALo_end
		RS232_Parse_DALo_End, RS232_Parse_L1, RS232_ClearTXData_L1, RS232_Send, RS232_Send_L1
		ML_1, DoModeZero, DoModeOne, CheckCurrent, CheckGripCurrent, DM2_NotOverCurrent
		DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus, DM3_CPV_End, DM3_CalcCurPos
		DM3_GoRev, DM3_SetServoPWM, DM3_ErrIsPos, DM4_NotOverCurrent, DoMode4_Minus_1, DoMode4_MovPlus
		DoMode4_Plus_1, HandleButtons, ReadAN_L2, ReadAN_Next, ReadAN_L1, Cmd_SendIDString_L1
		ReadEncoder_1, ReadEncoder_2, Home_Absolute_2, SaveHomePos, HA_SetItNeg, Init_AS5047D
		AS5047_ReadPos, AS5047_ReadReg, CalcParity_L1, CheckParity_L1, BLP_TestNum, BLP_TestNum_1
		BLP_TestNum_2, BLP_SaveIH_Length, BLP_NextState, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB
		BLP_IHS_DataType, BLP_IHS_Data, BufferIHData, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
		TestErased_L1, CB_Next, EraseBlock_L1, ReadProgBlock_L1, ReadProgBlock_1, WriteProgBlock_L1
FERR	0002 	RX_TheByte_Err, GetChar_Err
FREE	0004 	EraseProgBlock
FSR0	0004 	ClearRam, ClearRam_2, ClearRam_L2, StoreSerIn, StoreSerOut, ClampIntMD3
		ClampInt, HandleRXData_1
FSR0H	0005 	ClearRam, CopyToRam, SaveParams, DecTimer, StoreSerIn, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, ReadAN, Cmd_SetAuxConfig
		Cmd_SetAuxNValue, BLP_WriteBuffer, FSR0_SerialBuffer
FSR0L	0004 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DecTimer, GetSerIn
		GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, ReadAN, Cmd_SetAuxConfig
		Cmd_SetAuxNValue, BLP_WriteBuffer, FSR0_SerialBuffer
FSR0_SerialBuffer ^	1EDE 	BL_ParseNextLine, BLPV_HighAddr, BIHD_PutInBuff_E2
FSR1	0006 	HandleRXData_1
FSR1H	0007 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, Cmd_GetAuxConfig
		Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana, BIHD_PutInBuff_E2, FSR1_DestBuff, FSR1_SourceBuffer
FSR1L	0006 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, Cmd_GetAuxConfig
		Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana, BIHD_PutInBuff_E2, FSR1_DestBuff, FSR1_SourceBuffer
FSR1_DestBuff ^	1EE3 	BLP_WriteBuffer
FSR1_SourceBuffer ^	1EE8 	BLP_WriteBuffer, EraseSourceBuffer
FirstANData	00B5 	ReadAN
FirstRAMParam	EncoderFlags	CopyToRam, SaveParams
FlushInBuff ^	0122 	RS232_Parse_Error
ForwardLimit	ssStatus+1,3	Aux0_FwdLimit, Aux1_FwdLimit, Aux2_FwdLimit
GIE	0007 	EEWrite, EEWriteLoop, Copy7CToSig_1, InitializeIO, InitializeBLIO
GO	0001 	ReadAN_Start
GO_NOT_DONE	0001 	ReadAN
GetChar ^	1EED 	BLP_L2, GetChar, GetChar_Err
GetChar_Err ^	1EF8 	GetChar
GetSerIn ^	0111 	RS232_Parse_Byte
GetSerInBytes ^	0128 	MainLoop
GetSerIn_End ^	0120 	GetSerIn
GetSerOut ^	0146 	ML_Ser_Out
GetSerOut_End ^	0155 	GetSerOut
GripIMet	ssTempFlags,4	CheckGripCurrent, DoMode4_MovPlus, DoMode4_Go, DoMode4_1
GripIOver	ssTempFlags,5	CheckGripCurrent, DoMode4_Hold, DoMode4_Go, DoMode4_1
HA_SetIt ^	0B33 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos
HA_SetItNeg ^	0B31 	Home_Absolute_2
HandleAuxIO ^	0482 	SystemBlink_end
HandleButtons ^	03CD 	No_NewDataAN0
HandleRXData ^	0804 	MainLoop
HandleRXData_1 ^	080A 	HandleRXData
HandleRXData_Rtn ^	0808 	Cmd_SetMode, Cmd_SetAuxConfig, Cmd_GetAuxConfig, Cmd_SetAuxNValue
		Cmd_GetAuxNValue
HdlBtn_1 ^	03DC 	HandleButtons
HdlBtn_Btn1 ^	03E5 	HdlBtn_1
HdlBtn_Btn2 ^	03E6 	HdlBtn_1
HdlBtn_Btn3 ^	03E7 	HdlBtn_1
HdlBtn_Btn4 ^	03E8 	HdlBtn_1
HdlBtn_DB ^	03D9 	HandleButtons, HdlBtn_Btn1, HdlBtn_Btn2, HdlBtn_Btn3, HdlBtn_Btn4
HomeSwitch	ssStatus+1,5	Aux0_HomeSW, Aux1_HomeSW, Aux2_HomeSW
Home_Absolute_1 ^	0AE7 	ReadEncoder_2
Home_Absolute_2 ^	0AF3 	ReadEncoder_2, Home_Absolute_1
Home_Absolute_3 ^	0B12 	Home_Absolute_2
Home_Here ^	0B3E 	ReadEncoder_2
IDString ^	0A72 	Cmd_SendIDString_L1
IHS_Length	0001 	BLP_L2
IH_Ack	002A 	BootLoaderStart, BLPV_EndCmd, BLPV_Exit_Ack
IH_Addr_Hi	0025 	BootLoaderStart, BLPV_HighAddr, BufferIHData
IH_Addr_Lo	0023 	BootLoaderStart, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BufferIHData
		BIHD_PutInBuff
IH_ByteCount	0028 	BootLoaderStart, BL_ParseNextLine, BLP_IHS_Data, BIHD_PutInBuff_E2
IH_Bytes	0027 	BootLoaderStart, BLP_SaveIH_Length, BLP_IHS_DataType, BLP_IHS_Data
IH_ErrorBadCSum	002D 	BLP_IHS_CSum
IH_ErrorBadLen	002B 	BLP_IHS_Length
IH_ErrorBadType	003D 	BLPV_BadType
IH_Flags	002C 	BootLoaderStart, BL_Parse, BLP_L1, BLP_TestNum_1, BLPV_EndCmd, BufferIHData
		BIHD_PutInBuff_L1, EraseSourceBuffer
IH_State	002A 	BootLoaderStart, BL_ParseNextLine, BLP_L2, BLP_TestNum, BLP_TestNum_2
		BLP_NextState, BLP_IHS_DataType
IH_TempVal	002B 	BootLoaderStart, BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_Length, BLP_SaveIH_Length
		BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
IH_Type	0029 	BootLoaderStart, BLP_IHS_DataType, BLP_Validate
SerialServo.asm   X-Ref Table                                            Page: 67
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

INDF0	0000 	ClearRam_L2, DecTimer, StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_DALo_End
		Cmd_GetRevDir, Cmd_GetEnaOvrCur, Cmd_GetUseIdleCenter, Cmd_GetUseFastPWM, Cmd_SetAuxNValue
INDF1	0001 	Cmd_SetMode, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_SetUseIdleCenter, Cmd_SetUseFastPWM
		Cmd_SetAuxConfig, Cmd_GetAuxConfig, Cmd_GetAuxNValue
INTCON	000B 	EEWrite, EEWriteLoop, Copy7CToSig_1, InitializeIO, InitializeBLIO
IRQ_Ser_End ^	005C 	IRQ_Servo1_End
IRQ_Servo1_1 ^	0025 	SystemTick_end
IRQ_Servo1_20mS ^	003B 	IRQ_Servo1_OH
IRQ_Servo1_CalcDwell ^	0040 	IRQ_Servo1_OH
IRQ_Servo1_Dwell ^	0053 	SystemTick_end, IRQ_Servo1_Idle
IRQ_Servo1_End ^	0059 	SystemTick_end
IRQ_Servo1_Idle ^	0045 	IRQ_Servo1_1
IRQ_Servo1_OH ^	002C 	IRQ_Servo1_Idle
IRQ_Servo1_OL ^	0051 	IRQ_Servo1_1
IRQ_Servo1_X ^	0057 	IRQ_Servo1_CalcDwell
Init_AS5047D ^	0B43 	InitializeIO
InitializeBLIO ^	1F9E 	BootLoaderStart
InitializeIO ^	0BF1 	start
LATA	010C 	Aux0_Digital_Out, Aux1_Digital_Out, Aux2_Digital_Out, Cmd_SetAuxNConfigDigIn
		Cmd_SetAux1ConfigDigIn, Cmd_SetAux2ConfigDigIn, Cmd_SetAuxNConfigDigOut, Cmd_SetAux1ConfigDigOut
		Cmd_SetAux2ConfigDigOut, Cmd_SetAuxNConfigAnalogIn, Cmd_SetAux1ConfigAnalogIn, Cmd_SetAux2ConfigAnalogIn
		SetAux0ConfigDigIn, SetAux0ConfigDigOut, SetAux0ConfigAnalogIn, SetAux1ConfigDigIn
		SetAux1ConfigDigOut, SetAux1ConfigAnalogIn, SetAux2ConfigDigIn, SetAux2ConfigDigOut
		SetAux2ConfigAnalogIn
LATB	010D 	Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L2
LED1_Bit	0002 	Aux0_LEDBtn, Aux0_Digital_Out, Read_Aux0_Sw1, Cmd_SetAuxNConfigDigIn
		Cmd_SetAuxNConfigDigOut, Cmd_SetAuxNConfigAnalogIn, SetAux0ConfigDigIn, SetAux0ConfigDigOut
		SetAux0ConfigAnalogIn
LED2_Bit	0003 	Aux1_LEDBtn, Aux1_Digital_Out, Read_Aux1_Sw2, Cmd_SetAux1ConfigDigIn
		Cmd_SetAux1ConfigDigOut, Cmd_SetAux1ConfigAnalogIn, SetAux1ConfigDigIn, SetAux1ConfigDigOut
		SetAux1ConfigAnalogIn
LED3_Bit	0004 	Aux2_LEDBtn, Aux2_Digital_Out, Read_Aux2_Sw3, Cmd_SetAux2ConfigDigIn
		Cmd_SetAux2ConfigDigOut, Cmd_SetAux2ConfigAnalogIn, SetAux2ConfigDigIn, SetAux2ConfigDigOut
		SetAux2ConfigAnalogIn
LEDErrorTime	000A 	ML_1
LEDTIME	0064 	ML_1, InitializeIO
LWLO	0005 	WriteProgBlock, WriteProgBlock_Wr
LastAN	0004 	ReadAN_Next
LastRAMParam	SysFlags	CopyToRam_L1, SaveParams_L1
LoadProgAddr ^	1F72 	ReadProgBlock, EraseProgBlock, WriteProgBlock
MD3_FFwd	ssStatus,0	DM3_CalcCurPos, DM3_GoRev, DM3_IdleServo, DM3_IdleInactive
MD3_FRev	ssStatus,1	DM3_CalcCurPos, DM3_GoRev, DM3_IdleServo, DM3_IdleInactive
ML_1 ^	01FA 	MainLoop
ML_Ser_End ^	0220 	ML_Ser_Out
ML_Ser_Out ^	0219 	No_NewDataAN0
MSN_Done	IH_Flags,0	BootLoaderStart, BLP_L1, BLP_TestNum_1
MagEnc_HighZone	EncoderFlags,0	ReadEncoder, ReadEncoder_2
MagEnc_Homed	EncoderFlags,4	ReadEncoder, ReadEncoder_2, SaveHomePos
MagEnc_Index	EncoderFlags,2	ReadEncoder, ReadEncoder_2
MagEnc_IndexLatch	EncoderFlags,3	ReadEncoder, ReadEncoder_1, ReadEncoder_2
MagEnc_LowZone	EncoderFlags,1	ReadEncoder, ReadEncoder_1, ReadEncoder_2
MainLoop ^	01F0 	ModeReturn
ModeReturn ^	0228 	DoModeZero, DoModeOne, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_Go
		DoModeTwo_1, DM3_UpdatePos, DM3_IdleInactive, DM4_NotOverCurrent, DoMode4_Go, DoMode4_1
ModeZeroPot	Cur_AN2	DoModeZero, DoModeOne, Cmd_GetBattVolts
NOT_WPUEN	0007 	InitializeIO, InitializeBLIO
NewDataAN0	ANFlags,0	ML_1
No_NewDataAN0 ^	020E 	ML_1
OERR	0001 	RX_TheByte_Err, GetChar_Err
OPTION_REG	0095 	InitializeIO, InitializeBLIO
OSCCON	0099 	InitializeIO, InitializeBLIO
OSCCON_Value	00F0 	InitializeIO, InitializeBLIO
OldAN0Value	00BF 	ML_1
OverCurrentFlag	ssTempFlags,3	CheckCurrent, DoModeTwo, DoModeThree, DoMode4
PCLATH	000A 	ProgStartVector
PEIE	0006 	InitializeIO
PIE1	0091 	InitializeIO
PIR1	0011 	ProgStartVector, SystemTick_end, IRQ_Servo1_X, IRQ_Servo1_End, No_NewDataAN0
		GetChar, SendChar
POP_SerOut_End ^	0144 	StoreSerOut
PORTA	000C 	Read_Aux0_Sw1, Read_Aux1_Sw2, Read_Aux2_Sw3, InitializeIO, InitializeBLIO
PORTB	000D 	InitializeIO, InitializeBLIO
PR2	001B 	InitializeIO
PR2_Value	007D 	InitializeIO
PROG_ADDR_HI	0021 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PROG_ADDR_LO	0020 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PS0	0000 	InitializeIO, InitializeBLIO
PS1	0001 	InitializeIO, InitializeBLIO
PS2	0002 	InitializeIO, InitializeBLIO
PSA	0003 	InitializeIO, InitializeBLIO
Param76	0076 	ReadEncoder, ReadEncoder_2, CalcParity, CalcParity_L1, CheckParity
		CheckParity_L1
Param77	0077 	DelayWuS, DelayWuS_Loop, ReadEncoder, ReadEncoder_1, ReadEncoder_2
		CalcParity, CalcParity_L1, CheckParity, CheckParity_L1, CompareBlock_L1, CB_NotBlank
Param78	0078 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_Byte, RS232_Parse_Sync2
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
		RS232_Parse_L1, RS232_ClearTXData, RS232_ClearTXData_L1, ML_Ser_Out, CheckCurrent
		CheckGripCurrent, DM3_CalcCurPos, ReadAN, ReadAN_L2, ReadAN_Next, ReadAN_L1, HandleRXData_1
		Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetAuxConfig
		Cmd_SetAuxNConfigDigIn, Cmd_SetAuxNConfigDigOut, Cmd_SetAuxNConfigAnalogIn, Cmd_SetAuxNValue
		Cmd_SetAuxNDigOut, Cmd_SetAuxNValue_Dig2, Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana
		Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Btn, ReadEncoder, ReadEncoder_2, Home_Absolute_1
		Home_Absolute_2, Home_Absolute_3, Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1
		AS5047_Read, SPI_SendRecWord_L1, SPI_SendRecWord_L2, CalcParity_L1, CheckParity_L1
		BLP_L2, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_CSum, BufferIHData, CompareBlock_L1
		CB_NotBlank
Param79	0079 	RS232_Send, RS232_Send_L1, DoModeOne, CheckCurrent, CheckGripCurrent
		DM3_SetServoPWM, DM3_NoDB, DM3_PosLimit, DM3_CalcSCmd, DM3_CalcSCmd_2s, DM3_CalcSCmd_1
		Cmd_SendIDString, Cmd_SendIDString_L1, ReadEncoder, ReadEncoder_2, Home_Absolute_1
SerialServo.asm   X-Ref Table                                            Page: 68
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

		Home_Absolute_2, Home_Absolute_3, Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1
		AS5047_ReadReg, AS5047_Read, SPI_SendRecWord, SPI_SendRecWord_L1, CalcParity_L1
		CheckParity_L1, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, TestErased, TestErased_L1
		CompareBlock, CB_Next, EraseSourceBuffer, EraseBlock_L1, ReadProgBlock, ReadProgBlock_L1
		WriteProgBlock
Param7A	007A 	RS232_Send, RS232_Send_L1, DoModeOne, DM3_SetServoPWM, DM3_NoDB, DM3_PosLimit
		ReadEncoder, ReadEncoder_2, Init_AS5047D
Param7B	007B 	Init_AS5047D
Param7C	007C 	DoModeZero, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_MovPlus, DoModeTwo_Go
		DM3_NotOverCurrent, DM3_SetServoPWM, DM3_ErrIsPos, DM3_CalcSCmd_1, DM3_IdleServo
		DM4_NotOverCurrent, DoMode4_MovPlus, DoMode4_Go, Copy7CToSig, Copy7CToSig_1, SetMiddlePosition
		ClampInt_E2, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh
Param7D	007D 	DoModeZero, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_MovPlus, DoModeTwo_Go
		DM3_NotOverCurrent, DM3_SetServoPWM, DM3_ErrIsPos, DM3_CalcSCmd_1, DM3_IdleServo
		DM4_NotOverCurrent, DoMode4_MovPlus, DoMode4_Go, Copy7CToSig, Copy7CToSig_1, SetMiddlePosition
		ClampInt_E2, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh
Param7F	007F 	ClearRam, ClearRam_2, ClearRam_L2
ParityErrFlag	AS5047D_Flags,0	ReadEncoder, CheckParity_L1
PortADDRBits	00BF 	InitializeIO, InitializeBLIO
PortAValue	0000 	InitializeIO, InitializeBLIO
PortBDDRBits	00C6 	InitializeIO, InitializeBLIO
PortBValue	0011 	InitializeIO, InitializeBLIO
ProgStartVector ^	0002 	BootLoader_End
ProgWordCount	0022 	BootLoaderStart, BIHD_PutInBuff, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
PulseSent	ssTempFlags,0	SystemTick_end, DM2_NotOverCurrent, DM3_CalcCurPos, DM4_NotOverCurrent
RCIE	0005 	InitializeIO
RCIF	0005 	IRQ_Servo1_End, GetChar
RCREG	0199 	RX_TheByte, RX_TheByte_Err, GetChar, GetChar_Err
RCSTA	019D 	RX_TheByte, RX_TheByte_Err, InitializeIO, GetChar, GetChar_Err, InitializeBLIO
RCSTA_Value	0090 	InitializeIO, InitializeBLIO
RD	0000 	EERead, ReadEEData, ReadProgBlock_L1
RP_DataBytes	0004 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_ClearTXData
		RS232_Send
RP_LongAddr	0000 	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Send
RS232_ClearTXData ^	01C7 	RS232_Send_L1
RS232_ClearTXData_L1 ^	01CF 	RS232_ClearTXData_L1
RS232_MasterAddr	0052 	RS232_Parse_SALo, RS232_Send, Cmd_SetMasterAddr
RS232_Parse ^	0157 	MainLoop
RS232_Parse_Byte ^	0162 	RS232_Parse
RS232_Parse_DALo_End ^	0199 	RS232_Parse_SALo_end
RS232_Parse_Data_end ^	01AA 	RS232_Parse_DALo_End
RS232_Parse_Error ^	01C5 	RS232_Parse_Sync2, RS232_Parse_Data_end
RS232_Parse_L1 ^	01B8 	RS232_Parse_L1
RS232_Parse_Rtn ^	0189 	RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo_end
		RS232_Parse_DALo_End
RS232_Parse_SALo ^	0179 	RS232_Parse_Sync2
RS232_Parse_SALo_end ^	018B 	RS232_Parse_SALo
RS232_Parse_Sync2 ^	0171 	RS232_Parse_Byte
RS232_Send ^	01D4 	RS232_Send_S0
RS232_Send_L1 ^	01E3 	RS232_Send_L1
RS232_Send_S0 ^	0800 	Cmd_GetMode, Cmd_GetCmdPos, Cmd_GetMaxI, Cmd_GetFFwd, Cmd_GetFRev
		Cmd_GetMin_uS, Cmd_GetMax_uS, Cmd_GetRevDir, Cmd_GetEnaOvrCur, Cmd_GetStopCenter
		Cmd_GetSpeed, Cmd_GetUseIdleCenter, Cmd_GetDeadBand, Cmd_GetUseFastPWM, Cmd_GetGripI
		Cmd_GetAuxConfig, Cmd_GetAuxNValue_Ana, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1
		Cmd_GetAuxNValue_Dig2, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1, Cmd_GetAuxNValue_Btn2
		Cmd_GetEncoderOffset, Cmd_GetI, Cmd_GetEnc, Cmd_GetEncAbs, Cmd_GetBattVolts, Cmd_GetStatus
		Cmd_SetMasterAddr, Cmd_SetSlaveAddr
RS232_SlaveAddr	0053 	RS232_Parse_SALo_end, RS232_Send, Cmd_SetSlaveAddr
RXByte	0031 	RX_TheByte, RX_TheByte_Err, No_NewDataAN0
RXDTSEL	0007 	InitializeIO, InitializeBLIO
RXDataIsNew	RX_Flags,1	RS232_Parse, RS232_Parse_L1, MainLoop, HandleRXData
RXDataValidFlag	RX_Flags,0	RS232_Parse, RS232_Parse_L1, HandleRXData
RXDstIsMe	RX_Flags,3	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_L1
RXSrcIsMaster	RX_Flags,2	RS232_Parse, RS232_Parse_SALo, RS232_Parse_L1
RXTimeout	0005 	RS232_Parse_Byte
RX_CSUM	00A3 	RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_Data	00AA 	RS232_Parse_Data_end, HandleRXData_1
RX_DataCount	00A2 	RS232_Parse_SALo, RS232_Parse_DALo_End
RX_DstAdd	00A5 	RS232_Parse_SALo_end
RX_Flags	00A1 	RS232_Parse, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_L1
		MainLoop, HandleRXData
RX_ParseFlags	00A0 	RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo
		RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_Parse_Error
RX_SrcAdd	00A4 	RS232_Parse_SALo
RX_TempData	00A6 	RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_TheByte ^	00F1 	IRQ_Servo1_End
RX_TheByte_Err ^	00FB 	RX_TheByte
ReadAN ^	03E9 	ML_1
ReadAN0_ColdStart ^	0410 	start, ReadAN
ReadAN_L1 ^	0409 	ReadAN_L1
ReadAN_L2 ^	03FC 	ReadAN_L2
ReadAN_Next ^	0400 	ReadAN_L1
ReadAN_Rtn ^	041A 	ReadAN
ReadAN_Start ^	0414 	ReadAN_L1
ReadAN_Start0 ^	0413 	ReadAN_Next
ReadEEData ^	1F04 	BootLoaderStart
ReadEncoder ^	0A8F 	No_NewDataAN0
ReadEncoder_1 ^	0AA9 	ReadEncoder
ReadEncoder_2 ^	0AB3 	ReadEncoder, ReadEncoder_1
ReadProgBlock ^	1F51 	BLP_WriteBuffer
ReadProgBlock_1 ^	1F61 	ReadProgBlock_L1
ReadProgBlock_L1 ^	1F56 	ReadProgBlock_1
Read_Aux0_Sw1 ^	04B5 	Aux0_LEDBtn, Aux0_Digital_In, Aux0_HomeSW, Aux0_FwdLimit, Aux0_RevLimit
Read_Aux1_Sw2 ^	04EF 	Aux1_LEDBtn, Aux1_Digital_In, Aux1_HomeSW, Aux1_FwdLimit, Aux1_RevLimit
Read_Aux2_Sw3 ^	0529 	Aux2_LEDBtn, Aux2_Digital_In, Aux2_HomeSW, Aux2_FwdLimit, Aux2_RevLimit
ReverseLimit	ssStatus+1,4	Aux0_RevLimit, Aux1_RevLimit, Aux2_RevLimit
SDO1SEL	0006 	InitializeIO, InitializeBLIO
SMP	0007 	Init_AS5047D
SPBRGH	019C 	InitializeIO, InitializeBLIO
SerialServo.asm   X-Ref Table                                            Page: 69
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

SPBRGL	019B 	InitializeIO, InitializeBLIO
SPI_CLK_Tris	TRISB,4	Init_AS5047D
SPI_CSn	LATB,0	Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L2
SPI_CSn_Tris	TRISB,0	Init_AS5047D
SPI_MISO_Tris	TRISB,1	Init_AS5047D
SPI_MOSI_Tris	TRISA,6	Init_AS5047D
SPI_SendRecWord ^	0BB4 	Init_AS5047D, AS5047_ReadPos, AS5047_Read
SPI_SendRecWord_L1 ^	0BB9 	SPI_SendRecWord_L1
SPI_SendRecWord_L2 ^	0BC0 	SPI_SendRecWord_L2
SSP1BUF	0211 	SPI_SendRecWord, SPI_SendRecWord_L1, SPI_SendRecWord_L2
SSP1CON1	0215 	Init_AS5047D
SSP1CON1_Val	0022 	Init_AS5047D
SSP1STAT	0214 	Init_AS5047D, SPI_SendRecWord_L1, SPI_SendRecWord_L2
STATUS	0003 	ProgStartVector, CopyToRam_L1, SaveParams_L1, DecTimer, RX_TheByte, GetSerIn
		StoreSerOut, GetSerOut, RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo
		RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end, MainLoop, DM2_NotOverCurrent
		DoModeTwo_MovPlus, DM3_CPV_End, DM3_CalcCurPos, DM3_GoRev, DM3_SetServoPWM, DM3_ErrIsPos
		DM3_NoDB, DM3_PosLimit, DM3_CalcSCmd, DM4_NotOverCurrent, DoMode4_MovPlus, HandleButtons
		ReadAN, ReadAN_Next, ReadAN_L1, Copy7CToSig, ClampInt_E2, ClampInt_1, HandleRXData_1
		Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetMode
		Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_SetUseIdleCenter, Cmd_SetUseFastPWM, Cmd_SetAuxConfig
		Cmd_SetAuxNConfigDigIn, Cmd_SetAux1ConfigDigIn, Cmd_SetAuxNConfigDigOut, Cmd_SetAux1ConfigDigOut
		Cmd_SetAuxNConfigAnalogIn, Cmd_SetAux1ConfigAnalogIn, Cmd_GetAuxConfig, Cmd_SetAuxNValue
		Cmd_SetAuxNDigOut, Cmd_SetAuxNValue_Dig1, Cmd_SetAuxNValue_Dig2, Cmd_GetAuxNValue
		Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1
		Cmd_SendIDString_L1, ReadEncoder, ReadEncoder_1, ReadEncoder_2, BootLoaderStart
		BLP_L2, BLP_TestNum, BLP_IHS_Length, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
		BLP_Validate, BufferIHData, BIHD_PutInBuff_L1, GetChar, TestErased_L1, CompareBlock_L1
		CB_NotBlank, WriteProgBlock_L1
SW1_Flag	SysFlags,0	HandleButtons, HdlBtn_1
SW2_Flag	SysFlags,1	HandleButtons, HdlBtn_1
SW3_Flag	SysFlags,2	HandleButtons, HdlBtn_1
SW4_Flag	SysFlags,3	HandleButtons, HdlBtn_1
SaveHomePos ^	0B25 	ReadEncoder_2
SaveParams ^	0089 	Cmd_SaveParams, Cmd_SetMasterAddr, Cmd_SetSlaveAddr, SaveHomePos
SaveParams_L1 ^	008E 	SaveParams_L1
SendChar ^	1EFE 	BootLoaderStart, BLP_IHS_Length, BLP_IHS_CSum, BLPV_EndCmd, BLPV_Exit
		SendChar
SerFlags	0032 	TX_TheByte, RX_TheByte, No_NewDataAN0, ML_Ser_Out
Ser_Buff_Bank	2	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes, StoreSerOut, GetSerOut
Ser_In_Buff	0126 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut
Ser_In_Bytes	0120 	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes
Ser_In_InPtr	0122 	StoreSerIn, FlushInBuff
Ser_In_OutPtr	0123 	GetSerIn, FlushInBuff
Ser_Out_Buff	0146 	StoreSerOut, GetSerOut
Ser_Out_Bytes	0121 	GetSerInBytes, StoreSerOut, GetSerOut
Ser_Out_InPtr	0124 	StoreSerOut
Ser_Out_OutPtr	0125 	GetSerOut
SerialBuffer	2180 	BootLoaderStart, FSR0_SerialBuffer
ServoCurrent	Cur_AN0	CheckCurrent, CheckGripCurrent
ServoFastForward	0048 	DM1_FF, Cmd_SetFFwd, Cmd_GetFFwd
ServoFastReverse	0046 	DM1_FR, ClampIntMD3, Cmd_SetFRev, Cmd_GetFRev
ServoIdle	ssTempFlags,2	IRQ_Servo1_1, DoModeOne, DoModeTwo_1, DM3_IdleServo, DM3_IdleInactive
		DoMode4_1, Copy7CToSig_Done, SetMiddlePosition
ServoMax_uS	004E 	Cmd_SetMax_uS, Cmd_GetMax_uS
ServoMin_uS	004C 	ClampInt, Cmd_SetMin_uS, Cmd_GetMin_uS
ServoOff	ssTempFlags,1	SystemTick_end, StartServo, SetMiddlePosition, InitializeIO
ServoSpeed	0050 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus
		DM3_CPV_End, DM3_CalcCurPos, DM3_GoRev, DM4_NotOverCurrent, DoMode4_Minus, DoMode4_MovPlus
		DoMode4_Plus, Cmd_SetSpeed, Cmd_GetSpeed
ServoStopCenter	004A 	DM3_CalcSCmd_1, DM3_IdleServo, Cmd_SetStopCenter, Cmd_GetStopCenter
SetAux0ConfigAnalogIn ^	0C65 	DoAuxConfig
SetAux0ConfigDigIn ^	0C53 	DoAuxConfig
SetAux0ConfigDigOut ^	0C5C 	DoAuxConfig
SetAux0ConfigFwdLimit ^	0C53 	DoAuxConfig
SetAux0ConfigHomeSw ^	0C53 	DoAuxConfig
SetAux0ConfigLEDBtn ^	0C53 	DoAuxConfig
SetAux0ConfigNone ^	0C53 	DoAuxConfig
SetAux0ConfigRevLimit ^	0C53 	DoAuxConfig
SetAux1Config ^	0C6D 	SetAux0ConfigDigIn, SetAux0ConfigDigOut
SetAux1ConfigAnalogIn ^	0C89 	SetAux1Config
SetAux1ConfigDigIn ^	0C77 	SetAux1Config
SetAux1ConfigDigOut ^	0C80 	SetAux1Config
SetAux1ConfigFwdLimit ^	0C77 	SetAux1Config
SetAux1ConfigHomeSw ^	0C77 	SetAux1Config
SetAux1ConfigLEDBtn ^	0C77 	SetAux1Config
SetAux1ConfigNone ^	0C77 	SetAux1Config
SetAux1ConfigRevLimit ^	0C77 	SetAux1Config
SetAux2Config ^	0C91 	SetAux1ConfigDigIn, SetAux1ConfigDigOut
SetAux2ConfigAnalogIn ^	0CAD 	SetAux2Config
SetAux2ConfigDigIn ^	0C9B 	SetAux2Config
SetAux2ConfigDigOut ^	0CA4 	SetAux2Config
SetAux2ConfigFwdLimit ^	0C9B 	SetAux2Config
SetAux2ConfigHomeSw ^	0C9B 	SetAux2Config
SetAux2ConfigLEDBtn ^	0C9B 	SetAux2Config
SetAux2ConfigNone ^	0C9B 	SetAux2Config
SetAux2ConfigRevLimit ^	0C9B 	SetAux2Config
SetMiddlePosition ^	044F 	StartServo
SigOutTime	02A0 	IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, Copy7CToSig, Copy7CToSig_1
SigOutTimeH	02A1 	Copy7CToSig, Copy7CToSig_1
SourceAddHiRXd	RX_ParseFlags,3	RS232_Parse
SourceAddLoRXd	RX_ParseFlags,2	RS232_Parse, RS232_Parse_SALo
SourceBuffer	2100 	BootLoaderStart, BIHD_PutInBuff_E2, BLP_WriteBuffer, FSR1_SourceBuffer
StartServo ^	0438 	start
StoreSerIn ^	0103 	No_NewDataAN0
StoreSerOut ^	0130 	RS232_Send, RS232_Send_L1, StoreSerOut_S0
StoreSerOut_S0 ^	0A8B 	Cmd_SendIDString_L1
SyncByte1RXd	RX_ParseFlags,0	RS232_Parse, RS232_Parse_Byte
SyncByte2RXd	RX_ParseFlags,1	RS232_Parse, RS232_Parse_Sync2
SerialServo.asm   X-Ref Table                                            Page: 70
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

SysFlags	005B 	CopyToRam_L1, SaveParams_L1, HandleButtons, HdlBtn_1
SysFlags1	0024 	Aux0_LEDBtn, Aux0_Digital_Out, Aux0_HomeSW, Aux0_FwdLimit, Aux0_RevLimit
		Read_Aux0_Sw1, Aux1_LEDBtn, Aux1_Digital_Out, Aux1_HomeSW, Aux1_FwdLimit, Aux1_RevLimit
		Read_Aux1_Sw2, Aux2_Digital_Out, Aux2_HomeSW, Aux2_FwdLimit, Aux2_RevLimit, Read_Aux2_Sw3
		Cmd_SetAuxNDigOut, Cmd_SetAuxNValue_Dig1, Cmd_SetAuxNValue_Dig2, Cmd_GetAuxNValue_Dig
		Cmd_GetAuxNValue_Dig1, Cmd_GetAuxNValue_Dig2, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1
		Cmd_GetAuxNValue_Btn2
SysFlags2	0025 	Aux2_LEDBtn
SysLEDCount	0023 	ProgStartVector, SystemBlink_Std, InitializeIO
SysLED_Bit	0007 	ProgStartVector, SystemBlink_Std
SysLED_BlinkCount	0022 	SystemBlink_Std
SysLED_Blinks	0021 	ProgStartVector
SysLED_Time	0020 	SystemBlink_Std, ML_1, InitializeIO
SysLED_Tris	TRISA,SysLED_Bit	ProgStartVector, SystemBlink_Std
SysMode	0051 	ML_Ser_End, Cmd_SetMode, Cmd_GetMode
SystemBlink_Std ^	0015 	ProgStartVector
SystemBlink_end ^	001A 	ProgStartVector
SystemTick_end ^	001B 	ProgStartVector
T1CON	0018 	InitializeIO
T1CON_Val	0021 	InitializeIO
T1GCON	0019 	InitializeIO
T2CON	001C 	InitializeIO
T2CON_Value	004F 	InitializeIO
TMR0CS	0005 	InitializeIO, InitializeBLIO
TMR1GE	0007 	InitializeIO
TMR1H	0017 	StartServo
TMR1L	0016 	StartServo
TMR2IE	0001 	InitializeIO
TMR2IF	0001 	ProgStartVector
TRISA	008C 	ProgStartVector, SystemBlink_Std, Aux0_LEDBtn, Aux0_Digital_Out, Aux1_LEDBtn
		Aux1_Digital_Out, Aux2_LEDBtn, Aux2_Digital_Out, Cmd_SetAuxNConfigDigIn, Cmd_SetAux1ConfigDigIn
		Cmd_SetAux2ConfigDigIn, Cmd_SetAuxNConfigDigOut, Cmd_SetAux1ConfigDigOut, Cmd_SetAux2ConfigDigOut
		Cmd_SetAuxNConfigAnalogIn, Cmd_SetAux1ConfigAnalogIn, Cmd_SetAux2ConfigAnalogIn
		Init_AS5047D, InitializeIO, SetAux0ConfigDigIn, SetAux0ConfigDigOut, SetAux0ConfigAnalogIn
		SetAux1ConfigDigIn, SetAux1ConfigDigOut, SetAux1ConfigAnalogIn, SetAux2ConfigDigIn
		SetAux2ConfigDigOut, SetAux2ConfigAnalogIn, InitializeBLIO
TRISB	008D 	Init_AS5047D, InitializeIO, InitializeBLIO
TXByte	0030 	TX_TheByte, ML_Ser_Out
TXCKSEL	0000 	InitializeIO, InitializeBLIO
TXIF	0004 	No_NewDataAN0, SendChar
TXREG	019A 	TX_TheByte, SendChar
TXSTA	019E 	InitializeIO, InitializeBLIO
TXSTA_Value	0024 	InitializeIO, InitializeBLIO
TX_ACK ^	0A8A 	Cmd_SetMode, Cmd_SetCmdPos, Cmd_SetMaxI, Cmd_SetFFwd, Cmd_SetFRev
		Cmd_SetMin_uS, Cmd_SetMax_uS, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_SetStopCenter
		Cmd_SetSpeed, Cmd_SetUseIdleCenter, Cmd_SetDeadBand, Cmd_SetUseFastPWM, Cmd_SetGripI
		Cmd_SetAuxNConfigDigIn, Cmd_SetAux1ConfigDigIn, Cmd_SetAux2ConfigDigIn, Cmd_SetAuxNConfigDigOut
		Cmd_SetAux1ConfigDigOut, Cmd_SetAux2ConfigDigOut, Cmd_SetAuxNConfigAnalogIn, Cmd_SetAux1ConfigAnalogIn
		Cmd_SetAux2ConfigAnalogIn, Cmd_SetAuxNValue, Cmd_SetAuxNDigOut, Cmd_SetAuxNValue_Dig1
		Cmd_SetAuxNValue_Dig2, Cmd_SetAuxNLED, Cmd_SetEncoderOffset, Cmd_SaveParams, Cmd_RestoreParams
TX_Data	00AE 	RS232_ClearTXData, RS232_Send, HandleRXData_1
TX_TheByte ^	00E9 	No_NewDataAN0
TestErased ^	1F1F 	BLP_WriteBuffer
TestErased_L1 ^	1F21 	TestErased_L1
Timer1Hi	0029 	DecTimer1, DecTimer
Timer1Lo	0028 	DecTimer, RS232_Parse, RS232_Parse_Byte
Timer2Hi	002B 	DecTimer2, DecTimer
Timer2Lo	002A 	DecTimer
Timer3Hi	002D 	DecTimer3, DecTimer
Timer3Lo	002C 	DecTimer
Timer4Hi	002F 	DecTimer4, DecTimer
Timer4Lo	002E 	DecTimer, HandleButtons, HdlBtn_DB, InitializeIO
UseAltSerialPort	0001 	InitializeBLIO
UseAuxLEDBlinking	0000 	Cmd_SetAuxNLED
UseEEParams	0001 	ClearRam, CopyToRam
UsePID	0000 	InitializeBLIO, Aux2_ISR_End, RS232_Send_S0, Dispatcher_2, Dispatcher_3
		Cmd_GetI
UseRS232Chksum	0001 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_Send_L1
UseRS232SendSyncBytes	0000 	RS232_Parse, RS232_Send
UseRS232SyncBytes	0001 	RS232_Parse, RS232_Parse_Byte
W	0000 	SystemBlink_Std, IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, IRQ_Servo1_Dwell, CopyToRam_L1
		SaveParams_L1, DecTimer, EERead, EEWrite, TX_TheByte, RX_TheByte, RX_TheByte_Err
		StoreSerIn, GetSerIn, GetSerInBytes, StoreSerOut, GetSerOut, RS232_Parse_Byte, RS232_Parse_Sync2
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
		RS232_Send, RS232_Send_L1, ML_1, No_NewDataAN0, ML_Ser_End, DoModeZero, DoModeOne
		DM1_FF, DM1_FR, CheckCurrent, CheckGripCurrent, DM2_NotOverCurrent, DoModeTwo_Minus
		DoModeTwo_MovPlus, DoModeTwo_Plus, DoModeTwo_NoSpeed, DoModeTwo_Go, DM3_ServoHere
		DM3_NotOverCurrent, DM3_ServoThere, DM3_CalcCurPos, DM3_GoRev, DM3_SetServoPWM
		DM3_ErrIsPos, DM3_NoDB, DM3_PosLimit, DM3_CalcSCmd, DM3_CalcSCmd_2s, DM3_CalcSCmd_1
		DM3_IdleServo, DM4_NotOverCurrent, DoMode4_Minus, DoMode4_MovPlus, DoMode4_Plus
		DoMode4_Go, ReadAN, ReadAN_Next, ReadAN_L1, ANx_GetADPCHVal, Copy7CToSig, Copy7CToSig_1
		ClampInt_E2, ClampInt_1, HandleAuxIO, Aux0_ISR_End, Aux1_ISR_End, HandleRXData_1
		Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetMode
		Cmd_GetMode, Cmd_GetCmdPos, Cmd_GetMaxI, Cmd_GetFFwd, Cmd_GetFRev, Cmd_GetMin_uS
		Cmd_GetMax_uS, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_GetStopCenter, Cmd_GetSpeed
		Cmd_SetUseIdleCenter, Cmd_GetDeadBand, Cmd_SetUseFastPWM, Cmd_GetGripI, Cmd_SetAuxConfig
		Cmd_SetAuxNConfigDigIn, Cmd_SetAuxNConfigDigOut, Cmd_SetAuxNConfigAnalogIn, Cmd_GetAuxConfig
		Cmd_SetAuxNValue, Cmd_SetAuxNDigOut, Cmd_SetAuxNValue_Dig2, Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana
		Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Btn, Cmd_GetEncoderOffset, Cmd_GetI, Cmd_GetEnc
		Cmd_GetEncAbs, Cmd_GetBattVolts, Cmd_GetStatus, Cmd_SendIDString_L1, ReadEncoder
		ReadEncoder_1, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetIt, Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L1, SPI_SendRecWord_L2
		CalcParity_L1, CheckParity_L1, DoAuxConfig, SetAux1Config, SetAux2Config, BLP_L2
		BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_Length, BLP_SaveIH_Length, BLP_IHS_AddrMSB
		BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate, BufferIHData
		BIHD_PutInBuff, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, GetChar, GetChar_Err, ReadEEData
		CompareBlock_L1, CB_NotBlank, ReadProgBlock_L1, LoadProgAddr, WriteProgBlock_L1
WDTCON	0097 	InitializeIO, InitializeBLIO
WPUA	020C 	InitializeIO, InitializeBLIO
SerialServo.asm   X-Ref Table                                            Page: 71
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

WPUA5	0005 	InitializeIO, InitializeBLIO
WR	0001 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
WREG	0009 	ReadAN_L2, ReadAN_L1, ReadAN_Start, Aux0_Digital_Out, Aux1_Digital_Out
		Aux2_Digital_Out, Cmd_SetAuxNDigOut, Cmd_SetAuxNValue_Dig1, Cmd_SetAuxNValue_Dig2
		ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3, CheckParity_L1
		BLP_WriteBuffer
WREN	0002 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock
		WriteProgBlock_Wr
WriteEEData ^	1F0D 	BootLoaderStart
WriteEEData_L1 ^	1F1A 	WriteEEData_L1
WriteProgBlock ^	1F7A 	BLP_WriteBuffer
WriteProgBlock_L1 ^	1F81 	WriteProgBlock_L1
WriteProgBlock_Wr ^	1F93 	WriteProgBlock_L1
Z	0002 	ProgStartVector, CopyToRam_L1, SaveParams_L1, DecTimer, RX_TheByte, GetSerIn
		StoreSerOut, GetSerOut, RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo
		RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end, MainLoop, DM2_NotOverCurrent
		DoModeTwo_MovPlus, DM3_CPV_End, DM3_CalcCurPos, DM3_SetServoPWM, DM3_ErrIsPos, DM3_NoDB
		DM3_PosLimit, DM3_CalcSCmd, DM4_NotOverCurrent, DoMode4_MovPlus, HandleButtons
		ReadAN_Next, ReadAN_L1, Copy7CToSig, HandleRXData_1, Dispatcher_1, Dispatcher_2
		Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_SetUseIdleCenter
		Cmd_SetUseFastPWM, Cmd_SetAuxNConfigDigIn, Cmd_SetAux1ConfigDigIn, Cmd_SetAuxNConfigDigOut
		Cmd_SetAux1ConfigDigOut, Cmd_SetAuxNConfigAnalogIn, Cmd_SetAux1ConfigAnalogIn, Cmd_SetAuxNDigOut
		Cmd_SetAuxNValue_Dig1, Cmd_SetAuxNValue_Dig2, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1
		Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1, Cmd_SendIDString_L1, ReadEncoder, ReadEncoder_1
		ReadEncoder_2, BootLoaderStart, BLP_L2, BLP_TestNum, BLP_IHS_DataType, BLP_IHS_Data
		BLP_IHS_CSum, BLP_Validate, BufferIHData, BIHD_PutInBuff_L1, GetChar, TestErased_L1
		CompareBlock_L1, CB_NotBlank, WriteProgBlock_L1
_C	STATUS,C	DM2_NotOverCurrent, DM4_NotOverCurrent, ReadAN, ReadAN_Next
_Z	STATUS,Z	WriteProgBlock_L1
kDeadBand	0064 	InitializeBLIO
kGripI	0028 	InitializeBLIO
kGripperHC	0004 	CheckGripCurrent
kMaxMode	0004 	Cmd_SetMode
kMaxPulseWidth	3F98 	InitializeBLIO
kMaxT	076C 	ReadEncoder_2, Home_Absolute_2, Home_Absolute_3
kMidPulseWidth	0BB8 	SetMiddlePosition
kMinPulseWidth	0064 	InitializeBLIO
kRS232SyncByteValue	00DD 	RS232_Parse_Byte, RS232_Parse_Sync2
kRS232_MasterAddr	0001 	InitializeBLIO
kRS232_SlaveAddr	0002 	InitializeBLIO
kServoCenterStop	0B81 	InitializeBLIO
kServoDwellTime	9C40 	IRQ_Servo1_20mS, IRQ_Servo1_Idle, StartServo, SetMiddlePosition
kServoFastDwellTime	4E20 	IRQ_Servo1_OH
kServoFastForward	0BE5 	InitializeBLIO
kServoFastReverse	0B1D 	InitializeBLIO
kServoSpeed	000A 	InitializeBLIO
kStandAlone	0000 	Init_AS5047D
kSysFlags	0000 	InitializeBLIO
kSysMode	0003 	InitializeBLIO
kUpper4Bits	003C 	ReadEncoder, ReadEncoder_1, ReadEncoder_2
kssFlags	0019 	InitializeBLIO
kssMaxI	0032 	InitializeBLIO
nvDeadBand	0015 	InitializeBLIO
nvEncoderFlags	0000 	InitializeBLIO, CopyToRam, SaveParams
nvEncoderHome	0001 	InitializeBLIO
nvEncoderOffset	0003 	InitializeBLIO
nvFirstParamByte	nvEncoderFlags	InitializeBLIO, CopyToRam, SaveParams
nvLastParamByte	nvSysFlags	InitializeBLIO
nvRS232_MasterAddr	0011 	InitializeBLIO
nvRS232_SlaveAddr	0012 	InitializeBLIO
nvServoFastForward	0007 	InitializeBLIO
nvServoFastReverse	0005 	InitializeBLIO
nvServoMax_uS	000D 	InitializeBLIO
nvServoMin_uS	000B 	InitializeBLIO
nvServoSpeed	000F 	InitializeBLIO
nvServoStopCenter	0009 	InitializeBLIO
nvSysFlags	001A 	InitializeBLIO
nvSysMode	0010 	InitializeBLIO
nvssAux0Config	0017 	InitializeBLIO
nvssAux1Config	0018 	InitializeBLIO
nvssAux2Config	0019 	InitializeBLIO
nvssFlags	0013 	InitializeBLIO
nvssGripI	0016 	InitializeBLIO
nvssMaxI	0014 	InitializeBLIO
oldCode	0000 	DecTimer, Aux2_ISR_End
ssAux0Config	0058 	HandleAuxIO, Cmd_SetAuxConfig, Cmd_GetAuxConfig, Cmd_SetAuxNValue
		Cmd_GetAuxNValue, DoAuxConfig
ssAux1Config	0059 	Aux0_ISR_End, SetAux1Config
ssAux2Config	005A 	Aux1_ISR_End, SetAux2Config
ssCmdPos	0033 	DoModeTwo, DM2_NotOverCurrent, DoModeTwo_NoSpeed, DoModeThree, DM3_NotOverCurrent
		DM3_ServoThere, DM3_CalcCurPos, DM3_GoRev, DoMode4, DM4_NotOverCurrent, Cmd_SetCmdPos
		Cmd_GetCmdPos, InitializeIO
ssCmdPosVerified	ssStatus+1,2	DM3_NotOverCurrent, Cmd_GetCmdPos
ssCurPos	0035 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_Plus, DoModeTwo_NoSpeed
		DoModeTwo_Go, DM3_ServoHere, DM3_ServoThere, DM3_CalcCurPos, DM3_GoRev, DM3_SetServoPWM
		DM4_NotOverCurrent, DoMode4_Minus_1, DoMode4_Plus_1, DoMode4_Go
ssEnableFastPWM	ssFlags,4	IRQ_Servo1_OH, Cmd_SetUseFastPWM, Cmd_GetUseFastPWM
ssEnableOverCur	ssFlags,0	CheckCurrent, Cmd_SetEnaOvrCur, Cmd_GetEnaOvrCur
ssEncCmdError	ssStatus+1,1	ReadEncoder
ssEncParityError	ssStatus+1,0	ReadEncoder
ssFlags	0054 	IRQ_Servo1_OH, CheckCurrent, DM3_CalcSCmd, DM3_IdleServo, Cmd_SetRevDir
		Cmd_GetRevDir, Cmd_SetEnaOvrCur, Cmd_GetEnaOvrCur, Cmd_SetUseIdleCenter, Cmd_GetUseIdleCenter
		Cmd_SetUseFastPWM, Cmd_GetUseFastPWM
ssGripI	0057 	CheckGripCurrent, Cmd_SetGripI, Cmd_GetGripI
ssGripMCur	ssStatus,5	CheckGripCurrent, Cmd_GetStatus
ssGripOCur	ssStatus,4	CheckGripCurrent, Cmd_GetStatus
ssMaxI	0055 	CheckCurrent, Cmd_SetMaxI, Cmd_GetMaxI
ssMode3IdleCenter	ssFlags,3	DM3_IdleServo, Cmd_SetUseIdleCenter, Cmd_GetUseIdleCenter
SerialServo.asm   X-Ref Table                                            Page: 72
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

ssRX_Timeout	ssStatus,3	RS232_Parse, Cmd_GetStatus
ssReverseDir	ssFlags,1	DM3_CalcSCmd, Cmd_SetRevDir, Cmd_GetRevDir
ssStatus	0038 	RS232_Parse, ML_1, CheckGripCurrent, DoModeTwo, DM2_NotOverCurrent
		DoModeThree, DM3_NotOverCurrent, DM3_CalcCurPos, DM3_GoRev, DM3_IdleServo, DM3_IdleInactive
		DoMode4, DM4_NotOverCurrent, Aux0_HomeSW, Aux0_FwdLimit, Aux0_RevLimit, Aux1_HomeSW
		Aux1_FwdLimit, Aux1_RevLimit, Aux2_HomeSW, Aux2_FwdLimit, Aux2_RevLimit, Cmd_GetCmdPos
		Cmd_GetStatus, ReadEncoder
ssTempFlags	0037 	SystemTick_end, IRQ_Servo1_1, DoModeOne, CheckCurrent, CheckGripCurrent
		DoModeTwo, DM2_NotOverCurrent, DoModeTwo_1, DoModeThree, DM3_CalcCurPos, DM3_IdleServo
		DM3_IdleInactive, DoMode4, DM4_NotOverCurrent, DoMode4_Hold, DoMode4_MovPlus, DoMode4_Go
		DoMode4_1, Copy7CToSig_Done, StartServo, SetMiddlePosition, InitializeIO
ssio_OverCurSD	ssStatus,2	ML_1, DoModeTwo, DM2_NotOverCurrent, DoModeThree, DM3_NotOverCurrent
		DoMode4, DM4_NotOverCurrent
start ^	01EB 	ProgStartVector
useRS232	0001 	InitializeIO
 

X-Ref Table (The UnCalled)
AS5047_ReadANGLEUNCReg !	0B81 	
AS5047_ReadDIAAGCReg !	0B86 	
AS5047_ReadErrorReg !	0B9F 	
AS5047_ReadStgs1Reg !	0B95 	
AS5047_ReadStgs2Reg !	0B9A 	
AS5047_ReadZPOSLReg !	0B90 	
AS5047_ReadZPOSMReg !	0B8B 	
AS5047_Write !	0B51 	
BootLoader !	1E00 	
Cmd_GetCalPot !	0A44 	
Cmd_GetCmdPos_end !	08AA 	
Cmd_SetAux0ConfigDigIn !	0936 	
Delay100uS !	00BD 	
Delay10uS !	00BB 	
Delay40uS !	00BF 	
EEReadW !	00C6 	
EraseBlock !	1F48 	
GetSerOutBytes !	012C 	
HA_SetItPos !	0B2E 	
Home_Absolute !	0AD4 	
IRQ_Ser !	0059 	
IRQ_Servo1 !	001B 	
POP_SerOut !	013E 	
RS232_Parse_DALo !	018B 	
RS232_Parse_Data !	0199 	
StopServo !	0454 	
SystemBlink_DoIt !	0017 	
TestT1_Zero !	00B7 	
TestT2_Zero !	00B3 	
TestT3_Zero !	00AF 	
TestT4_Zero !	00AB 	
WriteProgBlock_end !	1F9C 	
 

Memory Usage Map ('X' = Used, '-' = Unused)
 
0000  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XX--------------
0800  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0AC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0BC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX----------
1E00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1EC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
SerialServo.asm   Memory Usage Map                                       Page: 73
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

1F40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1FC0  : XXXXXXXXXXXX---- ---------------- ---------------- ----------------
 
Program Memory Words Used:2996
Program Memory Words Free:5196
 
UserID
8000  :XXXX
 
Config
8007  :XX
 
EEPROM
F000  : XXXXXXXXXXXXXXXX XXXXXXXXXXX----- ---------------- ----------------
F0C0  : ---------------- ---------------- ---------------- ---------------X
 
Data EEPROM Bytes Used:28
Data EEPROM Bytes Free:228
