SerialServo.asm                                                       Page: 1
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00001 0000 	;====================================================================================================
00002 0000 	;
00003 0000 	;    Filename:      SerialServo.asm
00004 0000 	;    Created:       4/26/2018
00005 0000 	;    File Version:  1.1b4   8/26/2020
00006 0000 	;
00007 0000 	;    Author:        David M. Flynn
00008 0000 	;    Company:       Oxford V.U.E., Inc.
00009 0000 	;    E-Mail:        dflynn@oxfordvue.com
00010 0000 	;    Web Site:      http://www.oxfordvue.com/
00011 0000 	;
00012 0000 	;====================================================================================================
00013 0000 	;    SerialServo is sample code.
00014 0000 	;    Controls a single robot arm joint using an R/C servo (SG90) modified
00015 0000 	;    for continuous rotation.  Features and configurations will be added as needed.
00016 0000 	;
00017 0000 	;    Features: 	TTL Packet Serial
00018 0000 	;	R/C Servo PWM output
00019 0000 	;	Current sensing.
00020 0000 	;	3 Buttons/LEDs for config
00021 0000 	;	Absolute magnetic encoder
00022 0000 	;
00023 0000 	;Mode 0: (LED 1 = off) servo test mode, copy AN4 Pot value x 2 + 1976 to servo PWM.
00024 0000 	;Mode 1: (LED 1 = 1 flash) servo and encoder test mode, AN4 Pot value + 950 - EncoderVal to servo dir.
00025 0000 	;Mode 2: Basic Serial Servo, output servo pulse of ssCmdPos x 0.5uS.
00026 0000 	;Mode 3: Absolute encoder position control. ssCmdPos = 0..4095
00027 0000 	;Mode 4: Gripper force control.
00028 0000 	;
00029 0000 	;    History:
00030 0000 	; 1.1b4   8/26/2020    Addded kCmd_SetKp..., Fixed Batt Volts (AN1), ClampInt bug fixed.
00031 0000 	; 1.1b3   4/10/2020    Improved Mode 3
00032 0000 	; 1.1b2   8/11/2019	Continue fixes for 14bit encoder. New defaults Mode 3 (2950 Â±100, fast, Idle center)
00033 0000 	; 1.1b1   3/21/2019	Port for Rev C PCB
00034 0000 	; 1.0b7   10/3/2018	Mode 3 is working for 4-wheel rover corner pivot motors.
00035 0000 	; 1.0b6   8/18/2018	Moved analog variables to bank 1. Fast blink on error. EncoderOffset for mode3
00036 0000 	; 1.0b5   7/23/2018	Aux IO
00037 0000 	; 1.0b4   7/14/2018	Better defaults. Gripper mode (4).
00038 0000 	; 1.0b3   6/19/2018	Added ssEnableFastPWM
00039 0000 	; 1.0b2   6/3/2018	Servo current is averaged, DD DD Sync bytes and checksum.
00040 0000 	; 1.0b1   6/1/2018	Modes 2 and 3 are working. No current limit yet.
00041 0000 	; 1.0a3   5/31/2018    Added Speed, StopCenter.
00042 0000 	; 1.0a2   5/25/2018	Added some more commands.
00043 0000 	; 1.0a1   5/24/2018	It begins to work.
00044 0000 	; 1.0d1   4/26/2018	First code.
00045 0000 	;
00046 0000 	;====================================================================================================
00047 0000 	; ToDo:
00048 0000 	;
00049 0000 	;
00050 0000 	;====================================================================================================
00051 0000 	;====================================================================================================
00052 0000 	; What happens next:
00053 0000 	;   At power up the system LED will blink.
00054 0000 	;   Mode 0: (LED 1 = off) servo test mode, copy AN4 Pot value to servo.
00055 0000 	;   Mode 1: (LED 1 = 1 flash) servo  and encoder test mode, AN4 Pot value - EncoderVal to servo dir.
00056 0000 	;   Mode 2: Basic Serial Servo, output servo pulse of CmdPos * 0.5uS.
00057 0000 	;   Mode 3: Absolute encoder position control, Single rotation of encoder, Continuous rotation servo.
00058 0000 	;   Mode 4: Gripper force control.
00059 0000 	;====================================================================================================
00060 0000 	;
00061 0000 	;   Pin 1 (RA2/AN2) SW1/LED1 (Active Low Input/Output)
00062 0000 	;   Pin 2 (RA3/AN3) SW2/LED2 (Active Low Input/Output)
00063 0000 	;   Pin 3 (RA4/AN4) n/c
00064 0000 	;   Pin 4 (RA5/MCLR*) VPP/MCLR*
00065 0000 	;   Pin 5 (GND) Ground
00066 0000 	;   Pin 6 (RB0) MagEnc_CSBit (Active Low Output)
00067 0000 	;   Pin 7 (RB1/AN11/SDA1) MISO MagEnc_DataBit (Digital Input)
00068 0000 	;   Pin 8 (RB2/AN10/TX) TTL Serial RX
00069 0000 	;   Pin 9 (RB3/CCP1) Pulse output for Servo
00070 0000 	;
00071 0000 	;   Pin 10 (RB4/AN8/SLC1) SCL1 MagEnc_CLKBit
00072 0000 	;   Pin 11 (RB5/AN7) TTL Serial TX
00073 0000 	;   Pin 12 (RB6/AN5/CCP2) ICSPCLK
00074 0000 	;   Pin 13 (RB7/AN6) ICSPDAT
00075 0000 	;   Pin 14 (Vcc) +5 volts
00076 0000 	;   Pin 15 (RA6) MOSI MagEnc_DataBit (Digital Output)
00077 0000 	;   Pin 16 (RA7/CCP2) LED3 (Active Low Output)(System LED)
00078 0000 	;   Pin 17 (RA0/AN0) Current sensing analog input
00079 0000 	;   Pin 18 (RA1/AN1) Battery voltage sensing analog input
00080 0000 	;
00081 0000 	;====================================================================================================
00082 0000 	;
00083 0000 	;
00084 0000 		list	p=16f1847,r=hex,W=1	; list directive to define processor
00001 0000 		nolist
00002 0000 	;
00003 0000 	;==========================================================================
00004 0000 	;  MPASM PIC16F1847 processor include
00005 0000 	; 
00006 0000 	;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
00007 0000 	;  Modified by DMF 11/16/2013
00008 0000 	;==========================================================================
00009 0000 	;
01163 0000 		NOLIST
01164 0000 	;
00087 0000 		list
00088 0000 	;
00089 8007 EFA4 		__CONFIG _CONFIG1,_FOSC_INTOSC & _WDTE_OFF & _MCLRE_OFF & _IESO_OFF
00090 0000 	;
SerialServo.asm                                                       Page: 2
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00091 0000 	;
00092 0000 	; INTOSC oscillator: I/O function on CLKIN pin
00093 0000 	; WDT disabled
00094 0000 	; PWRT disabled
00095 0000 	; MCLR/VPP pin function is digital input
00096 0000 	; Program memory code protection is disabled
00097 0000 	; Data memory code protection is disabled
00098 0000 	; Brown-out Reset enabled
00099 0000 	; CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin
00100 0000 	; Internal/External Switchover mode is disabled
00101 0000 	; Fail-Safe Clock Monitor is enabled
00102 0000 	;
00103 8008 DFFF 		__CONFIG _CONFIG2,_WRT_OFF & _PLLEN_ON & _LVP_OFF
00104 0000 	;
00105 0000 	; Write protection off
00106 0000 	; 4x PLL Enabled
00107 0000 	; Stack Overflow or Underflow will cause a Reset
00108 0000 	; Brown-out Reset Voltage (Vbor), low trip point selected.
00109 0000 	; Low-voltage programming enabled
00110 0000 	;
00111 0000 	; '__CONFIG' directive is used to embed configuration data within .asm file.
00112 0000 	; The lables following the directive are located in the respective .inc file.
00113 0000 	; See respective data sheet for additional information on configuration word.
00114 0000 	;
00115 0000 		constant	oldCode=0
00116 0000 		constant	useRS232=1
00117 0000 		constant	UseEEParams=1
00118 0000 	;
00119 0000 		constant	UseAltSerialPort=1
00120 0000 		constant	RP_LongAddr=0
00121 0000 		constant	RP_AddressBytes=1
00122 0000 		constant	RP_DataBytes=4
00123 0000 		constant	UseRS232SyncBytes=1
00124 0000 00DD 	kRS232SyncByteValue	EQU	0xDD
00125 0000 		constant	UseRS232Chksum=1
00126 0000 		constant               UsePID=0
00127 0000 	;
00128 0000 0001 	kRS232_MasterAddr	EQU	0x01	;Master's Address
00129 0000 0002 	kRS232_SlaveAddr	EQU	0x02	;This Slave's Address
00130 0000 0003 	kSysMode	EQU	.3	;Default Mode
00131 0000 0020 	Default_Kp	EQU	.32	;Fxd4.4 10*16
00132 0000 0000 	Default_Ki	EQU	0	; max gain is 255 = 15 15/16
00133 0000 0000 	Default_Kd	EQU	0
00134 0000 0004 	kGripperHC	EQU	0x04	;Gripper hysteresis
00135 0000 	;
00136 0000 0003 	#Define	_C	STATUS,C
00137 0000 0003 	#Define	_Z	STATUS,Z
00138 0000 	;
00139 0000 	;====================================================================================================
00142 0000 		nolist
00143 0000 	;
00144 0000 	;    Port A bits
00145 0000 00BF 	PortADDRBits	EQU	b'10111111'
00146 0000 0000 	PortAValue	EQU	b'00000000'
00147 0000 0003 	ANSELA_Val	EQU	b'00000011'	;RA0/AN0, RA4/AN4
00148 0000 	;
00149 0000 000C 	#Define	RA0_In	PORTA,0	;Current, Analog Input
00150 0000 000C 	#Define	RA1_In	PORTA,1	;Battery Volts, Analog Input
00151 0000 000C 	#Define	SW1_In	PORTA,2	;SW1/LED1
00152 0000 000C 	#Define	SW2_In	PORTA,3	;SW2/LED2
00153 0000 000C 	#Define	SW3_In	PORTA,4	;n/c on Rev C
00154 0000 000C 	#Define	RA5_In	PORTA,5	;VPP/MCLR*
00155 0000 000C 	#Define	RA6_Out	PORTA,6	;MagEnc_DataBit Encoder MOSI (SPI, Digital Output)
00156 0000 000C 	#Define	RA7_In	PORTA,7	;LED3 (Active Low Output)(System LED)
00157 0000 0002 	LED1_Bit	EQU	2	;LED1 (Active Low Output)
00158 0000 0003 	LED2_Bit	EQU	3	;LED2 (Active Low Output)
00159 0000 0007 	SysLED_Bit	EQU	7	;LED3 (Active Low Output)
00160 0000 008C 	#Define	LED1_Tris	TRISA,LED1_Bit	;LED1 (Active Low Output)
00161 0000 010C 	#Define	LED1_Lat	LATA,LED1_Bit	;LED1 (Active Low Output)
00162 0000 008C 	#Define	LED2_Tris	TRISA,LED2_Bit	;LED2 (Active Low Output)
00163 0000 010C 	#Define	LED2_Lat	LATA,LED2_Bit	;LED2 (Active Low Output)
00164 0000 008C 	#Define	SysLED_Tris	TRISA,SysLED_Bit	;LED3 (Active Low Output)
00165 0000 	;
00166 0000 00F8 	Servo_AddrDataMask	EQU	0xF8
00167 0000 	;
00168 0000 	;
00169 0000 	;    Port B bits
00170 0000 00C6 	PortBDDRBits	EQU	b'11000110'	;MagEnc_CSBit, CCP1, MagEnc_CLKBit
00171 0000 0011 	PortBValue	EQU	b'00010001'
00172 0000 0000 	ANSELB_Val	EQU	b'00000000'	;RB5/AN7
00173 0000 	;
00174 0000 010D 	#Define	RB0_Out	LATB,0	;MagEnc_CSBit (Active Low Output)
00175 0000 000D 	#Define	RB1_In	PORTB,1	;MISO MagEnc_DataBit (Digital Input)
00176 0000 000D 	#Define	RB2_In	PORTB,2	;RX Serial Data
00177 0000 000D 	#Define	RB3_Out	PORTB,3	;CCP1 Output
00178 0000 000D 	#Define	RB4_In	PORTB,4	;SCL1 MagEnc_CLKBit
00179 0000 000D 	#Define	RB5_In	PORTB,5	;TX Serial Data
00180 0000 000D 	#Define	RB6_In	PORTB,6	;ICSPCLK
00181 0000 000D 	#Define	RB7_In	PORTB,7	;ICSPDAT
00182 0000 	;
00183 0000 	;
00184 0000 	;========================================================================================
00185 0000 	;========================================================================================
00186 0000 	;
00187 0000 	;Constants
00188 0000 00FF 	All_In	EQU	0xFF
00189 0000 0000 	All_Out	EQU	0x00
00190 0000 	;
00191 0000 0009 	CCP1CON_Clr	EQU	b'00001001'
SerialServo.asm                                                       Page: 3
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00192 0000 0008 	CCP1CON_Set	EQU	b'00001000'
00193 0000 000A 	CCP1CON_Idle	EQU	b'00001010'
00194 0000 	;
00195 0000 	;OSCCON_Value	EQU	b'01110010'	; 8 MHz
00196 0000 00F0 	OSCCON_Value	EQU	b'11110000'	;32MHz
00197 0000 	;
00198 0000 	;T2CON_Value	EQU	b'01001110'	;T2 On, /16 pre, /10 post
00199 0000 004F 	T2CON_Value	EQU	b'01001111'	;T2 On, /64 pre, /10 post
00200 0000 007D 	PR2_Value	EQU	.125
00201 0000 	;
00202 0000 0064 	LEDTIME	EQU	d'100'	;1.00 seconds
00203 0000 000A 	LEDErrorTime	EQU	d'10'
00204 0000 0014 	LEDFastTime	EQU	d'20'
00205 0000 	;
00206 0000 	;T1CON_Val	EQU	b'00000001'	;Fosc=8MHz, PreScale=1,Fosc/4,Timer ON
00207 0000 0021 	T1CON_Val	EQU	b'00100001'	;Fosc=32MHz, PreScale=4,Fosc/4,Timer ON
00208 0000 	;
00209 0000 	;TXSTA_Value	EQU	b'00100000'	;8 bit, TX enabled, Async, low speed
00210 0000 0024 	TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, high speed
00211 0000 0090 	RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00212 0000 0008 	BAUDCON_Value	EQU	b'00001000'	;BRG16=1
00213 0000 	; 8MHz clock low speed (BRGH=0,BRG16=1)
00214 0000 	;Baud_300	EQU	d'1666'	;0.299, -0.02%
00215 0000 	;Baud_1200	EQU	d'416'	;1.199, -0.08%
00216 0000 	;Baud_2400	EQU	d'207'	;2.404, +0.16%
00217 0000 	;Baud_9600	EQU	d'51'	;9.615, +0.16%
00218 0000 	; 32MHz clock low speed (BRGH=1,BRG16=1)
00219 0000 682A 	Baud_300	EQU	.26666	;300, 0.00%
00220 0000 1A0A 	Baud_1200	EQU	.6666	;1200, 0.00%
00221 0000 0D04 	Baud_2400	EQU	.3332	;2400, +0.01%
00222 0000 0340 	Baud_9600	EQU	.832	;9604, +0.04%
00223 0000 01A0 	Baud_19200	EQU	.416	;19.18k, -0.08%
00224 0000 00CF 	Baud_38400	EQU	.207	;38.46k, +0.16%
00225 0000 008A 	Baud_57600	EQU	.138	;57.55k, -0.08%
00226 0000 00CF 	BaudRate	EQU	Baud_38400
00227 0000 	;
00228 0000 9C40 	kServoDwellTime	EQU	.40000	;20mS
00229 0000 4E20 	kServoFastDwellTime	EQU	.20000	;10mS
00230 0000 000A 	kServoSpeed	EQU	.10	;Slow 5uS/Update
00231 0000 0019 	kssFlags	EQU	b'00011001'	;ssEnableFastPWM,ssMode3IdleCenter,ssEnableOverCur=true
00232 0000 0032 	kssMaxI	EQU	.50	;Low
00233 0000 0BB8 	kMidPulseWidth	EQU	.3000	;1500uS
00234 0000 	;
00235 0000 	                       if kSysMode==3
00236 0000 0064 	kMinPulseWidth	EQU	.100	;100 encoder counts
00237 0000 3F98 	kMaxPulseWidth	EQU	.16280	;Max encoder value for ssCmdPos
00238 0000 	                       else
00241 0000 	                       endif
00242 0000 	;
00243 0000 0B81 	kServoCenterStop	EQU	.2945                  ;test value
00244 0000 0BE5 	kServoFastForward	EQU	kServoCenterStop+.100
00245 0000 0B1D 	kServoFastReverse	EQU	kServoCenterStop-.100
00246 0000 0064 	kDeadBand	EQU	.100	;100 encoder counts
00247 0000 0000 	kSysFlags	EQU	.0
00248 0000 0028 	kGripI	EQU	.40
00249 0000 	;
00250 0000 000A 	DebounceTime	EQU	.10
00251 0000 0004 	kMaxMode	EQU	.4
00252 0000 	;
00253 0000 	; AuxIO modes
00254 0000 0000 	kAuxIOnone	EQU	0x00
00255 0000 0001 	kAuxIOLEDBtn	EQU	0x01
00256 0000 0002 	kAuxIODigitalIn	EQU	0x02
00257 0000 0003 	kAuxIODigitalOut	EQU	0x03
00258 0000 0004 	kAuxIOAnalogIn	EQU	0x04
00259 0000 0005 	kAuxIOHomeSw	EQU	0x05
00260 0000 0006 	kAuxIOFwdLimit	EQU	0x06
00261 0000 0007 	kAuxIORevLimit	EQU	0x07
00262 0000 	;
00263 0000 	;================================================================================================
00264 0000 	;***** VARIABLE DEFINITIONS
00265 0000 	; there are 256 bytes of ram, Bank0 0x20..0x7F, Bank1 0xA0..0xEF, Bank2 0x120..0x16F
00266 0000 	; there are 256 bytes of EEPROM starting at 0x00 the EEPROM is not mapped into memory but
00267 0000 	;  accessed through the EEADR and EEDATA registers
00268 0000 	;================================================================================================
00269 0000 	;  Bank0 Ram 020h-06Fh 80 Bytes
00270 0000 	;
00271 0000 		cblock	0x20
00272 0000 	;
00273 0000 0020 		SysLED_Time		;sys LED time
00274 0000 0021 		SysLED_Blinks		;0=1 flash,1,2,3
00275 0000 0022 		SysLED_BlinkCount
00276 0000 0023 		SysLEDCount		;sys LED Timer tick count
00277 0000 	;
00278 0000 0024 		LED1_Blinks		;0=off,1,2,3
00279 0000 0025 		LED2_Blinks
00280 0000 0026 		LED1_BlinkCount		;LED1_Blinks..0
00281 0000 0027 		LED2_BlinkCount
00282 0000 0028 		LED1_Count		;tick count
00283 0000 0029 		LED2_Count
00284 0000 	;
00285 0000 002A 		EEAddrTemp		;EEProm address to read or write
00286 0000 002B 		EEDataTemp		;Data to be writen to EEProm
00287 0000 	;
00288 0000 002C 		Timer1Lo		;1st 16 bit timer
00289 0000 002D 		Timer1Hi		; 50 mS RX timeiout
00290 0000 002E 		Timer2Lo		;2nd 16 bit timer
00291 0000 002F 		Timer2Hi		;
00292 0000 0030 		Timer3Lo		;3rd 16 bit timer
SerialServo.asm                                                       Page: 4
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00293 0000 0031 		Timer3Hi		;GP wait timer
00294 0000 0032 		Timer4Lo		;4th 16 bit timer
00295 0000 0033 		Timer4Hi		; debounce timer
00296 0000 	;
00297 0000 0034 		TXByte		;Next byte to send
00298 0000 0035 		RXByte		;Last byte received
00299 0000 0036 		SerFlags
00300 0000 	;
00301 0000 	;
00302 0000 0037 		ssCmdPos:2		;Commanded position, 0=not used
00303 0000 0039 		ssCurPos:2                                    ;Servo signal in 1/2 microseconds
00304 0000 		                                              ;Mode 3: Target Position
00305 0000 003B 		ssTempFlags
00306 0000 003C 		ssStatus:4		;Status and condition flags for the user.
00307 0000 	;
00308 0000 0040 		EncoderAccum:3		;Accumulated distance
00309 0000 0043 		EncoderVal:2		;Value last read, raw 12 bit data
00310 0000 	;-----------------------
00311 0000 	;Below here are saved in eprom
00312 0000 0045 		EncoderFlags
00313 0000 0046 	                       EncoderHome:2                                 ;Absolute Home
00314 0000 0048 	                       EncoderOffset:2		;Used in mode 2 for single rotation
00315 0000 	;
00316 0000 004A 		ServoFastReverse:2                            ;ServoFastReverse is less than
00317 0000 004C 		ServoFastForward:2                            ; ServoFastForward
00318 0000 004E 		ServoStopCenter:2		;Mode 3 Idle position
00319 0000 0050 		ServoMin_uS:2
00320 0000 0052 		ServoMax_uS:2
00321 0000 0054 		ServoSpeed		;0 = off, 1..63 position change per cycle
00322 0000 	;
00323 0000 	                       if UsePID
00327 0000 		endif
00328 0000 	;
00329 0000 0055 		SysMode
00330 0000 0056 		RS232_MasterAddr
00331 0000 0057 		RS232_SlaveAddr
00332 0000 0058 		ssFlags		;Serial Servo flags
00333 0000 0059 		ssMaxI		;Max Current 0=off
00334 0000 005A 		DeadBand		;Used by Mode 2
00335 0000 005B 		ssGripI		;Gripper tension
00336 0000 005C 		ssAux0Config
00337 0000 005D 		ssAux1Config
00338 0000 005E 		ssAux2Config
00339 0000 005F 		SysFlags		;saved in eprom 0x64 must
00340 0000 				; move something to another
00341 0000 				; bank before adding anything new
00342 0000 	;
00343 0000 		endc
00344 0000 	;--------------------------------------------------------------
00345 0000 	;
00346 0000 0050 	MD3_MinCmd             equ                    ServoMin_uS
00347 0000 0052 	MD3_MaxCmd             equ                    ServoMax_uS
00348 0000 	;
00349 0000 	;---SerFlags bits---
00350 0000 0036 	#Define	DataReceivedFlag	SerFlags,1
00351 0000 0036 	#Define	DataSentFlag	SerFlags,2
00352 0000 	;
00353 0000 	;---ssTempFlags bits---
00354 0000 003B 	#Define	PulseSent	ssTempFlags,0
00355 0000 003B 	#Define	ServoOff	ssTempFlags,1
00356 0000 003B 	#Define	ServoIdle	ssTempFlags,2
00357 0000 003B 	#Define	OverCurrentFlag	ssTempFlags,3
00358 0000 003B 	#Define	GripIMet	ssTempFlags,4
00359 0000 003B 	#Define	GripIOver	ssTempFlags,5
00360 0000 	;
00361 0000 	;----ssStatus bits
00362 0000 003C 	#Define	MD3_FFwd	ssStatus,0
00363 0000 003C 	#Define	MD3_FRev	ssStatus,1
00364 0000 003C 	#Define	ssio_OverCurSD	ssStatus,2	;Servo stopped for over-current
00365 0000 003C 	#Define	ssRX_Timeout	ssStatus,3	;cleared by host read
00366 0000 003C 	#Define	ssGripOCur	ssStatus,4	;cleared by host read
00367 0000 003C 	#Define	ssGripMCur	ssStatus,5	;cleared by host read
00368 0000 	;
00369 0000 	; all bits of ssStatus+1 are cleared by a host kCmd_GetStatus command.
00370 0000 003D 	#Define	ssEncParityError	ssStatus+1,0	;cleared by host read
00371 0000 003D 	#Define	ssEncCmdError	ssStatus+1,1	;cleared by host read	
00372 0000 003D 	#Define                ssCmdPosVerified       ssStatus+1,2
00373 0000 	;
00374 0000 	;---------------
00375 0000 0045 	#Define	FirstRAMParam	EncoderFlags
00376 0000 005F 	#Define	LastRAMParam	SysFlags
00377 0000 	;
00378 0000 	;---ssFlags bits---
00379 0000 0058 	#Define	ssEnableOverCur	ssFlags,0	;disable if current is too high
00380 0000 0058 	#Define	ssReverseDir	ssFlags,1	;if set ServoFastForward<=>ServoFastReverse
00381 0000 	;
00382 0000 0058 	#Define	ssMode3IdleCenter	ssFlags,3	;0= Disable PWM, 1= output ServoStopCenter
00383 0000 0058 	#Define	ssEnableFastPWM	ssFlags,4	;0= 20mS PWM, 1= 10mS PWM
00384 0000 0058 	#Define	ssEnableAN4	ssFlags,5	;0= Mode 0,1 disabled; 1= Enabled;
00385 0000 	;
00386 0000 005F 	#Define	SW1_Flag	SysFlags,0
00387 0000 005F 	#Define	SW2_Flag	SysFlags,1
00388 0000 005F 	#Define	SW3_Flag	SysFlags,2
00389 0000 005F 	#Define	SW4_Flag	SysFlags,3
00390 0000 	;
00391 0000 	;================================================================================================
00392 0000 	;  Bank1 Ram 0A0h-0EFh 80 Bytes
00393 0000 		cblock	0x0A0
00394 0000 00A0 		RX_ParseFlags
SerialServo.asm                                                       Page: 5
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00395 0000 00A1 		RX_Flags
00396 0000 00A2 		RX_DataCount
00397 0000 00A3 		RX_CSUM
00398 0000 00A4 		RX_SrcAdd:RP_AddressBytes
00399 0000 00A5 		RX_DstAdd:RP_AddressBytes
00400 0000 00A6 		RX_TempData:RP_DataBytes
00401 0000 00AA 		RX_Data:RP_DataBytes
00402 0000 00AE 		TX_Data:RP_DataBytes
00403 0000 	;
00404 0000 00B2 		ANFlags
00405 0000 00B3 		Cur_AN0:2		;IServo
00406 0000 00B5 		Cur_AN1:2		;Battery Volts
00407 0000 00B7 		Cur_AN2:2		;SW1_LED1
00408 0000 00B9 		Cur_AN3:2		;SW2_LED2
00409 0000 00BB 		Cur_AN4:2                                     ;SW3_LED3, n/c on Rev C
00410 0000 	;
00411 0000 00BD 		OldAN0Value:2
00412 0000 		endc
00413 0000 	;
00414 0000 00B3 	#Define	ServoCurrent	Cur_AN0
00415 0000 00B5 	#Define	BattVolts	Cur_AN1
00416 0000 00B7 	#Define	ModeZeroPot	Cur_AN2
00417 0000 	;
00418 0000 	;---ANFlags bits---
00419 0000 00B2 	#Define	NewDataAN0	ANFlags,0
00420 0000 00B2 	#Define	NewDataAN1	ANFlags,1
00421 0000 	;
00422 0000 	;================================================================================================
00423 0000 	;  Bank2 Ram 120h-16Fh 80 Bytes
00424 0000 	;
00425 0000 0002 	#Define	Ser_Buff_Bank	2
00426 0000 	;
00427 0000 		cblock	0x120
00428 0000 0120 		Ser_In_Bytes		;Bytes in Ser_In_Buff
00429 0000 0121 		Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00430 0000 0122 		Ser_In_InPtr
00431 0000 0123 		Ser_In_OutPtr
00432 0000 0124 		Ser_Out_InPtr
00433 0000 0125 		Ser_Out_OutPtr
00434 0000 0126 		Ser_In_Buff:20
00435 0000 0146 		Ser_Out_Buff:20
00436 0000 		endc
00437 0000 	;
00438 0000 	;================================================================================================
00439 0000 	;  Bank3 Ram 1A0h-1EFh 80 Bytes
00440 0000 	; PID vars
00441 0000 		cblock	0x1A0
00442 0000 01A0 		derivCount		;This value determins how many times the Derivative term is
00443 0000 				;calculated based on each Integral term.
00444 0000 01A1 		pidOut0		;24-bit Final Result of PID for the "Plant"
00445 0000 01A2 		pidOut1
00446 0000 01A3 		pidOut2
00447 0000 01A4 		error0		;16-bit error, passed to the PID
00448 0000 01A5 		error1
00449 0000 01A6 		a_Error0		;24-bit accumulated error, used for Integral term
00450 0000 01A7 		a_Error1
00451 0000 01A8 		a_Error2
00452 0000 01A9 		p_Error0		;16-bit previous error, used for Derivative term
00453 0000 01AA 		p_Error1
00454 0000 01AB 		d_Error0		;16-bit delta error (error - previous error)
00455 0000 01AC 		d_Error1
00456 0000 	;
00457 0000 01AD 		prop0		;24-bit proportional value
00458 0000 01AE 		prop1
00459 0000 01AF 		prop2
00460 0000 01B0 		integ0		;24-bit Integral value
00461 0000 01B1 		integ1
00462 0000 01B2 		integ2
00463 0000 01B3 		deriv0		;24-bit Derivative value
00464 0000 01B4 		deriv1
00465 0000 01B5 		deriv2
00466 0000 	;
00467 0000 01B6 		pidStat1		;PID bit-status register
00468 0000 01B7 		pidStat2		;PID bit-status register2
00469 0000 	;
00470 0000 	; PIDMath
00471 0000 01B8 		PRODL
00472 0000 01B9 		PRODH
00473 0000 01BA 		AccB0		;LSB
00474 0000 01BB 		AccB1
00475 0000 01BC 		AccB2
00476 0000 01BD 		AccB3		;MSB
00477 0000 01BE 		AArgB0
00478 0000 01BF 		AArgB1
00479 0000 01C0 		AArgB2
00480 0000 01C1 		AArgB3
00481 0000 01C2 		BArgB0
00482 0000 01C3 		BArgB1
00483 0000 01C4 		BArgB2
00484 0000 01C5 		BArgB3
00485 0000 01C6 		RemB0
00486 0000 01C7 		RemB1
00487 0000 01C8 		RemB2
00488 0000 01C9 		RemB3
00489 0000 		endc
00490 0000 	;
00491 0000 	;___________________________ pidStat1 register ________________________________________________
00492 0000 	;|  bit 7   |   bit 6    |  bit 5 |    bit 4   |   bit 3    |  bit 2   |   bit 1    |  bit 0   |
00493 0000 	;| pid_sign | d_err_sign |        | p_err_sign | a_err_sign | err_sign |  a_err_z   |  err_z   |
SerialServo.asm                                                       Page: 6
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00494 0000 	;|__________|____________|________|____________|____________|__________|____________|__________|
00495 0000 	;
00496 0000 01B6 	#Define	err_z	pidStat1,0	;error zero flag, Zero = set
00497 0000 01B6 	#Define	a_err_z	pidStat1,1	;a_error zero flag, Zero = set
00498 0000 01B6 	#Define	err_sign	pidStat1,2	;error sign flag, Pos = set/ Neg = clear
00499 0000 01B6 	#Define	a_err_sign	pidStat1,3	;a_error sign flag, Pos = set/ Neg = clear
00500 0000 01B6 	#Define	p_err_sign	pidStat1,4	;p_error sign flag, Pos = set/ Neg = clear
00501 0000 	;
00502 0000 01B6 	#Define	d_err_sign	pidStat1,6	;d_error sign flag, Pos = set/ Neg = clear
00503 0000 01B6 	#Define	pid_sign	pidStat1,7	;PID result sign flag, Pos = set/ Neg = clear
00504 0000 	;
00505 0000 	;________________________________ pidStat2 register______________________________________
00506 0000 	;| bit 7 |  bit 6  |  bit 5   |    bit 4   |   bit 3    |  bit 2    |   bit 1    |  bit 0   |
00507 0000 	;|       |         |          | error_limit| deriv_sign | BArg_sign | AArg_Sign  | d_err_z  |
00508 0000 	;|_______|_________|__________|____________|____________|___________|____________|__________|
00509 0000 	;
00510 0000 01B7 	#Define	d_err_z	pidStat2,0	;d_error zero flag, Zero = set
00511 0000 01B7 	#Define	AArg_sign	pidStat2,1	;AArg sign flag, Pos = set/ Neg = clear
00512 0000 01B7 	#Define	BArg_sign	pidStat2,2	;BArg sign flag, Pos = set/ Neg = clear
00513 0000 01B7 	#Define	deriv_sign	pidStat2,3	;deriv sign flag, Pos = set/ Neg = clear
00514 0000 01B7 	#Define	error_limit	pidStat2,4	;Error limit exceeded flag, error = set/ no error = clear
00515 0000 	;
00516 0000 	;=========================================================================================
00517 0000 	;  Bank4 Ram 220h-26Fh 80 Bytes
00518 0000 	;=========================================================================================
00519 0000 	;  Bank5 Ram 2A0h-2EFh 80 Bytes
00520 0000 	;
00521 0000 		cblock	0x2A0
00522 0000 02A0 		SigOutTime
00523 0000 02A1 		SigOutTimeH
00524 0000 02A2 		CalcdDwell
00525 0000 02A3 		CalcdDwellH
00526 0000 		endc
00527 0000 	;
00528 0000 	;=======================================================================================================
00529 0000 	;  Common Ram 70-7F same for all banks
00530 0000 	;      except for ISR_W_Temp these are used for paramiter passing and temp vars
00531 0000 	;=======================================================================================================
00532 0000 	;
00533 0000 		cblock	0x70
00534 0000 0070 		Param70
00535 0000 0071 		Param71
00536 0000 0072 		Param72
00537 0000 0073 		Param73
00538 0000 0074 		Param74
00539 0000 0075 		Param75
00540 0000 0076 		Param76
00541 0000 0077 		Param77
00542 0000 0078 		Param78
00543 0000 0079 		Param79
00544 0000 007A 		Param7A
00545 0000 007B 		Param7B
00546 0000 007C 		Param7C
00547 0000 007D 		Param7D
00548 0000 007E 		Param7E
00549 0000 007F 		Param7F
00550 0000 		endc
00551 0000 	;
00552 0000 	;=========================================================================================
00553 0000 	;Conditions
00554 0000 0080 	HasISR	EQU	0x80	;used to enable interupts 0x80=true 0x00=false
00555 0000 	;
00556 0000 0070 	AS5047D_Flags	EQU	Param70	;Check that Param70 is OK to use
00557 0000 	;
00558 0000 0070 	#Define	ParityErrFlag	AS5047D_Flags,0
00559 0000 0070 	#Define	AngleReadFlag	AS5047D_Flags,1
00560 0000 0070 	#define	ContinueReadFlag	AS5047D_Flags,2
00561 0000 0070 	#Define	CmdErrorFlag	AS5047D_Flags,3
00562 0000 	;
00563 0000 	;=========================================================================================
00564 0000 	;==============================================================================================
00565 0000 	; ID Locations
00566 0000 		__idlocs	0x10b4
00567 0000 	;
00568 0000 	;==============================================================================================
00569 0000 	; EEPROM locations (NV-RAM) 0x00..0x7F (offsets)
00570 0000 	;
00571 0000 	; default values
00572 0000 		ORG	0xF000
00573 F000 0000 		de	0x00	;nvEncoderFlags
00574 F001 0000 0000 		de	0x00,0x00	;nvEncoderHome
00575 F003 0000 0000 		de	0x00,0x00	;nvEncoderOffset
00576 F005 001D 		de	low kServoFastReverse
00577 F006 000B 		de	high kServoFastReverse
00578 F007 00E5 		de	low kServoFastForward
00579 F008 000B 		de	high kServoFastForward
00580 F009 0081 		de	low kServoCenterStop	;nvServoStopCenter
00581 F00A 000B 		de	high kServoCenterStop
00582 F00B 0064 		de	low kMinPulseWidth	;nvServoMin_uS
00583 F00C 0000 		de	high kMinPulseWidth
00584 F00D 0098 		de	low kMaxPulseWidth	;nvServoMax_uS
00585 F00E 003F 		de	high kMaxPulseWidth
00586 F00F 000A 		de	kServoSpeed	;nvServoSpeed
00587 F010 		if UsePID
00591 F010 		endif
00592 F010 0003 		de	kSysMode	;nvSysMode
00593 F011 0001 		de	kRS232_MasterAddr	;nvRS232_MasterAddr, 0x0F
00594 F012 0002 		de	kRS232_SlaveAddr	;nvRS232_SlaveAddr, 0x10
00595 F013 0019 		de	kssFlags	;nvssFlags
SerialServo.asm                                                       Page: 7
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00596 F014 0032 		de	kssMaxI	;nvssMaxI
00597 F015 0064 		de	kDeadBand	;nvDeadBand
00598 F016 0028 		de	kGripI
00599 F017 0000 		de	0x00	;ssAux0Config
00600 F018 0000 		de	0x00	;ssAux1Config
00601 F019 0000 		de	0x00	;ssAux2Config
00602 F01A 0000 		de	kSysFlags	;nvSysFlags
00603 F01B 	;
00604 F01B 		ORG	0xF0FF
00605 F0FF 0000 		de	0x00	;Skip BootLoader
00606 F100 	;
00607 F100 		cblock	0x0000
00608 F100 	;
00609 F100 0000 		nvEncoderFlags
00610 F100 0001 	                       nvEncoderHome:2
00611 F100 0003 	                       nvEncoderOffset:2
00612 F100 	;
00613 F100 0005 		nvServoFastReverse:2
00614 F100 0007 		nvServoFastForward:2
00615 F100 0009 		nvServoStopCenter:2
00616 F100 000B 		nvServoMin_uS:2
00617 F100 000D 		nvServoMax_uS:2
00618 F100 000F 		nvServoSpeed
00619 F100 	;
00620 F100 		if UsePID
00624 F100 	                       endif
00625 F100 	;
00626 F100 0010 		nvSysMode
00627 F100 0011 		nvRS232_MasterAddr
00628 F100 0012 		nvRS232_SlaveAddr
00629 F100 0013 		nvssFlags
00630 F100 0014 		nvssMaxI
00631 F100 0015 		nvDeadBand
00632 F100 0016 		nvssGripI
00633 F100 0017 		nvssAux0Config
00634 F100 0018 		nvssAux1Config
00635 F100 0019 		nvssAux2Config
00636 F100 001A 		nvSysFlags
00637 F100 		endc
00638 F100 	;
00639 F100 0000 	#Define	nvFirstParamByte	nvEncoderFlags
00640 F100 001A 	#Define	nvLastParamByte	nvSysFlags
00641 F100 	;
00642 F100 	;
00643 F100 	;==============================================================================================
00644 F100 	;============================================================================================
00645 F100 	;
00646 F100 1E00 	BootLoaderStart	EQU	0x1E00
00647 F100 	;
00648 F100 		ORG	0x000	; processor reset vector
00649 0000 319E 		movlp	BootLoaderStart
00650 0001 2E00 		goto	BootLoaderStart
00651 0002 018A 	ProgStartVector	CLRF	PCLATH
00652 0003 2A58 	  	goto	start	; go to beginning of program
00653 0004 	;
00654 0004 	;===============================================================================================
00655 0004 	; Interupt Service Routine
00656 0004 	;
00657 0004 	; we loop through the interupt service routing every 0.008192 seconds
00658 0004 	;
00659 0004 	;
00660 0004 		ORG	0x004	; interrupt vector location
00661 0004 018A 		CLRF	PCLATH
00662 0005 0188 		CLRF	BSR	; bank0
00663 0006 	;
00664 0006 	;
00665 0006 1C91 		BTFSS	PIR1,TMR2IF
00666 0007 2888 		goto	SystemTick_end
00667 0008 	;
00668 0008 1091 		BCF	PIR1,TMR2IF	; reset interupt flag bit
00669 0009 	;------------------
00670 0009 	; These routines run 100 times per second
00671 0009 	;
00672 0009 	;------------------
00673 0009 	;Decrement timers until they are zero
00674 0009 	;
00675 0009 210A 		call	DecTimer1	;if timer 1 is not zero decrement
00676 000A 2108 		call	DecTimer2
00677 000B 2106 		call	DecTimer3
00678 000C 2104 		call	DecTimer4
00679 000D 	;
00680 000D 	;-----------------------------------------------------------------
00681 000D 	; blink LEDs
00682 000D 	;
00683 000D 	; All LEDs off
00684 000D 0021 		movlb	0x01	;bank 1
00685 000E 178C 		bsf	SysLED_Tris
00686 000F 	;
00687 000F 150C 		BSF	LED1_Tris
00688 0010 158C 		BSF	LED2_Tris
00689 0011 	;
00690 0011 	; Read Switches
00691 0011 0020 		movlb	0x00	;bank 0
00692 0012 	;--------------------
00693 0012 	; Sys LED time
00694 0012 0BA3 		DECFSZ	SysLEDCount,F	;Is it time?
00695 0013 3208 		bra	SystemBlink_end	; No, not yet
00696 0014 	;
00697 0014 08A1 		movf	SysLED_Blinks,F
SerialServo.asm                                                       Page: 8
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00698 0015 		SKPNZ		;Standard Blinking?
00698 0015 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00699 0016 3200 		bra	SystemBlink_Std	; Yes
00700 0017 	;
00701 0017 	; custom blinking
00702 0017 	;
00703 0017 01A2 	SystemBlink_Std	CLRF	SysLED_BlinkCount
00704 0018 0820 		MOVF	SysLED_Time,W
00705 0019 00A3 	SystemBlink_DoIt	MOVWF	SysLEDCount
00706 001A 0021 		movlb	0x01	;bank 1
00707 001B 138C 		bcf	SysLED_Tris	;LED ON
00708 001C 	SystemBlink_end:
00709 001C 	;--------------------
00710 001C 	; Flash LEDs
00711 001C 0020 		movlb	0x00	;bank 0
00712 001D 085C 		movf	ssAux0Config,W
00713 001E 390F 		andlw	0x0F
00714 001F 3C01 		sublw	kAuxIOLEDBtn
00715 0020 		SKPZ
00715 0020 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00716 0021 3220 		bra	LED1_Blink_end
00717 0022 	; Get Button Value
00718 0022 0021 		movlb	0x01	;bank 1
00719 0023 150C 		BSF	LED1_Tris
00720 0024 0020 		movlb	0x00	;bank 0
00721 0025 105F 		BCF	SW1_Flag
00722 0026 1D0C 		BTFSS	SW1_In
00723 0027 145F 		BSF	SW1_Flag
00724 0028 	;
00725 0028 08A4 		movf	LED1_Blinks,F
00726 0029 		SKPZ		;LED1 active?
00726 0029 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00727 002A 3203 		bra	LED1_Blinking	; Yes
00728 002B 01A6 		clrf	LED1_BlinkCount
00729 002C 01A8 		clrf	LED1_Count
00730 002D 3214 		bra	LED1_Blink_end
00731 002E 	;
00732 002E 0828 	LED1_Blinking	movf	LED1_Count,W
00733 002F 0426 		iorwf	LED1_BlinkCount,W
00734 0030 		SKPNZ		;Startup?
00734 0030 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00735 0031 320A 		bra	LED1_Start
00736 0032 	;
00737 0032 0BA8 		decfsz	LED1_Count,F	;Done w/ blink
00738 0033 320E 		bra	LED1_Blink_end	; no
00739 0034 	;
00740 0034 08A6 		movf	LED1_BlinkCount,F
00741 0035 		SKPNZ		;Done w/ cycle?
00741 0035 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00742 0036 3205 		bra	LED1_Start	; Yes
00743 0037 	;
00744 0037 0BA6 		decfsz	LED1_BlinkCount,F
00745 0038 3205 		bra	LED1_NextBlink
00746 0039 3064 		movlw	LEDTIME	;long off time
00747 003A 00A8 		movwf	LED1_Count
00748 003B 3206 		bra	LED1_Blink_end
00749 003C 	;
00750 003C 0824 	LED1_Start	movf	LED1_Blinks,W
00751 003D 00A6 		movwf	LED1_BlinkCount
00752 003E 3014 	LED1_NextBlink	movlw	LEDFastTime
00753 003F 00A8 		movwf	LED1_Count
00754 0040 	;
00755 0040 0021 		movlb	0x01
00756 0041 110C 		BCF	LED1_Tris
00757 0042 	LED1_Blink_end:
00758 0042 	;-------------
00759 0042 	;kAuxIODigitalOut
00760 0042 0020 		movlb	0x00	;bank 0
00761 0043 085C 		movf	ssAux0Config,W
00762 0044 390F 		andlw	0x0F
00763 0045 3C03 		sublw	kAuxIODigitalOut
00764 0046 		SKPZ
00764 0046 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00765 0047 320A 		bra	Aux0DigOut_end
00766 0048 	;
00767 0048 1C24 		btfss	LED1_Blinks,0
00768 0049 3203 		bra	Aux0DigOut_1
00769 004A 0022 		movlb	0x02	;bank 2
00770 004B 150C 		bsf	LED1_Lat
00771 004C 3203 		bra	Aux0DigOut_2
00772 004D 	;
00773 004D 0022 	Aux0DigOut_1	movlb	0x02	;bank 2
00774 004E 110C 		bcf	LED1_Lat
00775 004F 3200 		bra	Aux0DigOut_2
00776 0050 	;
00777 0050 0021 	Aux0DigOut_2	movlb	0x01	;bank 1
00778 0051 110C 		BCF	LED1_Tris
00779 0052 	Aux0DigOut_end:
00780 0052 	;-------------
00781 0052 0020 		movlb	0x00	;bank 0
00782 0053 085D 		movf	ssAux1Config,W
00783 0054 390F 		andlw	0x0F
00784 0055 3C01 		sublw	kAuxIOLEDBtn
00785 0056 		SKPZ
00785 0056 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00786 0057 3220 		bra	LED2_Blink_end
00787 0058 	; Get Button Value
00788 0058 0021 		movlb	0x01	;bank 1
00789 0059 158C 		BSF	LED2_Tris
SerialServo.asm                                                       Page: 9
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00790 005A 0020 		movlb	0x00	;bank 0
00791 005B 10DF 		BCF	SW2_Flag
00792 005C 1D8C 		BTFSS	SW2_In
00793 005D 14DF 		BSF	SW2_Flag
00794 005E 	;
00795 005E 08A5 		movf	LED2_Blinks,F
00796 005F 		SKPZ		;LED2 active?
00796 005F 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00797 0060 3203 		bra	LED2_Blinking	; Yes
00798 0061 01A7 		clrf	LED2_BlinkCount
00799 0062 01A9 		clrf	LED2_Count
00800 0063 3214 		bra	LED2_Blink_end
00801 0064 	;
00802 0064 0829 	LED2_Blinking	movf	LED2_Count,W
00803 0065 0427 		iorwf	LED2_BlinkCount,W
00804 0066 		SKPNZ		;Startup?
00804 0066 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00805 0067 320A 		bra	LED2_Start
00806 0068 	;
00807 0068 0BA9 		decfsz	LED2_Count,F	;Done w/ blink
00808 0069 320E 		bra	LED2_Blink_end	; no
00809 006A 	;
00810 006A 08A7 		movf	LED2_BlinkCount,F
00811 006B 		SKPNZ		;Done w/ cycle?
00811 006B 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00812 006C 3205 		bra	LED2_Start	; Yes
00813 006D 	;
00814 006D 0BA7 		decfsz	LED2_BlinkCount,F
00815 006E 3205 		bra	LED2_NextBlink
00816 006F 3064 		movlw	LEDTIME	;long off time
00817 0070 00A9 		movwf	LED2_Count
00818 0071 3206 		bra	LED2_Blink_end
00819 0072 	;
00820 0072 0825 	LED2_Start	movf	LED2_Blinks,W
00821 0073 00A7 		movwf	LED2_BlinkCount
00822 0074 3014 	LED2_NextBlink	movlw	LEDFastTime
00823 0075 00A9 		movwf	LED2_Count
00824 0076 	;
00825 0076 0021 		movlb	0x01
00826 0077 118C 		BCF	LED2_Tris
00827 0078 	LED2_Blink_end:
00828 0078 	;-------------
00829 0078 	;kAuxIODigitalOut
00830 0078 0020 		movlb	0x00	;bank 0
00831 0079 085D 		movf	ssAux1Config,W
00832 007A 390F 		andlw	0x0F
00833 007B 3C03 		sublw	kAuxIODigitalOut
00834 007C 		SKPZ
00834 007C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00835 007D 320A 		bra	Aux1DigOut_end
00836 007E 	;
00837 007E 1C25 		btfss	LED2_Blinks,0
00838 007F 3203 		bra	Aux1DigOut_1
00839 0080 0022 		movlb	0x02	;bank 2
00840 0081 158C 		bsf	LED2_Lat
00841 0082 3203 		bra	Aux1DigOut_2
00842 0083 	;
00843 0083 0022 	Aux1DigOut_1	movlb	0x02	;bank 2
00844 0084 118C 		bcf	LED2_Lat
00845 0085 3200 		bra	Aux1DigOut_2
00846 0086 	;
00847 0086 0021 	Aux1DigOut_2	movlb	0x01	;bank 1
00848 0087 118C 		BCF	LED2_Tris
00849 0088 	Aux1DigOut_end:
00850 0088 	;-------------
00851 0088 	;
00852 0088 	SystemTick_end:
00853 0088 	;
00854 0088 	;==================================================================================
00855 0088 	;
00856 0088 	; Handle CCP1 Interupt Flag, Enter w/ bank 0 selected
00857 0088 	;
00858 0088 0020 	IRQ_Servo1	MOVLB	0	;bank 0
00859 0089 1D11 		BTFSS	PIR1,CCP1IF
00860 008A 323B 		bra	IRQ_Servo1_End
00861 008B 	;
00862 008B 143B 		bsf	PulseSent	;ok to update CurPos
00863 008C 	;
00864 008C 1CBB 		BTFSS	ServoOff	;Are we sending a pulse?
00865 008D 3204 		bra	IRQ_Servo1_1	; Yes
00866 008E 	;
00867 008E 	;Servo is off, idle CCP1 and keep output low
00868 008E 0025 		MOVLB	0x05	;Bank 5
00869 008F 300A 		movlw	CCP1CON_Idle
00870 0090 0093 		movwf	CCP1CON
00871 0091 322E 		bra	IRQ_Servo1_Dwell
00872 0092 	;
00873 0092 193B 	IRQ_Servo1_1	btfsc	ServoIdle
00874 0093 321E 		bra	IRQ_Servo1_Idle
00875 0094 0025 		MOVLB	0x05	;Bank 5
00876 0095 1893 		BTFSC	CCP1CON,CCP1M1	;Idling?
00877 0096 3227 		bra	IRQ_Servo1_OL	; Yes, go high after dwell
00878 0097 1813 		BTFSC	CCP1CON,CCP1M0	;Cleared output on match?
00879 0098 3225 		bra	IRQ_Servo1_OL	; No
00880 0099 	; An output just went high
00881 0099 	;
00882 0099 0820 	IRQ_Servo1_OH	MOVF	SigOutTime,W	;Put the pulse into the CCP reg.
00883 009A 0791 		ADDWF	CCPR1L,F
00884 009B 0821 		MOVF	SigOutTime+1,W
SerialServo.asm                                                       Page: 10
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00885 009C 3D92 		ADDWFC	CCPR1H,F
00886 009D 3009 		MOVLW	CCP1CON_Clr	;Clear output on match
00887 009E 0093 		MOVWF	CCP1CON	;CCP1 clr on match
00888 009F 	;Calculate dwell time
00889 009F 0020 		movlb	0	;bank 0
00890 00A0 1E58 		btfss	ssEnableFastPWM
00891 00A1 3206 		bra	IRQ_Servo1_20mS
00892 00A2 0025 		movlb	5	;Bank 5
00893 00A3 3020 		MOVLW	LOW kServoFastDwellTime
00894 00A4 00A2 		MOVWF	CalcdDwell
00895 00A5 304E 		MOVLW	HIGH kServoFastDwellTime
00896 00A6 00A3 		MOVWF	CalcdDwellH
00897 00A7 3205 		bra	IRQ_Servo1_CalcDwell
00898 00A8 	;
00899 00A8 0025 	IRQ_Servo1_20mS	movlb	5	;Bank 5
00900 00A9 3040 		MOVLW	LOW kServoDwellTime
00901 00AA 00A2 		MOVWF	CalcdDwell
00902 00AB 309C 		MOVLW	HIGH kServoDwellTime
00903 00AC 00A3 		MOVWF	CalcdDwellH
00904 00AD 	;
00905 00AD 0820 	IRQ_Servo1_CalcDwell	MOVF	SigOutTime,W
00906 00AE 02A2 		SUBWF	CalcdDwell,F
00907 00AF 0821 		MOVF	SigOutTime+1,W
00908 00B0 3BA3 		SUBWFB	CalcdDwellH,F
00909 00B1 3212 		bra	IRQ_Servo1_X
00910 00B2 	;
00911 00B2 0025 	IRQ_Servo1_Idle	MOVLB	0x05
00912 00B3 1893 		BTFSC	CCP1CON,CCP1M1	;Idling?
00913 00B4 320B 		bra	IRQ_Servo1_Dwell	; yes, continue idling.
00914 00B5 1C13 		BTFSS	CCP1CON,CCP1M0	;Just went low?
00915 00B6 33E2 		bra	IRQ_Servo1_OH	; No, finish pulse
00916 00B7 300A 		movlw	CCP1CON_Idle	; Yes, start idling
00917 00B8 0093 		movwf	CCP1CON
00918 00B9 3040 		MOVLW	LOW kServoDwellTime
00919 00BA 00A2 		MOVWF	CalcdDwell
00920 00BB 309C 		MOVLW	HIGH kServoDwellTime
00921 00BC 00A3 		MOVWF	CalcdDwellH
00922 00BD 3202 		bra	IRQ_Servo1_Dwell
00923 00BE 	;
00924 00BE 	; output went low so this cycle is done
00925 00BE 3008 	IRQ_Servo1_OL	MOVLW	CCP1CON_Set	;Set output on match
00926 00BF 0093 		MOVWF	CCP1CON
00927 00C0 	;
00928 00C0 0822 	IRQ_Servo1_Dwell	MOVF	CalcdDwell,W
00929 00C1 0791 		ADDWF	CCPR1L,F
00930 00C2 0823 		MOVF	CalcdDwellH,W
00931 00C3 3D92 		ADDWFC	CCPR1H,F
00932 00C4 	;
00933 00C4 0020 	IRQ_Servo1_X	MOVLB	0x00
00934 00C5 1111 		BCF	PIR1,CCP1IF
00935 00C6 	IRQ_Servo1_End:
00936 00C6 	;-----------------------------------------------------------------------------------------
00937 00C6 	;AUSART Serial ISR
00938 00C6 	;
00939 00C6 1E91 	IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00940 00C7 3201 		BRA	IRQ_Ser_End
00941 00C8 215E 		CALL	RX_TheByte
00942 00C9 	;
00943 00C9 	IRQ_Ser_End:
00944 00C9 	;-----------------------------------------------------------------------------------------
00945 00C9 0009 		retfie		; return from interrupt
00946 00CA 	;
00947 00CA 	;
00948 00CA 	;=========================================================================================
00949 00CA 	;*****************************************************************************************
00950 00CA 	;=========================================================================================
00951 00CA 	;
00952 00CA 		include <F1847_Common.inc>
00001 00CA 	;=========================================================================================
00002 00CA 	; Commonly used routines PIC16F1847 version
00003 00CA 	;
00004 00CA 	;    Filename:      F1847 Common.inc
00005 00CA 	;    Date:          4/6/2019
00006 00CA 	;    File Version:  1.0.2
00007 00CA 	;
00008 00CA 	;    Author:        David M. Flynn
00009 00CA 	;    Company:       Oxford V.U.E., Inc.
00010 00CA 	;    E-Mail:        dflynn@oxfordvue.com
00011 00CA 	;    Web Site:      http://www.oxfordvue.com/
00012 00CA 	;
00013 00CA 	;=========================================================================================
00014 00CA 	;    History:
00015 00CA 	;
00016 00CA 	; 1.0.2  4/6/2019	Fixes to EERead/EEwrite
00017 00CA 	; 1.0.2 2/16/2019	Fix: added FSR0H to DecTimer.
00018 00CA 	; 1.0.1 11/21/2015	Updates DecTimer.
00019 00CA 	; 1.0   11/16/2013	Updated from F648A Common.inc
00020 00CA 	;
00021 00CA 	;=========================================================================================
00022 00CA 	; Routines:
00023 00CA 	;
00024 00CA 	; ClearRam	(2+0) Clears all RAM, call once before initializing variables, FSR0
00025 00CA 	; CopyToRam	(1+0) copy param memory (EEPROM) to ram, call once, FSR0
00026 00CA 	; SaveParams	(1+0) copy ram to param memory (EEPROM), FSR0
00027 00CA 	;
00028 00CA 	;  Set FSR0H before calling these routines
00029 00CA 	; DecTimer4	(0+0) Decrement routine for 16 bit timers, FSR0
00030 00CA 	; DecTimer3
00031 00CA 	; DecTimer2
SerialServo.asm                                                       Page: 11
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00032 00CA 	; DecTimer1
00033 00CA 	; DecTimer	(0+0) High byte of counter address in W
00034 00CA 	;
00035 00CA 	; TestT4_Zero	Test for 16 bit timers = zero
00036 00CA 	; TestT3_Zero	If Timer is zero return Z flag,1 else Z=0
00037 00CA 	; TestT2_Zero
00038 00CA 	; TestT1_Zero
00039 00CA 	;
00040 00CA 	; Delay10uS	(0+0)Delay uS    1 cycle = 1uS, 8Mhz clock version
00041 00CA 	; Delay100uS
00042 00CA 	; Delay40uS
00043 00CA 	; DelayWuS
00044 00CA 	;
00045 00CA 	; EEReadW	(0+0) Read EEPROM address in W
00046 00CA 	; EERead	(0+0) Read EEPROM address in EEAddrTemp
00047 00CA 	; EEWriteW	(0+0) Write EEPROM address in W, Data in EEDataTemp
00048 00CA 	; EEWrite	(0+0) Write EEPROM address in EEAdrTemp, Data in EEDataTemp, FSR0
00049 00CA 	;
00050 00CA 	;=========================================================================================
00051 00CA 		ifndef UseEEParams
00053 00CA 		endif
00054 00CA 	;=========================================================================================
00055 00CA 	; Clears all RAM
00056 00CA 	; Entry: none
00057 00CA 	; Exit: none
00058 00CA 	; RAM used: All
00059 00CA 	; Calls:(2+0) ClearRam_L2
00060 00CA 	;
00061 00CA 0020 	ClearRam	MOVLB	0x00
00062 00CB 305F 		MOVLW	0x5F	;Clear 20h-7Eh, 95 bytes
00063 00CC 00FF 		MOVWF	Param7F
00064 00CD 3020 		MOVLW	0x20
00065 00CE 0084 		MOVWF	FSR0
00066 00CF 0185 		CLRF	FSR0H
00067 00D0 20E4 		CALL	ClearRam_L2
00068 00D1 	;
00069 00D1 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00070 00D2 00FF 		MOVWF	Param7F
00071 00D3 30A0 		MOVLW	0xA0
00072 00D4 0084 		MOVWF	FSR0
00073 00D5 20E4 		CALL	ClearRam_L2
00074 00D6 	;
00075 00D6 0A85 		INCF	FSR0H,F	
00076 00D7 20DB 		CALL	ClearRam_2	;Banks 2,3
00077 00D8 0A85 		INCF	FSR0H,F	
00078 00D9 20DB 		CALL	ClearRam_2	;Banks 4,5
00079 00DA 0A85 		INCF	FSR0H,F	;Banks 6,7
00080 00DB 	;	
00081 00DB 3050 	ClearRam_2	MOVLW	0x50	;Clear 120h-16Fh, 80 bytes
00082 00DC 00FF 		MOVWF	Param7F
00083 00DD 3020 		MOVLW	0x20
00084 00DE 0084 		MOVWF	FSR0
00085 00DF 20E4 		CALL	ClearRam_L2
00086 00E0 	;
00087 00E0 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00088 00E1 00FF 		MOVWF	Param7F
00089 00E2 30A0 		MOVLW	0xA0
00090 00E3 0084 		MOVWF	FSR0
00091 00E4 	;
00092 00E4 0180 	ClearRam_L2	CLRF	INDF0
00093 00E5 0A84 		INCF	FSR0,F
00094 00E6 0BFF 		DECFSZ	Param7F,F
00095 00E7 33FC 		bra	ClearRam_L2
00096 00E8 0008 		RETURN
00097 00E9 	;
00098 00E9 		if UseEEParams
00099 00E9 	;==========================================================================
00100 00E9 	; copy param memory to ram
00101 00E9 	;
00102 00E9 3000 	CopyToRam	MOVLW	nvFirstParamByte
00103 00EA 00AA 		MOVWF	EEAddrTemp
00104 00EB 3045 		MOVLW	FirstRAMParam
00105 00EC 0084 		MOVWF	FSR0L
00106 00ED 0185 		CLRF	FSR0H
00107 00EE 2134 	CopyToRam_L1	CALL	EERead
00108 00EF 001A 		movwi	FSR0++
00109 00F0 0AAA 		INCF	EEAddrTemp,F
00110 00F1 3060 		MOVLW	LastRAMParam+1
00111 00F2 0204 		SUBWF	FSR0L,W
00112 00F3 		SKPZ
00112 00F3 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00113 00F4 33F9 		BRA	CopyToRam_L1
00114 00F5 0008 		RETURN
00115 00F6 	;
00116 00F6 	;===========================================================================
00117 00F6 	; copy ram to param memory
00118 00F6 	;
00119 00F6 3000 	SaveParams	MOVLW	nvFirstParamByte
00120 00F7 00AA 		MOVWF	EEAddrTemp
00121 00F8 3045 		MOVLW	FirstRAMParam
00122 00F9 0084 		MOVWF	FSR0L
00123 00FA 0185 		CLRF	FSR0H
00124 00FB 0012 	SaveParams_L1	moviw	FSR0++
00125 00FC 00AB 		MOVWF	EEDataTemp
00126 00FD 213E 		CALL	EEWrite
00127 00FE 0AAA 		INCF	EEAddrTemp,F
00128 00FF 3060 		MOVLW	LastRAMParam+1	;last byte
00129 0100 0204 		SUBWF	FSR0L,W
00130 0101 		SKPZ
SerialServo.asm                                                       Page: 12
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00130 0101 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00131 0102 33F8 		BRA	SaveParams_L1
00132 0103 0008 		RETURN
00133 0104 	;
00134 0104 		endif
00135 0104 	;=====================================================================================================
00136 0104 	;=========================================================================================================
00137 0104 	; Decrement routine for 16 bit timers
00138 0104 	; Set FSR0H before calling these routines.
00139 0104 	;
00140 0104 3033 	DecTimer4	movlw	Timer4Hi
00141 0105 3205 		bra	DecTimer
00142 0106 3031 	DecTimer3	movlw	Timer3Hi
00143 0107 3203 		bra	DecTimer
00144 0108 302F 	DecTimer2	movlw	Timer2Hi
00145 0109 3201 		bra	DecTimer
00146 010A 302D 	DecTimer1	movlw	Timer1Hi
00147 010B 	;DecTimer
00148 010B 	; entry: FSR=Timer(n)Hi
00149 010B 0084 	DecTimer	MOVWF	FSR0L
00150 010C 3000 		movlw	High Timer4Hi
00151 010D 0085 		movwf	FSR0H
00152 010E 0013 		MOVIW	FSR0--	;TimerNHi
00153 010F 0400 		IORWF	INDF0,W	;TimerNLo
00154 0110 		SKPNZ
00154 0110 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00155 0111 0008 		RETURN
00156 0112 3001 		MOVLW	0x01
00157 0113 0280 		SUBWF	INDF0,F	;TimerNLo
00158 0114 0A84 		INCF	FSR0L,F
00159 0115 0103 		CLRW
00160 0116 3B80 		SUBWFB	INDF0,F	;TimerNHi
00161 0117 0008 		RETURN
00162 0118 	;
00163 0118 	;==============================================================================================
00164 0118 	; Test for 16 bit timers = zero
00165 0118 	;If Timer is zero return Z flag,1 else Z=0
00166 0118 	;
00167 0118 0020 	TestT4_Zero	movlb	0
00168 0119 0832 		movf	Timer4Lo,W
00169 011A 0433 		iorwf	Timer4Hi,W
00170 011B 0008 		return
00171 011C 	;
00172 011C 0020 	TestT3_Zero	movlb	0
00173 011D 0830 		movf	Timer3Lo,W
00174 011E 0431 		iorwf	Timer3Hi,W
00175 011F 0008 		return
00176 0120 	;
00177 0120 0020 	TestT2_Zero	movlb	0
00178 0121 082E 		movf	Timer2Lo,W
00179 0122 042F 		iorwf	Timer2Hi,W
00180 0123 0008 		return
00181 0124 	;
00182 0124 0020 	TestT1_Zero	movlb	0
00183 0125 082C 		movf	Timer1Lo,W
00184 0126 042D 		iorwf	Timer1Hi,W
00185 0127 0008 		return	
00186 0128 	;
00187 0128 		if oldCode
00203 0128 		endif
00204 0128 	;======================================================================================
00205 0128 	;Delay uS    1 cycle = .125uS, 32MHz clock version
00206 0128 	; RAM used: Param77
00207 0128 	; Calls:(0) none
00208 0128 	;
00209 0128 3005 	Delay10uS	MOVLW	0x05	;(2*3+5)/2=10
00210 0129 3203 		bra	DelayWuS
00211 012A 3041 	Delay100uS	MOVLW	d'65'	;(28*3+5)/2=100
00212 012B 3201 		bra	DelayWuS
00213 012C 3019 	Delay40uS	MOVLW	d'25'	;(11*3+5)=40
00214 012D 00F7 	DelayWuS	MOVWF	Param77
00215 012E 0000 	DelayWuS_Loop	nop
00216 012F 0000 		nop
00217 0130 0BF7 		DECFSZ	Param77,F
00218 0131 33FC 		bra	DelayWuS_Loop
00219 0132 0008 		RETURN
00220 0133 	;==============================================================================================
00221 0133 	; Read EEPROM
00222 0133 	; entry: EEPROM address to read in W
00223 0133 	;        Bank 0 selected
00224 0133 	; exit: W=EEDATA, Bank 0 selected
00225 0133 	;
00226 0133 00AA 	EEReadW	movwf	EEAddrTemp
00227 0134 	;
00228 0134 	;==============================================================================================
00229 0134 	; Read EEPROM
00230 0134 	; entry: EEPROM address to read in EEAddrTemp
00231 0134 	;        Bank 0 selected
00232 0134 	; exit: W=EEDATA, Bank 0 selected
00233 0134 	;
00234 0134 082A 	EERead	movf	EEAddrTemp,W
00235 0135 0023 		MOVLB	0x03	;Bank 3
00236 0136 0091 		movwf	EEADR	;Address to read
00237 0137 1315 		bcf	EECON1,CFGS	;not config mem
00238 0138 1395 		bcf	EECON1,EEPGD	;Data memory
00239 0139 1415 		bsf	EECON1,RD
00240 013A 0813 		movf	EEDAT,W	;W=EEDAT
00241 013B 0020 		MOVLB	0x00	;Bank 0
00242 013C 0008 		return
SerialServo.asm                                                       Page: 13
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00243 013D 	;
00244 013D 	;==============================================================================================
00245 013D 	; Write EEPROM
00246 013D 	; entry: EEPROM address to write in W
00247 013D 	;        EEPROM data to write in EEDataTemp
00248 013D 	;        Bank 0 selected
00249 013D 	; exit: Bank 0 selected
00250 013D 	;
00251 013D 00AA 	EEWriteW	movwf	EEAddrTemp
00252 013E 	;
00253 013E 	;==============================================================================================
00254 013E 	; Write EEPROM
00255 013E 	; entry: EEPROM address to write in EEAdrTemp
00256 013E 	;        EEPROM data to write in EEDataTemp
00257 013E 	;        Bank 0 selected
00258 013E 	; exit: Bank 0 selected
00259 013E 	;
00260 013E 082A 	EEWrite	MOVF	EEAddrTemp,W
00261 013F 0023 		MOVLB	0x03	;Bank 3
00262 0140 0091 		movwf	EEADR	;Address to write
00263 0141 0020 		movlb	0x00	; bank 0
00264 0142 082B 		movf	EEDataTemp,W
00265 0143 0023 		movlb	0x03
00266 0144 0093 		movwf	EEDAT
00267 0145 1315 		bcf	EECON1,CFGS	;not config mem
00268 0146 1395 		bcf	EECON1,EEPGD	;Data memory
00269 0147 1515 		bsf	EECON1,WREN
00270 0148 138B 		bcf	INTCON,GIE	;Disale Ints
00271 0149 1B8B 		btfsc	INTCON,GIE
00272 014A 33FD 		bra	$-2
00273 014B 3055 		movlw	0x55
00274 014C 0096 		movwf	EECON2	;write 55
00275 014D 30AA 		movlw	0xAA
00276 014E 0096 		movwf	EECON2	;write AA
00277 014F 1495 		bsf	EECON1,WR
00278 0150 1895 	EEWriteLoop	btfsc	EECON1,WR	
00279 0151 33FE 		bra	EEWriteLoop
00280 0152 1115 		bcf	EECON1,WREN
00281 0153 178B 		bsf	INTCON,GIE
00282 0154 0020 		MOVLB	0x00	;Bank 0
00283 0155 0008 		return
00284 0156 	;
00285 0156 	;	
00286 0156 	;=========================================================================================
00287 0156 	;=========================================================================================
00288 0156 	;
00289 0156 	;
00290 0156 	;
00291 0156 	;
00953 0156 		include <SerBuff1938.inc>
00001 0156 	;=========================================================================================
00002 0156 	;
00003 0156 	;    Filename:      SerBuff.inc
00004 0156 	;    Date:          5/24/2018                                    
00005 0156 	;    File Version:  1.0.5
00006 0156 	;
00007 0156 	;    Author:        David M. Flynn
00008 0156 	;    Company:       Oxford V.U.E., Inc.
00009 0156 	;    E-Mail:        dflynn@oxfordvue.com
00010 0156 	;
00011 0156 	;=========================================================================================
00012 0156 	;=========================================================================================
00013 0156 	; Notes:
00014 0156 	;
00015 0156 	; History:
00016 0156 	; 1.0.5    5/24/2018   Added GetSerInBytes.
00017 0156 	; 1.0.4    5/23/2018	Added FlushInBuff.
00018 0156 	; 1.0.3    12/15/2015	Optimized some code to be segment independent.
00019 0156 	; 1.0.2    10/23/2015	Modified for 'F1938
00020 0156 	; 1.0.1    12/6/2013	Modified for 'F1847
00021 0156 	; 1.0      5/25/2008	First Rev'd version
00022 0156 	;
00023 0156 	;=========================================================================================
00024 0156 	; Bank0 Variables:
00025 0156 	;
00026 0156 	;	cblock	0x20
00027 0156 	;	TXByte		;Next byte to send
00028 0156 	;	RXByte		;Last byte received
00029 0156 	;	SerFlags
00030 0156 	;	endc
00031 0156 	;
00032 0156 	;#Define	DataReceivedFlag	SerFlags,1
00033 0156 	;#Define	DataSentFlag	SerFlags,2
00034 0156 	;
00035 0156 	; Bank2 Variables:
00036 0156 	;#Define	Ser_Buff_Bank	2
00037 0156 	;	cblock	0x120
00038 0156 	;	Ser_In_Bytes		;Bytes in Ser_In_Buff
00039 0156 	;	Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00040 0156 	;	Ser_In_InPtr
00041 0156 	;	Ser_In_OutPtr
00042 0156 	;	Ser_Out_InPtr
00043 0156 	;	Ser_Out_OutPtr
00044 0156 	;	Ser_In_Buff:20
00045 0156 	;	Ser_Out_Buff:20
00046 0156 	;	endc
00047 0156 	;
00048 0156 	;=========================================================================================
00049 0156 	; Routines	(Bank In/Bank Out)
SerialServo.asm                                                       Page: 14
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00050 0156 	;
00051 0156 	; TX_TheByte	(0+0) Send one byte to UART
00052 0156 	; RX_TheByte	(0+0) Receive one byte from UART
00053 0156 	; StoreSerIn	(X/0) Put the byte in W into the serial input buffer, FSR0
00054 0156 	; GetSerIn	(X/0) Get a byte from the serial input buffer, FSR0
00055 0156 	; FlushInBuff	(X/0) Flush the serial incoming buffer.
00056 0156 	; GetSerInBytes	(X/0) Get the number of bytes in the serial input buffer
00057 0156 	; GetSerOutBytes	(X/0) Get the number of bytes in the serial ouput buffer
00058 0156 	; StoreSerOut	(X/0) Put the byte in W into the serial output buffer, FSR0
00059 0156 	; POP_SerOut	(X/0) Remove the last char stored in the output buffer
00060 0156 	; GetSerOut	(X/0) Get a byte from the serial Output buffer, FSR0
00061 0156 	;	       W=Byte, Param78:0=ValidFlag
00062 0156 	;=========================================================================================
00063 0156 	;=========================================================================================
00064 0156 	; *** Put in main loop ***
00065 0156 	;
00066 0156 	; Handle Serial Communications
00067 0156 	;	BTFSC	PIR1,TXIF	;TX done?
00068 0156 	;	CALL	TX_TheByte	; Yes
00069 0156 	;
00070 0156 	; move any serial data received into the 32 byte input buffer
00071 0156 	;	BTFSS	DataReceivedFlag
00072 0156 	;	BRA	ML_Ser_Out
00073 0156 	;	MOVF	RXByte,W
00074 0156 	;	BCF	DataReceivedFlag
00075 0156 	;	CALL	StoreSerIn
00076 0156 	;
00077 0156 	;=========================================================================================
00078 0156 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00079 0156 	;
00080 0156 	;ML_Ser_Out	BTFSS	DataSentFlag
00081 0156 	;	BRA	ML_Ser_End
00082 0156 	;	CALL	GetSerOut
00083 0156 	;	BTFSS	Param78,0
00084 0156 	;	BRA	ML_Ser_End
00085 0156 	;	MOVWF	TXByte
00086 0156 	;	BCF	DataSentFlag
00087 0156 	;ML_Ser_End
00088 0156 	;
00089 0156 	;=========================================================================================
00090 0156 	; *** Put in Init section ***
00091 0156 	;BAUDCON_Value	EQU	b'00001000'
00092 0156 	;TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, High speed
00093 0156 	;RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00094 0156 	;; 8MHz clock low speed (BRGH=0,BRG16=1)
00095 0156 	;;Baud_300	EQU	d'1666'	;0.299, -0.02%
00096 0156 	;;Baud_1200	EQU	d'416'	;1.199, -0.08%
00097 0156 	;;Baud_2400	EQU	d'207'	;2.404, +0.16%
00098 0156 	;;Baud_9600	EQU	d'51'	;9.615, +0.16%
00099 0156 	;; 8MHz clock high speed (BRGH=1,BRG16=1)
00100 0156 	;Baud_300	EQU	d'6666'	;0.299, -0.02%
00101 0156 	;Baud_1200	EQU	d'1666'	;1.199, -0.08%
00102 0156 	;Baud_2400	EQU	d'832'	;2.404, +0.16%
00103 0156 	;Baud_9600	EQU	d'207'	;9.615, +0.16%
00104 0156 	;Baud_19_2	EQU	d'103'	;19.23k, +0.16
00105 0156 	;Baud_57_6	EQU	d'34'	;57.14k, -0.79
00106 0156 	;BaudRate	EQU	Baud_9600
00107 0156 	;-------------
00108 0156 	;
00109 0156 	; setup serial I/O
00110 0156 	;	movlb	0x03	; bank 3
00111 0156 	;	MOVLW	TXSTA_Value
00112 0156 	;	MOVWF	TXSTA
00113 0156 	;	MOVLW	low BaudRate
00114 0156 	;	MOVWF	SPBRGL
00115 0156 	;	MOVLW	high BaudRate
00116 0156 	;	MOVWF	SPBRGH
00117 0156 	;	MOVLW	RCSTA_Value
00118 0156 	;	MOVWF	RCSTA
00119 0156 	;
00120 0156 	;	movlb	0x01	; bank 1
00121 0156 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00122 0156 	;	movlb	0x00	; bank 0
00123 0156 	;	BSF	INTCON,PEIE	;Peripheral IRQ Enable
00124 0156 	;	BSF	INTCON,GIE
00125 0156 	;
00126 0156 	;=========================================================================================
00127 0156 	; *** Put in ISR ***
00128 0156 	;-----------------------------------------------------------------------------------------
00129 0156 	;AUSART Serial ISR
00130 0156 	;
00131 0156 	;IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00132 0156 	;	BRA	IRQ_Ser_End
00133 0156 	;	CALL	RX_TheByte
00134 0156 	;
00135 0156 	;IRQ_Ser_End
00136 0156 	;
00137 0156 	;=========================================================================================
00138 0156 	; Send one byte
00139 0156 	; Entry: Bank0
00140 0156 	; Exit: Bank0
00141 0156 	;
00142 0156 	;
00143 0156 1936 	TX_TheByte	BTFSC	DataSentFlag
00144 0157 0008 		RETURN
00145 0158 0834 		MOVF	TXByte,W	
00146 0159 0023  a		MOVLB	TXREG	;banksel
00145 015A 		BANKSEL	TXREG
00147 015A 009A 		MOVWF	TXREG
SerialServo.asm                                                       Page: 15
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00148 015B 0020 		MOVLB	0
00149 015C 1536 		BSF	DataSentFlag
00150 015D 0008 		RETURN
00151 015E 	;
00152 015E 	;=========================================================================================
00153 015E 	;
00154 015E 	RX_TheByte:
00155 015E 0023  a		MOVLB	RCSTA	;banksel
00154 015F 		BANKSEL	RCSTA	; bank 3
00156 015F 081D 		MOVF	RCSTA,W
00157 0160 3906 		ANDLW	0x06
00158 0161 		SKPZ		;Frame or Overrun Err?
00158 0161 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00159 0162 3205 		BRA	RX_TheByte_Err	; yes
00160 0163 0819 		MOVF	RCREG,W
00161 0164 	;
00162 0164 0020 		movlb	0x00	; bank 0
00163 0165 00B5 		MOVWF	RXByte
00164 0166 14B6 		BSF	DataReceivedFlag
00165 0167 0008 		RETURN
00166 0168 	;
00167 0168 0819 	RX_TheByte_Err	MOVF	RCREG,W	;bad byte so drop it
00168 0169 01B5 		CLRF	RXByte
00169 016A 121D 		BCF	RCSTA,CREN
00170 016B 111D 		BCF	RCSTA,FERR
00171 016C 109D 		BCF	RCSTA,OERR
00172 016D 161D 		BSF	RCSTA,CREN
00173 016E 0020 		movlb	0x00
00174 016F 0008 		RETURN
00175 0170 	;
00176 0170 	;=========================================================================================
00177 0170 	;=========================================================================================
00178 0170 	; Put the byte in W into the serial input buffer
00179 0170 	;
00180 0170 	; Entry: W = byte to store
00181 0170 	; Exit: none
00182 0170 	; Ram Used: Param78, FSR
00183 0170 	;
00184 0170 00F8 	StoreSerIn	MOVWF	Param78
00185 0171 0022 		MOVLB	Ser_Buff_Bank
00186 0172 0AA0 		INCF	Ser_In_Bytes,F
00187 0173 	;	
00188 0173 0822 		MOVF	Ser_In_InPtr,W
00189 0174 391F 		ANDLW	0x1F
00190 0175 0AA2 		INCF	Ser_In_InPtr,F
00191 0176 3E26 		ADDLW	low Ser_In_Buff
00192 0177 0084 		MOVWF	FSR0
00193 0178 3001 		MOVLW	high Ser_In_Buff
00194 0179 0085 		MOVWF	FSR0H
00195 017A 0878 		MOVF	Param78,W
00196 017B 0080 		MOVWF	INDF0
00197 017C 0020 		MOVLB	0x00
00198 017D 0008 		RETURN
00199 017E 	;
00200 017E 	;=========================================================================================
00201 017E 	; Get a byte from the serial input buffer
00202 017E 	;
00203 017E 	; Entry: none
00204 017E 	; Exit: W=byte from buffer, Param78,0=valid
00205 017E 	;
00206 017E 0022 	GetSerIn	MOVLB	Ser_Buff_Bank
00207 017F 1078 		BCF	Param78,0	;no data
00208 0180 08A0 		MOVF	Ser_In_Bytes,F
00209 0181 		SKPNZ
00209 0181 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00210 0182 320A 		bra	GetSerIn_End
00211 0183 1478 		BSF	Param78,0
00212 0184 03A0 		DECF	Ser_In_Bytes,F
00213 0185 0823 		MOVF	Ser_In_OutPtr,W
00214 0186 391F 		ANDLW	0x1F
00215 0187 0AA3 		INCF	Ser_In_OutPtr,F
00216 0188 3E26 		ADDLW	low Ser_In_Buff
00217 0189 0084 		MOVWF	FSR0L
00218 018A 3001 		MOVLW	high Ser_In_Buff
00219 018B 0085 		MOVWF	FSR0H
00220 018C 0800 		MOVF	INDF0,W
00221 018D 0020 	GetSerIn_End	movlb	0
00222 018E 0008 		return
00223 018F 	;
00224 018F 	;=========================================================================================
00225 018F 	; Flush the serial incoming buffer
00226 018F 	; Entry: none
00227 018F 	; Exit: bank 0
00228 018F 	;
00229 018F 0022 	FlushInBuff	movlb	Ser_Buff_Bank
00230 0190 01A0 		clrf	Ser_In_Bytes
00231 0191 01A3 		clrf	Ser_In_OutPtr
00232 0192 01A2 		clrf	Ser_In_InPtr
00233 0193 0020 		movlb	0
00234 0194 0008 		return
00235 0195 	;
00236 0195 	;=========================================================================================
00237 0195 	; Get the number of bytes in the serial input buffer
00238 0195 	;
00239 0195 	; Entry: none
00240 0195 	; Exit: W=bytes in buffer, Z
00241 0195 	;
00242 0195 0022 	GetSerInBytes	MOVLB	Ser_Buff_Bank
00243 0196 0820 		MOVF	Ser_In_Bytes,W
SerialServo.asm                                                       Page: 16
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00244 0197 0020 		movlb	0
00245 0198 0008 		return
00246 0199 	;
00247 0199 	;=========================================================================================
00248 0199 	; Get the number of bytes in the serial ouput buffer
00249 0199 	;
00250 0199 	; Entry: none
00251 0199 	; Exit: W=bytes in buffer, Z
00252 0199 	;
00253 0199 0022 	GetSerOutBytes	MOVLB	Ser_Buff_Bank
00254 019A 0821 		MOVF	Ser_Out_Bytes,W
00255 019B 0020 		movlb	0
00256 019C 0008 		return
00257 019D 	;
00258 019D 	;=========================================================================================
00259 019D 	; Put the byte in W into the serial output buffer
00260 019D 	;
00261 019D 	; Entry: W = byte to store
00262 019D 	; Exit: Param78 & W = byte stored, Bank 0
00263 019D 	; Ram used: Param78, FSR0
00264 019D 	; Calls: (0) none
00265 019D 	;
00266 019D 00F8 	StoreSerOut	MOVWF	Param78
00267 019E 0022 		MOVLB	Ser_Buff_Bank
00268 019F 0AA1 		INCF	Ser_Out_Bytes,F
00269 01A0 	;	
00270 01A0 0824 		MOVF	Ser_Out_InPtr,W
00271 01A1 391F 		ANDLW	0x1F
00272 01A2 0AA4 		INCF	Ser_Out_InPtr,F
00273 01A3 3E46 		ADDLW	low Ser_Out_Buff
00274 01A4 0084 		MOVWF	FSR0
00275 01A5 3001 		MOVLW	high Ser_In_Buff
00276 01A6 0085 		MOVWF	FSR0H
00277 01A7 0878 		MOVF	Param78,W
00278 01A8 0080 		MOVWF	INDF0
00279 01A9 0020 		movlb	0
00280 01AA 0008 		return
00281 01AB 	;
00282 01AB 	;=========================================================================================
00283 01AB 	; Remove the last char stored in the output buffer
00284 01AB 	;
00285 01AB 0022 	POP_SerOut	MOVLB	Ser_Buff_Bank
00286 01AC 08A1 		MOVF	Ser_Out_Bytes,F
00287 01AD 		SKPNZ
00287 01AD 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00288 01AE 3202 		bra	POP_SerOut_End
00289 01AF 03A1 		DECF	Ser_Out_Bytes,F
00290 01B0 03A4 		DECF	Ser_Out_InPtr,F
00291 01B1 0020 	POP_SerOut_End	movlb	0
00292 01B2 0008 		return
00293 01B3 	;
00294 01B3 	;=========================================================================================
00295 01B3 	; Get a byte from the serial Output buffer
00296 01B3 	;
00297 01B3 	; Entry: none
00298 01B3 	; Exit: W=byte from buffer, Param78,0=valid
00299 01B3 	;
00300 01B3 0022 	GetSerOut	MOVLB	Ser_Buff_Bank
00301 01B4 1078 		BCF	Param78,0	;no data
00302 01B5 08A1 		MOVF	Ser_Out_Bytes,F
00303 01B6 		SKPNZ
00303 01B6 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00304 01B7 320A 		bra	GetSerOut_End
00305 01B8 1478 		BSF	Param78,0
00306 01B9 03A1 		DECF	Ser_Out_Bytes,F
00307 01BA 0825 		MOVF	Ser_Out_OutPtr,W
00308 01BB 391F 		ANDLW	0x1F
00309 01BC 0AA5 		INCF	Ser_Out_OutPtr,F
00310 01BD 3E46 		ADDLW	low Ser_Out_Buff
00311 01BE 0084 		MOVWF	FSR0L
00312 01BF 3001 		MOVLW	high Ser_In_Buff
00313 01C0 0085 		MOVWF	FSR0H
00314 01C1 0800 		MOVF	INDF0,W
00315 01C2 0020 	GetSerOut_End	movlb	0
00316 01C3 0008 		return
00317 01C4 	;
00318 01C4 	;=========================================================================================
00319 01C4 	;
00320 01C4 	;
00321 01C4 	;
00322 01C4 	;
00323 01C4 	;
00324 01C4 	;
00325 01C4 	;
00326 01C4 	;
00327 01C4 	;
00328 01C4 	;
00329 01C4 	;
00330 01C4 	;
00331 01C4 	;
00332 01C4 	;
00333 01C4 	;
00334 01C4 	;
00335 01C4 	;
00336 01C4 	;
00337 01C4 	;
00338 01C4 	;
00954 01C4 		include <RS232_Parse.inc>
00001 01C4 	;=========================================================================================
SerialServo.asm                                                       Page: 17
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00002 01C4 	;
00003 01C4 	;    Filename:      RS232_Parse.inc
00004 01C4 	;    Date:          5/25/2018
00005 01C4 	;    File Version:  1.0d5
00006 01C4 	;
00007 01C4 	;    Author:        David M. Flynn
00008 01C4 	;    Company:       Oxford V.U.E., Inc.
00009 01C4 	;    E-Mail:        dflynn@oxfordvue.com
00010 01C4 	;
00011 01C4 	;=========================================================================================
00012 01C4 	; Routines:
00013 01C4 	;
00014 01C4 	; RS232_Parse	Call from main loop
00015 01C4 	; RS232_ClearTXData	Clear the TX data, FSR1
00016 01C4 	; RS232_Send	Send the data at TX_data, FSR0, FSR1
00017 01C4 	;
00018 01C4 	;=========================================================================================
00019 01C4 	; Notes:
00020 01C4 	;
00021 01C4 	; History:
00022 01C4 	; 1.0b5  5/25/2018	RS232_MasterAddr, RS232_SlaveAddr now in ram
00023 01C4 	; 1.0d4  5/18/2018	Added RS232_ClearTXData, RS232_Send.
00024 01C4 	; 1.0d3  5/17/2018	Used Timer1Lo for RXTimeout.
00025 01C4 	; 1.0d2  4/26/2018	Comments, used in robot arm project.
00026 01C4 	; 1.0d1  1/12/2016	Modified for I2C to RS-232 8 byte packets.
00027 01C4 	; 1.0d1  11/9/2015	Adapted for QD Tester
00028 01C4 	; 1.0    12/6/2013	First Rev'd version
00029 01C4 	;
00030 01C4 	; RS232_Parse	(X/0) Parse any bytes received by the serial port
00031 01C4 	; Packet format: (FF FF) SA0 (SA1) DA0 (DA1) D0 D1 D2 D3 D4 D5 D6 D7 (CS)
00032 01C4 	;  FF = Sync byte, SAn = Source Address, DA = Destination Address,
00033 01C4 	;       Dn = Data, CS Check Sum (xor of Address and Data bytes)
00034 01C4 	;  SA must be RS232_RAddr ( the boss )
00035 01C4 	;  DA must be RS232_MyAddr ( this program )
00036 01C4 	;  If the checksum matches put the data bytes in the RX_Data buffer,
00037 01C4 	;   set RXDataValidFlag and RXDataIsNew.
00038 01C4 	;=========================================================================================
00039 01C4 	;	constant RP_LongAddr=1		;16 bit addresses
00040 01C4 	; default to a 6 byte packet SA DA D0 D1 D2 D3
00041 01C4 	;
00042 01C4 		ifndef UseRS232SyncBytes
00044 01C4 		endif
00045 01C4 	;
00046 01C4 		ifndef UseRS232SendSyncBytes
00048 01C4 		endif
00049 01C4 	;
00050 01C4 		ifndef RP_LongAddr
00052 01C4 		endif
00053 01C4 	;
00054 01C4 		ifndef RP_DataBytes
00056 01C4 		endif
00057 01C4 	;
00058 01C4 		ifndef UseRS232Chksum
00060 01C4 		endif
00061 01C4 	;
00062 01C4 		constant RXTimeout=5		;50 mS max between incoming bytes
00063 01C4 	;=========================================================================================
00064 01C4 	; Bank0 variable used by RS232_Parse:
00065 01C4 	;
00066 01C4 	;	cblock
00067 01C4 	;	RS232_MasterAddr
00068 01C4 	;	RS232_SlaveAddr
00069 01C4 	;	endc
00070 01C4 	;
00071 01C4 	; Bank1 variable used by RS232_Parse:
00072 01C4 	;
00073 01C4 	;	cblock
00074 01C4 	;	RX_ParseFlags
00075 01C4 	;	RX_Flags
00076 01C4 	;	RX_DataCount
00077 01C4 	;	RX_CSUM
00078 01C4 	;	RX_TempData:RP_DataBytes
00079 01C4 	;	RX_Data:RP_DataBytes
00080 01C4 	;	TX_Data:RP_DataBytes
00081 01C4 	;	endc
00082 01C4 	;RX_ParseFlags Bits
00083 01C4 00A0 	#Define	SyncByte1RXd	RX_ParseFlags,0
00084 01C4 00A0 	#Define	SyncByte2RXd	RX_ParseFlags,1
00085 01C4 00A0 	#Define	SourceAddLoRXd	RX_ParseFlags,2
00086 01C4 00A0 	#Define	SourceAddHiRXd	RX_ParseFlags,3
00087 01C4 00A0 	#Define	DestAddLoRXd	RX_ParseFlags,4
00088 01C4 00A0 	#Define	DestAddHiRXd	RX_ParseFlags,5
00089 01C4 00A0 	#Define	AllDataRXd	RX_ParseFlags,6
00090 01C4 	;
00091 01C4 	;RX_Flags Bits
00092 01C4 00A1 	#Define	RXDataValidFlag	RX_Flags,0
00093 01C4 00A1 	#Define	RXDataIsNew	RX_Flags,1
00094 01C4 00A1 	#Define	RXSrcIsMaster	RX_Flags,2
00095 01C4 00A1 	#Define	RXDstIsMe	RX_Flags,3
00096 01C4 	;
00097 01C4 	;
00098 01C4 	; *** put in main loop
00099 01C4 	;	CALL	RS232_Parse
00100 01C4 	; if RXDataValidFlag is set data may be used
00101 01C4 	;
00102 01C4 	;=========================================================================================
00103 01C4 	; Parse any bytes received by the serial port
00104 01C4 	;
00105 01C4 	; Receive 0xFF,0xFF,SA0,(SA1),DA0,(DA1),Cmd,Data0,Data1,Data2,CS
SerialServo.asm                                                       Page: 18
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00106 01C4 	;
00107 01C4 	;
00108 01C4 	; Entry: none
00109 01C4 	; Exit: none
00110 01C4 	; Ram Used: Param78, FSR
00111 01C4 	; Calls (1+0): GetSerIn
00112 01C4 	;
00113 01C4 0021 	RS232_Parse	movlb	0x01	;bank 1
00114 01C5 08A0 		movf	RX_ParseFlags,F
00115 01C6 		SKPNZ		;Receive in process?
00115 01C6 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00116 01C7 3207 		bra	RS232_Parse_Byte	; no
00117 01C8 	;
00118 01C8 0020 		movlb	0	;bank 0
00119 01C9 08AC 		movf	Timer1Lo,F
00120 01CA 		SKPZ		;Timed out?
00120 01CA 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00121 01CB 3203 		bra	RS232_Parse_Byte	; no
00122 01CC 	;timed out
00123 01CC 15BC 		bsf	ssRX_Timeout
00124 01CD 0021 		movlb	0x01	;bank 1
00125 01CE 01A0 		clrf	RX_ParseFlags
00126 01CF 	;
00127 01CF 217E 	RS232_Parse_Byte	CALL	GetSerIn
00128 01D0 1C78 		BTFSS	Param78,0	;Got a byte?
00129 01D1 0008 		RETURN		; No
00130 01D2 	;
00131 01D2 00F8 		MOVWF	Param78	;Data Byte RXd
00132 01D3 3005 		movlw	RXTimeout	;Reset time-out timer
00133 01D4 00AC 		movwf	Timer1Lo
00134 01D5 	; Command inturpreter
00135 01D5 		if UseRS232SyncBytes
00136 01D5 	;
00137 01D5 0021 		movlb	0x01	;bank 1
00138 01D6 08A0 		MOVF	RX_ParseFlags,F
00139 01D7 		SKPZ		;Beginning new packet?
00139 01D7 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00140 01D8 3205 		BRA	RS232_Parse_Sync2	; No
00141 01D9 30DD 		MOVLW	kRS232SyncByteValue
00142 01DA 0278 		SUBWF	Param78,W
00143 01DB 		SKPNZ		;Sync byte OK?
00143 01DB 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00144 01DC 1420 		BSF	SyncByte1RXd	; Yes
00145 01DD 3218 		bra	RS232_Parse_Rtn
00146 01DE 	;
00147 01DE 18A0 	RS232_Parse_Sync2	btfsc	SyncByte2RXd
00148 01DF 3206 		bra	RS232_Parse_SALo
00149 01E0 30DD 		movlw	kRS232SyncByteValue
00150 01E1 0278 		subwf	Param78,W
00151 01E2 		SKPZ
00151 01E2 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00152 01E3 2A32 		goto	RS232_Parse_Error
00153 01E4 14A0 		bsf	SyncByte2RXd
00154 01E5 3210 		bra	RS232_Parse_Rtn
00155 01E6 	;
00156 01E6 		endif
00157 01E6 	;
00158 01E6 	; LSB of Source Address
00159 01E6 0021 	RS232_Parse_SALo	movlb	0x01	;bank 1
00160 01E7 1920 		btfsc	SourceAddLoRXd
00161 01E8 320F 		bra	RS232_Parse_SALo_end
00162 01E9 	;
00163 01E9 01A3 		clrf	RX_CSUM
00164 01EA 01A2 		clrf	RX_DataCount
00165 01EB 1521 		bsf	RXSrcIsMaster
00166 01EC 0020 		movlb	0
00167 01ED 0856 		movf	RS232_MasterAddr,W
00168 01EE 0021 		movlb	1
00169 01EF 0278 		subwf	Param78,W
00170 01F0 		SKPZ
00170 01F0 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00171 01F1 1121 		bcf	RXSrcIsMaster
00172 01F2 1520 		bsf	SourceAddLoRXd
00173 01F3 0878 		movf	Param78,W
00174 01F4 00A4 		movwf	RX_SrcAdd
00175 01F5 06A3 		xorwf	RX_CSUM,F
00176 01F6 0020 	RS232_Parse_Rtn	movlb	0x00	;bank 0
00177 01F7 0008 		return
00178 01F8 	RS232_Parse_SALo_end:
00179 01F8 	;
00180 01F8 	; MSB of Source Address
00181 01F8 		if RP_LongAddr
00196 01F8 		endif
00197 01F8 	;
00198 01F8 	; LSB of Destination Address
00199 01F8 1A20 	RS232_Parse_DALo	btfsc	DestAddLoRXd
00200 01F9 320C 		bra	RS232_Parse_DALo_End
00201 01FA 15A1 		bsf	RXDstIsMe
00202 01FB 0020 		movlb	0
00203 01FC 0857 		movf	RS232_SlaveAddr,W
00204 01FD 0021 		movlb	1
00205 01FE 0278 		subwf	Param78,W
00206 01FF 		SKPZ
00206 01FF 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00207 0200 11A1 		bcf	RXDstIsMe
00208 0201 1620 		bsf	DestAddLoRXd
00209 0202 0878 		movf	Param78,W
00210 0203 00A5 		movwf	RX_DstAdd
00211 0204 06A3 		xorwf	RX_CSUM,F
SerialServo.asm                                                       Page: 19
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00212 0205 33F0 		bra	RS232_Parse_Rtn
00213 0206 	RS232_Parse_DALo_End:
00214 0206 	;
00215 0206 	; MSB of Destination Address
00216 0206 		if RP_LongAddr
00231 0206 		endif
00232 0206 	;
00233 0206 1B20 	RS232_Parse_Data	btfsc	AllDataRXd
00234 0207 320F 		bra	RS232_Parse_Data_end
00235 0208 0822 		movf	RX_DataCount,W
00236 0209 3EA6 		addlw	low RX_TempData
00237 020A 0084 		movwf	FSR0L
00238 020B 3000 		movlw	high RX_TempData
00239 020C 0085 		movwf	FSR0H
00240 020D 0878 		movf	Param78,W
00241 020E 06A3 		xorwf	RX_CSUM,F
00242 020F 0080 		movwf	INDF0
00243 0210 0AA2 		incf	RX_DataCount,F
00244 0211 3004 		movlw	RP_DataBytes
00245 0212 0222 		subwf	RX_DataCount,W
00246 0213 		SKPZ
00246 0213 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00247 0214 33E1 		bra	RS232_Parse_Rtn
00248 0215 1720 		bsf	AllDataRXd
00249 0216 	;
00250 0216 		if UseRS232Chksum
00251 0216 33DF 		bra	RS232_Parse_Rtn
00252 0217 		endif
00253 0217 	RS232_Parse_Data_end
00254 0217 	;
00255 0217 		if UseRS232Chksum
00256 0217 	; checksum
00257 0217 0878 		movf	Param78,W
00258 0218 0223 		subwf	RX_CSUM,W
00259 0219 		SKPZ		;Checksum matches?
00259 0219 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00260 021A 3217 		bra	RS232_Parse_Error	; No
00261 021B 	;
00262 021B 		endif
00263 021B 	;
00264 021B 30A6 		movlw	low RX_TempData
00265 021C 0084 		movwf	FSR0L
00266 021D 3000 		movlw	high RX_TempData
00267 021E 0085 		movwf	FSR0H
00268 021F 	;
00269 021F 30AA 		movlw	low RX_Data
00270 0220 0086 		movwf	FSR1L
00271 0221 3000 		movlw	high RX_Data
00272 0222 0087 		movwf	FSR1H
00273 0223 	;
00274 0223 3004 		movlw	RP_DataBytes
00275 0224 00F8 		movwf	Param78
00276 0225 0012 	RS232_Parse_L1	moviw	FSR0++
00277 0226 001E 		movwi	FSR1++
00278 0227 0BF8 		decfsz	Param78,F
00279 0228 33FC 		bra	RS232_Parse_L1
00280 0229 	;
00281 0229 14A1 		bsf	RXDataIsNew	;good packet rx'd
00282 022A 1421 		bsf	RXDataValidFlag
00283 022B 1D21 		btfss	RXSrcIsMaster	;from master?
00284 022C 1021 		bcf	RXDataValidFlag	; no
00285 022D 1DA1 		btfss	RXDstIsMe	;to me?
00286 022E 1021 		bcf	RXDataValidFlag	; no
00287 022F 	;
00288 022F 01A0 		clrf	RX_ParseFlags
00289 0230 0020 		movlb	0x00
00290 0231 0008 		return
00291 0232 	;
00292 0232 	;
00293 0232 	; We didn't get the sync byte we were expecting so restart the parser
00294 0232 01A0 	RS232_Parse_Error	CLRF	RX_ParseFlags
00295 0233 298F 		goto	FlushInBuff
00296 0234 	;
00297 0234 	;=========================================================================================
00298 0234 	; Clear the TX data, unused bytes are sent as 0x00
00299 0234 	; Entry: none
00300 0234 	; Exit: Bank 0
00301 0234 	; Ram used: Param78, FSR1
00302 0234 	; Calls: none
00303 0234 3001 	RS232_ClearTXData	movlw	1	;bank 1
00304 0235 3004 		movlw	RP_DataBytes
00305 0236 00F8 		movwf	Param78
00306 0237 30AE 		movlw	low TX_Data
00307 0238 0086 		movwf	FSR1L
00308 0239 3000 		movlw	high TX_Data
00309 023A 0087 		movwf	FSR1H
00310 023B 3000 		movlw	0x00
00311 023C 001E 	RS232_ClearTXData_L1	movwi	FSR1++
00312 023D 0BF8 		decfsz	Param78,F
00313 023E 33FD 		bra	RS232_ClearTXData_L1
00314 023F 0020 		movlb	0x00
00315 0240 0008 		return
00316 0241 	;
00317 0241 	;=========================================================================================
00318 0241 	; Send a data packet
00319 0241 	;
00320 0241 	;Entry: TX_Data = Data to send 
00321 0241 	;Exit: TX_Data is cleared
00322 0241 	;Ram used: Param78,Param79,Param7A,FSR0,FSR1
SerialServo.asm                                                       Page: 20
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00323 0241 	;Calls: (1+0) StoreSerOut
00324 0241 	;
00325 0241 	RS232_Send:
00326 0241 	;
00327 0241 		if UseRS232SendSyncBytes
00334 0241 		endif
00335 0241 	;
00336 0241 0020 		movlb	0x00	;bank 0
00337 0242 01FA 		clrf	Param7A	;CSum
00338 0243 0857 		movf	RS232_SlaveAddr,W	;source address
00339 0244 06FA 		xorwf	Param7A,F
00340 0245 219D 		call	StoreSerOut
00341 0246 	;
00342 0246 		if RP_LongAddr
00346 0246 		endif
00347 0246 	;
00348 0246 0856 		movf	RS232_MasterAddr,W	;destination address
00349 0247 06FA 		xorwf	Param7A,F
00350 0248 219D 		call	StoreSerOut
00351 0249 	;
00352 0249 		if RP_LongAddr
00356 0249 		endif
00357 0249 	;
00358 0249 0021 		movlb	1	;bank 1
00359 024A 3004 		movlw	RP_DataBytes
00360 024B 00F9 		movwf	Param79
00361 024C 30AE 		movlw	low TX_Data
00362 024D 0086 		movwf	FSR1L
00363 024E 3000 		movlw	high TX_Data
00364 024F 0087 		movwf	FSR1H
00365 0250 	;
00366 0250 0016 	RS232_Send_L1	moviw	FSR1++
00367 0251 06FA 		xorwf	Param7A,F
00368 0252 219D 		call	StoreSerOut
00369 0253 0BF9 		decfsz	Param79,F
00370 0254 33FB 		bra	RS232_Send_L1
00371 0255 	;
00372 0255 		if UseRS232Chksum
00373 0255 087A 		movf	Param7A,W
00374 0256 219D 		call	StoreSerOut
00375 0257 		endif
00376 0257 	;
00377 0257 2A34 		goto	RS232_ClearTXData
00378 0258 	;
00379 0258 	;=========================================================================================
00380 0258 	;
00381 0258 	;
00382 0258 	;
00383 0258 	;
00384 0258 	;
00385 0258 	;
00386 0258 	;
00387 0258 	;
00388 0258 	;
00389 0258 	;
00390 0258 	;
00391 0258 	;
00392 0258 	;
00393 0258 	;
00394 0258 	;
00395 0258 	;
00396 0258 	;
00397 0258 	;
00398 0258 	;
00399 0258 	;
00400 0258 	;
00401 0258 	;
00402 0258 	;
00403 0258 	;
00955 0258 	;
00956 0258 	;=========================================================================================
00957 0258 	;
00958 0258 	start	mLongCall	InitializeIO
00958 0258 318B      M		movlp	InitializeIO	                       movlp                  Destination
00958 0259 236B      M		call	InitializeIO	                       call                   Destination
00958 025A 3182      M		movlp	$	                       movlp                  $
00959 025B 	;
00960 025B 24D1 		CALL	StartServo
00961 025C 24B2 		CALL	ReadAN0_ColdStart
00962 025D 	;
00963 025D 	;=========================================================================================
00964 025D 	;*****************************************************************************************
00965 025D 	;=========================================================================================
00966 025D 0064 	MainLoop	CLRWDT
00967 025E 	;
00968 025E 2195 		call	GetSerInBytes
00969 025F 		SKPZ		;Any data?
00969 025F 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00970 0260 21C4 		CALL	RS232_Parse	; yes
00971 0261 	;
00972 0261 0021 		movlb	1
00973 0262 1CA1 		btfss	RXDataIsNew
00974 0263 3203 		bra	ML_1
00975 0264 		mLongCall	HandleRXData
00975 0264 3188      M		movlp	HandleRXData	                       movlp                  Destination
00975 0265 2004      M		call	HandleRXData	                       call                   Destination
00975 0266 3182      M		movlp	$	                       movlp                  $
00976 0267 	ML_1:
00977 0267 	;
SerialServo.asm                                                       Page: 21
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00978 0267 	; Fast blink the system LED is the servo is stopped because of an error
00979 0267 0020 		MOVLB	0x00
00980 0268 3064 		MOVLW	LEDTIME
00981 0269 193C 		btfsc	ssio_OverCurSD
00982 026A 300A 		movlw	LEDErrorTime
00983 026B 00A0 		MOVWF	SysLED_Time
00984 026C 	;
00985 026C 2456 		CALL	ReadAN
00986 026D 	;
00987 026D 	; Average AN0
00988 026D 0021  a		MOVLB	Cur_AN0	;banksel
00987 026E 		BankSel	Cur_AN0
00989 026E 1C32 		btfss	NewDataAN0
00990 026F 320B 		bra	No_NewDataAN0
00991 0270 1032 		bcf	NewDataAN0
00992 0271 083D 		movf	OldAN0Value,W
00993 0272 07B3 		addwf	Cur_AN0,F
00994 0273 083E 		movf	OldAN0Value+1,W
00995 0274 3DB4 		addwfc	Cur_AN0+1,F
00996 0275 3634 		lsrf	Cur_AN0+1,W
00997 0276 00B4 		movwf	Cur_AN0+1
00998 0277 00BE 		movwf	OldAN0Value+1
00999 0278 0C33 		rrf	Cur_AN0,W
01000 0279 00B3 		movwf	Cur_AN0
01001 027A 00BD 		movwf	OldAN0Value
01002 027B 	;
01003 027B 	No_NewDataAN0:
01004 027B 		mLongCall	ReadEncoder
01004 027B 318A      M		movlp	ReadEncoder	                       movlp                  Destination
01004 027C 2209      M		call	ReadEncoder	                       call                   Destination
01004 027D 3182      M		movlp	$	                       movlp                  $
01005 027E 	;
01006 027E 243A 		call	HandleButtons
01007 027F 	;
01008 027F 	;---------------------
01009 027F 	; Handle Serial Communications
01010 027F 1A11 		BTFSC	PIR1,TXIF	;TX done?
01011 0280 2156 		CALL	TX_TheByte	; Yes
01012 0281 	;
01013 0281 	; move any serial data received into the 32 byte input buffer
01014 0281 1CB6 		BTFSS	DataReceivedFlag
01015 0282 3203 		BRA	ML_Ser_Out
01016 0283 0835 		MOVF	RXByte,W
01017 0284 10B6 		BCF	DataReceivedFlag
01018 0285 2170 		CALL	StoreSerIn
01019 0286 	;
01020 0286 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
01021 0286 	;
01022 0286 1D36 	ML_Ser_Out	BTFSS	DataSentFlag
01023 0287 3205 		BRA	ML_Ser_End
01024 0288 21B3 		CALL	GetSerOut
01025 0289 1C78 		BTFSS	Param78,0
01026 028A 3202 		BRA	ML_Ser_End
01027 028B 00B4 		MOVWF	TXByte
01028 028C 1136 		BCF	DataSentFlag
01029 028D 	ML_Ser_End:
01030 028D 	;----------------------
01031 028D 	;
01032 028D 0020 		movlb	0x00	;bank 0
01033 028E 0855 		movf	SysMode,W
01034 028F 000B 		brw
01035 0290 2A96 		goto	DoModeZero
01036 0291 2AA2 		goto	DoModeOne
01037 0292 2B04 		goto	DoModeTwo	
01038 0293 2B46 		goto	DoModeThree
01039 0294 2BEE 		goto	DoMode4
01040 0295 	;
01041 0295 	ModeReturn:
01042 0295 	;
01043 0295 2A5D 		goto	MainLoop
01044 0296 	;=========================================================================================
01045 0296 	;*****************************************************************************************
01046 0296 	;=========================================================================================
01047 0296 	;Simple servo testing
01048 0296 	; copy AN4 value x2 + .1976 to servo value
01049 0296 	;
01050 0296 	DoModeZero:
01051 0296 0021  a		MOVLB	ModeZeroPot	;banksel
01050 0297 		BankSel	ModeZeroPot
01052 0297 3537 		lslf	ModeZeroPot,W
01053 0298 00FC 		movwf	Param7C
01054 0299 0D38 		rlf	ModeZeroPot+1,W
01055 029A 00FD 		movwf	Param7D
01056 029B 30B8 		movlw	low .1976
01057 029C 07FC 		addwf	Param7C,F
01058 029D 3007 		movlw	high .1976
01059 029E 3DFD 		addwfc	Param7D,F
01060 029F 	;
01061 029F 24FE 		call	ClampInt
01062 02A0 24BD 		call	Copy7CToSig
01063 02A1 	;
01064 02A1 2A95 		goto	ModeReturn
01065 02A2 	;=========================================================================================
01066 02A2 	;Testing servo and encoder
01067 02A2 	; if AN4 + .950 > EncoderVal set servo to ServoFastForward
01068 02A2 	; elseif AN4 + .1050 < EncoderVal set servo to ServoFastReverse
01069 02A2 	; else Set ServoIdle
01070 02A2 	;
01071 02A2 	DoModeOne:
SerialServo.asm                                                       Page: 22
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01072 02A2 0021  a		MOVLB	ModeZeroPot	;banksel
01071 02A3 		BankSel	ModeZeroPot
01073 02A3 	;
01074 02A3 	;Param7A:Param79 = Cur_AN4 + .950
01075 02A3 30B6 		movlw	low .950
01076 02A4 0737 		addwf	ModeZeroPot,W
01077 02A5 00F9 		movwf	Param79
01078 02A6 3003 		movlw	high .950
01079 02A7 3D38 		addwfc	ModeZeroPot+1,W
01080 02A8 00FA 		movwf	Param7A
01081 02A9 	;
01082 02A9 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
01083 02A9 0020  a		MOVLB	EncoderVal	;banksel
01082 02AA 		BankSel	EncoderVal
01084 02AA 0843 		movf	EncoderVal,W
01085 02AB 02F9 		subwf	Param79,F
01086 02AC 0844 		movf	EncoderVal+1,W
01087 02AD 3BFA 		subwfb	Param7A,F
01088 02AE 	;
01089 02AE 1FFA 		btfss	Param7A,7	;Param7A:Param79 < 0?
01090 02AF 3210 		bra	DM1_FF	; No, EncoderVal <= (AN4 + .950)
01091 02B0 	;
01092 02B0 	;Param7A:Param79 = Cur_AN4 + .1050
01093 02B0 0021  a		MOVLB	ModeZeroPot	;banksel
01092 02B1 		BankSel	ModeZeroPot
01094 02B1 301A 		movlw	low .1050
01095 02B2 0737 		addwf	ModeZeroPot,W
01096 02B3 00F9 		movwf	Param79
01097 02B4 3004 		movlw	high .1050
01098 02B5 3D38 		addwfc	ModeZeroPot+1,W
01099 02B6 00FA 		movwf	Param7A
01100 02B7 	;
01101 02B7 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
01102 02B7 0020  a		MOVLB	EncoderVal	;banksel
01101 02B8 		BankSel	EncoderVal
01103 02B8 0843 		movf	EncoderVal,W
01104 02B9 02F9 		subwf	Param79,F
01105 02BA 0844 		movf	EncoderVal+1,W
01106 02BB 3BFA 		subwfb	Param7A,F
01107 02BC 	;
01108 02BC 1BFA 		btfsc	Param7A,7	;Param7A:Param79 < 0?
01109 02BD 3208 		bra	DM1_FR	; Yes, EncoderVal > (AN4 + .1050)
01110 02BE 	;
01111 02BE 	; EncoderVal > (ModeZeroPot + .950) && EncoderVal <= (ModeZeroPot + .1050)
01112 02BE 153B 		bsf	ServoIdle
01113 02BF 2A95 		goto	ModeReturn
01114 02C0 	;
01115 02C0 084C 	DM1_FF	movf	ServoFastForward,W
01116 02C1 00FC 		movwf	Param7C
01117 02C2 084D 		movf	ServoFastForward+1,W
01118 02C3 00FD 		movwf	Param7D
01119 02C4 24BD 		call	Copy7CToSig
01120 02C5 2A95 		goto	ModeReturn
01121 02C6 	;
01122 02C6 084A 	DM1_FR	movf	ServoFastReverse,W
01123 02C7 00FC 		movwf	Param7C
01124 02C8 084B 		movf	ServoFastReverse+1,W
01125 02C9 00FD 		movwf	Param7D
01126 02CA 24BD 		call	Copy7CToSig
01127 02CB 2A95 		goto	ModeReturn
01128 02CC 	;
01129 02CC 	;=========================================================================================
01130 02CC 	; if ssEnableOverCur and Cur_AN0>ssMaxI*4 then
01131 02CC 	;   OverCurrentFlag=true
01132 02CC 0020 	CheckCurrent	movlb	0x00	;Bank 0
01133 02CD 1C58 		btfss	ssEnableOverCur
01134 02CE 0008 		return
01135 02CF 	;Param79:Param78 = ssMaxI * 4
01136 02CF 01F9 		clrf	Param79
01137 02D0 3559 		lslf	ssMaxI,W
01138 02D1 00F8 		movwf	Param78
01139 02D2 0DF9 		rlf	Param79,F
01140 02D3 35F8 		lslf	Param78,F
01141 02D4 0DF9 		rlf	Param79,F
01142 02D5 	;Param79:Param78 -= Cur_AN0
01143 02D5 0021 		movlb	ServoCurrent
01144 02D6 0833 		movf	ServoCurrent,W
01145 02D7 02F8 		subwf	Param78,F
01146 02D8 0834 		movf	ServoCurrent+1,W
01147 02D9 3BF9 		subwfb	Param79,F
01148 02DA 0020 		movlb	0x00	;Bank 0
01149 02DB 	;
01150 02DB 1BF9 		btfsc	Param79,7	;Cur_AN0>ssMaxI*4?
01151 02DC 15BB 		bsf	OverCurrentFlag
01152 02DD 0008 		return
01153 02DE 	;
01154 02DE 	;=========================================================================================
01155 02DE 	; if Cur_AN0>ssGripI*4 then
01156 02DE 	;   GripIMet=true
01157 02DE 	; if Cur_AN0>(ssGripI+0x10)*4 then
01158 02DE 	;   GripIOver=true
01159 02DE 0020 	CheckGripCurrent	movlb	0x00	;Bank 0
01160 02DF 	;Param79:Param78 = ssGripI * 4
01161 02DF 01F9 		clrf	Param79
01162 02E0 355B 		lslf	ssGripI,W
01163 02E1 00F8 		movwf	Param78
01164 02E2 0DF9 		rlf	Param79,F
01165 02E3 35F8 		lslf	Param78,F
01166 02E4 0DF9 		rlf	Param79,F
SerialServo.asm                                                       Page: 23
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01167 02E5 	;Param79:Param78 -= Cur_AN0
01168 02E5 0021  a		MOVLB	ServoCurrent	;banksel
01167 02E6 		BankSel	ServoCurrent
01169 02E6 0833 		movf	ServoCurrent,W
01170 02E7 02F8 		subwf	Param78,F
01171 02E8 0834 		movf	ServoCurrent+1,W
01172 02E9 3BF9 		subwfb	Param79,F
01173 02EA 0020 		movlb	0x00	;Bank 0
01174 02EB 	;
01175 02EB 1BF9 		btfsc	Param79,7	;Cur_AN0>ssGripI*4?
01176 02EC 163B 		bsf	GripIMet	; Yes
01177 02ED 1BF9 		btfsc	Param79,7	;Cur_AN0>ssGripI*4?
01178 02EE 16BC 		bsf	ssGripMCur
01179 02EF 	;Param79:Param78 = (ssGripI+0x10) * 4
01180 02EF 01F9 		clrf	Param79
01181 02F0 3004 		movlw	kGripperHC
01182 02F1 075B 		addwf	ssGripI,W
01183 02F2 00F8 		movwf	Param78
01184 02F3 3000 		movlw	0x00
01185 02F4 3DF9 		addwfc	Param79,F
01186 02F5 35F8 		lslf	Param78,F
01187 02F6 0DF9 		rlf	Param79,F
01188 02F7 35F8 		lslf	Param78,F
01189 02F8 0DF9 		rlf	Param79,F
01190 02F9 	;Param79:Param78 -= Cur_AN0
01191 02F9 0021  a		MOVLB	ServoCurrent	;banksel
01190 02FA 		BankSel	ServoCurrent
01192 02FA 0833 		movf	ServoCurrent,W
01193 02FB 02F8 		subwf	Param78,F
01194 02FC 0834 		movf	ServoCurrent+1,W
01195 02FD 3BF9 		subwfb	Param79,F
01196 02FE 0020 		movlb	0x00	;Bank 0
01197 02FF 	;
01198 02FF 1BF9 		btfsc	Param79,7	;Cur_AN0>(ssGripI+10)*4?
01199 0300 16BB 		bsf	GripIOver
01200 0301 1BF9 		btfsc	Param79,7	;Cur_AN0>(ssGripI+10)*4?
01201 0302 163C 		bsf	ssGripOCur
01202 0303 0008 		return
01203 0304 	;
01204 0304 	;=========================================================================================
01205 0304 	;Idle routine for Basic Serial Servo mode
01206 0304 	;
01207 0304 0020 	DoModeTwo	movlb	0
01208 0305 1BB8 		btfsc	ssCmdPos+1,7	;Any command issued?
01209 0306 323D 		bra	DoModeTwo_1	; No, Idle the servo
01210 0307 	;
01211 0307 	;Check for over current, kill position command if over current is detected.
01212 0307 22CC 		call	CheckCurrent
01213 0308 1DBB 		btfss	OverCurrentFlag
01214 0309 3206 		bra	DM2_NotOverCurrent
01215 030A 01B7 		clrf	ssCmdPos
01216 030B 01B8 		clrf	ssCmdPos+1
01217 030C 17B8 		bsf	ssCmdPos+1,7
01218 030D 153C 		bsf	ssio_OverCurSD
01219 030E 11BB 		bcf	OverCurrentFlag
01220 030F 3234 		bra	DoModeTwo_1
01221 0310 	;
01222 0310 	DM2_NotOverCurrent:
01223 0310 113C 		bcf	ssio_OverCurSD
01224 0311 08D4 		movf	ServoSpeed,F
01225 0312 		SKPNZ		;Speed = 0?
01225 0312 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01226 0313 3225 		bra	DoModeTwo_NoSpeed	; yes
01227 0314 1C3B 		btfss	PulseSent	;Time to update?
01228 0315 2A95 		goto	ModeReturn	; No
01229 0316 103B 		bcf	PulseSent
01230 0317 	;Param7D:Param7C = Cmd-Cur
01231 0317 0839 		movf	ssCurPos,W
01232 0318 0237 		subwf	ssCmdPos,W
01233 0319 00FC 		movwf	Param7C
01234 031A 083A 		movf	ssCurPos+1,W
01235 031B 3B38 		subwfb	ssCmdPos+1,W
01236 031C 00FD 		movwf	Param7D
01237 031D 	; if Param7D:Param7C = 0 then we are In Position
01238 031D 047C 		iorwf	Param7C,W
01239 031E 		SKPNZ
01239 031E 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01240 031F 321D 		bra	DoModeTwo_Go	; if Cmd = Cur Go
01241 0320 	;
01242 0320 	;
01243 0320 1FFD 		BTFSS	Param7D,7	;Cmd<Cur? Set if Cur>Cmd
01244 0321 2B2D 		GOTO	DoModeTwo_MovPlus	; Yes
01245 0322 	;Move minus
01246 0322 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01247 0323 2B28 		GOTO	DoModeTwo_Minus	; No
01248 0324 0854 		MOVF	ServoSpeed,W
01249 0325 077C 		ADDWF	Param7C,W
01250 0326 1803 		BTFSC	_C	;Dist<Speed?
01251 0327 3211 		bra	DoModeTwo_NoSpeed	; No
01252 0328 	;
01253 0328 	; Subtract speed from current position
01254 0328 0854 	DoModeTwo_Minus	MOVF	ServoSpeed,W
01255 0329 02B9 		SUBWF	ssCurPos,F	;SigOutTime
01256 032A 3000 		MOVLW	0x00
01257 032B 3BBA 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01258 032C 3210 		bra	DoModeTwo_Go
01259 032D 	;
01260 032D 	;=============================
01261 032D 	; 7D:7C = distance to go
SerialServo.asm                                                       Page: 24
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01262 032D 	;
01263 032D 08FD 	DoModeTwo_MovPlus	MOVF	Param7D,F
01264 032E 		SKPZ		;Dist>255 to go?
01264 032E 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01265 032F 3204 		bra	DoModeTwo_Plus	; Yes
01266 0330 0854 		MOVF	ServoSpeed,W
01267 0331 027C 		SUBWF	Param7C,W	;Dist-Speed
01268 0332 		SKPNB		;Speed>Dist?
01268 0332 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01269 0333 3205 		bra	DoModeTwo_NoSpeed	; Yes
01270 0334 	;
01271 0334 0854 	DoModeTwo_Plus	MOVF	ServoSpeed,W	;7D:7C = CurPos + Speed
01272 0335 07B9 		ADDWF	ssCurPos,F
01273 0336 0103 		CLRW
01274 0337 3DBA 		ADDWFC	ssCurPos+1,F
01275 0338 3204 		bra	DoModeTwo_Go
01276 0339 	;
01277 0339 	;
01278 0339 	; set current position at command position
01279 0339 0837 	DoModeTwo_NoSpeed	movf	ssCmdPos,W
01280 033A 00B9 		movwf	ssCurPos
01281 033B 0838 		movf	ssCmdPos+1,W
01282 033C 00BA 		movwf	ssCurPos+1
01283 033D 	; make it so
01284 033D 0839 	DoModeTwo_Go	movf	ssCurPos,W
01285 033E 00FC 		movwf	Param7C
01286 033F 083A 		movf	ssCurPos+1,W
01287 0340 00FD 		movwf	Param7D
01288 0341 24FE 		call	ClampInt
01289 0342 24BD 		call	Copy7CToSig
01290 0343 2A95 		goto	ModeReturn
01291 0344 	;
01292 0344 	DoModeTwo_1:
01293 0344 153B 		bsf	ServoIdle	;power down servo
01294 0345 2A95 		goto	ModeReturn
01295 0346 	;
01296 0346 	;=========================================================================================
01297 0346 	;Idle routine for Absolute encoder position control w/ continuous rotation servo.
01298 0346 	;
01299 0346 	;Entry: ssCmdPos = user's command, ssCurPos
01300 0346 	;
01301 0346 	;error = ((EncoderVal + EncoderOffset) mod 16384)-ssCmdPos
01302 0346 	;if DeadBand>0 then
01303 0346 	;  if abs(error)<DeadBand then error=0
01304 0346 	;
01305 0346 	;if error=0 then
01306 0346 	;  IdleServo
01307 0346 	;else
01308 0346 	;  if error<-128 then error= -128
01309 0346 	;  if error>127 then error = 127
01310 0346 	;  servo=ServoStopCenter-error
01311 0346 	;
01312 0346 	; Ram Used:Param79,Param7A,Param7C,Param7D
01313 0346 	;
01314 0346 0020 	DoModeThree	movlb	0	;bank 0
01315 0347 1BB8 		btfsc	ssCmdPos+1,7
01316 0348 3208 		bra	DM3_ServoHere
01317 0349 	;
01318 0349 	;Check for over current, kill position command if over current is detected.
01319 0349 22CC 		call	CheckCurrent
01320 034A 1DBB 		btfss	OverCurrentFlag
01321 034B 320C 		bra	DM3_NotOverCurrent
01322 034C 	;
01323 034C 153C 		bsf	ssio_OverCurSD
01324 034D 11BB 		bcf	OverCurrentFlag
01325 034E 	;Flag as no cmd pos.
01326 034E 01B7 		clrf	ssCmdPos
01327 034F 01B8 		clrf	ssCmdPos+1
01328 0350 17B8 		bsf	ssCmdPos+1,7
01329 0351 	; Servo Here
01330 0351 0843 	DM3_ServoHere	movf	EncoderVal,W
01331 0352 0748 		addwf	EncoderOffset,W
01332 0353 00B9 	                       movwf                  ssCurPos
01333 0354 0844 		movf	EncoderVal+1,W
01334 0355 3D49 		addwfc	EncoderOffset+1,W
01335 0356 00BA 	                       movwf                  ssCurPos+1
01336 0357 	;
01337 0357 3286 		bra	DM3_IdleServo
01338 0358 	;
01339 0358 113C 	DM3_NotOverCurrent	bcf	ssio_OverCurSD
01340 0359 193D 	                       btfsc                  ssCmdPosVerified       ;Has been verified?
01341 035A 320A 	                       bra                    DM3_CPV_End            ; Yes
01342 035B 0837 	                       movf                   ssCmdPos,W             ; No, Clamp and mark as verified.
01343 035C 00FC 	                       movwf                  Param7C
01344 035D 0838 	                       movf                   ssCmdPos+1,W
01345 035E 00FD 	                       movwf                  Param7D
01346 035F 24FE 	                       call                   ClampInt               ;MD3_MinCmd<=ssCurPos<=MD3_MaxCmd
01347 0360 087C 	                       movf                   Param7C,W
01348 0361 00B7 	                       movwf                  ssCmdPos
01349 0362 087D 	                       movf                   Param7D,W
01350 0363 00B8 	                       movwf                  ssCmdPos+1
01351 0364 153D 	                       bsf                    ssCmdPosVerified
01352 0365 	DM3_CPV_End:
01353 0365 	;
01354 0365 	; if speed = 0 then just be there
01355 0365 08D4 	                       movf                   ServoSpeed,F
01356 0366 	                       SKPZ
01356 0366 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01357 0367 3205 	                       bra                    DM3_CalcCurPos
SerialServo.asm                                                       Page: 25
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01358 0368 0837 	DM3_ServoThere         movf                   ssCmdPos,W
01359 0369 00B9 	                       movwf                  ssCurPos
01360 036A 0838 	                       movf                   ssCmdPos+1,W
01361 036B 00BA 	                       movwf                  ssCurPos+1
01362 036C 3226 	                       bra                    DM3_SetServoPWM
01363 036D 	;
01364 036D 1C3B 	DM3_CalcCurPos         btfss	PulseSent	;Time to update?
01365 036E 3224 		bra	DM3_SetServoPWM	; No
01366 036F 103B 		bcf	PulseSent
01367 0370 	;
01368 0370 	;if ssCmdPos<>ssCurPos then
01369 0370 	;  if ssCmdPos>ssCurPos then
01370 0370 	;    if ssCmdPos>ssCurPos+ServoSpeed then
01371 0370 	;      ssCurPos += ServoSpeed
01372 0370 	;    else
01373 0370 	;      ssCurPos = ssCmdPos
01374 0370 	;  else
01375 0370 	;    if ssCmdPos<ssCurPos-ServoSpeed then
01376 0370 	;      ssCurPos -= ServoSpeed
01377 0370 	;    else
01378 0370 	;      ssCurPos = ssCmdPos
01379 0370 	;
01380 0370 0837 	                       movf                   ssCmdPos,W             ;ssCurPos-ssCmdPos
01381 0371 0239 	                       subwf                  ssCurPos,W
01382 0372 00F8 	                       movwf                  Param78
01383 0373 0838 	                       movf                   ssCmdPos+1,W
01384 0374 3B3A 	                       subwfb                 ssCurPos+1,W
01385 0375 0478 	                       iorwf                  Param78,W
01386 0376 	                       SKPNZ                                         ;ssCmdPos=ssCurPos/
01386 0376 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01387 0377 321B 	                       bra                    DM3_SetServoPWM        ; Yes
01388 0378 	;
01389 0378 	                       SKPB                                          ;ssCmdPos>ssCurPos?
01389 0378 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01390 0379 320D 	                       bra                    DM3_GoRev              ; No
01391 037A 	; ssCmdPos>ssCurPos forward
01392 037A 143C 	                       bsf                    MD3_FFwd
01393 037B 10BC 	                       bcf                    MD3_FRev
01394 037C 	;ssCurPos += ServoSpeed
01395 037C 0854 	                       movf                   ServoSpeed,W
01396 037D 07B9 	                       addwf                  ssCurPos,F
01397 037E 3000 	                       movlw                  0x00
01398 037F 3DBA 	                       addwfc                 ssCurPos+1,F
01399 0380 	;
01400 0380 0837 	                       movf                   ssCmdPos,W             ;(ssCurPos+Speed)-ssCmdPos
01401 0381 0239 	                       subwf                  ssCurPos,W
01402 0382 0838 	                       movf                   ssCmdPos+1,W
01403 0383 3B3A 	                       subwfb                 ssCurPos+1,W
01404 0384 	                       SKPB
01404 0384 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01405 0385 33E2 	                       bra                    DM3_ServoThere
01406 0386 320C 	                       bra                    DM3_SetServoPWM
01407 0387 	;                       
01408 0387 	; ssCmdPos<ssCurPos reverse
01409 0387 103C 	DM3_GoRev              bcf                    MD3_FFwd
01410 0388 14BC 	                       bsf                    MD3_FRev
01411 0389 	;
01412 0389 0854 	                       movf                   ServoSpeed,W
01413 038A 02B9 	                       subwf                  ssCurPos,F
01414 038B 3000 	                       movlw                  0x00
01415 038C 3BBA 	                       subwfb                 ssCurPos+1,F
01416 038D 	;
01417 038D 0837 	                       movf                   ssCmdPos,W             ;(ssCurPos-Speed)-ssCmdPos
01418 038E 0239 	                       subwf                  ssCurPos,W
01419 038F 0838 	                       movf                   ssCmdPos+1,W
01420 0390 3B3A 	                       subwfb                 ssCurPos+1,W
01421 0391 	                       SKPNB
01421 0391 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01422 0392 33D5 	                       bra                    DM3_ServoThere
01423 0393 	;
01424 0393 	;Param7A:Param79 = ((EncoderVal + EncoderOffset) mod 16384)
01425 0393 0843 	DM3_SetServoPWM	movf	EncoderVal,W
01426 0394 0748 		addwf	EncoderOffset,W
01427 0395 00F9 		movwf	Param79
01428 0396 0844 		movf	EncoderVal+1,W
01429 0397 3D49 		addwfc	EncoderOffset+1,W
01430 0398 393F 		andlw	0x3F
01431 0399 00FA 		movwf	Param7A
01432 039A 	; Calculate Error
01433 039A 	;Param7A:Param79 = ((EncoderVal + EncoderOffset) mod 16384) - ssCurPos
01434 039A 0839 		movf	ssCurPos,W	;(EncoderVal + EncoderOffset) mod 16384
01435 039B 02F9 		subwf	Param79,F
01436 039C 083A 		movf	ssCurPos+1,W
01437 039D 3BFA 		subwfb	Param7A,F
01438 039E 	; if error = 0 then idle
01439 039E 0879 	                       movf                   Param79,W
01440 039F 047A 	                       iorwf                  Param7A,W
01441 03A0 	                       SKPNZ
01441 03A0 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01442 03A1 323C 	                       bra                    DM3_IdleServo
01443 03A2 	; if DeadBand = 0 then skip DB check
01444 03A2 08DA 	                       movf                   DeadBand,F
01445 03A3 	                       SKPNZ
01445 03A3 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01446 03A4 3213 	                       bra                    DM3_NoDB
01447 03A5 	; if error<0 then Error_a=abs(error), Param7D:Param7C=abs(Param7A:Param79)
01448 03A5 0879 	                       movf                   Param79,W
01449 03A6 00FC 	                       movwf                  Param7C
01450 03A7 087A 	                       movf                   Param7A,W
SerialServo.asm                                                       Page: 26
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01451 03A8 00FD 	                       movwf                  Param7D
01452 03A9 1FFA 	                       btfss                  Param7A,7
01453 03AA 3206 	                       bra                    DM3_ErrIsPos
01454 03AB 01FC 	                       clrf                   Param7C
01455 03AC 01FD 	                       clrf                   Param7D
01456 03AD 0879 	                       movf                   Param79,W
01457 03AE 02FC 	                       subwf                  Param7C,F
01458 03AF 087A 	                       movf                   Param7A,W
01459 03B0 3BFD 	                       subwfb                 Param7D,F
01460 03B1 	;
01461 03B1 	;if Error_a>255 then ignor DB
01462 03B1 08FD 	DM3_ErrIsPos           movf                   Param7D,F
01463 03B2 	                       SKPZ                                          ;Error>255?
01463 03B2 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01464 03B3 3204 	                       bra                    DM3_NoDB               ; Yes
01465 03B4 085A 	                       movf                   DeadBand,W
01466 03B5 02FC 	                       subwf                  Param7C,F              ;Param7C = Error - DB
01467 03B6 	                       SKPNB                                         ;DB>Error?
01467 03B6 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01468 03B7 3226 	                       bra                    DM3_IdleServo          ; Yes
01469 03B8 	;
01470 03B8 	; if error<-128 then error = -128
01471 03B8 1FFA 	DM3_NoDB               btfss                  Param7A,7              ;Error is negative?
01472 03B9 3209 	                       bra                    DM3_PosLimit           ; No
01473 03BA 307F 	                       movlw                  0x7F
01474 03BB 0479 	                       iorwf                  Param79,W              ;high bit only
01475 03BC 057A 	                       andwf                  Param7A,W
01476 03BD 3AFF 	                       xorlw                  0xFF
01477 03BE 	                       SKPNZ                                         ;< -128?
01477 03BE 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01478 03BF 320A 	                       bra                    DM3_CalcSCmd           ; No
01479 03C0 3080 	                       movlw                  0x80                   ;-128
01480 03C1 00F9 	                       movwf                  Param79
01481 03C2 3207 	                       bra                    DM3_CalcSCmd
01482 03C3 	;
01483 03C3 	; if error >= 128 then error = 127
01484 03C3 3080 	DM3_PosLimit           movlw                  0x80
01485 03C4 0579 	                       andwf                  Param79,W              ;hi bit only
01486 03C5 047A 	                       iorwf                  Param7A,W              ;or w/ hi byte
01487 03C6 	                       SKPNZ                                         ;>= 128?
01487 03C6 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01488 03C7 3202 	                       bra                    DM3_CalcSCmd           ; No
01489 03C8 307F 	                       movlw                  0x7F
01490 03C9 00F9 	                       movwf                  Param79
01491 03CA 	;
01492 03CA 1CD8 	DM3_CalcSCmd           btfss                  ssReverseDir           ;Moves reversed?
01493 03CB 3209 	                       bra                    DM3_CalcSCmd_1         ; No
01494 03CC 0879 	                       movf                   Param79,W
01495 03CD 3C80 	                       sublw                  0x80                   ;test for -128
01496 03CE 	                       SKPZ                                          ;Is -128?
01496 03CE 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01497 03CF 3202 	                       bra                    DM3_CalcSCmd_2s
01498 03D0 3081 	                       movlw                  0x81                   ; Yes, Make it -127
01499 03D1 00F9 	                       movwf                  Param79
01500 03D2 0879 	DM3_CalcSCmd_2s        movf                   Param79,W
01501 03D3 3C00 	                       sublw                  0x00                   ; Yes, 2's comp
01502 03D4 00F9 	                       movwf                  Param79
01503 03D5 	DM3_CalcSCmd_1:      
01504 03D5 	;
01505 03D5 	;0.5 x gain
01506 03D5 	;                       asrf                   Param79,W
01507 03D5 	;
01508 03D5 	;
01509 03D5 0879 	                       movf                   Param79,W
01510 03D6 024E 	                       subwf                  ServoStopCenter,W
01511 03D7 00FC 	                       movwf                  Param7C
01512 03D8 3000 	                       movlw                  0x00
01513 03D9 1BF9 	                       btfsc                  Param79,7              ;is neg?
01514 03DA 30FF 	                       movlw                  0xFF                   ; yes, sign extend it
01515 03DB 3B4F 	                       subwfb                 ServoStopCenter+1,W
01516 03DC 00FD 	                       movwf                  Param7D
01517 03DD 3209 	                       bra	DM3_UpdatePos
01518 03DE 	;
01519 03DE 	;
01520 03DE 	; abs(Error) <= DeadBand
01521 03DE 	; if ssMode3IdleCenter then
01522 03DE 	;   servo=ServoStopCenter
01523 03DE 	; else
01524 03DE 	;   ServoIdle=true
01525 03DE 	;
01526 03DE 1DD8 	DM3_IdleServo	btfss	ssMode3IdleCenter
01527 03DF 320A 		bra	DM3_IdleInactive
01528 03E0 084E 		movf	ServoStopCenter,W
01529 03E1 00FC 		movwf	Param7C
01530 03E2 084F 		movf	ServoStopCenter+1,W
01531 03E3 00FD 		movwf	Param7D
01532 03E4 103C 	                       bcf                    MD3_FFwd
01533 03E5 10BC 	                       bcf                    MD3_FRev
01534 03E6 113B 		bcf	ServoIdle
01535 03E7 	;
01536 03E7 	; set current position at destination position
01537 03E7 	; Entry: Param7D:Param7C servo signal in 1/2 microseconds
01538 03E7 	;
01539 03E7 24F9 	DM3_UpdatePos	call	ClampIntMD3
01540 03E8 24BD 		call	Copy7CToSig
01541 03E9 2A95 		goto	ModeReturn
01542 03EA 	;
01543 03EA 	;
01544 03EA 153B 	DM3_IdleInactive	bsf	ServoIdle
SerialServo.asm                                                       Page: 27
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01545 03EB 103C 	                       bcf                    MD3_FFwd
01546 03EC 10BC 	                       bcf                    MD3_FRev
01547 03ED 2A95 		goto	ModeReturn
01548 03EE 	;
01549 03EE 	;=============================
01550 03EE 	;=========================================================================================
01551 03EE 	;Idle routine for Gripper Serial Servo mode
01552 03EE 	; Servo is set to idle only is no command or over current.
01553 03EE 	;
01554 03EE 0020 	DoMode4	movlb	0
01555 03EF 1BB8 		btfsc	ssCmdPos+1,7	;Any command issued?
01556 03F0 3245 		bra	DoMode4_1	; No, Idle the servo
01557 03F1 	;
01558 03F1 	;Check for over current, kill position command if over current is detected.
01559 03F1 22CC 		call	CheckCurrent
01560 03F2 22DE 		call	CheckGripCurrent
01561 03F3 1DBB 		btfss	OverCurrentFlag
01562 03F4 3206 		bra	DM4_NotOverCurrent
01563 03F5 01B7 		clrf	ssCmdPos	;kill the command
01564 03F6 01B8 		clrf	ssCmdPos+1
01565 03F7 17B8 		bsf	ssCmdPos+1,7
01566 03F8 153C 		bsf	ssio_OverCurSD
01567 03F9 11BB 		bcf	OverCurrentFlag
01568 03FA 323B 		bra	DoMode4_1	;Idle the servo
01569 03FB 	;
01570 03FB 	DM4_NotOverCurrent:
01571 03FB 	; Speed cannot be 0, if 0 set to 1 (slow)
01572 03FB 113C 		bcf	ssio_OverCurSD
01573 03FC 08D4 		movf	ServoSpeed,F
01574 03FD 		SKPNZ		;Speed = 0?
01574 03FD 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01575 03FE 0AD4 		incf	ServoSpeed,F	; yes, make it 1
01576 03FF 1C3B 		btfss	PulseSent	;Time to update?
01577 0400 2A95 		goto	ModeReturn	; No
01578 0401 103B 		bcf	PulseSent
01579 0402 	;Param7D:Param7C = Cmd-Cur
01580 0402 0839 		movf	ssCurPos,W
01581 0403 0237 		subwf	ssCmdPos,W
01582 0404 00FC 		movwf	Param7C
01583 0405 083A 		movf	ssCurPos+1,W
01584 0406 3B38 		subwfb	ssCmdPos+1,W
01585 0407 00FD 		movwf	Param7D
01586 0408 	; if Param7D:Param7C = 0 then we are In Position
01587 0408 047C 		iorwf	Param7C,W
01588 0409 		SKPNZ
01588 0409 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01589 040A 320F 		bra	DoMode4_Hold	; if Cmd = Cur Go
01590 040B 	;
01591 040B 	;Sign bit set if Cur>Cmd
01592 040B 1FFD 		BTFSS	Param7D,7	;Cmd>Cur?
01593 040C 3211 		bra	DoMode4_MovPlus	; Yes
01594 040D 	;Move minus
01595 040D 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01596 040E 2C15 		GOTO	DoMode4_Minus	; No
01597 040F 0854 		MOVF	ServoSpeed,W
01598 0410 077C 		ADDWF	Param7C,W
01599 0411 1C03 		BTFSS	_C	;Dist<Speed?
01600 0412 3202 		bra	DoMode4_Minus	; Yes
01601 0413 3001 		movlw	0x01	; No, use 1 as speed
01602 0414 3201 		bra	DoMode4_Minus_1
01603 0415 	;
01604 0415 	; Subtract speed from current position
01605 0415 0854 	DoMode4_Minus	MOVF	ServoSpeed,W
01606 0416 02B9 	DoMode4_Minus_1	SUBWF	ssCurPos,F	;SigOutTime
01607 0417 3000 		MOVLW	0x00
01608 0418 3BBA 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01609 0419 3213 		bra	DoMode4_Go
01610 041A 	;
01611 041A 	;=============================
01612 041A 	; if Cur_AN0>(ssGripI+0x10)*4 then move minus 1
01613 041A 1EBB 	DoMode4_Hold	btfss	GripIOver	;Gripping too hard?
01614 041B 2C2D 		goto	DoMode4_Go	; No
01615 041C 3001 		movlw	0x01	; No, use 2 as speed
01616 041D 33F8 		bra	DoMode4_Minus_1
01617 041E 	;
01618 041E 	;=============================
01619 041E 	; 7D:7C = distance to go
01620 041E 	;
01621 041E 1A3B 	DoMode4_MovPlus	btfsc	GripIMet	;Servo Current > ssGripI?
01622 041F 33FA 		bra	DoMode4_Hold	; Yes, don't move more closed.
01623 0420 	;
01624 0420 08FD 		MOVF	Param7D,F
01625 0421 		SKPZ		;Dist>255 to go?
01625 0421 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01626 0422 3206 		bra	DoMode4_Plus	; Yes
01627 0423 0854 		MOVF	ServoSpeed,W
01628 0424 027C 		SUBWF	Param7C,W	;Dist-Speed
01629 0425 		SKPB		;Speed>Dist?
01629 0425 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01630 0426 3202 		bra	DoMode4_Plus	; No
01631 0427 3001 		movlw	0x01	;Use 1 as speed
01632 0428 3201 		bra	DoMode4_Plus_1
01633 0429 	;
01634 0429 0854 	DoMode4_Plus	MOVF	ServoSpeed,W	;CurPos += Speed
01635 042A 07B9 	DoMode4_Plus_1	ADDWF	ssCurPos,F
01636 042B 0103 		CLRW
01637 042C 3DBA 		ADDWFC	ssCurPos+1,F
01638 042D 	;
01639 042D 	; make it so
SerialServo.asm                                                       Page: 28
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01640 042D 0839 	DoMode4_Go	movf	ssCurPos,W	;7D:7C = CurPos
01641 042E 00FC 		movwf	Param7C
01642 042F 083A 		movf	ssCurPos+1,W
01643 0430 00FD 		movwf	Param7D
01644 0431 24FE 		call	ClampInt
01645 0432 24BD 		call	Copy7CToSig
01646 0433 123B 		bcf	GripIMet
01647 0434 12BB 		bcf	GripIOver
01648 0435 2A95 		goto	ModeReturn
01649 0436 	;
01650 0436 	DoMode4_1:
01651 0436 153B 		bsf	ServoIdle	;power down servo
01652 0437 123B 		bcf	GripIMet
01653 0438 12BB 		bcf	GripIOver
01654 0439 2A95 		goto	ModeReturn
01655 043A 	;
01656 043A 	;=========================================================================================
01657 043A 	;=========================================================================================
01658 043A 	;DebounceTime,kMaxMode
01659 043A 	;Timer4Lo,SysMode
01660 043A 0020 	HandleButtons	movlb	0x00	;bank 0
01661 043B 08B2 		movf	Timer4Lo,F
01662 043C 		SKPNZ		;Debounced?
01662 043C 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01663 043D 320B 		bra	HdlBtn_1	; Yes
01664 043E 	;
01665 043E 185F 		btfsc	SW1_Flag
01666 043F 3206 		bra	HdlBtn_DB
01667 0440 18DF 		btfsc	SW2_Flag
01668 0441 3204 		bra	HdlBtn_DB
01669 0442 195F 		btfsc	SW3_Flag
01670 0443 3202 		bra	HdlBtn_DB
01671 0444 1DDF 		btfss	SW4_Flag
01672 0445 0008 		return
01673 0446 	;
01674 0446 300A 	HdlBtn_DB	movlw	DebounceTime
01675 0447 00B2 		movwf	Timer4Lo
01676 0448 0008 		return
01677 0449 	; we are de-bounced
01678 0449 185F 	HdlBtn_1	btfsc	SW1_Flag
01679 044A 3207 		bra	HdlBtn_Btn1
01680 044B 18DF 		btfsc	SW2_Flag
01681 044C 3206 		bra	HdlBtn_Btn2
01682 044D 195F 		btfsc	SW3_Flag
01683 044E 3205 		bra	HdlBtn_Btn3
01684 044F 19DF 		btfsc	SW4_Flag
01685 0450 3204 		bra	HdlBtn_Btn4
01686 0451 0008 		return
01687 0452 	;
01688 0452 	; Mode
01689 0452 	HdlBtn_Btn1:
01690 0452 2C46 		goto	HdlBtn_DB
01691 0453 	;
01692 0453 	HdlBtn_Btn2:
01693 0453 2C46 		goto	HdlBtn_DB
01694 0454 	;
01695 0454 	HdlBtn_Btn3:
01696 0454 2C46 		goto	HdlBtn_DB
01697 0455 	; not used
01698 0455 	HdlBtn_Btn4:
01699 0455 2C46 		goto	HdlBtn_DB
01700 0456 	;
01701 0456 	;=========================================================================================
01702 0456 	; Setup or Read AN0 or Read AN4
01703 0456 007C 	ANNumMask	EQU	0x7C
01704 0456 0000 	AN0_Val	EQU	0x00                   ;Current
01705 0456 0004 	AN1_Val	EQU	0x04                   ;Volts
01706 0456 0008 	AN2_Val	EQU	0x08                   ;SW1/LED1/Aux0
01707 0456 000C 	AN3_Val	EQU	0x0C                   ;SW2/LED2/Aux1
01708 0456 	;AN4_Val	EQU	0x10
01709 0456 	;AN7_Val	EQU	0x1C
01710 0456 	;
01711 0456 0021 	ReadAN	MOVLB	1	;bank 1
01712 0457 1C1D 		BTFSS	ADCON0,ADON	;Is the Analog input ON?
01713 0458 3259 		BRA	ReadAN0_ColdStart	; No, go start it
01714 0459 	;
01715 0459 189D 		BTFSC	ADCON0,GO_NOT_DONE	;Conversion done?
01716 045A 3260 		BRA	ReadAN_Rtn	; No
01717 045B 	;
01718 045B 3000 		movlw	HIGH Cur_AN0
01719 045C 0085 		movwf	FSR0H
01720 045D 081D 		movf	ADCON0,W
01721 045E 0020 		movlb	0x00	;bank 0
01722 045F 397C 		andlw	ANNumMask
01723 0460 		SKPNZ
01723 0460 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01724 0461 3222 		bra	ReadAN_AN0
01725 0462 	;
01726 0462 00F8 		movwf	Param78	;AN select bits
01727 0463 3004 		movlw                  AN1_Val
01728 0464 0278 		subwf                  Param78,W
01729 0465 		SKPNZ
01729 0465 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01730 0466 3235 		bra                    ReadAN_AN1             ;Batt Volts
01731 0467 	;
01732 0467 	;Aux0 SW1_LED1
01733 0467 085C 		movf	ssAux0Config,W
01734 0468 390F 		andlw	0x0F
01735 0469 3C04 		sublw	kAuxIOAnalogIn
SerialServo.asm                                                       Page: 29
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01736 046A 		SKPZ
01736 046A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01737 046B 3204 		bra	ReadAN_TryAN2
01738 046C 3008 		movlw	AN2_Val
01739 046D 0278 		subwf	Param78,W	;AN select bits
01740 046E 		SKPNZ
01740 046E 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01741 046F 322F 		bra	ReadAN_AN2
01742 0470 	;Aux1 SW2_LED2
01743 0470 085D 	ReadAN_TryAN2	movf	ssAux1Config,W
01744 0471 390F 		andlw	0x0F
01745 0472 3C04 		sublw	kAuxIOAnalogIn
01746 0473 		SKPZ
01746 0473 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01747 0474 3204 		bra	ReadAN_TryAN0
01748 0475 3008 		movlw	AN2_Val
01749 0476 0278 		subwf	Param78,W	;AN select bits
01750 0477 		SKPNZ
01750 0477 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01751 0478 3226 		bra	ReadAN_AN2
01752 0479 	;IServo
01753 0479 3000 	ReadAN_TryAN0	movlw	AN0_Val
01754 047A 0278 		subwf	Param78,W
01755 047B 		SKPNZ
01755 047B 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01756 047C 3207 		bra	ReadAN_AN0
01757 047D 	;
01758 047D 3000 		movlw	AN0_Val	;next to read
01759 047E 00F8 		movwf	Param78
01760 047F 30B3 		movlw	LOW Cur_AN0
01761 0480 0084 		movwf	FSR0L
01762 0481 0021  a		MOVLB	Cur_AN0	;banksel
01761 0482 		BankSel	Cur_AN0	;where the analog stuff is
01763 0482 1432 		bsf	NewDataAN0
01764 0483 3221 		bra	ReadAN_1
01765 0484 	;
01766 0484 30B3 	ReadAN_AN0	movlw	low Cur_AN0
01767 0485 0084 		movwf	FSR0L
01768 0486 0021  a		MOVLB	Cur_AN0	;banksel
01767 0487 		BankSel	Cur_AN0	;where the analog stuff is
01769 0487 1432 		bsf	NewDataAN0
01770 0488 3004 		movlw	AN1_Val	;next to read
01771 0489 00F8 		movwf	Param78
01772 048A 	;	movf	ssAux0Config,W
01773 048A 	;	andlw	0x0F
01774 048A 	;	sublw	kAuxIOAnalogIn
01775 048A 	;	SKPNZ
01776 048A 321A 		bra	ReadAN_1
01777 048B 	;
01778 048B 3008 	ReadAN_AN0_1	movlw	AN2_Val	;next to read
01779 048C 00F8 		movwf	Param78
01780 048D 085C 		movf	ssAux0Config,W
01781 048E 390F 		andlw	0x0F
01782 048F 3C04 		sublw	kAuxIOAnalogIn
01783 0490 		SKPNZ
01783 0490 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01784 0491 3213 		bra	ReadAN_1
01785 0492 	;
01786 0492 300C 	ReadAN_AN0_2	movlw	AN3_Val	;next to read
01787 0493 00F8 		movwf	Param78
01788 0494 085D 		movf	ssAux1Config,W
01789 0495 390F 		andlw	0x0F
01790 0496 3C04 		sublw	kAuxIOAnalogIn
01791 0497 		SKPNZ
01791 0497 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01792 0498 320C 		bra	ReadAN_1
01793 0499 	;
01794 0499 3000 	ReadAN_AN0_3	movlw	AN0_Val	;next to read
01795 049A 00F8 		movwf	Param78
01796 049B 3209 		bra	ReadAN_1
01797 049C 	;
01798 049C 30B5 	ReadAN_AN1	movlw	low Cur_AN1
01799 049D 0084 		movwf	FSR0L
01800 049E 33EC 		bra	ReadAN_AN0_1
01801 049F 	;
01802 049F 30B7 	ReadAN_AN2	movlw	low Cur_AN2
01803 04A0 0084 		movwf	FSR0L
01804 04A1 33F0 		bra	ReadAN_AN0_2
01805 04A2 	;
01806 04A2 30B9 	ReadAN_AN3	movlw	low Cur_AN3
01807 04A3 0084 		movwf	FSR0L
01808 04A4 33F4 		bra	ReadAN_AN0_3
01809 04A5 	;
01810 04A5 0021 	ReadAN_1	movlb	0x01	;bank 1
01811 04A6 081B 		MOVF	ADRESL,W
01812 04A7 001A 		MOVWI	FSR0++
01813 04A8 081C 		MOVF	ADRESH,W
01814 04A9 001A 		MOVWI	FSR0++
01815 04AA 	;
01816 04AA 0878 		movf	Param78,W
01817 04AB 1409 		BSF	WREG,0	;ADC ON
01818 04AC 009D 		MOVWF	ADCON0
01819 04AD 3004 		movlw	0x04	;Acquisition time 5uS
01820 04AE 212D 		call	DelayWuS
01821 04AF 149D 		BSF	ADCON0,ADGO	;Start next conversion.
01822 04B0 0020 		movlb	0x00	; bank 0
01823 04B1 0008 		return
01824 04B2 	;
01825 04B2 0021 	ReadAN0_ColdStart	MOVLB	1
SerialServo.asm                                                       Page: 30
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01826 04B3 30E0 		MOVLW	b'11100000'	;Right Just, fosc/64
01827 04B4 	;	MOVLW	b'11110000'	;Right Just, Frc
01828 04B4 009E 		MOVWF	ADCON1
01829 04B5 3000 		MOVLW	AN0_Val	;Select AN0
01830 04B6 1409 		BSF	WREG,0	;ADC ON
01831 04B7 009D 		MOVWF	ADCON0
01832 04B8 3004 		movlw	0x04	;Acquisition time 5uS
01833 04B9 212D 		call	DelayWuS
01834 04BA 149D 	ReadAN_3	BSF	ADCON0,GO
01835 04BB 	ReadAN_Rtn:
01836 04BB 0020 	Bank0_Rtn	MOVLB	0
01837 04BC 0008 		Return
01838 04BD 	;
01839 04BD 	;=========================================================================================
01840 04BD 	;
01841 04BD 	; Don't disable interrupts if you don't need to...
01842 04BD 0025 	Copy7CToSig	MOVLB	0x05	;bank 5
01843 04BE 087C 		MOVF	Param7C,W
01844 04BF 0220 		SUBWF	SigOutTime,W
01845 04C0 		SKPZ
01845 04C0 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
01846 04C1 3204 		bra	Copy7CToSig_1
01847 04C2 087D 		MOVF	Param7D,W
01848 04C3 0221 		SUBWF	SigOutTimeH,W
01849 04C4 		SKPNZ
01849 04C4 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
01850 04C5 3208 		bra	Copy7CToSig_Done
01851 04C6 	;
01852 04C6 138B 	Copy7CToSig_1	bcf	INTCON,GIE
01853 04C7 1B8B 		btfsc	INTCON,GIE
01854 04C8 33FD 		bra	Copy7CToSig_1
01855 04C9 087C 		MOVF	Param7C,W
01856 04CA 00A0 		MOVWF	SigOutTime
01857 04CB 087D 		MOVF	Param7D,W
01858 04CC 00A1 		MOVWF	SigOutTimeH
01859 04CD 178B 		bsf	INTCON,GIE
01860 04CE 0020 	Copy7CToSig_Done	movlb	0	;bank 0
01861 04CF 113B 		BCF	ServoIdle
01862 04D0 0008 		return
01863 04D1 	;
01864 04D1 	;=========================================================================================
01865 04D1 	;=========================================================================================
01866 04D1 	; Set CCP1 to go high is 0x100 clocks
01867 04D1 	;
01868 04D1 0020 	StartServo	MOVLB	0	;bank 0
01869 04D2 1CBB 		BTFSS	ServoOff
01870 04D3 0008 		RETURN
01871 04D4 10BB 		BCF	ServoOff
01872 04D5 	;
01873 04D5 24E8 		CALL	SetMiddlePosition
01874 04D6 24BD 		CALL	Copy7CToSig
01875 04D7 	;
01876 04D7 0025 		movlb	0x05	;bank 5
01877 04D8 3040 		MOVLW	LOW kServoDwellTime
01878 04D9 00A2 		MOVWF	CalcdDwell
01879 04DA 309C 		MOVLW	HIGH kServoDwellTime
01880 04DB 00A3 		MOVWF	CalcdDwellH
01881 04DC 0020 		movlb	0	;bank 0
01882 04DD 	;
01883 04DD 3000 		MOVLW	0x00	;start in 0x100 clocks
01884 04DE 0096 		MOVWF	TMR1L
01885 04DF 30FF 		MOVLW	0xFF
01886 04E0 0097 		MOVWF	TMR1H
01887 04E1 	;
01888 04E1 0025 		MOVLB	0x05
01889 04E2 0192 		CLRF	CCPR1H
01890 04E3 0191 		CLRF	CCPR1L
01891 04E4 3008 		MOVLW	CCP1CON_Set
01892 04E5 0093 		MOVWF	CCP1CON	;go high on match
01893 04E6 0020 		MOVLB	0x00	;Bank 0
01894 04E7 0008 		RETURN
01895 04E8 	;
01896 04E8 	;=========
01897 04E8 	;
01898 04E8 30B8 	SetMiddlePosition	MOVLW	LOW kMidPulseWidth
01899 04E9 00FC 		MOVWF	Param7C
01900 04EA 300B 		MOVLW	HIGH kMidPulseWidth
01901 04EB 00FD 		MOVWF	Param7D
01902 04EC 0008 		Return
01903 04ED 	;
01904 04ED 	;=========================================================================================
01905 04ED 0020 	StopServo	movlb	0	;bank 0
01906 04EE 18BB 		BTFSC	ServoOff
01907 04EF 0008 		RETURN
01908 04F0 	;
01909 04F0 0025 		movlb	0x05	;bank 5
01910 04F1 3040 		MOVLW	LOW kServoDwellTime
01911 04F2 00A2 		MOVWF	CalcdDwell
01912 04F3 309C 		MOVLW	HIGH kServoDwellTime
01913 04F4 00A3 		MOVWF	CalcdDwellH
01914 04F5 0020 		movlb	0	;bank 0
01915 04F6 153B 		BSF	ServoIdle
01916 04F7 14BB 		BSF	ServoOff
01917 04F8 0008 		return
01918 04F9 	;
01919 04F9 	;=========================================================================================
01920 04F9 	; ClampIntMD3(Param7D:Param7C,ServoFastReverse,ServoFastForward)
01921 04F9 	;
01922 04F9 	ClampIntMD3            mMOVLF                 ServoFastReverse,FSR0
SerialServo.asm                                                       Page: 31
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01922 04F9 304A      M		movlw	low ServoFastReverse	                       movlw                  low ADDRESS
01922 04FA 0084      M		movwf	FSR0	                       movwf                  DEST
01922 04FB 3000      M		movlw	high ServoFastReverse	                       movlw                  high ADDRESS
01922 04FC 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
01923 04FD 3204 	                       bra                    ClampInt_E2
01924 04FE 	;
01925 04FE 	;---------------------
01926 04FE 	; ClampInt(Param7D:Param7C,ServoMin_uS,ServoMax_uS)
01927 04FE 	;
01928 04FE 	; Entry: Param7D:Param7C
01929 04FE 	; Exit: Param7D:Param7C=ClampInt(Param7D:Param7C,ServoMin_uS,ServoMax_uS)
01930 04FE 	; Ram Used: FSR0
01931 04FE 	;
01932 04FE 	ClampInt	mMOVLF                 ServoMin_uS,FSR0
01932 04FE 3050      M		movlw	low ServoMin_uS	                       movlw                  low ADDRESS
01932 04FF 0084      M		movwf	FSR0	                       movwf                  DEST
01932 0500 3000      M		movlw	high ServoMin_uS	                       movlw                  high ADDRESS
01932 0501 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
01933 0502 0020 	ClampInt_E2            movlb	0
01934 0503 	;W = Cmd - Max
01935 0503 3F02 	                       moviw                  2[FRS0]
01936 0504 027C 	                       subwf                  Param7C,W
01937 0505 3F03 	                       moviw                  3[FRS0]
01938 0506 3B7D 	                       subwfb                 Param7D,W
01939 0507 	                       SKPB                                          ;Cmd > Max?
01939 0507 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01940 0508 320D 	                       bra                    ClampInt_tooHigh       ; Yes, Fix it
01941 0509 3200 	                       bra                    ClampInt_1             ; No, check for < Min
01942 050A 	;
01943 050A 	; W=Cmd - Min
01944 050A 3F00 	ClampInt_1             moviw                  0[FRS0]
01945 050B 027C 	                       subwf                  Param7C,W
01946 050C 3F01 	                       moviw                  1[FSR0]
01947 050D 3B7D 	                       subwfb                 Param7D,W
01948 050E 	                       SKPB                                          ;Cmd > Min?
01948 050E 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01949 050F 0008 	                       return                                        ; Yes
01950 0510 3200 	                       bra                    ClampInt_tooLow        ; No, Fix it
01951 0511 	;
01952 0511 3F00 	ClampInt_tooLow	moviw                  0[FRS0]
01953 0512 00FC 		MOVWF	Param7C
01954 0513 3F01 		moviw                  1[FRS0]
01955 0514 00FD 		MOVWF	Param7D
01956 0515 0008 		RETURN
01957 0516 	;
01958 0516 3F02 	ClampInt_tooHigh	moviw                  2[FRS0]
01959 0517 00FC 		MOVWF	Param7C
01960 0518 3F03 		moviw                  3[FRS0]
01961 0519 00FD 		MOVWF	Param7D
01962 051A 0008 		RETURN
01963 051B 	;
01964 051B 	;=========================================================================================
01965 051B 	;=========================================================================================
01966 051B 	;
01967 051B 	                       if UsePID
01970 051B 		endif
01971 051B 	;
01972 051B 	;
01973 051B 	;
01974 051B 		org 0x800
01975 0800 		include <SerialServoCmds.inc>
00001 0800 	;=========================================================================================
00002 0800 	;
00003 0800 	;    Filename:      SerialServoCmds.inc
00004 0800 	;    Date:          6/1/2018
00005 0800 	;    File Version:  1.1
00006 0800 	;
00007 0800 	;    Author:        David M. Flynn
00008 0800 	;    Company:       Oxford V.U.E., Inc.
00009 0800 	;    E-Mail:        dflynn@oxfordvue.com
00010 0800 	;    Web Site:      http://www.oxfordvue.com/
00011 0800 	;
00012 0800 	;=========================================================================================
00013 0800 	; Notes:
00014 0800 	;  Command interpreter for SerialServo
00015 0800 	;
00016 0800 	; History
00017 0800 	; 1.1    6/1/2018	All commands are here now.
00018 0800 	; 1.0    5/25/2018	Moved out of SerialServo.asm
00019 0800 	;=========================================================================================
00020 0800 	;
00021 0800 0081 	kCmd_SetMode	EQU	0x81	;+1 data (SysMode), return ACK
00022 0800 0001 	kCmd_GetMode	EQU	0x01
00023 0800 0082 	kCmd_SetCmdPos	EQU	0x82	;+2 data (ssCmdPos), return ACK
00024 0800 0002 	kCmd_GetCmdPos	EQU	0x02
00025 0800 0083 	kCmd_SetMaxI	EQU	0x83	;+1 data (ssMaxI), return ACK
00026 0800 0003 	kCmd_GetMaxI	EQU	0x03
00027 0800 0084 	kCmd_SetFFwd	EQU	0x84	;+2 data (ServoFastForward), return ACK
00028 0800 0004 	kCmd_GetFFwd	EQU	0x04
00029 0800 0085 	kCmd_SetFRev	EQU	0x85	;+2 data (ServoFastReverse), return ACK
00030 0800 0005 	kCmd_GetFRev	EQU	0x05
00031 0800 0086 	kCmd_SetMin_uS	EQU	0x86	;+2 data (ServoMin_uS), return ACK
00032 0800 0006 	kCmd_GetMin_uS	EQU	0x06
00033 0800 0087 	kCmd_SetMax_uS	EQU	0x87	;+2 data (ServoMax_uS), return ACK
00034 0800 0007 	kCmd_GetMax_uS	EQU	0x07
00035 0800 0088 	kCmd_SetRevDir	EQU	0x88	;+1 data (ssReverseDir), return ACK
00036 0800 0008 	kCmd_GetRevDir	EQU	0x08
00037 0800 0089 	kCmd_SetEnaOvrCur	EQU	0x89	;+1 data (ssEnableOverCur), return ACK
00038 0800 0009 	kCmd_GetEnaOvrCur	EQU	0x09
SerialServo.asm                                                       Page: 32
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00039 0800 	;
00040 0800 008B 	kCmd_SetStopCenter	EQU	0x8B	;+2 data (ServoStopCenter), return ACK
00041 0800 000B 	kCmd_GetStopCenter	EQU	0x0B
00042 0800 008C 	kCmd_SetSpeed	EQU	0x8C	;+1 data (ServoSpeed), return ACK
00043 0800 000C 	kCmd_GetSpeed	EQU	0x0C
00044 0800 008D 	kCmd_SetUseIdleCenter	EQU	0x8D	;+1 data (ssMode3IdleCenter), return ACK
00045 0800 000D 	kCmd_GetUseIdleCenter	EQU	0x0D
00046 0800 008E 	kCmd_SetDeadBand	EQU	0x8E	;+1 data (DeadBand), return ACK
00047 0800 000E 	kCmd_GetDeadBand	EQU	0x0E
00048 0800 008F 	kCmd_SetUseFastPWM	EQU	0x8F	;+1 data (ssEnableFastPWM), return ACK
00049 0800 000F 	kCmd_GetUseFastPWM	EQU	0x0F
00050 0800 	;
00051 0800 00B1 	kCmd_SetGripI	EQU	0xB1	;+1 data (ssGripI), return ACK
00052 0800 0021 	kCmd_GetGripI	EQU	0x21
00053 0800 00B2 	kCmd_SetAuxConfig	EQU	0xB2	;+2 data (AuxNum,Value), return ACK
00054 0800 0022 	kCmd_GetAuxConfig	EQU	0x22	;+1 data (AuxNum)
00055 0800 00B3 	kCmd_SetAuxNValue	EQU	0xB3	;+2 data (AuxNum,Value), return ACK
00056 0800 0023 	kCmd_GetAuxNValue	EQU	0x23	;(AuxN,ValueL,ValueH)
00057 0800 00B4 	kCmd_SetEncoderOffset	EQU	0xB4	;+2 data (EncoderOffset), return ACK
00058 0800 0024 	kCmd_GetEncoderOffset	EQU	0x24
00059 0800 	                       if UsePID
00066 0800 	                       endif
00067 0800 	;
00068 0800 0091 	kCmd_GetI	EQU	0x91	;return Cur_AN0
00069 0800 0092 	kCmd_GetEnc	EQU	0x92	;return EncoderVal
00070 0800 0093 	kCmd_GetEncAbs	EQU	0x93	;return EncoderAccum
00071 0800 0094 	kCmd_SaveParams	EQU	0x94	;Save all eeprom params, return ACK
00072 0800 0095 	kCmd_RestoreParams	EQU	0x95	;Copy to ram, return ACK
00073 0800 0096 	kCmd_GetBattVolts	EQU	0x96	;return Cur_AN7
00074 0800 0097 	kCmd_GetCalPot	EQU	0x97	;return Cur_AN4
00075 0800 0098 	kCmd_GetStatus	EQU	0x98	;return ssStatus
00076 0800 0099 	kCmd_ReBoot	EQU	0x99	;ReBoot the controller
00077 0800 009A 	kCmd_RunBootloader	EQU	0x9A	;Set EEPROM (0xFF) = 0xFF and reboot
00078 0800 	;
00079 0800 	; these commands save params and return a 0,0,0,0 packet with the new address
00080 0800 00A1 	kCmd_SetMasterAddr	EQU	0xA1	;+1 data, return a zero packet
00081 0800 00A2 	kCmd_SetSlaveAddr	EQU	0xA2	;+1 data, return a zero packet
00082 0800 	;
00083 0800 	;Special packet (0xDD, 0xDD, 0x01, 0x02, 0xAA, 0x00, 0x00, 0x00, checksum)
00084 0800 00AA 	kCmd_SendIDString	EQU	0xAA	; returns "DMFE Serial Servo\n"
00085 0800 	;
00086 0800 	;=========================================================================================
00087 0800 	;
00088 0800 	RS232_Send_S0	mLongCall	RS232_Send
00088 0800 3182      M		movlp	RS232_Send	                       movlp                  Destination
00088 0801 2241      M		call	RS232_Send	                       call                   Destination
00088 0802 3188      M		movlp	$	                       movlp                  $
00089 0803 0008 		return
00090 0804 	;
00091 0804 	;=========================================================================================
00092 0804 	; Entry: RXDataIsNew=1, data in RX_Data
00093 0804 	;
00094 0804 0021 	HandleRXData	movlb	RX_Flags	;bank 1
00095 0805 10A1 		bcf	RXDataIsNew
00096 0806 1821 		btfsc	RXDataValidFlag	;from master to me?
00097 0807 3202 		bra	HandleRXData_1
00098 0808 0020 	HandleRXData_Rtn	movlb	0	;bank 0
00099 0809 0008 		return		; no, ignore this packet
00100 080A 	;
00101 080A 0020 	HandleRXData_1	movlb	0	;bank 0
00102 080B 	                       mMOVLF	RX_Data,FSR1
00102 080B 30AA      M		movlw	low RX_Data	                       movlw                  low ADDRESS
00102 080C 0086      M		movwf	FSR1	                       movwf                  DEST
00102 080D 3000      M		movlw	high RX_Data	                       movlw                  high ADDRESS
00102 080E 0087      M		movwf	FSR1+1	                       movwf                  DEST+1
00103 080F 		mMOVLF	TX_Data,FSR0
00103 080F 30AE      M		movlw	low TX_Data	                       movlw                  low ADDRESS
00103 0810 0084      M		movwf	FSR0	                       movwf                  DEST
00103 0811 3000      M		movlw	high TX_Data	                       movlw                  high ADDRESS
00103 0812 0085      M		movwf	FSR0+1	                       movwf                  DEST+1
00104 0813 	;Dispatcher
00105 0813 	;
00106 0813 0016 		moviw	FSR1++
00107 0814 00F8 		movwf	Param78	;aka RX_Data
00108 0815 39F0 		andlw                  0xF0
00109 0816 		SKPZ
00109 0816 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00110 0817 3213 		bra                    Dispatcher_1
00111 0818 0878 		movf                   Param78,W
00112 0819 390F 		andlw                  0x0F
00113 081A 	;Jump table for 0x00 to 0x0F
00114 081A 000B 	                       brw
00115 081B 0008 	                       return                                        ;0x00 not used
00116 081C 327F 	                       bra                    Cmd_GetMode
00117 081D 3286 	                       bra                    Cmd_GetCmdPos
00118 081E 28AD 	                       goto                   Cmd_GetMaxI
00119 081F 28B5 	                       goto                   Cmd_GetFFwd
00120 0820 28BF 	                       goto                   Cmd_GetFRev
00121 0821 28C9 	                       goto                   Cmd_GetMin_uS
00122 0822 28D3 	                       goto                   Cmd_GetMax_uS
00123 0823 28DE 	                       goto                   Cmd_GetRevDir
00124 0824 28E7 	                       goto                   Cmd_GetEnaOvrCur       ;9
00125 0825 0008 	                       return
00126 0826 28EF 	                       goto                   Cmd_GetStopCenter
00127 0827 28F8 	                       goto                   Cmd_GetSpeed
00128 0828 2901 	                       goto                   Cmd_GetUseIdleCenter
00129 0829 2907 	                       goto                   Cmd_GetDeadBand
00130 082A 2910 	                       goto                   Cmd_GetUseFastPWM
00131 082B 	;
SerialServo.asm                                                       Page: 33
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00132 082B 3C80 	Dispatcher_1           sublw                  0x80
00133 082C 	                       SKPZ
00133 082C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00134 082D 3213 	                       bra                    Dispatcher_2
00135 082E 0878 	                       movf                   Param78,W
00136 082F 390F 		andlw                  0x0F
00137 0830 	;Jump table for 0x80 to 0x8F
00138 0830 000B 	                       brw
00139 0831 0008 	                       return                                        ;0x80 not used
00140 0832 3262 	                       bra                    Cmd_SetMode
00141 0833 326B 	                       bra                    Cmd_SetCmdPos
00142 0834 28AA 	                       goto                   Cmd_SetMaxI
00143 0835 28B0 	                       goto                   Cmd_SetFFwd
00144 0836 28BA 	                       goto                   Cmd_SetFRev
00145 0837 28C4 	                       goto                   Cmd_SetMin_uS
00146 0838 28CE 	                       goto                   Cmd_SetMax_uS
00147 0839 28D8 	                       goto                   Cmd_SetRevDir
00148 083A 28E1 	                       goto                   Cmd_SetEnaOvrCur
00149 083B 0008 	                       return
00150 083C 28EA 	                       goto                   Cmd_SetStopCenter
00151 083D 28F4 	                       goto                   Cmd_SetSpeed
00152 083E 28FB 	                       goto                   Cmd_SetUseIdleCenter
00153 083F 2904 	                       goto                   Cmd_SetDeadBand
00154 0840 290A 	                       goto                   Cmd_SetUseFastPWM
00155 0841 	;
00156 0841 	;Jump table for 0x20 to 0x27
00157 0841 0878 	Dispatcher_2           movf                   Param78,W
00158 0842 39F0 	                       andlw                  0xF0
00159 0843 3C20 	                       sublw                  0x20
00160 0844 	                       SKPZ
00160 0844 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00161 0845 320D 	                       bra                    Dispatcher_3
00162 0846 19F8 	                       btfsc                  Param78,3              ;>7?
00163 0847 0008 	                       return                                        ; Yes, oops
00164 0848 3007 	                       movlw                  0x07
00165 0849 0578 	                       andwf                  Param78,W
00166 084A 000B 	                       brw
00167 084B 0008 	                       return
00168 084C 2916 	                       goto                   Cmd_GetGripI
00169 084D 2925 	                       goto                   Cmd_GetAuxConfig
00170 084E 294E 	                       goto                   Cmd_GetAuxNValue
00171 084F 2995 	                       goto                   Cmd_GetEncoderOffset
00172 0850 	                       if UsePID
00176 0850 	                       else
00177 0850 0008 	                       return
00178 0851 0008 	                       return
00179 0852 0008 	                       return
00180 0853 	                       endif
00181 0853 	;
00182 0853 0878 	Dispatcher_3           movf                   Param78,W
00183 0854 39F0 	                       andlw                  0xF0
00184 0855 3CB0 	                       sublw                  0xB0
00185 0856 	                       SKPZ
00185 0856 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00186 0857 320D 	                       bra                    Dispatcher_4
00187 0858 19F8 	                       btfsc                  Param78,3              ;>7?
00188 0859 0008 	                       return                                        ; Yes, oops
00189 085A 3007 	                       movlw                  0x07
00190 085B 0578 	                       andwf                  Param78,W
00191 085C 000B 	                       brw
00192 085D 0008 	                       return
00193 085E 2913 	                       goto                   Cmd_SetGripI
00194 085F 2919 	                       goto                   Cmd_SetAuxConfig
00195 0860 2931 	                       goto                   Cmd_SetAuxNValue
00196 0861 2990 	                       goto                   Cmd_SetEncoderOffset
00197 0862 	                       if UsePID
00201 0862 	                       else
00202 0862 0008 	                       return
00203 0863 0008 	                       return
00204 0864 0008 	                       return
00205 0865 	                       endif
00206 0865 	;
00207 0865 	;Jump table for 0x90 to 0x9F
00208 0865 0878 	Dispatcher_4           movf                   Param78,W
00209 0866 39F0 	                       andlw                  0xF0
00210 0867 3C90 	                       sublw                  0x90
00211 0868 	                       SKPZ
00211 0868 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00212 0869 3213 	                       bra                    Dispatcher_5
00213 086A 300F 	                       movlw                  0x0F
00214 086B 0578 	                       andwf                  Param78,W
00215 086C 000B 	                       brw
00216 086D 0008 	                       return                                        ;0x90 not used
00217 086E 299A 	                       goto                   Cmd_GetI
00218 086F 29A0 	                       goto                   Cmd_GetEnc
00219 0870 29A5 	                       goto                   Cmd_GetEncAbs
00220 0871 29B0 	                       goto                   Cmd_SaveParams
00221 0872 29B4 	                       goto                   Cmd_RestoreParams
00222 0873 29B8 	                       goto                   Cmd_GetBattVolts
00223 0874 0008 	                       return                                        ;goto                   Cmd_GetCalPot
00224 0875 29C4 	                       goto                   Cmd_GetStatus
00225 0876 0001 	                       reset                                         ;Cmd_ReBoot
00226 0877 29D1 	                       goto                   Cmd_RunBootloader
00227 0878 0008 	                       return
00228 0879 0008 	                       return
00229 087A 0008 	                       return
00230 087B 0008 	                       return
00231 087C 0008 	                       return
00232 087D 	;
SerialServo.asm                                                       Page: 34
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00233 087D 	;Jump table for 0xA0 to 0xAF
00234 087D 0878 	Dispatcher_5           movf                   Param78,W
00235 087E 39F0 	                       andlw                  0xF0
00236 087F 3CA0 	                       sublw                  0xA0
00237 0880 	                       SKPZ
00237 0880 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00238 0881 3203 	                       bra                    Dispatcher_6
00239 0882 300F 	                       movlw                  0x0F
00240 0883 0578 	                       andwf                  Param78,W
00241 0884 000B 	                       brw
00242 0885 0008 	Dispatcher_6           return                                        ;0xA0 not used
00243 0886 29D7 	                       goto                   Cmd_SetMasterAddr
00244 0887 29DD 	                       goto                   Cmd_SetSlaveAddr
00245 0888 0008 	                       return
00246 0889 0008 	                       return
00247 088A 0008 	                       return
00248 088B 0008 	                       return
00249 088C 0008 	                       return
00250 088D 0008 	                       return
00251 088E 0008 	                       return
00252 088F 29E3 	                       goto                   Cmd_SendIDString       ;0xAA
00253 0890 0008 	                       return
00254 0891 0008 	                       return
00255 0892 0008 	                       return
00256 0893 0008 	                       return
00257 0894 0008 	                       return
00258 0895 	;
00259 0895 	;---kCmd_SetMode----------------
00260 0895 	; Set Mode
00261 0895 3005 	Cmd_SetMode	movlw	kMaxMode+1
00262 0896 0201 		subwf	INDF1,W
00263 0897 		SKPB		;kMaxMode+1>Data
00263 0897 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00264 0898 336F 		bra	HandleRXData_Rtn
00265 0899 	;
00266 0899 0016 		moviw	FSR1++
00267 089A 00D5 		movwf	SysMode
00268 089B 2A04 		goto	TX_ACK
00269 089C 	;
00270 089C 	;---kCmd_GetMode------------------
00271 089C 0855 	Cmd_GetMode	movf	SysMode,W
00272 089D 001A 		movwi	FSR0++
00273 089E 2800 		goto	RS232_Send_S0
00274 089F 	;
00275 089F 	;---kCmd_SetCmdPos-------------------
00276 089F 	; Set Command Position
00277 089F 0016 	Cmd_SetCmdPos	moviw	FSR1++
00278 08A0 00B7 		movwf	ssCmdPos
00279 08A1 0016 		moviw	FSR1++
00280 08A2 00B8 		movwf	ssCmdPos+1
00281 08A3 2A04 		goto	TX_ACK
00282 08A4 	;
00283 08A4 	;---kCmd_GetCmdPos------------------
00284 08A4 	; Get Command Position
00285 08A4 0837 	Cmd_GetCmdPos	movf	ssCmdPos,W
00286 08A5 001A 		movwi	FSR0++
00287 08A6 0838 		movf	ssCmdPos+1,W
00288 08A7 001A 		movwi	FSR0++
00289 08A8 113D 		bcf                    ssCmdPosVerified
00290 08A9 2800 		goto	RS232_Send_S0
00291 08AA 	;
00292 08AA 	Cmd_GetCmdPos_end:
00293 08AA 	;---kCmd_SetMaxI-------------------
00294 08AA 	; Set Max Current
00295 08AA 0016 	Cmd_SetMaxI	moviw	FSR1++
00296 08AB 00D9 		movwf	ssMaxI
00297 08AC 2A04 		goto	TX_ACK
00298 08AD 	;
00299 08AD 	;---kCmd_GetMaxI-------------------
00300 08AD 	; Get Max Current
00301 08AD 0859 	Cmd_GetMaxI	movf	ssMaxI,W
00302 08AE 001A 		movwi	FSR0++
00303 08AF 2800 		goto	RS232_Send_S0
00304 08B0 	;
00305 08B0 	;---kCmd_SetFFwd-------------------
00306 08B0 	; Set ServoFastForward
00307 08B0 0016 	Cmd_SetFFwd	moviw	FSR1++
00308 08B1 00CC 		movwf	ServoFastForward
00309 08B2 0016 		moviw	FSR1++
00310 08B3 00CD 		movwf	ServoFastForward+1
00311 08B4 2A04 		goto	TX_ACK
00312 08B5 	;
00313 08B5 	;---kCmd_GetFFwd-------------------
00314 08B5 	; Get ServoFastForward
00315 08B5 084C 	Cmd_GetFFwd	movf	ServoFastForward,W
00316 08B6 001A 		movwi	FSR0++
00317 08B7 084D 		movf	ServoFastForward+1,W
00318 08B8 001A 		movwi	FSR0++
00319 08B9 2800 		goto	RS232_Send_S0
00320 08BA 	;
00321 08BA 	;---kCmd_SetFRev-------------------
00322 08BA 	; Set ServoFastReverse
00323 08BA 0016 	Cmd_SetFRev	moviw	FSR1++
00324 08BB 00CA 		movwf	ServoFastReverse
00325 08BC 0016 		moviw	FSR1++
00326 08BD 00CB 		movwf	ServoFastReverse+1
00327 08BE 2A04 		goto	TX_ACK
00328 08BF 	;
00329 08BF 	;---kCmd_GetFRev------------------
SerialServo.asm                                                       Page: 35
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00330 08BF 	; Get ServoFastReverse
00331 08BF 084A 	Cmd_GetFRev	movf	ServoFastReverse,W
00332 08C0 001A 		movwi	FSR0++
00333 08C1 084B 		movf	ServoFastReverse+1,W
00334 08C2 001A 		movwi	FSR0++
00335 08C3 2800 		goto	RS232_Send_S0
00336 08C4 	;
00337 08C4 	;---kCmd_SetMin_uS-------------------
00338 08C4 	; Set ServoMin_uS
00339 08C4 0016 	Cmd_SetMin_uS	moviw	FSR1++
00340 08C5 00D0 		movwf	ServoMin_uS
00341 08C6 0016 		moviw	FSR1++
00342 08C7 00D1 		movwf	ServoMin_uS+1
00343 08C8 2A04 		goto	TX_ACK
00344 08C9 	;
00345 08C9 	;---kCmd_GetMin_uS----------------
00346 08C9 	; Get ServoMin_uS
00347 08C9 0850 	Cmd_GetMin_uS	movf	ServoMin_uS,W
00348 08CA 001A 		movwi	FSR0++
00349 08CB 0851 		movf	ServoMin_uS+1,W
00350 08CC 001A 		movwi	FSR0++
00351 08CD 2800 		goto	RS232_Send_S0
00352 08CE 	;
00353 08CE 	;---kCmd_SetMax_uS-------------------
00354 08CE 	; Set ServoMax_uS
00355 08CE 0016 	Cmd_SetMax_uS	moviw	FSR1++
00356 08CF 00D2 		movwf	ServoMax_uS
00357 08D0 0016 		moviw	FSR1++
00358 08D1 00D3 		movwf	ServoMax_uS+1
00359 08D2 2A04 		goto	TX_ACK
00360 08D3 	;
00361 08D3 	;---kCmd_GetMax_uS-----------------
00362 08D3 	; Get ServoMax_uS
00363 08D3 0852 	Cmd_GetMax_uS	movf	ServoMax_uS,W
00364 08D4 001A 		movwi	FSR0++
00365 08D5 0853 		movf	ServoMax_uS+1,W
00366 08D6 001A 		movwi	FSR0++
00367 08D7 2800 		goto	RS232_Send_S0
00368 08D8 	;
00369 08D8 	;---kCmd_SetRevDir---------------
00370 08D8 10D8 	Cmd_SetRevDir	bcf	ssReverseDir
00371 08D9 3001 		movlw	0x01
00372 08DA 0601 		xorwf	INDF1,W
00373 08DB 		SKPNZ		;01h?
00373 08DB 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00374 08DC 14D8 		bsf	ssReverseDir	; Yes
00375 08DD 2A04 		goto	TX_ACK
00376 08DE 	;
00377 08DE 	;---kCmd_GetRevDir---------------
00378 08DE 18D8 	Cmd_GetRevDir	btfsc	ssReverseDir
00379 08DF 1400 		bsf	INDF0,0
00380 08E0 2800 		goto	RS232_Send_S0
00381 08E1 	;
00382 08E1 	;---kCmd_SetEnaOvrCur------------
00383 08E1 1058 	Cmd_SetEnaOvrCur	bcf	ssEnableOverCur
00384 08E2 3001 		movlw	0x01
00385 08E3 0601 		xorwf	INDF1,W
00386 08E4 		SKPNZ
00386 08E4 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00387 08E5 1458 		bsf	ssEnableOverCur
00388 08E6 2A04 		goto	TX_ACK
00389 08E7 	;
00390 08E7 	;---kCmd_GetEnaOvrCur------------
00391 08E7 1858 	Cmd_GetEnaOvrCur	btfsc	ssEnableOverCur
00392 08E8 1400 		bsf	INDF0,0
00393 08E9 2800 		goto	RS232_Send_S0
00394 08EA 	;
00395 08EA 	;---kCmd_SetStopCenter---------
00396 08EA 0016 	Cmd_SetStopCenter	moviw	FSR1++
00397 08EB 00CE 		movwf	ServoStopCenter
00398 08EC 0016 		moviw	FSR1++
00399 08ED 00CF 		movwf	ServoStopCenter+1
00400 08EE 2A04 		goto	TX_ACK
00401 08EF 	;
00402 08EF 	;---kCmd_GetStopCenter---------
00403 08EF 084E 	Cmd_GetStopCenter	movf	ServoStopCenter,W
00404 08F0 001A 		movwi	FSR0++
00405 08F1 084F 		movf	ServoStopCenter+1,W
00406 08F2 001A 		movwi	FSR0++
00407 08F3 2800 		goto	RS232_Send_S0
00408 08F4 	;
00409 08F4 	;---kCmd_SetSpeed--------------
00410 08F4 0016 	Cmd_SetSpeed	moviw	FSR1++
00411 08F5 393F 		andlw	0x3F	;0..63
00412 08F6 00D4 		movwf	ServoSpeed
00413 08F7 2A04 		goto	TX_ACK
00414 08F8 	;
00415 08F8 	;---kCmd_GetSpeed--------------
00416 08F8 0854 	Cmd_GetSpeed	movf	ServoSpeed,W
00417 08F9 001A 		movwi	FSR0++
00418 08FA 2800 		goto	RS232_Send_S0
00419 08FB 	;
00420 08FB 	;---kCmd_SetUseIdleCenter------
00421 08FB 11D8 	Cmd_SetUseIdleCenter	bcf	ssMode3IdleCenter
00422 08FC 3001 		movlw	0x01
00423 08FD 0601 		xorwf	INDF1,W
00424 08FE 		SKPNZ
00424 08FE 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00425 08FF 15D8 		bsf	ssMode3IdleCenter
SerialServo.asm                                                       Page: 36
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00426 0900 2A04 		goto	TX_ACK
00427 0901 	;
00428 0901 	;---kCmd_GetUseIdleCenter------
00429 0901 19D8 	Cmd_GetUseIdleCenter	btfsc	ssMode3IdleCenter
00430 0902 1400 		bsf	INDF0,0
00431 0903 2800 		goto	RS232_Send_S0
00432 0904 	;
00433 0904 	;---kCmd_SetDeadBand------------
00434 0904 0016 	Cmd_SetDeadBand	moviw	FSR1++
00435 0905 00DA 		movwf	DeadBand
00436 0906 2A04 		goto	TX_ACK	
00437 0907 	;
00438 0907 	;---kCmd_GetDeadBand------------
00439 0907 085A 	Cmd_GetDeadBand	movf	DeadBand,W
00440 0908 001A 		movwi	FSR0++
00441 0909 2800 		goto	RS232_Send_S0
00442 090A 	;
00443 090A 	;---kCmd_SetUseFastPWM----------	;+1 data (ssEnableFastPWM), return ACK
00444 090A 1258 	Cmd_SetUseFastPWM	bcf	ssEnableFastPWM
00445 090B 3001 		movlw	0x01
00446 090C 0601 		xorwf	INDF1,W
00447 090D 		SKPNZ
00447 090D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00448 090E 1658 		bsf	ssEnableFastPWM
00449 090F 2A04 		goto	TX_ACK
00450 0910 	;
00451 0910 	;---kCmd_GetUseFastPWM----------
00452 0910 1A58 	Cmd_GetUseFastPWM	btfsc	ssEnableFastPWM
00453 0911 1400 		bsf	INDF0,0
00454 0912 2800 		goto	RS232_Send_S0
00455 0913 	;
00456 0913 	;---kCmd_SetGripI-------------------
00457 0913 	; Set Grip Current
00458 0913 0016 	Cmd_SetGripI	moviw	FSR1++
00459 0914 00DB 		movwf	ssGripI
00460 0915 2A04 		goto	TX_ACK
00461 0916 	;
00462 0916 	;---kCmd_GetGripI-------------------
00463 0916 	; Get Grip Current
00464 0916 085B 	Cmd_GetGripI	movf	ssGripI,W
00465 0917 001A 		movwi	FSR0++
00466 0918 2800 		goto	RS232_Send_S0
00467 0919 	;
00468 0919 	;---kCmd_SetAuxConfig-----------	;+3 data (Aux0Config,Aux1Config,Aux2Config), return ACK
00469 0919 	; Set Aux N Config
00470 0919 0801 	Cmd_SetAuxConfig	movf	INDF1,W
00471 091A 3C02 		sublw	0x02	;2-AuxNum
00472 091B 		SKPNB		;<=2?
00472 091B 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00473 091C 2808 		goto	HandleRXData_Rtn	; no
00474 091D 	;
00475 091D 0016 		moviw	FSR1++
00476 091E 3E5C 		addlw	low ssAux0Config
00477 091F 0084 		movwf	FSR0L
00478 0920 3000 		movlw	high ssAux0Config
00479 0921 0085 		movwf	FSR0H
00480 0922 0016 		moviw	FSR1++	;New Config Value
00481 0923 001A 		movwi	FSR0++
00482 0924 2A04 		goto	TX_ACK
00483 0925 	;
00484 0925 	;---kCmd_GetAuxConfig-----------
00485 0925 	; Get Aux N Config
00486 0925 0801 	Cmd_GetAuxConfig	movf	INDF1,W
00487 0926 3C02 		sublw	0x02	;2-AuxNum
00488 0927 		SKPNB		;<=2?
00488 0927 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00489 0928 2808 		goto	HandleRXData_Rtn	; no
00490 0929 	;
00491 0929 0801 		movf	INDF1,W
00492 092A 3E5C 		addlw	low ssAux0Config
00493 092B 0086 		movwf	FSR1L
00494 092C 3000 		movlw	high ssAux0Config
00495 092D 0087 		movwf	FSR1H
00496 092E 	;
00497 092E 0801 		movf	INDF1,W
00498 092F 001A 		movwi	FSR0++
00499 0930 2800 		goto	RS232_Send_S0
00500 0931 	;
00501 0931 	;---kCmd_SetAuxNValue-----------	;+2 data (AuxNum,Value), return ACK
00502 0931 	; Set Aux N Value
00503 0931 0016 	Cmd_SetAuxNValue	moviw	FSR1++
00504 0932 00F8 		movwf	Param78	;AuxNum
00505 0933 3C02 		sublw	0x02	;2-AuxNum
00506 0934 		SKPNB		;<=2?
00506 0934 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00507 0935 2808 		goto	HandleRXData_Rtn	; no
00508 0936 	;
00509 0936 0878 		movf	Param78,W	;AuxNum
00510 0937 3E5C 		addlw	low ssAux0Config
00511 0938 0084 		movwf	FSR0L
00512 0939 3000 		movlw	high ssAux0Config
00513 093A 0085 		movwf	FSR0H
00514 093B 	;
00515 093B 0800 		movf	INDF0,W	;ssAuxXConfig
00516 093C 3907 		andlw	0x07
00517 093D 000B 		brw
00518 093E 2A04 		goto	TX_ACK	;kAuxIOnone
00519 093F 3206 		bra	Cmd_SetAuxNLED	;kAuxIOLEDBtn
00520 0940 2A04 		goto	TX_ACK	;kAuxIODigitalIn
SerialServo.asm                                                       Page: 37
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00521 0941 3204 		bra	Cmd_SetAuxNDigOut	;kAuxIODigitalOut
00522 0942 2A04 		goto	TX_ACK	;kAuxIOAnalogIn
00523 0943 2A04 		goto	TX_ACK	;kAuxIOHomeSw
00524 0944 2A04 		goto	TX_ACK	;kAuxIOFwdLimit
00525 0945 2A04 		goto	TX_ACK	;kAuxIORevLimit
00526 0946 	;
00527 0946 	Cmd_SetAuxNDigOut:
00528 0946 0878 	Cmd_SetAuxNLED	movf	Param78,W	;AuxNum
00529 0947 3E24 		addlw	low LED1_Blinks
00530 0948 0084 		movwf	FSR0L
00531 0949 3000 		movlw	high LED1_Blinks
00532 094A 0085 		movwf	FSR0H
00533 094B 0016 		moviw	FSR1++	;AuxVal
00534 094C 001A 		movwi	FSR0++
00535 094D 2A04 		goto	TX_ACK
00536 094E 	;
00537 094E 	;---kCmd_GetAuxNValue-----------	;(AuxN,ValueL,ValueH)
00538 094E 	; Get Aux N Value
00539 094E 0801 	Cmd_GetAuxNValue	movf	INDF1,W
00540 094F 00F8 		movwf	Param78	;AuxNum
00541 0950 3C02 		sublw	0x02	;2-AuxNum
00542 0951 		SKPNB		;<=2?
00542 0951 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00543 0952 2808 		goto	HandleRXData_Rtn	; no
00544 0953 	;
00545 0953 0878 		movf	Param78,W	;AuxNum
00546 0954 3E5C 		addlw	low ssAux0Config
00547 0955 0086 		movwf	FSR1L
00548 0956 3000 		movlw	high ssAux0Config
00549 0957 0087 		movwf	FSR1H
00550 0958 	;
00551 0958 0801 		movf	INDF1,W	;ssAuxXConfig
00552 0959 3907 		andlw	0x07
00553 095A 000B 		brw
00554 095B 2808 		goto	HandleRXData_Rtn	;kAuxIOnone, not valid
00555 095C 3223 		bra	Cmd_GetAuxNValue_Btn	;kAuxIOLEDBtn
00556 095D 320F 		bra	Cmd_GetAuxNValue_Dig	;kAuxIODigitalIn
00557 095E 320E 		bra	Cmd_GetAuxNValue_Dig	;kAuxIODigitalOut
00558 095F 3203 		bra	Cmd_GetAuxNValue_Ana	;kAuxIOAnalogIn
00559 0960 320C 		bra	Cmd_GetAuxNValue_Dig	;kAuxIOHomeSw
00560 0961 320B 		bra	Cmd_GetAuxNValue_Dig	;kAuxIOFwdLimit
00561 0962 320A 		bra	Cmd_GetAuxNValue_Dig	;kAuxIORevLimit
00562 0963 	;
00563 0963 3578 	Cmd_GetAuxNValue_Ana	lslf	Param78,W	;AuxNum X2
00564 0964 3EB5 		addlw	low Cur_AN1
00565 0965 0086 		movwf	FSR1L
00566 0966 3000 		movlw	high Cur_AN1
00567 0967 0087 		movwf	FSR1H
00568 0968 0016 		moviw	FSR1++
00569 0969 001A 		movwi	FSR0++
00570 096A 0016 		moviw	FSR1++
00571 096B 001A 		movwi	FSR0++
00572 096C 2800 		goto	RS232_Send_S0
00573 096D 	;
00574 096D 	; Send the value of the port bit 0x00 or 0x01
00575 096D 0878 	Cmd_GetAuxNValue_Dig	movf	Param78,W	;AuxNum
00576 096E 		SKPZ
00576 096E 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00577 096F 3204 		bra	Cmd_GetAuxNValue_Dig1
00578 0970 190C 		btfsc	SW1_In
00579 0971 3001 		movlw	0x01
00580 0972 001A 		movwi	FSR0++
00581 0973 2800 		goto	RS232_Send_S0
00582 0974 	;
00583 0974 3C01 	Cmd_GetAuxNValue_Dig1	sublw	0x01
00584 0975 		SKPZ
00584 0975 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00585 0976 3204 		bra	Cmd_GetAuxNValue_Dig2
00586 0977 198C 		btfsc	SW2_In
00587 0978 3001 		movlw	0x01
00588 0979 001A 		movwi	FSR0++
00589 097A 2800 		goto	RS232_Send_S0
00590 097B 	;
00591 097B 0103 	Cmd_GetAuxNValue_Dig2	clrw
00592 097C 1A0C 		btfsc	SW3_In
00593 097D 3001 		movlw	0x01
00594 097E 001A 		movwi	FSR0++
00595 097F 2800 		goto	RS232_Send_S0
00596 0980 	; Send the Button value
00597 0980 0878 	Cmd_GetAuxNValue_Btn	movf	Param78,W	;AuxNum
00598 0981 		SKPZ
00598 0981 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00599 0982 3204 		bra	Cmd_GetAuxNValue_Btn1
00600 0983 185F 		btfsc	SW1_Flag
00601 0984 3001 		movlw	0x01
00602 0985 001A 		movwi	FSR0++
00603 0986 2800 		goto	RS232_Send_S0
00604 0987 	;
00605 0987 3C01 	Cmd_GetAuxNValue_Btn1	sublw	0x01
00606 0988 		SKPZ
00606 0988 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00607 0989 3204 		bra	Cmd_GetAuxNValue_Btn2
00608 098A 18DF 		btfsc	SW2_Flag
00609 098B 3001 		movlw	0x01
00610 098C 001A 		movwi	FSR0++
00611 098D 2800 		goto	RS232_Send_S0
00612 098E 	;
00613 098E 0103 	Cmd_GetAuxNValue_Btn2	clrw
00614 098F 	;	btfsc	SW3_Flag
SerialServo.asm                                                       Page: 38
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00615 098F 	;	movlw	0x01
00616 098F 	;	movwi	FSR0++
00617 098F 2800 		goto	RS232_Send_S0
00618 0990 	;
00619 0990 	;
00620 0990 	;---kCmd_SetEncoderOffset-------  +2 data (EncoderOffset), return ACK
00621 0990 	;
00622 0990 0016 	Cmd_SetEncoderOffset	moviw	FSR1++
00623 0991 00C8 		movwf	EncoderOffset
00624 0992 0016 		moviw	FSR1++
00625 0993 00C9 		movwf	EncoderOffset+1
00626 0994 2A04 		goto	TX_ACK
00627 0995 	;
00628 0995 	;---kCmd_GetEncoderOffset-------
00629 0995 	;
00630 0995 0848 	Cmd_GetEncoderOffset	movf	EncoderOffset,W
00631 0996 001A 		movwi	FSR0++
00632 0997 0849 		movf	EncoderOffset+1,W
00633 0998 001A 		movwi	FSR0++
00634 0999 2800 		goto	RS232_Send_S0
00635 099A 	;
00636 099A 	                       if UsePID
00666 099A 	                       endif
00667 099A 	;---kCmd_GetI-------------------
00668 099A 	; Get servo current
00669 099A 0021  a		MOVLB	Cur_AN0	;banksel
00668 099B 	Cmd_GetI	BankSel	Cur_AN0
00670 099B 0833 		movf	Cur_AN0,W
00671 099C 001A 		movwi	FSR0++
00672 099D 0834 		movf	Cur_AN0+1,W
00673 099E 001A 		movwi	FSR0++
00674 099F 2800 		goto	RS232_Send_S0
00675 09A0 	;
00676 09A0 	;---kCmd_GetEnc-------------------
00677 09A0 	; Get Encoder Raw Position
00678 09A0 0843 	Cmd_GetEnc	movf	EncoderVal,W
00679 09A1 001A 		movwi	FSR0++
00680 09A2 0844 		movf	EncoderVal+1,W
00681 09A3 001A 		movwi	FSR0++
00682 09A4 2800 		goto	RS232_Send_S0
00683 09A5 	;
00684 09A5 	;---kCmd_GetEncAbs-------------------
00685 09A5 	; Get Encoder Accumulated Position
00686 09A5 0840 	Cmd_GetEncAbs	movf	EncoderAccum,W
00687 09A6 001A 		movwi	FSR0++
00688 09A7 0841 		movf	EncoderAccum+1,W
00689 09A8 001A 		movwi	FSR0++
00690 09A9 0842 		movf	EncoderAccum+2,W
00691 09AA 001A 		movwi	FSR0++
00692 09AB 3000 		movlw	0x00
00693 09AC 1BC2 		btfsc	EncoderAccum+2,7
00694 09AD 30FF 		movlw	0xFF
00695 09AE 001A 		movwi	FSR0++	;sign extrnded Int24
00696 09AF 2800 		goto	RS232_Send_S0
00697 09B0 	;
00698 09B0 	;---kCmd_SaveParams-----------------
00699 09B0 	Cmd_SaveParams	mLongCall	SaveParams
00699 09B0 3180      M		movlp	SaveParams	                       movlp                  Destination
00699 09B1 20F6      M		call	SaveParams	                       call                   Destination
00699 09B2 3189      M		movlp	$	                       movlp                  $
00700 09B3 2A04 		goto	TX_ACK
00701 09B4 	;
00702 09B4 	;---kCmd_RestoreParams--------------
00703 09B4 	Cmd_RestoreParams	mLongCall	CopyToRam
00703 09B4 3180      M		movlp	CopyToRam	                       movlp                  Destination
00703 09B5 20E9      M		call	CopyToRam	                       call                   Destination
00703 09B6 3189      M		movlp	$	                       movlp                  $
00704 09B7 2A04 		goto	TX_ACK
00705 09B8 	;
00706 09B8 	;---kCmd_GetBattVolts---------------
00707 09B8 	; Get battery volts
00708 09B8 0021  a		MOVLB	BattVolts	;banksel
00707 09B9 	Cmd_GetBattVolts	BankSel	BattVolts
00709 09B9 0835 		movf	BattVolts,W
00710 09BA 001A 		movwi	FSR0++
00711 09BB 0836 		movf	BattVolts+1,W
00712 09BC 001A 		movwi	FSR0++
00713 09BD 2800 		goto	RS232_Send_S0
00714 09BE 	;
00715 09BE 	;---kCmd_GetCalPot------------------
00716 09BE 	; Get calibration pot
00717 09BE 0021 	Cmd_GetCalPot	movlb	ModeZeroPot
00718 09BF 0837 		movf	ModeZeroPot,W
00719 09C0 001A 		movwi	FSR0++
00720 09C1 0838 		movf	ModeZeroPot+1,W
00721 09C2 001A 		movwi	FSR0++
00722 09C3 2800 		goto	RS232_Send_S0
00723 09C4 	;
00724 09C4 	;---kCmd_GetStatus----------------
00725 09C4 083C 	Cmd_GetStatus	movf	ssStatus,W
00726 09C5 001A 		movwi	FSR0++
00727 09C6 083D 		movf	ssStatus+1,W
00728 09C7 001A 		movwi	FSR0++
00729 09C8 083E 		movf	ssStatus+2,W
00730 09C9 001A 		movwi	FSR0++
00731 09CA 083F 		movf	ssStatus+3,W
00732 09CB 001A 		movwi	FSR0++
00733 09CC 	;reset flags
00734 09CC 11BC 		bcf	ssRX_Timeout
SerialServo.asm                                                       Page: 39
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00735 09CD 12BC 		bcf	ssGripMCur
00736 09CE 123C 		bcf	ssGripOCur
00737 09CF 	;
00738 09CF 01BD 		clrf	ssStatus+1
00739 09D0 	;	
00740 09D0 2800 		goto	RS232_Send_S0
00741 09D1 	;
00742 09D1 	;---kCmd_RunBootloader--------------
00743 09D1 30FF 	Cmd_RunBootloader	movlw	0xFF
00744 09D2 00AB 		movwf	EEDataTemp
00745 09D3 		mLongCall	EEWriteW	;Write EEPROM address in W
00745 09D3 3181      M		movlp	EEWriteW	                       movlp                  Destination
00745 09D4 213D      M		call	EEWriteW	                       call                   Destination
00745 09D5 3189      M		movlp	$	                       movlp                  $
00746 09D6 0001 		reset
00747 09D7 	;
00748 09D7 	;---kCmd_SetMasterAddr------------
00749 09D7 0016 	Cmd_SetMasterAddr	moviw	FSR1++
00750 09D8 00D6 		movwf	RS232_MasterAddr
00751 09D9 		mLongCall	SaveParams
00751 09D9 3180      M		movlp	SaveParams	                       movlp                  Destination
00751 09DA 20F6      M		call	SaveParams	                       call                   Destination
00751 09DB 3189      M		movlp	$	                       movlp                  $
00752 09DC 2800 		goto	RS232_Send_S0
00753 09DD 	;
00754 09DD 	;---kCmd_SetSlaveAddr-------------
00755 09DD 0016 	Cmd_SetSlaveAddr	moviw	FSR1++
00756 09DE 00D7 		movwf	RS232_SlaveAddr
00757 09DF 		mLongCall	SaveParams
00757 09DF 3180      M		movlp	SaveParams	                       movlp                  Destination
00757 09E0 20F6      M		call	SaveParams	                       call                   Destination
00757 09E1 3189      M		movlp	$	                       movlp                  $
00758 09E2 2800 		goto	RS232_Send_S0
00759 09E3 	;
00760 09E3 	;---kCmd_SendIDString------------
00761 09E3 01F9 	Cmd_SendIDString	clrf	Param79
00762 09E4 0879 	Cmd_SendIDString_L1	movf	Param79,W
00763 09E5 21EC 		call	IDString
00764 09E6 3800 		iorlw	0x00
00765 09E7 		SKPNZ
00765 09E7 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00766 09E8 0008 		return
00767 09E9 2205 		call	StoreSerOut_S0
00768 09EA 0AF9 		incf	Param79,F
00769 09EB 33F8 		bra	Cmd_SendIDString_L1
00770 09EC 	;
00771 09EC 000B 	IDString	brw
00772 09ED 3444 		retlw	'D'
00773 09EE 344D 		retlw	'M'
00774 09EF 3446 		retlw	'F'
00775 09F0 3445 		retlw	'E'
00776 09F1 3420 		retlw	' '
00777 09F2 3453 		retlw	'S'
00778 09F3 3465 		retlw	'e'
00779 09F4 3472 		retlw	'r'
00780 09F5 3469 		retlw	'i'
00781 09F6 3461 		retlw	'a'
00782 09F7 346C 		retlw	'l'
00783 09F8 3420 		retlw	' '
00784 09F9 3453 		retlw	'S'
00785 09FA 3465 		retlw	'e'
00786 09FB 3472 		retlw	'r'
00787 09FC 3476 		retlw	'v'
00788 09FD 346F 		retlw	'o'
00789 09FE 3420 		retlw	' '
00790 09FF 3472 		retlw	'r'
00791 0A00 3443 		retlw	'C'
00792 0A01 340A 		retlw	'\n'
00793 0A02 3400 		retlw	0x00
00794 0A03 	;
00795 0A03 	;--------------------------------
00796 0A03 0008 		return
00797 0A04 	;
00798 0A04 30FF 	TX_ACK	movlw	0xFF
00799 0A05 	StoreSerOut_S0	mLongCall	StoreSerOut
00799 0A05 3181      M		movlp	StoreSerOut	                       movlp                  Destination
00799 0A06 219D      M		call	StoreSerOut	                       call                   Destination
00799 0A07 318A      M		movlp	$	                       movlp                  $
00800 0A08 0008 		return
00801 0A09 	;
00802 0A09 	;=========================================================================================
00803 0A09 	;=========================================================================================
01976 0A09 		include <MagEncoder.inc>
00001 0A09 	;*****************************************************************************************
00002 0A09 	;    Filename:      MagEncoder.inc
00003 0A09 	;    Date:          8/11/2019
00004 0A09 	;    File Version:  1.1.1
00005 0A09 	;    
00006 0A09 	;    Author:        David M. Flynn
00007 0A09 	;    Company:       Oxford V.U.E., Inc.
00008 0A09 	;    E-Mail:        dflynn@oxfordvue.com
00009 0A09 	;    Web Site:      http://www.oxfordvue.com/
00010 0A09 	;
00011 0A09 	;*****************************************************************************************
00012 0A09 	; Absolute Magnetic Encoder Reader
00013 0A09 	; Written for the 16F1847 running at 32MHz
00014 0A09 	; Add ReadEncoder to your main loop, must be call often enough so roll over/under
00015 0A09 	;  is seen.
00016 0A09 	; If the last ReadEncoder saw zero then MagEnc_Index is set.
SerialServo.asm                                                       Page: 40
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00017 0A09 	; If a roll over/under was detected MagEnc_IndexLatch will be set, you must clear it
00018 0A09 	;  before calling ReadEncoder again.
00019 0A09 	; Works in any segment, requires no additional stack.
00020 0A09 	;
00021 0A09 	; uses AS5047D_Lib.inc
00022 0A09 	;
00023 0A09 	; Constants for 14 bit encoder:
00024 0A09 003C 	kUpper4Bits	EQU	0x3C	;test >= 0x3C00 or < 0x0400
00025 0A09 	; 
00026 0A09 	; History:
00027 0A09 	;   1.1.1   8/11/2019	Updated for 14bit encoder.
00028 0A09 	;   1.1     3/23/2019	Changed to use AS5047D
00029 0A09 	;   1.0.1   5/28/2017  Added Home routines.
00030 0A09 	;   1.0.0   5/27/2017  First Code and it WORKS!
00031 0A09 	;*****************************************************************************************
00032 0A09 	; Routines:
00033 0A09 	;
00034 0A09 	; ReadEncoder	Add change from last read to EncoderAccum,
00035 0A09 	;	 update MagEnc_Index and MagEnc_IndexLatch.
00036 0A09 	; Home_Absolute        Home absolute, Set home as encoder zero.
00037 0A09 	; Home_Here            Set Home as last read value.
00038 0A09 	;*****************************************************************************************
00039 0A09 	; Add the following to the Bank 0 variables.
00040 0A09 	;	cblock		;Variables bank0
00041 0A09 	;	EncoderAccum:3		;Accumulated distance
00042 0A09 	;	EncoderVal:2		;Value last read, raw 12 bit data
00043 0A09 	;	EncoderFlags                                  ;saved in eprom
00044 0A09 	;                      EncoderHome:2                                 ;Absolute Home, saved in eprom
00045 0A09 	;	endc
00046 0A09 	;
00047 0A09 0045 	#Define	MagEnc_HighZone	EncoderFlags,0	
00048 0A09 0045 	#Define	MagEnc_LowZone	EncoderFlags,1
00049 0A09 0045 	#Define	MagEnc_Index	EncoderFlags,2
00050 0A09 0045 	#Define	MagEnc_IndexLatch	EncoderFlags,3	;set if zero is crossed or Encode value = zero
00051 0A09 0045 	#Define                MagEnc_Homed           EncoderFlags,4
00052 0A09 	;
00053 0A09 	;=========================================
00054 0A09 	; ReadEncoder
00055 0A09 	; Entry: none
00056 0A09 	; Exit: EncoderValue,EncoderAccum,EncoderFlags
00057 0A09 	; Calls: none
00058 0A09 	; Uses: Param76,Param77,Param78,Param79,Param7A FSR0
00059 0A09 	;
00060 0A09 22E7 	ReadEncoder	call	AS5047_ReadPos
00061 0A0A 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00062 0A0A 	;
00063 0A0A 0020 		movlb	0	;bank0
00064 0A0B 	;
00065 0A0B 1870 		btfsc	ParityErrFlag
00066 0A0C 143D 		bsf	ssEncParityError
00067 0A0D 	;	return
00068 0A0D 	;
00069 0A0D 19F0 		btfsc	CmdErrorFlag
00070 0A0E 14BD 		bsf	ssEncCmdError
00071 0A0F 	;	return
00072 0A0F 	;	
00073 0A0F 	;
00074 0A0F 	;copy to temp Param77:Param76 = Enc Value, Param7A:Param79 = Old value
00075 0A0F 0878 		movf	Param78,W
00076 0A10 00F6 		movwf	Param76
00077 0A11 0879 		movf	Param79,W
00078 0A12 00F7 		movwf	Param77
00079 0A13 	;
00080 0A13 0843 		movf	EncoderVal,W
00081 0A14 00F9 		movwf	Param79                ;retain old value
00082 0A15 0844 		movf	EncoderVal+1,W
00083 0A16 00FA 		movwf	Param7A
00084 0A17 	;
00085 0A17 0876 		movf	Param76,W
00086 0A18 00C3 		movwf	EncoderVal
00087 0A19 0877 		movf	Param77,W
00088 0A1A 00C4 		movwf	EncoderVal+1
00089 0A1B 	;
00090 0A1B 	; handle overflow, goes from >0x3C00 to <0x0400
00091 0A1B 1C45 		btfss	MagEnc_HighZone
00092 0A1C 3206 		bra	ReadEncoder_1
00093 0A1D 303C 		movlw	kUpper4Bits
00094 0A1E 0577 		andwf	Param77,W
00095 0A1F 		SKPNZ		;Less than 4096?
00095 0A1F 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00096 0A20 1777 		bsf	Param77,6	; yes, set 15th bit, aka add 0x4000
00097 0A21 15C5 		bsf	MagEnc_IndexLatch	;crossed zero
00098 0A22 320A 		bra	ReadEncoder_2
00099 0A23 	;
00100 0A23 	; handle underflow, goes from <0x0400 to <=0x3C00
00101 0A23 1CC5 	ReadEncoder_1	btfss	MagEnc_LowZone
00102 0A24 3208 		bra	ReadEncoder_2
00103 0A25 303C 		movlw	kUpper4Bits
00104 0A26 0577 		andwf	Param77,W
00105 0A27 3A3C 		xorlw	kUpper4Bits
00106 0A28 		SKPZ		;>=0x3C00?
00106 0A28 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00107 0A29 3203 		bra	ReadEncoder_2	; No
00108 0A2A 	;Val = value - 0x4000
00109 0A2A 3040 		movlw	0x40
00110 0A2B 02F7 		subwf	Param77,F
00111 0A2C 15C5 		bsf	MagEnc_IndexLatch	;crossed zero
00112 0A2D 	;
00113 0A2D 	; calculate new flag values
SerialServo.asm                                                       Page: 41
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00114 0A2D 1145 	ReadEncoder_2	bcf	MagEnc_Index
00115 0A2E 0843 		movf	EncoderVal,W
00116 0A2F 0444 		iorwf	EncoderVal+1,W
00117 0A30 		SKPNZ		;value is 0?
00117 0A30 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00118 0A31 1545 		bsf	MagEnc_Index	; Yes
00119 0A32 	;
00120 0A32 1945 		btfsc	MagEnc_Index
00121 0A33 15C5 		bsf	MagEnc_IndexLatch
00122 0A34 	;
00123 0A34 10C5 		bcf	MagEnc_LowZone
00124 0A35 303C 		movlw	kUpper4Bits
00125 0A36 0544 		andwf	EncoderVal+1,W
00126 0A37 		SKPNZ		;Less than 0x0400?
00126 0A37 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00127 0A38 14C5 		bsf	MagEnc_LowZone	; Yes
00128 0A39 	;
00129 0A39 1045 		bcf	MagEnc_HighZone
00130 0A3A 303C 		movlw	kUpper4Bits
00131 0A3B 0544 		andwf	EncoderVal+1,W	;2 high bits
00132 0A3C 3A3C 		xorlw	kUpper4Bits
00133 0A3D 		SKPNZ		;both bits set, >=0x3C00
00133 0A3D 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00134 0A3E 1445 		bsf	MagEnc_HighZone	; yes
00135 0A3F 	;
00136 0A3F 	; calc change = new - old
00137 0A3F 0879 		movf	Param79,W	;old value
00138 0A40 02F6 		subwf	Param76,F	;= new value - old value
00139 0A41 087A 		movf	Param7A,W	;old value high byte
00140 0A42 3BF7 		subwfb	Param77,F	;= new value - old value 
00141 0A43 01F8 		clrf	Param78	;sign extend to 24 bits
00142 0A44 30FF 		movlw	0xFF
00143 0A45 1BF7 		btfsc	Param77,7	;sign bit set?
00144 0A46 00F8 		movwf	Param78	; Yes
00145 0A47 	;
00146 0A47 	; add the change to the accumulated value
00147 0A47 0876 		movf	Param76,W
00148 0A48 07C0 		addwf	EncoderAccum,F
00149 0A49 0877 		movf	Param77,W
00150 0A4A 3DC1 		addwfc	EncoderAccum+1,F
00151 0A4B 0878 		movf	Param78,W
00152 0A4C 3DC2 		addwfc	EncoderAccum+2,F
00153 0A4D 	;
00154 0A4D 0008 		return
00155 0A4E 	;
00156 0A4E 	;=========================================================================================
00157 0A4E 	; Home absolute, Set home as encoder HM absolute.
00158 0A4E 	; Call ReadEncoder once first.
00159 0A4E 	; Entry: HM = Absolute Home, EncoderVal = Current Position Absolute,
00160 0A4E 	;        kMaxT = Â±Max travel from HM,
00161 0A4E 	;        EncoderAccum = 0 = Current Position Incremental
00162 0A4E 	; Exit: EncoderAccum = Current Position Relitive
00163 0A4E 	;
00164 0A4E 	; The Math:
00165 0A4E 	;  ' tests for Current Position > HM
00166 0A4E 	;  if HM + kMaxT >= 4096 then 'Dual zone
00167 0A4E 	;    if EncoderVal > HM then 
00168 0A4E 	;      'Current Position is positive between HM and 4096
00169 0A4E 	;      EncoderAccum = EncoderVal - HM
00170 0A4E 	;    elseif EncoderVal < ((HM + kMaxT) mod 4096) then 
00171 0A4E 	;      'Current Position is positive between 0 and HM + kMaxT
00172 0A4E 	;      EncoderAccum = EncoderVal + 4096 - HM
00173 0A4E 	;  else 'Single zone
00174 0A4E 	;    if EncoderVal > HM and EncoderVal <= HM + kMaxT then
00175 0A4E 	;      'Current Position is positive between HM and HM + kMAxT
00176 0A4E 	;      EncoderAccum = EncoderVal - HM
00177 0A4E 	;
00178 0A4E 	;  ' test for Current Position < HM
00179 0A4E 	;  if HM - kMaxT < 0 then 'Dual zone
00180 0A4E 	;    if (EncoderVal < HM) then
00181 0A4E 	;      'Current Position is between HM and 0
00182 0A4E 	;      EncoderAccum = EncoderVal - HM
00183 0A4E 	;    elseif (EncoderVal > 8192 - HM - kMaxT) then
00184 0A4E 	;      'Current Position is between 0 and HM - kMaxT
00185 0A4E 	;      EncoderAccum = EncoderVal - 4096 - HM
00186 0A4E 	;  else 'Single zone
00187 0A4E 	;    if EncoderVal < HM and EncoderVal > HM - kMaxT then
00188 0A4E 	;      'Current Position is between HM and HM - kMaxT
00189 0A4E 	;      EncoderAccum = EncoderVal - HM
00190 0A4E 	;      
00191 0A4E 	;
00192 0A4E 076C 	kMaxT                  EQU                    .1900                  ;Less than a half turn
00193 0A4E 	;
00194 0A4E 22B8 	Home_Absolute	call                   Home_Here
00195 0A4F 1E45 	                       btfss                  MagEnc_Homed           ;First boot?
00196 0A50 324E 	                       bra                    SaveHomePos            ; Yes
00197 0A51 	;
00198 0A51 	;  ' tests for Current Position > HM
00199 0A51 	;if HM + kMaxT >= 4096 then 'Dual zone
00200 0A51 306C 	                       movlw                  low kMaxT
00201 0A52 0746 	                       addwf                  EncoderHome,W
00202 0A53 00F8 	                       movwf                  Param78
00203 0A54 3007 	                       movlw                  high kMaxT
00204 0A55 3D47 	                       addwfc                 EncoderHome+1,W
00205 0A56 00F9 	                       movwf                  Param79
00206 0A57 39F0 	                       andlw                  0xF0
00207 0A58 	                       SKPNZ
00207 0A58 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00208 0A59 3207 	                       bra                    Home_Absolute_1
SerialServo.asm                                                       Page: 42
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00209 0A5A 	;    if EncoderVal > HM then 
00210 0A5A 	;      'Current Position is positive between HM and 4096
00211 0A5A 	;      EncoderAccum = EncoderVal - HM
00212 0A5A 0843 	                       movf                   EncoderVal,W
00213 0A5B 0246 	                       subwf                  EncoderHome,W
00214 0A5C 0844 	                       movf                   EncoderVal+1,W
00215 0A5D 3B47 	                       subwfb                 EncoderHome+1,W
00216 0A5E 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > HM?
00217 0A5F 324D 	                       bra                    HA_SetIt               ; Yes
00218 0A60 320C 	                       bra                    Home_Absolute_2
00219 0A61 	;        
00220 0A61 	;  else 'Single zone
00221 0A61 	;    if EncoderVal > HM and EncoderVal < HM + kMaxT then
00222 0A61 	;      'Current Position is positive between HM and HM + kMAxT
00223 0A61 	;      EncoderAccum = EncoderVal - HM
00224 0A61 0846 	Home_Absolute_1        movf                   EncoderHome,W
00225 0A62 0243 	                       subwf                  EncoderVal,W
00226 0A63 0847 	                       movf                   EncoderHome+1,W
00227 0A64 3B44 	                       subwfb                 EncoderVal+1,W
00228 0A65 1F89 	                       btfss                  WREG,7
00229 0A66 3206 	                       bra                    Home_Absolute_2
00230 0A67 0878 	                       movf                   Param78,W              ;HM + kMaxT
00231 0A68 0243 	                       subwf                  EncoderVal,W
00232 0A69 0879 	                       movf                   Param79,W
00233 0A6A 3B44 	                       subwfb                 EncoderVal+1,W
00234 0A6B 1B89 	                       btfsc                  WREG,7                 ;EncoderVal < HM + kMaxT?
00235 0A6C 3240 	                       bra                    HA_SetIt               ; Yes
00236 0A6D 	;
00237 0A6D 	;  ' test for Current Position < HM
00238 0A6D 	;  if HM - kMaxT < 0 then 'Dual zone
00239 0A6D 306C 	Home_Absolute_2        movlw                  low kMaxT
00240 0A6E 0246 	                       subwf                  EncoderHome,W
00241 0A6F 3007 	                       movlw                  high kMaxT
00242 0A70 3B47 	                       subwfb                 EncoderHome+1,W
00243 0A71 1F89 	                       btfss                  WREG,7                 ;HM - kMaxT < 0?
00244 0A72 3219 	                       bra                    Home_Absolute_3        ; No, not dual zone
00245 0A73 	;    if (EncoderVal < HM) then
00246 0A73 	;      'Current Position is between HM and 0
00247 0A73 	;      EncoderAccum = EncoderVal - HM
00248 0A73 0846 	                       movf                   EncoderHome,W
00249 0A74 0243 	                       subwf                  EncoderVal,W
00250 0A75 0847 	                       movf                   EncoderHome+1,W
00251 0A76 3B44 	                       subwfb                 EncoderVal+1,W
00252 0A77 1B89 	                       btfsc                  WREG,7                 ;EncoderVal < HM?
00253 0A78 3234 	                       bra                    HA_SetIt               ; Yes
00254 0A79 	;    elseif (EncoderVal > 8192 - HM - kMaxT) then
00255 0A79 	;      'Current Position is between 0 and HM - kMaxT
00256 0A79 	;      EncoderAccum = EncoderVal - 4096 - HM
00257 0A79 3000 	                       movlw                  low .8192              ;Param78:Param79 = .8192
00258 0A7A 00F8 	                       movwf                  Param78
00259 0A7B 3020 	                       movlw                  high .8192
00260 0A7C 00F9 	                       movwf                  Param79
00261 0A7D 0846 	                       movf                   EncoderHome,W          ;Param78:Param79 -= EncoderHome
00262 0A7E 02F8 	                       subwf                  Param78,F
00263 0A7F 0847 	                       movf                   EncoderHome+1,W
00264 0A80 3BF9 	                       subwfb                 Param79,F
00265 0A81 306C 	                       movlw                  low kMaxT              ;Param78:Param79 -= kMaxT
00266 0A82 02F8 	                       subwf                  Param78,F
00267 0A83 3007 	                       movlw                  high kMaxT
00268 0A84 3BF9 	                       subwfb                 Param79,F
00269 0A85 0843 	                       movf                   EncoderVal,W 
00270 0A86 0278 	                       subwf                  Param78,W
00271 0A87 0844 	                       movf                   EncoderVal+1,W
00272 0A88 3B79 	                       subwfb                 Param79,W
00273 0A89 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > Param78:Param79?
00274 0A8A 3220 	                       bra                    HA_SetItNeg            ; Yes
00275 0A8B 0008 	                       return                                        ; No, not in this zone
00276 0A8C 	;
00277 0A8C 	;  else 'Single zone
00278 0A8C 	;    if EncoderVal < HM and EncoderVal > HM - kMaxT then
00279 0A8C 	;      'Current Position is between HM and HM - kMaxT
00280 0A8C 	;      EncoderAccum = EncoderVal - HM
00281 0A8C 0846 	Home_Absolute_3        movf                   EncoderHome,W
00282 0A8D 0243 	                       subwf                  EncoderVal,W
00283 0A8E 0847 	                       movf                   EncoderHome+1,W
00284 0A8F 3B44 	                       subwfb                 EncoderVal+1,W
00285 0A90 1F89 	                       btfss                  WREG,7                 ;EncoderVal < HM?
00286 0A91 0008 	                       return                                        ; No
00287 0A92 306C 	                       movlw                  low kMaxT              ;Param78:Param79 = EncoderHome - kMaxT
00288 0A93 0246 	                       subwf                  EncoderHome,W
00289 0A94 00F8 	                       movwf                  Param78
00290 0A95 3007 	                       movlw                  high kMaxT
00291 0A96 3B47 	                       subwfb                 EncoderHome+1,W
00292 0A97 00F9 	                       movwf                  Param79
00293 0A98 0843 	                       movf                   EncoderVal,W
00294 0A99 0278 	                       subwf                  Param78,W
00295 0A9A 0844 	                       movf                   EncoderVal+1,W
00296 0A9B 3B79 	                       subwfb                 Param79,W
00297 0A9C 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > HM - kMaxT?
00298 0A9D 320F 	                       bra                    HA_SetIt               ; Yes
00299 0A9E 0008 	                       return                                        ; No, must be zero
00300 0A9F 	;
00301 0A9F 	;======================
00302 0A9F 1645 	SaveHomePos            bsf                    MagEnc_Homed
00303 0AA0 0843 	                       movf                   EncoderVal,W
00304 0AA1 00C6 	                       movwf                  EncoderHome
00305 0AA2 0844 	                       movf                   EncoderVal+1,W
00306 0AA3 00C7 	                       movwf                  EncoderHome+1
00307 0AA4 	                       mLongCall              SaveParams
SerialServo.asm                                                       Page: 43
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00307 0AA4 3180      M		movlp	SaveParams	                       movlp                  Destination
00307 0AA5 20F6      M		call	SaveParams	                       call                   Destination
00307 0AA6 318A      M		movlp	$	                       movlp                  $
00308 0AA7 0008 	                       return
00309 0AA8 	;======================
00310 0AA8 	;EncoderAccum = EncoderVal + 4096 - HM
00311 0AA8 	;                      movlw                  low .4096
00312 0AA8 	;                      addwf                  EncoderVal,F
00313 0AA8 3010 	HA_SetItPos            movlw                  high .4096
00314 0AA9 3DC4 	                       addwfc                 EncoderVal+1,F
00315 0AAA 3202 	                       bra                    HA_SetIt
00316 0AAB 	;======================
00317 0AAB 	;EncoderAccum = EncoderVal - 4096 - HM
00318 0AAB 	;                      movlw                  low .4096
00319 0AAB 	;                      subwf                  EncoderVal,F
00320 0AAB 3010 	HA_SetItNeg            movlw                  high .4096
00321 0AAC 3BC4 	                       subwfb                 EncoderVal+1,F
00322 0AAD 	;======================
00323 0AAD 	;EncoderAccum = EncoderVal - HM
00324 0AAD 0846 	HA_SetIt               movf                   EncoderHome,W
00325 0AAE 0243 	                       subwf                  EncoderVal,W
00326 0AAF 00C0 	                       movwf                  EncoderAccum
00327 0AB0 0847 	                       movf                   EncoderHome+1,W
00328 0AB1 3B44 	                       subwfb                 EncoderVal+1,W
00329 0AB2 00C1 	                       movwf                  EncoderAccum+1
00330 0AB3 30FF 	                       movlw                  0xFF
00331 0AB4 1FC1 	                       btfss                  EncoderAccum+1,7
00332 0AB5 3000 	                       movlw                  0x00
00333 0AB6 00C2 	                       movwf                  EncoderAccum+2
00334 0AB7 0008 	                       return
00335 0AB8 	;
00336 0AB8 	;                       
00337 0AB8 	;=========================================================================================
00338 0AB8 	; Set Home as last read value
00339 0AB8 	; Call ReadEncoder once first.
00340 0AB8 	;
00341 0AB8 0020 	Home_Here              movlb                  0
00342 0AB9 01C0 	                       clrf                   EncoderAccum
00343 0ABA 01C1 	                       clrf                   EncoderAccum+1
00344 0ABB 01C2 	                       clrf                   EncoderAccum+2
00345 0ABC 0008 	                       return
00346 0ABD 	;
00347 0ABD 	;=========================================================================================
00348 0ABD 	;=========================================================================================
00349 0ABD 		
00350 0ABD 		
00351 0ABD 		
00352 0ABD 		
00353 0ABD 		
00354 0ABD 		
00355 0ABD 		
00356 0ABD 		
00357 0ABD 		
00358 0ABD 		
00359 0ABD 		
00360 0ABD 		
00361 0ABD 		
00362 0ABD 		
00363 0ABD 		
00364 0ABD 		
00365 0ABD 		
00366 0ABD 		
00367 0ABD 		
00368 0ABD 		
01977 0ABD 		include <AS5047D_Lib.inc>
00001 0ABD 	;******************************************************************
00002 0ABD 	; AS5047D Library for PIC16F1847
00003 0ABD 	; Filename: AS5047D_Lib.inc
00004 0ABD 	; Created: 1/12/2019
00005 0ABD 	; Revision: 1.0d1 1/12/2019
00006 0ABD 	;******************************************************************
00007 0ABD 	; History:
00008 0ABD 	;   1.0d1 1/12/2019	First Code
00009 0ABD 	;******************************************************************
00010 0ABD 	; Notes:
00011 0ABD 	; SPI I/O for AS5047D Magnetic Shaft Angle Encoder.
00012 0ABD 	; CKP=0, CKE=1, SMP=1
00013 0ABD 	; RB0	SPI CSn
00014 0ABD 	; RA6	SPI MOSI  aka SDO1
00015 0ABD 	; RB1	SPI MISO  aka SDI1
00016 0ABD 	; RB4	SPI CLK
00017 0ABD 	;
00018 0ABD 	;******************************************************************
00019 0ABD 	; Rotines:	(Stack Words Used)
00020 0ABD 	; Init_AS5047D	(0) Call once to setup SSP1
00021 0ABD 	;
00022 0ABD 	; AS5047D_WrtZPOSM	(1) call AS5047_Write with AS5047_ZPOSM and Prog_AS5047_ZPOSM
00023 0ABD 	; AS5047D_WrtZPOSL	(1) call AS5047_Write with AS5047_ZPOSL and Prog_AS5047_ZPOSL
00024 0ABD 	; AS5047D_WrtSettings2 (1) call AS5047_Write with AS5047_Settings2 and Prog_AS5047_Settings2
00025 0ABD 	; AS5047D_WrtSettings1 (1) call AS5047_Write with AS5047_Settings1 and Prog_AS5047_Settings1
00026 0ABD 	;
00027 0ABD 	; AS5047_Write	(1) Write data to AS5047D
00028 0ABD 	; AS5047_ReadPos	(1) AS5047_ANGLECOM >> SPI_SendRecWord
00029 0ABD 	; AS5047_ReadANGLEUNCReg (1) AS5047_ANGLEUNC >> AS5047_Read
00030 0ABD 	; AS5047_ReadDIAAGCReg (1) AS5047_DIAAGCReg >> AS5047_Read
00031 0ABD 	; AS5047_ReadZPOSMReg	(1) AS5047_ZPOSM >> AS5047_Read
00032 0ABD 	; AS5047_ReadZPOSLReg  (1) AS5047_ZPOSL >> AS5047_Read
00033 0ABD 	; AS5047_ReadStgs1Reg	(1) AS5047_Settings1 >> AS5047_Read
00034 0ABD 	; AS5047_ReadStgs2Reg	(1) AS5047_Settings2 >> AS5047_Read
SerialServo.asm                                                       Page: 44
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00035 0ABD 	; AS5047_ReadErrorReg  (1) AS5047_ErrReg >> AS5047_Read
00036 0ABD 	; AS5047_Read	(1) Send a read command + NOP, returns data
00037 0ABD 	; SPI_SendRecWord	(0) Send Param79:Param78, Receive Param79:Param78
00038 0ABD 	;
00039 0ABD 	; CalcParity	(0) Param79:Param78 = Parity Bit + 15 bit word
00040 0ABD 	; CheckParity	(0) Param79:Param78 = unchanged, ParityErrFlag
00041 0ABD 	;******************************************************************
00042 0ABD 	;
00043 0ABD 		ifndef kStandAlone
00045 0ABD 		endif
00046 0ABD 	;
00047 0ABD 	; Bank 0 persistant variables used by stand alone version
00048 0ABD 	;	Prog_AS5047_ZPOSM:2
00049 0ABD 	;	Prog_AS5047_ZPOSL:2
00050 0ABD 	;	Prog_AS5047_Settings2:2
00051 0ABD 	;	Prog_AS5047_Settings1:2
00052 0ABD 	;
00053 0ABD 8000 	AS5047_ParityBit	EQU	0x8000	;P
00054 0ABD 4000 	AS5047_ReadBit	EQU	0x4000	; R
00055 0ABD C000 	AS5047_NOP	EQU	0xC000	;PR+0x0000
00056 0ABD 	; Volatile Registers
00057 0ABD 0001 	AS5047_ErrReg	EQU	0x0001	; R+0x0001
00058 0ABD 0003 	AS5047_ProgReg	EQU	0x0003
00059 0ABD 3FFC 	AS5047_DIAAGCReg	EQU	0x3FFC
00060 0ABD 3FFD 	AS5047_MAGReg	EQU	0x3FFD
00061 0ABD 7FFE 	AS5047_ANGLEUNC	EQU	0x3FFE+AS5047_ReadBit
00062 0ABD 7FFF 	AS5047_ANGLECOM	EQU	0x3FFF+AS5047_ReadBit
00063 0ABD 	; Non-Volatile Registers
00064 0ABD 0016 	AS5047_ZPOSM	EQU	0x0016
00065 0ABD 0017 	AS5047_ZPOSL	EQU	0x0017
00066 0ABD 0018 	AS5047_Settings1	EQU	0x0018
00067 0ABD 0019 	AS5047_Settings2	EQU	0x0019
00068 0ABD 	;
00069 0ABD 	; ***** Add to global declarations ****
00070 0ABD 	;AS5047D_Flags	EQU	Param70	;Check that Param70 is OK to use
00071 0ABD 	;
00072 0ABD 	;#Define	ParityErrFlag	AS5047D_Flags,0
00073 0ABD 	;#Define	AngleReadFlag	AS5047D_Flags,1
00074 0ABD 	;#define	ContinueReadFlag	AS5047D_Flags,2
00075 0ABD 	;#Define	CmdErrorFlag	AS5047D_Flags,3
00076 0ABD 	;
00077 0ABD 	;Diagnostics register bits
00078 0ABD 0003 	MagFldLowErrBit	EQU	3
00079 0ABD 0002 	MagFldHighErrBit	EQU	2
00080 0ABD 	;
00081 0ABD 	;******************************************************************
00082 0ABD 	; Initialize the MSSP
00083 0ABD 	; *SPI: CKP=0 Clock Idle is Low State,
00084 0ABD 	; SPI: CKE=1 Transmit occurs on transition from active to Idle clock state
00085 0ABD 	; *SPI: CKE=0 Transmit occurs on transition from Idle to active clock state
00086 0ABD 	; *SPI: SMP=1 Input data sampled at end of data output time
00087 0ABD 	; SPI master clock=Fosc/64
00088 0ABD 	;
00089 0ABD 0022 	SSP1CON1_Val	EQU	b'00100010'	;SSPEN=1, SPI Fosc/64
00090 0ABD 010D 	#Define	SPI_CSn	LATB,0
00091 0ABD 008D 	#Define	SPI_CSn_Tris	TRISB,0
00092 0ABD 008C 	#Define	SPI_MOSI_Tris	TRISA,6
00093 0ABD 008D 	#Define	SPI_MISO_Tris	TRISB,1
00094 0ABD 008D 	#Define	SPI_CLK_Tris	TRISB,4
00095 0ABD 	;
00096 0ABD 0022 	Init_AS5047D	movlb	2	;bank 2
00097 0ABE 140D 		bsf	SPI_CSn	;inactive
00098 0ABF 	;
00099 0ABF 0021 		movlb	1	;bank 1
00100 0AC0 100D 		bcf	SPI_CSn_Tris	;output
00101 0AC1 148D 		bsf	SPI_MISO_Tris	;input
00102 0AC2 130C 		bcf	SPI_MOSI_Tris	;output
00103 0AC3 120D 		bcf	SPI_CLK_Tris	;output
00104 0AC4 	;
00105 0AC4 0024 		movlb	4	;bank 4
00106 0AC5 3022 		movlw	SSP1CON1_Val
00107 0AC6 0095 		movwf	SSP1CON1
00108 0AC7 1794 		bsf	SSP1STAT,SMP
00109 0AC8 	;	bsf	SSP1STAT,CKE	;CKE=1
00110 0AC8 1314 		bcf	SSP1STAT,CKE	;CKE=1
00111 0AC9 	;
00112 0AC9 	;	BANKSEL	PEI1
00113 0AC9 	;	bsf	PIE1,SSP1	;enable interupt
00114 0AC9 0020 		movlb	0	;bank 0
00115 0ACA 0008 		return
00116 0ACB 	;
00117 0ACB 		if kStandAlone
00194 0ACB 		endif
00195 0ACB 	;*******************************************************************
00196 0ACB 	; Write data to AS5047D
00197 0ACB 	;  Write address, dicard dummy data
00198 0ACB 	;  Write data, save old data
00199 0ACB 	;  Send NOP, save new data
00200 0ACB 	;
00201 0ACB 	; Entry: Param79:Param78 = Address, Param7B:Param7A = Data
00202 0ACB 	; Exit: Param79:Param78 = Data read back 14 bit value, ParityErrFlag, CmdErrorFlag,
00203 0ACB 	;   Param7B:Param7A = old data 16 bits including error and parity bits
00204 0ACB 	; RAM Used: Param76..Param7A
00205 0ACB 	; Calls:CalcParity, SPI_SendRecWord
00206 0ACB 	;
00207 0ACB 10F0 	AS5047_Write	bcf	AngleReadFlag
00208 0ACC 1170 		bcf	ContinueReadFlag
00209 0ACD 	;
00210 0ACD 1379 		bcf	Param79,6	;Write Address, dicard dummy data
SerialServo.asm                                                       Page: 45
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00211 0ACE 2343 		call	CalcParity
00212 0ACF 232E 		call	SPI_SendRecWord	;ignore rec'd word
00213 0AD0 	;
00214 0AD0 087B 		movf	Param7B,W	;Send data
00215 0AD1 00F9 		movwf	Param79
00216 0AD2 087A 		movf	Param7A,W
00217 0AD3 00F8 		movwf	Param78
00218 0AD4 1379 		bcf	Param79,6	;Write data, save old value
00219 0AD5 2343 		call	CalcParity
00220 0AD6 232E 		call	SPI_SendRecWord
00221 0AD7 0879 		movf	Param79,W	;store old data
00222 0AD8 00FB 		movwf	Param7B
00223 0AD9 0878 		movf	Param78,W
00224 0ADA 00FA 		movwf	Param7A
00225 0ADB 	;
00226 0ADB 3000 		movlw	low AS5047_NOP	;send NOP, save data for verify
00227 0ADC 00F8 		movwf	Param78
00228 0ADD 30C0 		movlw	high AS5047_NOP
00229 0ADE 00F9 		movwf	Param79
00230 0ADF 232E 		call	SPI_SendRecWord
00231 0AE0 2356 		call	CheckParity	;set ParityErrFlag
00232 0AE1 11F0 		bcf	CmdErrorFlag
00233 0AE2 1B79 		btfsc	Param79,6	;Cmd Error?
00234 0AE3 15F0 		bsf	CmdErrorFlag
00235 0AE4 303F 		movlw	0x3F
00236 0AE5 05F9 		andwf	Param79,F
00237 0AE6 0008 		return
00238 0AE7 	;
00239 0AE7 	;*******************************************************************
00240 0AE7 	; Read the compensated position
00241 0AE7 	;
00242 0AE7 	; Entry: none
00243 0AE7 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00244 0AE7 	; RAM Used: Param76, Param77, Param78, Param79
00245 0AE7 	; Calls: SPI_SendRecWord, CheckParity
00246 0AE7 	;
00247 0AE7 30FF 	AS5047_ReadPos	movlw	low AS5047_ANGLECOM
00248 0AE8 00F8 		movwf	Param78
00249 0AE9 307F 		movlw	high AS5047_ANGLECOM
00250 0AEA 00F9 		movwf	Param79
00251 0AEB 	;
00252 0AEB 2343 		call	CalcParity
00253 0AEC 232E 		call	SPI_SendRecWord
00254 0AED 	;
00255 0AED 2356 		call	CheckParity
00256 0AEE 11F0 		bcf	CmdErrorFlag
00257 0AEF 1B79 		btfsc	Param79,6	;Cmd Error?
00258 0AF0 15F0 		bsf	CmdErrorFlag
00259 0AF1 303F 		movlw	0x3F
00260 0AF2 05F9 		andwf	Param79,F
00261 0AF3 	;
00262 0AF3 	; if (!ContinueReadFlag || !AngleReadFlag) then ignore data and read again
00263 0AF3 1D70 		btfss	ContinueReadFlag
00264 0AF4 3203 		bra	AS5047_ReadPos_1
00265 0AF5 1CF0 		btfss	AngleReadFlag
00266 0AF6 3201 		bra	AS5047_ReadPos_1
00267 0AF7 0008 		return
00268 0AF8 	;
00269 0AF8 1570 	AS5047_ReadPos_1	bsf	ContinueReadFlag
00270 0AF9 14F0 		bsf	AngleReadFlag
00271 0AFA 33EC 		bra	AS5047_ReadPos	;one more time
00272 0AFB 	;
00273 0AFB 	;*******************************************************************
00274 0AFB 	; Read the Angle Uncompensated Register
00275 0AFB 	;
00276 0AFB 	; Entry: none
00277 0AFB 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00278 0AFB 	; RAM Used: Param76, Param77, Param78, Param79
00279 0AFB 	; calls: AS5047_Read
00280 0AFB 	;
00281 0AFB 30FE 	AS5047_ReadANGLEUNCReg	movlw	low AS5047_ANGLEUNC
00282 0AFC 00F8 		movwf	Param78
00283 0AFD 307F 		movlw	high AS5047_ANGLEUNC
00284 0AFE 00F9 		movwf	Param79
00285 0AFF 2B1D 		goto	AS5047_ReadReg
00286 0B00 	;
00287 0B00 	;*******************************************************************
00288 0B00 	; Read the Diagnostics Register
00289 0B00 	;
00290 0B00 	; Entry: none
00291 0B00 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00292 0B00 	; RAM Used: Param76, Param77, Param78, Param79
00293 0B00 	; calls: AS5047_Read
00294 0B00 	;
00295 0B00 30FC 	AS5047_ReadDIAAGCReg	movlw	low AS5047_DIAAGCReg
00296 0B01 00F8 		movwf	Param78
00297 0B02 303F 		movlw	high AS5047_DIAAGCReg
00298 0B03 00F9 		movwf	Param79
00299 0B04 2B1D 		goto	AS5047_ReadReg
00300 0B05 	;
00301 0B05 	;*******************************************************************
00302 0B05 	; Read the Zero position MSB Register
00303 0B05 	;
00304 0B05 	; Entry: none
00305 0B05 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00306 0B05 	; RAM Used: Param76, Param77, Param78, Param79
00307 0B05 	; calls: AS5047_Read
00308 0B05 	;
00309 0B05 3016 	AS5047_ReadZPOSMReg	movlw	low AS5047_ZPOSM
SerialServo.asm                                                       Page: 46
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00310 0B06 00F8 		movwf	Param78
00311 0B07 3000 		movlw	high AS5047_ZPOSM
00312 0B08 00F9 		movwf	Param79
00313 0B09 2B1D 		goto	AS5047_ReadReg
00314 0B0A 	;
00315 0B0A 	;*******************************************************************
00316 0B0A 	; Read the Zero position LSB Register
00317 0B0A 	;
00318 0B0A 	; Entry: none
00319 0B0A 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00320 0B0A 	; RAM Used: Param76, Param77, Param78, Param79
00321 0B0A 	; calls: AS5047_Read
00322 0B0A 	;
00323 0B0A 3017 	AS5047_ReadZPOSLReg	movlw	low AS5047_ZPOSL
00324 0B0B 00F8 		movwf	Param78
00325 0B0C 3000 		movlw	high AS5047_ZPOSL
00326 0B0D 00F9 		movwf	Param79
00327 0B0E 2B1D 		goto	AS5047_ReadReg
00328 0B0F 	;
00329 0B0F 	;*******************************************************************
00330 0B0F 	; Read the Settings1 Register
00331 0B0F 	;
00332 0B0F 	; Entry: none
00333 0B0F 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00334 0B0F 	; RAM Used: Param76, Param77, Param78, Param79
00335 0B0F 	; calls: AS5047_Read
00336 0B0F 	;
00337 0B0F 3018 	AS5047_ReadStgs1Reg	movlw	low AS5047_Settings1
00338 0B10 00F8 		movwf	Param78
00339 0B11 3000 		movlw	high AS5047_Settings1
00340 0B12 00F9 		movwf	Param79
00341 0B13 2B1D 		goto	AS5047_ReadReg
00342 0B14 	;
00343 0B14 	;*******************************************************************
00344 0B14 	; Read the Settings2 Register
00345 0B14 	;
00346 0B14 	; Entry: none
00347 0B14 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00348 0B14 	; RAM Used: Param76, Param77, Param78, Param79
00349 0B14 	; calls: AS5047_Read
00350 0B14 	;
00351 0B14 3019 	AS5047_ReadStgs2Reg	movlw	low AS5047_Settings2
00352 0B15 00F8 		movwf	Param78
00353 0B16 3000 		movlw	high AS5047_Settings2
00354 0B17 00F9 		movwf	Param79
00355 0B18 2B1D 		goto	AS5047_ReadReg
00356 0B19 	;
00357 0B19 	;*******************************************************************
00358 0B19 	; Read the Error Register
00359 0B19 	;
00360 0B19 	; Entry: none
00361 0B19 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00362 0B19 	; RAM Used: Param76, Param77, Param78, Param79
00363 0B19 	; calls: AS5047_Read
00364 0B19 	;
00365 0B19 3001 	AS5047_ReadErrorReg	movlw	low AS5047_ErrReg
00366 0B1A 00F8 		movwf	Param78
00367 0B1B 3000 		movlw	high AS5047_ErrReg
00368 0B1C 00F9 		movwf	Param79
00369 0B1D 	;
00370 0B1D 	; fall through to AS5047_ReadReg
00371 0B1D 	;*******************************************************************
00372 0B1D 	; Read any Register
00373 0B1D 	;
00374 0B1D 	; Entry: Param79:Param78 = 14 bit address to read
00375 0B1D 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00376 0B1D 	; RAM Used: Param76, Param77, Param78, Param79
00377 0B1D 	; calls: AS5047_Read
00378 0B1D 	;
00379 0B1D 2325 	AS5047_ReadReg	call	AS5047_Read
00380 0B1E 	;
00381 0B1E 2356 		call	CheckParity
00382 0B1F 11F0 		bcf	CmdErrorFlag
00383 0B20 1B79 		btfsc	Param79,6	;Cmd Error?
00384 0B21 15F0 		bsf	CmdErrorFlag
00385 0B22 303F 		movlw	0x3F
00386 0B23 05F9 		andwf	Param79,F
00387 0B24 0008 		return
00388 0B25 	;
00389 0B25 	;*******************************************************************
00390 0B25 	; Read Data
00391 0B25 	;  Send a read command, dicards dummy data
00392 0B25 	;  Send NOP, returns data
00393 0B25 	;
00394 0B25 	; Entry: Param79:Param78 = 14 bit Address
00395 0B25 	; Exit: Param79:Param78 = Parity+EF+data
00396 0B25 	; RAM Used: Param76,Param77,Param78, Param79
00397 0B25 	; Calls: CalcParity,SPI_SendRecWord
00398 0B25 	;
00399 0B25 1170 	AS5047_Read	bcf	ContinueReadFlag
00400 0B26 10F0 		bcf	AngleReadFlag
00401 0B27 	;
00402 0B27 1779 		bsf	Param79,6	;read bit
00403 0B28 2343 		call	CalcParity
00404 0B29 232E 		call	SPI_SendRecWord
00405 0B2A 3000 		movlw	low AS5047_NOP
00406 0B2B 00F8 		movwf	Param78
00407 0B2C 30C0 		movlw	high AS5047_NOP
00408 0B2D 00F9 		movwf	Param79
SerialServo.asm                                                       Page: 47
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00409 0B2E 	;
00410 0B2E 	; fall through to SPI_SendRecWord
00411 0B2E 	;*******************************************************************
00412 0B2E 	; Send and Receive
00413 0B2E 	;
00414 0B2E 	; Entry: Param79:Param78 = word to send
00415 0B2E 	; Exit: Param79:Param78 = word received
00416 0B2E 	; RAM Used: Param78, Param79
00417 0B2E 	; Calls: none
00418 0B2E 	;
00419 0B2E 0022 	SPI_SendRecWord	movlb	2	;bank 2
00420 0B2F 100D 		bcf	SPI_CSn	;assert chip select
00421 0B30 0024 		movlb	4	;bank 4
00422 0B31 0879 		movf	Param79,W
00423 0B32 0091 		movwf	SSP1BUF
00424 0B33 0000 	SPI_SendRecWord_L1	nop
00425 0B34 1C14 		btfss	SSP1STAT,BF
00426 0B35 33FD 		bra	SPI_SendRecWord_L1
00427 0B36 0811 		movf	SSP1BUF,W
00428 0B37 00F9 		movwf	Param79
00429 0B38 	;
00430 0B38 0878 		movf	Param78,W
00431 0B39 0091 		movwf	SSP1BUF
00432 0B3A 0000 	SPI_SendRecWord_L2	nop
00433 0B3B 1C14 		btfss	SSP1STAT,BF
00434 0B3C 33FD 		bra	SPI_SendRecWord_L2
00435 0B3D 0811 		movf	SSP1BUF,W
00436 0B3E 00F8 		movwf	Param78
00437 0B3F 	;
00438 0B3F 0022 		movlb	2
00439 0B40 140D 		bsf	SPI_CSn	;disable chip select
00440 0B41 0020 		movlb	0	;bank 0
00441 0B42 0008 		return
00442 0B43 	;
00443 0B43 	;*******************************************************************
00444 0B43 	; Calculate Even Parity Bit for Param79:Param78
00445 0B43 	;
00446 0B43 	; Entry: Param79:Param78 = 15 bit word
00447 0B43 	; Exit: Param79:Param78 = Parity Bit + 15 bit word
00448 0B43 	; RAM Used: Param76,Param77,Param78,Param79
00449 0B43 	; Calls: none
00450 0B43 	;
00451 0B43 01F6 	CalcParity	clrf	Param76
00452 0B44 300F 		movlw	.15	;bit count
00453 0B45 00F7 		movwf	Param77
00454 0B46 0DF8 	CalcParity_L1	rlf	Param78,F
00455 0B47 0DF9 		rlf	Param79,F
00456 0B48 3080 		movlw	0x80
00457 0B49 0579 		andwf	Param79,W
00458 0B4A 06F6 		xorwf	Param76,F
00459 0B4B 0BF7 		decfsz	Param77,F
00460 0B4C 33F9 		bra	CalcParity_L1
00461 0B4D 0DF8 		rlf	Param78,F
00462 0B4E 0DF9 		rlf	Param79,F	;LSb to _C
00463 0B4F 0DF8 		rlf	Param78,F	;_C to LSb
00464 0B50 0DF9 		rlf	Param79,F
00465 0B51 3080 		movlw	0x80
00466 0B52 0576 		andwf	Param76,W	;get parity bit
00467 0B53 13F9 		bcf	Param79,7	;force to 0 (default)
00468 0B54 04F9 		iorwf	Param79,F	;set parity bit
00469 0B55 0008 		return
00470 0B56 	;
00471 0B56 	;**********************************************************************
00472 0B56 	; Check Even Parity Bit for Param79:Param78
00473 0B56 	;
00474 0B56 	; Entry: Param79:Param78 = Parity Bit + 15 bit word
00475 0B56 	; Exit: Param79:Param78 = unchanged, ParityErrFlag
00476 0B56 	; RAM Used: Param76,Param77,Param78,Param79
00477 0B56 	; Calls: none
00478 0B56 	;
00479 0B56 01F6 	CheckParity	clrf	Param76
00480 0B57 300F 		movlw	.15	;bit count
00481 0B58 00F7 		movwf	Param77
00482 0B59 0DF8 	CheckParity_L1	rlf	Param78,F
00483 0B5A 0DF9 		rlf	Param79,F
00484 0B5B 3080 		movlw	0x80
00485 0B5C 0579 		andwf	Param79,W
00486 0B5D 06F6 		xorwf	Param76,F
00487 0B5E 0BF7 		decfsz	Param77,F
00488 0B5F 33F9 		bra	CheckParity_L1
00489 0B60 0DF8 		rlf	Param78,F
00490 0B61 0DF9 		rlf	Param79,F	;LSb to _C
00491 0B62 0DF8 		rlf	Param78,F	;_C to LSb
00492 0B63 0DF9 		rlf	Param79,F
00493 0B64 0876 		movf	Param76,W	;get calc'd parity bit
00494 0B65 0679 		xorwf	Param79,W	;xor w/ parity bit
00495 0B66 3980 		andlw	0x80
00496 0B67 1070 		bcf	ParityErrFlag
00497 0B68 1B89 		btfsc	WREG,7
00498 0B69 1470 		bsf	ParityErrFlag
00499 0B6A 0008 		return
00500 0B6B 	;
00501 0B6B 	;*************************************************************************
00502 0B6B 	;*************************************************************************
01978 0B6B 		include <ssInit.inc>
00001 0B6B 	;=========================================================================================
00002 0B6B 	; call once
00003 0B6B 	;=========================================================================================
00004 0B6B 	;
SerialServo.asm                                                       Page: 48
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00005 0B6B 0021 	InitializeIO	MOVLB	0x01	; select bank 1
00006 0B6C 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00007 0B6D 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00008 0B6E 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00009 0B6F 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00010 0B70 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00011 0B71 1515 		bsf	OPTION_REG,PS2
00012 0B72 	;
00013 0B72 0021 		MOVLB	0x01	; bank 1
00014 0B73 30F0 		MOVLW	OSCCON_Value
00015 0B74 0099 		MOVWF	OSCCON
00016 0B75 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00017 0B76 0097 		movwf	WDTCON
00018 0B77 	;
00019 0B77 0024 		movlb	4	; bank 4
00020 0B78 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00021 0B79 	;
00022 0B79 0023 		MOVLB	0x03	; bank 3
00023 0B7A 3003 		movlw	ANSELA_Val
00024 0B7B 008C 		movwf	ANSELA
00025 0B7C 3000 		movlw	ANSELB_Val
00026 0B7D 008D 		movwf	ANSELB
00027 0B7E 	;
00028 0B7E 	;Setup T2 for 100/s
00029 0B7E 0020 		movlb	0	; bank 0
00030 0B7F 304F 		MOVLW	T2CON_Value
00031 0B80 009C 		MOVWF	T2CON
00032 0B81 307D 		MOVLW	PR2_Value
00033 0B82 009B 		MOVWF	PR2
00034 0B83 0021 		movlb	1	; bank 1
00035 0B84 1491 		bsf	PIE1,TMR2IE	; enable Timer 2 interupt
00036 0B85 	;
00037 0B85 	; setup timer 1 for 0.5uS/count
00038 0B85 	;
00039 0B85 0020 		MOVLB	0x00	; bank 0
00040 0B86 3021 		MOVLW	T1CON_Val
00041 0B87 0098 		MOVWF	T1CON
00042 0B88 1399 		bcf	T1GCON,TMR1GE	;always count
00043 0B89 	;
00044 0B89 	;SPI MISO >> SDI1 RB1, default
00045 0B89 	;SPI CLK >> RB4, default
00046 0B89 0022 		movlb	2	;bank 2
00047 0B8A 179D 		bsf	APFCON0,RXDTSEL	;RX >> RB2
00048 0B8B 141E 		bsf	APFCON1,TXCKSEL	;TX >> RB5
00049 0B8C 171D 		bsf	APFCON0,SDO1SEL	;SPI MOSI >> SDO1 RA6
00050 0B8D 	;	
00051 0B8D 	; clear memory to zero
00052 0B8D 		mLongCall	ClearRam
00052 0B8D 3180      M		movlp	ClearRam	                       movlp                  Destination
00052 0B8E 20CA      M		call	ClearRam	                       call                   Destination
00052 0B8F 318B      M		movlp	$	                       movlp                  $
00053 0B90 0064 		CLRWDT
00054 0B91 		mLongCall	CopyToRam
00054 0B91 3180      M		movlp	CopyToRam	                       movlp                  Destination
00054 0B92 20E9      M		call	CopyToRam	                       call                   Destination
00054 0B93 318B      M		movlp	$	                       movlp                  $
00055 0B94 	;
00056 0B94 	; setup ccp1
00057 0B94 	;
00058 0B94 14BB 		BSF	ServoOff
00059 0B95 	;	BANKSEL	APFCON
00060 0B95 	;	BSF	APFCON,CCP1SEL	;CCP1 on RA5
00061 0B95 0025  a		MOVLB	CCP1CON	;banksel
00060 0B96 		BANKSEL	CCP1CON
00062 0B96 0193 		CLRF	CCP1CON
00063 0B97 	;
00064 0B97 0021 		MOVLB	0x01	;Bank 1
00065 0B98 1511 		bsf	PIE1,CCP1IE
00066 0B99 	;
00067 0B99 	;
00068 0B99 0020 		MOVLB	0x00	;Bank 0
00069 0B9A 	; setup data ports
00070 0B9A 3011 		movlw	PortBValue
00071 0B9B 008D 		movwf	PORTB	;init port B
00072 0B9C 3000 		movlw	PortAValue
00073 0B9D 008C 		movwf	PORTA
00074 0B9E 0021 		MOVLB	0x01	; bank 1
00075 0B9F 30BF 		movlw	PortADDRBits
00076 0BA0 008C 		movwf	TRISA
00077 0BA1 30C6 		movlw	PortBDDRBits	;setup for programer
00078 0BA2 008D 		movwf	TRISB
00079 0BA3 	;
00080 0BA3 		if useRS232
00081 0BA3 	; setup serial I/O
00082 0BA3 0023  a		MOVLB	BAUDCON	;banksel
00081 0BA4 		BANKSEL	BAUDCON	; bank 3
00083 0BA4 3008 		movlw	BAUDCON_Value
00084 0BA5 009F 		movwf	BAUDCON
00085 0BA6 30CF 		MOVLW	low BaudRate
00086 0BA7 009B 		MOVWF	SPBRGL
00087 0BA8 3000 		MOVLW	high BaudRate
00088 0BA9 009C 		MOVWF	SPBRGH
00089 0BAA 3024 		MOVLW	TXSTA_Value
00090 0BAB 009E 		MOVWF	TXSTA
00091 0BAC 3090 		MOVLW	RCSTA_Value
00092 0BAD 009D 		MOVWF	RCSTA
00093 0BAE 0021 		movlb	0x01	; bank 1
00094 0BAF 1691 		BSF	PIE1,RCIE	; Serial Receive interupt
00095 0BB0 0020 		movlb	0x00	; bank 0
SerialServo.asm                                                       Page: 49
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00096 0BB1 	;
00097 0BB1 		endif
00098 0BB1 	;
00099 0BB1 0064 		CLRWDT
00100 0BB2 	;-----------------------
00101 0BB2 	;
00102 0BB2 0020 		MOVLB	0x00
00103 0BB3 3064 		MOVLW	LEDTIME
00104 0BB4 00A0 		MOVWF	SysLED_Time
00105 0BB5 3001 		movlw	0x01
00106 0BB6 00A3 		movwf	SysLEDCount	;start blinking right away
00107 0BB7 3064 		movlw	.100
00108 0BB8 00B2 		movwf	Timer4Lo	;ignor buttons for 1st second
00109 0BB9 	;
00110 0BB9 0855 		movf	SysMode,W
00111 0BBA 00A4 		movwf	LED1_Blinks
00112 0BBB 	;
00113 0BBB 	;if mode 3 don't move
00114 0BBB 17B8 		bsf	ssCmdPos+1,7
00115 0BBC 	;
00116 0BBC 0064 		CLRWDT
00117 0BBD 	;
00118 0BBD 22BD 		call	Init_AS5047D	;initialize the SPI encoder I/O
00119 0BBE 	;
00120 0BBE 	;
00121 0BBE 170B 		bsf	INTCON,PEIE	; enable periferal interupts
00122 0BBF 178B 		bsf	INTCON,GIE	; enable interupts
00123 0BC0 	;
00124 0BC0 0008 		return
00125 0BC1 	;
01979 0BC1 	;
01980 0BC1 		org BootLoaderStart
01981 1E00 		include <BootLoader1847.inc>
00001 1E00 	;************************************************
00002 1E00 	; BootLoader for PIC16F1847
00003 1E00 	; filename: Bootloader1847.inc
00004 1E00 	; Created: 3/21/2019
00005 1E00 	; Revision: 1.0a2 3/26/2020
00006 1E00 	;************************************************
00007 1E00 	; History
00008 1E00 	; 1.0a2 3/26/2020      Bug Fixes.
00009 1E00 	; 1.0a1 4/7/2019	First working version.
00010 1E00 	; 1.0d1 3/21/2019	first code
00011 1E00 	;************************************************
00012 1E00 	; Notes:
00013 1E00 	;
00014 1E00 	; WDT is not suported.
00015 1E00 	;
00016 1E00 	;  Does not program data EEProm, or other than prog mem 0..BootLoaderStart-1
00017 1E00 	;
00018 1E00 	; Must be the last thing in prog mem, will not overwrite itself or anything after it.
00019 1E00 	;
00020 1E00 	;BootLoaderStart	EQU	0x1E00
00021 1E00 	;	org BootLoaderStart
00022 1E00 	;	include <Bootloader1847.inc>
00023 1E00 	;
00024 1E00 	;  Reset vector:
00025 1E00 	;  	movlp	high BootLoaderStart
00026 1E00 	;    	goto	BootLoaderStart
00027 1E00 	;  ProgStartVector	CLRF	PCLATH
00028 1E00 	;	goto	Start
00029 1E00 	;
00030 1E00 	;  DataEEProm (0xFF) = 0xFF = run bootloader
00031 1E00 	;
00032 1E00 	; What happens next:
00033 1E00 	;  If Data EEProm address (0xFF) <> 0xFF then goto ProgStartVector
00034 1E00 	;  Setup  UART for 38.4KBaud
00035 1E00 	;  Parse incoming text as .hex file
00036 1E00 	;   if program memory address > 0 and < BootLoader then
00037 1E00 	;    read block from prog mem
00038 1E00 	;    if compare blocks then
00039 1E00 	;      if prog mem is not blank then erase block
00040 1E00 	;    write block
00041 1E00 	;
00042 1E00 	;  DataEEProm (0xFF) = 0x00
00043 1E00 	;
00044 1E00 	;  reset
00045 1E00 	;************************************************
00046 1E00 	; .hex
00047 1E00 	;:020000040000FA 
00048 1E00 	;       ^^^^^^ Set high word of address to 0x0000
00049 1E00 	;:100010005A23582356235423422021000C16200033
00050 1E00 	;:100020003A100C1E3A14A10B053221000C122000CC
00051 1E00 	;^ Start code                             ^^ Checksum
00052 1E00 	; ^^ Bytes of data (0x10)
00053 1E00 	;   ^^^^ Address low word (0x0020)
00054 1E00 	;       ^^ Record type 0x00 = Data
00055 1E00 	;         ^^^^ LSB MSB of data for Addr / 2
00056 1E00 	;                                         
00057 1E00 	; Checksum is 2's complement of all other bytes added together
00058 1E00 	; Valid address range 0000 0000 .. 0000 3BFE (bootloader is at 0000 3C00 .. 0000 3FFF, 512 words)
00059 1E00 	;************************************************
00060 1E00 	;
00061 1E00 	;
00062 1E00 		cblock 0x20
00063 1E00 0020 		PROG_ADDR_LO                                  ;word address PC
00064 1E00 0021 		PROG_ADDR_HI                                  ; high 7 bits of PC
00065 1E00 0022 		ProgWordCount                                 ;Words in SourceBuffer
00066 1E00 		
SerialServo.asm                                                       Page: 50
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00067 1E00 0023 		IH_Addr_Lo:2		;
00068 1E00 0025 		IH_Addr_Hi:2		;extended linear address, alway 0x0000 for Prog mem
00069 1E00 0027 		IH_Bytes
00070 1E00 0028 		IH_ByteCount
00071 1E00 0029 		IH_Type		;Record Type 0..5
00072 1E00 002A 		IH_State
00073 1E00 002B 		IH_TempVal
00074 1E00 002C 		IH_Flags
00075 1E00 002D 		ChkSum
00076 1E00 		endc
00077 1E00 	;
00078 1E00 002C 	#Define	MSN_Done	IH_Flags,0	;Most Significant Nibble
00079 1E00 002C 	#Define	DataInBuffer	IH_Flags,1             ;SourceBuffer has data
00080 1E00 	;
00081 1E00 	;IH_Type: Intel Hex Types
00082 1E00 0000 	IHT_Data	EQU	0x00
00083 1E00 0001 	IHT_End	EQU	0x01	;ie :00000001FF
00084 1E00 0002 	IHT_XSA	EQU	0x02	;extended segment address, not supported
00085 1E00 0003 	IHT_SSA	EQU	0x03	;start segment address, not supported
00086 1E00 0004 	IHT_HighAddr	EQU	0x04	;extended linear address, :02000004FFFFFC
00087 1E00 0005 	IHT_SLA	EQU	0x05	;start linear address, not supported, :04000005000000CD2A
00088 1E00 	;
00089 1E00 	;IH_State values
00090 1E00 0000 	IHS_WaitForColon	EQU	0x00
00091 1E00 0001 	IHS_Length	EQU	0x01
00092 1E00 0002 	IHS_AddrMSB	EQU	0x02
00093 1E00 0003 	IHS_AddrLSB	EQU	0x03
00094 1E00 0004 	IHS_DataType	EQU	0x04
00095 1E00 0005 	IHS_Data	EQU	0x05
00096 1E00 0006 	IHS_CSum	EQU	0x06	;waiting for check sum
00097 1E00 	;
00098 1E00 002B 	IH_ErrorBadLen	EQU	'+'	;>64 Too big
00099 1E00 002D 	IH_ErrorBadCSum	EQU	'-'	;Checksum didn't match
00100 1E00 003D 	IH_ErrorBadType        EQU                    '='                    ;IH_Type not recognized 
00101 1E00 002A 	IH_Ack	EQU	'*'	;We got a good Intel Hex line
00102 1E00 	;
00103 1E00 0040 	BlockSize	EQU	0x40
00104 1E00 0020 	BlockWords	EQU	BlockSize/2	;0x20
00105 1E00 00E0 	AddressMask	EQU	0xE0
00106 1E00 	;
00107 1E00 	;Contiguous ram 0x2000..0x23EF
00108 1E00 		cblock 0x2100		;0x0100 after start of ram
00109 1E00 2100 		SourceBuffer:BlockSize
00110 1E00 2140 		DestBuffer:BlockSize
00111 1E00 2180 		SerialBuffer:BlockSize
00112 1E00 		endc
00113 1E00 	;
00114 1E00 	;=========================================================================================
00115 1E00 	;
00116 1E00 	; Entry: DataEEProm255
00117 1E00 	; Exit: goto ProgStartVector
00118 1E00 	; Calls: none
00119 1E00 	; RAM used: ALL
00120 1E00 	;
00121 1E00 279E 	BootLoader	call	InitializeBLIO	;returns w/ bank 0 selected
00122 1E01 	;
00123 1E01 2704 		call	ReadEEData	;Get Data from EEPROM (0xFF) 
00124 1E02 3AFF 		xorlw	0xFF
00125 1E03 		SKPZ		;0xFF xor 0xFF = 0
00125 1E03 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00126 1E04 320B 		bra	BootLoader_End
00127 1E05 	;
00128 1E05 	; Bootloader is active send "**"
00129 1E05 302A 		movlw	IH_Ack
00130 1E06 26FE 		call	SendChar
00131 1E07 302A 		movlw	IH_Ack
00132 1E08 26FE 		call	SendChar
00133 1E09 	;
00134 1E09 	;Initialize
00135 1E09 01A0 		clrf	PROG_ADDR_LO
00136 1E0A 01A1 		clrf	PROG_ADDR_HI
00137 1E0B 01A5 		clrf	IH_Addr_Hi
00138 1E0C 01A6 		clrf	IH_Addr_Hi+1
00139 1E0D 2746 		call	EraseSourceBuffer
00140 1E0E 	;
00141 1E0E 2612 		call	BL_Parse
00142 1E0F 	;	
00143 1E0F 	;if successful then clear EEProm(255)
00144 1E0F 270D 		call	WriteEEData
00145 1E10 	;
00146 1E10 3180 	BootLoader_End	movlp	0x00
00147 1E11 2802 		goto	ProgStartVector
00148 1E12 	;
00149 1E12 	;=========================================================================================
00150 1E12 	; Parse incoming data and do stuff
00151 1E12 	;
00152 1E12 10AC 	BL_Parse	bcf	DataInBuffer
00153 1E13 01AA 	BL_ParseNextLine	clrf	IH_State
00154 1E14 01A8 		clrf	IH_ByteCount
00155 1E15 01AD 		clrf	ChkSum
00156 1E16 26DE 		call                   FSR0_SerialBuffer
00157 1E17 	;
00158 1E17 102C 	BLP_L1	bcf	MSN_Done
00159 1E18 	;
00160 1E18 26ED 	BLP_L2	call	GetChar
00161 1E19 00F8 		movwf	Param78
00162 1E1A 303A 		movlw	':'
00163 1E1B 0278 		subwf	Param78,W
00164 1E1C 		SKPZ		;Char=":"
SerialServo.asm                                                       Page: 51
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00164 1E1C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00165 1E1D 3203 		bra	BLP_TestNum	; No
00166 1E1E 	; It's a ":" so set state=1, wait for length
00167 1E1E 3001 		movlw	IHS_Length
00168 1E1F 00AA 		movwf	IH_State
00169 1E20 33F6 		bra	BLP_L1
00170 1E21 	;
00171 1E21 08AA 	BLP_TestNum	movf	IH_State,F
00172 1E22 		SKPNZ		;Are we waiting for a number?
00172 1E22 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00173 1E23 33F4 		bra	BLP_L2	; No
00174 1E24 	;
00175 1E24 3030 		movlw	0x30	;'0'
00176 1E25 0278 		subwf	Param78,W
00177 1E26 		SKPNB		;Char>="0"?
00177 1E26 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00178 1E27 33EB 		bra	BL_ParseNextLine	; No start over
00179 1E28 303A 		movlw	0x3A	;':'
00180 1E29 0278 		subwf	Param78,W
00181 1E2A 		SKPNB                                         ;>"9"?
00181 1E2A 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00182 1E2B 320A 		bra	BLP_TestNum_1          ; No, it's 0..9
00183 1E2C 3041 		movlw	0x41	;'A'
00184 1E2D 0278 		subwf	Param78,W
00185 1E2E 		SKPNB		;Char>="A"?
00185 1E2E 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00186 1E2F 33E3 		bra	BL_ParseNextLine	; No start over
00187 1E30 3047 		movlw	0x47	;'G'
00188 1E31 0278 		subwf	Param78,W
00189 1E32 		SKPB		;Char<"G"
00189 1E32 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00190 1E33 33DF 		bra	BL_ParseNextLine	; No, start over
00191 1E34 3007 		movlw	0x07	; Yes, A..F
00192 1E35 02F8 		subwf	Param78,F              ;  make "A" "0"+.10
00193 1E36 	;
00194 1E36 3030 	BLP_TestNum_1	movlw	0x30
00195 1E37 02F8 		subwf	Param78,F	;'0' >> 0x00
00196 1E38 182C 		btfsc	MSN_Done
00197 1E39 3204 		bra	BLP_TestNum_2	;do low nibble
00198 1E3A 0E78 		swapf	Param78,W
00199 1E3B 00AB 		movwf	IH_TempVal
00200 1E3C 142C 		bsf	MSN_Done
00201 1E3D 33DA 		bra	BLP_L2                 ;go get the next char
00202 1E3E 	;
00203 1E3E 0878 	BLP_TestNum_2	movf	Param78,W
00204 1E3F 07AB 		addwf	IH_TempVal,F           ;add the low nibble
00205 1E40 	;
00206 1E40 	; We have a number in IH_TempVal
00207 1E40 082A 	                       movf                   IH_State,W
00208 1E41 3907 	                       andlw                  0x07
00209 1E42 000B 	                       brw
00210 1E43 33CF 	                       bra                    BL_ParseNextLine       ;IHS_WaitForColon already handled
00211 1E44 3206 	                       bra                    BLP_IHS_Length         ;Waiting for length byte
00212 1E45 3211 	                       bra                    BLP_IHS_AddrMSB        ;IHS_AddrMSB
00213 1E46 3214 	                       bra                    BLP_IHS_AddrLSB        ;IHS_AddrLSB
00214 1E47 3217 	                       bra                    BLP_IHS_DataType       ;IHS_DataType
00215 1E48 321D 	                       bra                    BLP_IHS_Data           ;IHS_Data
00216 1E49 3225 	                       bra                    BLP_IHS_CSum           ;IHS_CSum
00217 1E4A 33C8 	                       bra                    BL_ParseNextLine       ;oops
00218 1E4B 	;	
00219 1E4B 3041 	BLP_IHS_Length	movlw	.65	; Yes, is it in range 0..64?
00220 1E4C 022B 		subwf	IH_TempVal,W
00221 1E4D 		SKPNB		;<=64?
00221 1E4D 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00222 1E4E 3203 		bra	BLP_SaveIH_Length
00223 1E4F 	;
00224 1E4F 302B 		movlw	IH_ErrorBadLen
00225 1E50 26FE 		call	SendChar
00226 1E51 2E13 		goto	BL_ParseNextLine
00227 1E52 	;
00228 1E52 082B 	BLP_SaveIH_Length	movf	IH_TempVal,W
00229 1E53 00A7 		movwf	IH_Bytes
00230 1E54 07AD 		addwf	ChkSum,F
00231 1E55 0AAA 	BLP_NextState	incf	IH_State,F
00232 1E56 2E17 		goto	BLP_L1
00233 1E57 	;
00234 1E57 082B 	BLP_IHS_AddrMSB	movf	IH_TempVal,W
00235 1E58 00A4 		movwf	IH_Addr_Lo+1
00236 1E59 07AD 		addwf	ChkSum,F
00237 1E5A 33FA 		bra	BLP_NextState
00238 1E5B 	;
00239 1E5B 082B 	BLP_IHS_AddrLSB	movf	IH_TempVal,W
00240 1E5C 00A3 		movwf	IH_Addr_Lo
00241 1E5D 07AD 		addwf	ChkSum,F
00242 1E5E 33F6 		bra	BLP_NextState
00243 1E5F 	;
00244 1E5F 082B 	BLP_IHS_DataType	movf	IH_TempVal,W
00245 1E60 00A9 		movwf	IH_Type
00246 1E61 07AD 		addwf	ChkSum,F
00247 1E62 	; Ship IHS_Data if length = 0
00248 1E62 08A7 		movf	IH_Bytes,F
00249 1E63 		SKPNZ		;Expecting zero length data?
00249 1E63 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00250 1E64 0AAA 		incf	IH_State,F	; Yes
00251 1E65 33EF 		bra	BLP_NextState
00252 1E66 	;
00253 1E66 082B 	BLP_IHS_Data	movf	IH_TempVal,W
00254 1E67 001A 		movwi	FSR0++
00255 1E68 07AD 		addwf	ChkSum,F
SerialServo.asm                                                       Page: 52
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00256 1E69 0AA8 		incf	IH_ByteCount,F
00257 1E6A 	; if IH_ByteCount=IH_Bytes then next state
00258 1E6A 0828 		movf	IH_ByteCount,W
00259 1E6B 0227 		subwf	IH_Bytes,W
00260 1E6C 		SKPZ		;Done with data?
00260 1E6C 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00261 1E6D 2E17 		goto	BLP_L1	; No
00262 1E6E 33E6 		bra	BLP_NextState	; Yes
00263 1E6F 	;
00264 1E6F 	BLP_IHS_CSum:
00265 1E6F 	; get 2's comp
00266 1E6F 01F8 		clrf	Param78
00267 1E70 082D 		movf	ChkSum,W
00268 1E71 0278 		subwf	Param78,W
00269 1E72 022B 		subwf	IH_TempVal,W
00270 1E73 		SKPNZ		;Checksum matches?
00270 1E73 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00271 1E74 3203 		bra	BLP_Validate           ; Yes
00272 1E75 	;
00273 1E75 302D 		movlw	IH_ErrorBadCSum
00274 1E76 26FE 		call	SendChar
00275 1E77 2E13 		goto	BL_ParseNextLine
00276 1E78 	;
00277 1E78 	;===================
00278 1E78 	; We have received a complete Intel Hex command
00279 1E78 	;
00280 1E78 0829 	BLP_Validate	movf                   IH_Type,W
00281 1E79 39F8 	                       andlw                  0xF8
00282 1E7A 	                       SKPZ
00282 1E7A 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00283 1E7B 3218 	                       bra                    BLPV_BadType
00284 1E7C 	;
00285 1E7C 0829 	                       movf                   IH_Type,W
00286 1E7D 000B 	                       brw
00287 1E7E 320B 	                       bra                    BLPV_Data              ;IHT_Data
00288 1E7F 3206 	                       bra                    BLPV_EndCmd            ;IHT_End
00289 1E80 3213 	                       bra                    BLPV_BadType           ;IHT_XSA
00290 1E81 3212 	                       bra                    BLPV_BadType           ;IHT_SSA
00291 1E82 3209 	                       bra                    BLPV_HighAddr          ;IHT_HighAddr
00292 1E83 3210 	                       bra                    BLPV_BadType           ;IHT_SLA
00293 1E84 320F 	                       bra                    BLPV_BadType           ;6
00294 1E85 320E 	                       bra                    BLPV_BadType           ;7
00295 1E86 	;---------------------
00296 1E86 	; handle end command
00297 1E86 18AC 	BLPV_EndCmd	btfsc	DataInBuffer
00298 1E87 26CD 		call	BLP_WriteBuffer
00299 1E88 302A 		movlw	IH_Ack
00300 1E89 2EFE 	                       goto	SendChar
00301 1E8A 	;
00302 1E8A 	;---------------------
00303 1E8A 	; handle data
00304 1E8A 2696 	BLPV_Data	call	BufferIHData           ;Move to source buffer
00305 1E8B 3205 	                       bra                    BLPV_Exit_Ack
00306 1E8C 	;
00307 1E8C 	;---------------------
00308 1E8C 	; handle high address change
00309 1E8C 26DE 	BLPV_HighAddr	call                   FSR0_SerialBuffer
00310 1E8D 0012 		moviw	FSR0++
00311 1E8E 00A6 		movwf	IH_Addr_Hi+1
00312 1E8F 0012 		moviw	FSR0++
00313 1E90 00A5 		movwf	IH_Addr_Hi
00314 1E91 302A 	BLPV_Exit_Ack	movlw	IH_Ack
00315 1E92 26FE 	BLPV_Exit	call	SendChar
00316 1E93 2E13 		goto	BL_ParseNextLine
00317 1E94 	;---------------------
00318 1E94 303D 	BLPV_BadType           movlw                  IH_ErrorBadType
00319 1E95 33FC 	                       bra                    BLPV_Exit
00320 1E96 	;
00321 1E96 	;===========================================
00322 1E96 	; Validate address is in range and move to SourceBuffer
00323 1E96 	;
00324 1E96 	; Entry: DataInBuffer, IH_ByteCount, Data in SerialBuffer, 32bit address IH_Addr_Hi:IH_Addr_Lo
00325 1E96 	; Exit: SourceBuffer, DataInBuffer, ProgWordCount, PROG_ADDR_HI:PROG_ADDR_LO
00326 1E96 	; 
00327 1E96 	; check address range, max 32K program words
00328 1E96 0825 	BufferIHData	movf	IH_Addr_Hi,W
00329 1E97 0426 		iorwf	IH_Addr_Hi+1,W
00330 1E98 		SKPZ		;High address = 0x0000 ?
00330 1E98 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00331 1E99 0008 		return		; No, > 64KB or 32K words
00332 1E9A 	;
00333 1E9A 	; convert to words, IH_Addr_Lo = IH_Addr_Lo / 2
00334 1E9A 36A4 		lsrf	IH_Addr_Lo+1,F
00335 1E9B 0CA3 		rrf	IH_Addr_Lo,F
00336 1E9C 301E 		movlw	high BootLoaderStart   ;0x0E
00337 1E9D 0224 		subwf	IH_Addr_Lo+1,W
00338 1E9E 		SKPB		;BootLoaderStart > IH_Addr_Lo?
00338 1E9E 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00339 1E9F 0008 		return		; No, don't allow overwrite of bootloader
00340 1EA0 	;
00341 1EA0 1CAC 		btfss	DataInBuffer	;Any old data in the buffer?
00342 1EA1 320D 		bra	BIHD_PutInBuff	; No
00343 1EA2 	;
00344 1EA2 	; Continue filling buffer or flush and add to new buffer?
00345 1EA2 	;
00346 1EA2 0824 		movf	IH_Addr_Lo+1,W
00347 1EA3 0221 		subwf	PROG_ADDR_HI,W
00348 1EA4 		SKPZ		;MSB of Address Matches?
00348 1EA4 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
SerialServo.asm                                                       Page: 53
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00349 1EA5 3208 		bra	BIHD_FlushBuff	; No, write current data to PFM
00350 1EA6 	;
00351 1EA6 30E0 		movlw	AddressMask
00352 1EA7 0520 		andwf	PROG_ADDR_LO,W
00353 1EA8 00F8 		movwf	Param78                ;Param78 = Prog Address LSB & 0xE0
00354 1EA9 30E0 		movlw	AddressMask
00355 1EAA 0523 		andwf	IH_Addr_Lo,W           ;W = IH Word Address LSB & 0xE0
00356 1EAB 0278 		subwf	Param78,W
00357 1EAC 		SKPNZ		;Row Address Matches?
00357 1EAC 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00358 1EAD 320A 		bra	BIHD_PutInBuff_E2	; Yes
00359 1EAE 	;
00360 1EAE 26CD 	BIHD_FlushBuff	call	BLP_WriteBuffer
00361 1EAF 	;
00362 1EAF 	; Entry: IH_Addr_Lo=Word Address
00363 1EAF 	; 
00364 1EAF 0823 	BIHD_PutInBuff	movf	IH_Addr_Lo,W           ;was converted to words
00365 1EB0 39E0 		andlw	AddressMask            ; 0xE0
00366 1EB1 00A0 		movwf	PROG_ADDR_LO
00367 1EB2 0824 		movf	IH_Addr_Lo+1,W
00368 1EB3 00A1 		movwf	PROG_ADDR_HI
00369 1EB4 	; ProgWordCount = 0x1F & IH_Addr_Lo
00370 1EB4 30FF 		movlw	0xFF
00371 1EB5 3AE0 		xorlw	AddressMask	;0x1F
00372 1EB6 0523 		andwf	IH_Addr_Lo,W	;Offset within block
00373 1EB7 00A2 		movwf	ProgWordCount
00374 1EB8 	;
00375 1EB8 26DE 	BIHD_PutInBuff_E2	call                   FSR0_SerialBuffer
00376 1EB9 	;
00377 1EB9 	; FSR1 = SourceBuffer + ProgWordCount * 2
00378 1EB9 3522 		lslf	ProgWordCount,W	;ProgWordCount * 2
00379 1EBA 3E00 		addlw	low SourceBuffer
00380 1EBB 0086 		movwf	FSR1L
00381 1EBC 3021 		movlw	high SourceBuffer
00382 1EBD 0087 		movwf	FSR1H
00383 1EBE 	;
00384 1EBE 	;Param79 = IH_ByteCount
00385 1EBE 0828 		movf	IH_ByteCount,W
00386 1EBF 00F9 		movwf	Param79
00387 1EC0 	;ProgWordCount += IH_ByteCount / 2
00388 1EC0 3628 		lsrf	IH_ByteCount,W	; divide by 2
00389 1EC1 07A2 		addwf	ProgWordCount,F
00390 1EC2 	;
00391 1EC2 0012 	BIHD_PutInBuff_L1	moviw	FSR0++                 ;move SerialBuffer
00392 1EC3 001E 		movwi	FSR1++                 ;to SourceBuffer
00393 1EC4 0BF9 		decfsz	Param79,F
00394 1EC5 33FC 		bra	BIHD_PutInBuff_L1
00395 1EC6 	;
00396 1EC6 14AC 		bsf	DataInBuffer
00397 1EC7 	;
00398 1EC7 3020 		movlw	BlockWords             ;0x20
00399 1EC8 0222 		subwf	ProgWordCount,W        ;W = ProgWordCount - 0x20
00400 1EC9 		SKPNZ		;buffer full?
00400 1EC9 1903      M		BTFSC	STATUS,Z		BTFSC	STATUS,Z
00401 1ECA 3202 		bra	BLP_WriteBuffer	; Yes, ProgWordCount = 0x20
00402 1ECB 		SKPNB		;Overflow? This should not happen.
00402 1ECB 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00403 1ECC 0008 		return		; No, ProgWordCount < 0x20
00404 1ECD 	;
00405 1ECD 	; fall thru to BLP_WriteBuffer
00406 1ECD 	;=============================================
00407 1ECD 	; Write SourceBuffer to Prog memory
00408 1ECD 	;
00409 1ECD 	; Entry: SourceBuffer, ProgWordCount, PROG_ADDR_HI:PROG_ADDR_LO
00410 1ECD 	;
00411 1ECD 	BLP_WriteBuffer:
00412 1ECD 	; copy old prog mem to DestBuffer
00413 1ECD 26E3 		call                   FSR1_DestBuff
00414 1ECE 2751 		call	ReadProgBlock
00415 1ECF 	;
00416 1ECF 3000 		movlw	low SourceBuffer	;new data
00417 1ED0 0084 		movwf	FSR0L
00418 1ED1 3021 		movlw	high SourceBuffer
00419 1ED2 0085 		movwf	FSR0H	
00420 1ED3 26E3 		call                   FSR1_DestBuff          ;old data
00421 1ED4 272C 		call	CompareBlock
00422 1ED5 	;
00423 1ED5 1809 		btfsc	WREG,0	;Matches?
00424 1ED6 3206 		bra	BLP_WriteBuffer_end	; Yes
00425 1ED7 	;	
00426 1ED7 26E3 		call                   FSR1_DestBuff
00427 1ED8 271F 		call	TestErased
00428 1ED9 1C09 		btfss	WREG,0	;Erased?
00429 1EDA 2763 		call	EraseProgBlock	; No, Erase it.
00430 1EDB 	;
00431 1EDB 26E8 		call                   FSR1_SourceBuffer	
00432 1EDC 277A 		call	WriteProgBlock
00433 1EDD 	;
00434 1EDD 2F46 	BLP_WriteBuffer_end	goto	EraseSourceBuffer
00435 1EDE 	;
00436 1EDE 	;---------------------
00437 1EDE 3080 	FSR0_SerialBuffer      movlw	low SerialBuffer
00438 1EDF 0084 		movwf	FSR0L
00439 1EE0 3021 		movlw	high SerialBuffer
00440 1EE1 0085 		movwf	FSR0H
00441 1EE2 0008 		return
00442 1EE3 	;
00443 1EE3 	;---------------------
00444 1EE3 3040 	FSR1_DestBuff          movlw	low DestBuffer
SerialServo.asm                                                       Page: 54
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00445 1EE4 0086 		movwf	FSR1L
00446 1EE5 3021 		movlw	high DestBuffer
00447 1EE6 0087 		movwf	FSR1H
00448 1EE7 0008 		return
00449 1EE8 	;
00450 1EE8 	;---------------------
00451 1EE8 3000 	FSR1_SourceBuffer      movlw	low SourceBuffer
00452 1EE9 0086 		movwf	FSR1L
00453 1EEA 3021 		movlw	high SourceBuffer
00454 1EEB 0087 		movwf	FSR1H
00455 1EEC 0008 		return
00456 1EED 	;
00457 1EED 	;==============================================
00458 1EED 	; Get a byte from UART, waits forever
00459 1EED 	;
00460 1EED 	; Entry: none
00461 1EED 	; Exit: W=Char
00462 1EED 	;
00463 1EED 0020 	GetChar	MOVLB	0x00
00464 1EEE 1E91 		BTFSS	PIR1,RCIF	;RX has a byte?
00465 1EEF 33FD 		BRA	GetChar
00466 1EF0 	;
00467 1EF0 0023 		movlb	RCSTA	; bank 3
00468 1EF1 081D 		MOVF	RCSTA,W
00469 1EF2 3906 		ANDLW	0x06
00470 1EF3 		SKPZ		;Frame or Overrun Err?
00470 1EF3 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00471 1EF4 3203 		BRA	GetChar_Err	; yes
00472 1EF5 0819 		MOVF	RCREG,W
00473 1EF6 	;
00474 1EF6 0020 		movlb	0x00	; bank 0
00475 1EF7 	;	goto	SendChar	; tc
00476 1EF7 0008 		RETURN
00477 1EF8 	;
00478 1EF8 0819 	GetChar_Err	MOVF	RCREG,W	;bad byte so drop it
00479 1EF9 121D 		BCF	RCSTA,CREN
00480 1EFA 111D 		BCF	RCSTA,FERR
00481 1EFB 109D 		BCF	RCSTA,OERR
00482 1EFC 161D 		BSF	RCSTA,CREN
00483 1EFD 33EF 		bra	GetChar
00484 1EFE 	;
00485 1EFE 	;==============================================
00486 1EFE 	; Send a byte to UART
00487 1EFE 	;
00488 1EFE 	; Entry: W=Char to send
00489 1EFE 	SendChar:
00490 1EFE 1E11 		BTFSS	PIR1,TXIF	;TX done?
00491 1EFF 33FE 		bra	SendChar
00492 1F00 0023 		movlb	TXREG
00493 1F01 009A 		MOVWF	TXREG
00494 1F02 0020 		MOVLB	0
00495 1F03 0008 		RETURN
00496 1F04 	;	
00497 1F04 	;==============================================
00498 1F04 	; Read EEProm(255)
00499 1F04 	;
00500 1F04 	ReadEEData:	
00501 1F04 0023 		movlb	EEADRL
00502 1F05 30FF 		MOVLW	0xFF
00503 1F06 0091 		MOVWF	EEADRL
00504 1F07 	;
00505 1F07 	;Data Memory
00506 1F07 	;Address to read ;Deselect Config space
00507 1F07 1315 		BCF	EECON1,CFGS
00508 1F08 1395 		BCF	EECON1,EEPGD
00509 1F09 	;Point to DATA memory
00510 1F09 1415 		BSF	EECON1,RD	;EE Read
00511 1F0A 0813 		MOVF	EEDATL,W	;W = EEDATL
00512 1F0B 0020 		movlb	0
00513 1F0C 0008 		return
00514 1F0D 	;
00515 1F0D 	;==============================================
00516 1F0D 	; Clear EEProm(255)
00517 1F0D 	;
00518 1F0D 	WriteEEData:
00519 1F0D 0023 		movlb	EEADRL
00520 1F0E 30FF 		MOVLW	0xFF
00521 1F0F 0091 		MOVWF	EEADRL
00522 1F10 3000 		movlw	0x00
00523 1F11 0093 		movwf	EEDATL
00524 1F12 1315 		BCF	EECON1,CFGS	;not config mem
00525 1F13 1395 		BCF	EECON1,EEPGD	;not prog mem
00526 1F14 1515 		BSF	EECON1,WREN
00527 1F15 3055 		movlw	0x55
00528 1F16 0096 		movwf	EECON2
00529 1F17 30AA 		movlw	0xAA
00530 1F18 0096 		movwf	EECON2
00531 1F19 1495 		bsf	EECON1,WR
00532 1F1A 1895 	WriteEEData_L1	btfsc	EECON1,WR
00533 1F1B 33FE 		bra	WriteEEData_L1
00534 1F1C 1115 		bcf	EECON1,WREN
00535 1F1D 0020 		movlb	0
00536 1F1E 0008 		return
00537 1F1F 	;
00538 1F1F 	;==============================================
00539 1F1F 	; Test if block is erased
00540 1F1F 	;
00541 1F1F 	; Entry: FSR1 -> current data
00542 1F1F 	; Exit: W=1 if new = blank else W=0
SerialServo.asm                                                       Page: 55
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00543 1F1F 	;
00544 1F1F 3020 	TestErased	movlw	BlockWords
00545 1F20 00F9 		movwf	Param79
00546 1F21 0016 	TestErased_L1	moviw	FSR1++	;LSB
00547 1F22 3CFF 		sublw	0xFF
00548 1F23 		SKPZ		;=0xFF?
00548 1F23 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00549 1F24 3400 		retlw	0x00	; No
00550 1F25 	;
00551 1F25 0016 		moviw	FSR1++	;MSB
00552 1F26 3C3F 		sublw	0x3F
00553 1F27 		SKPZ		;=0x3F?
00553 1F27 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00554 1F28 3400 		retlw	0x00	; No
00555 1F29 	;
00556 1F29 0BF9 		decfsz	Param79,F
00557 1F2A 33F6 		bra	TestErased_L1
00558 1F2B 3401 		retlw	0x01                   ;All words are 0x3FFF
00559 1F2C 	;
00560 1F2C 	;==============================================
00561 1F2C 	; Compare Block
00562 1F2C 	;
00563 1F2C 	; Entry: FSR0 -> new data, FSR1 -> current data
00564 1F2C 	; Exit: W=1 if new = current else W=0
00565 1F2C 	;
00566 1F2C 3020 	CompareBlock	movlw	BlockWords
00567 1F2D 00F9 		movwf	Param79
00568 1F2E 0012 	CompareBlock_L1	moviw	FSR0++	;LSB
00569 1F2F 00F7 		movwf	Param77
00570 1F30 0012 		moviw	FSR0++	;MSB
00571 1F31 00F8 		movwf	Param78
00572 1F32 	; skip?
00573 1F32 3C3F 		sublw	0x3F
00574 1F33 		SKPZ
00574 1F33 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00575 1F34 3206 		bra	CB_NotBlank
00576 1F35 0A77 		incf	Param77,W
00577 1F36 		SKPZ
00577 1F36 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00578 1F37 3203 		bra	CB_NotBlank
00579 1F38 0016 		moviw	FSR1++
00580 1F39 0016 		moviw	FSR1++
00581 1F3A 3208 		bra	CB_Next
00582 1F3B 	;
00583 1F3B 0016 	CB_NotBlank	moviw	FSR1++
00584 1F3C 0277 		subwf	Param77,W
00585 1F3D 		SKPZ		;Matches?
00585 1F3D 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00586 1F3E 3400 		retlw	0x00	; No
00587 1F3F 0016 		moviw	FSR1++
00588 1F40 0278 		subwf	Param78,W
00589 1F41 		SKPZ		;Matches?
00589 1F41 1D03      M		BTFSS	STATUS,Z		BTFSS	STATUS,Z
00590 1F42 3400 		retlw	0x00	; No
00591 1F43 	;
00592 1F43 0BF9 	CB_Next	decfsz	Param79,F
00593 1F44 33E9 		bra	CompareBlock_L1
00594 1F45 3401 		retlw	0x01	;It's a match!
00595 1F46 	;
00596 1F46 	;==============================================
00597 1F46 	; Fill SourceBuffer w/ 0x3FFF
00598 1F46 	;
00599 1F46 26E8 	EraseSourceBuffer	call                   FSR1_SourceBuffer
00600 1F47 10AC 	                       bcf	DataInBuffer           ;mark SourceBuffer as empty
00601 1F48 	;
00602 1F48 	; Fall thru to EraseBlock
00603 1F48 	;==============================================
00604 1F48 	; Erase Block (Fill with 0x3FFF)
00605 1F48 	;
00606 1F48 	; Entry: FSR1
00607 1F48 	;
00608 1F48 3020 	EraseBlock	movlw	BlockWords
00609 1F49 00F9 		movwf	Param79
00610 1F4A 30FF 	EraseBlock_L1	movlw	0xFF
00611 1F4B 001E 		movwi	FSR1++
00612 1F4C 303F 		movlw	0x3F
00613 1F4D 001E 		movwi	FSR1++
00614 1F4E 0BF9 		decfsz	Param79,F
00615 1F4F 33FA 		bra	EraseBlock_L1
00616 1F50 0008 		return
00617 1F51 	;	
00618 1F51 	;==============================================
00619 1F51 	; Read Program memory block
00620 1F51 	;
00621 1F51 	; Entry: FSR1,PROG_ADDR_HI:PROG_ADDR_LO
00622 1F51 	; Exit: FSR1 changed, 32 words >> (FSR1++)
00623 1F51 	;
00624 1F51 2772 	ReadProgBlock	call	LoadProgAddr
00625 1F52 1315 		BCF	EECON1,CFGS	; Do not select Configuration Space
00626 1F53 1795 		BSF	EECON1,EEPGD	; Select Program Memory
00627 1F54 3020 		movlw	BlockWords	;Block is .32 words
00628 1F55 00F9 		movwf	Param79
00629 1F56 1415 	ReadProgBlock_L1	BSF	EECON1,RD	; Initiate read
00630 1F57 0000 		NOP		; skipped
00631 1F58 0000 		NOP		; do nothing
00632 1F59 0813 		MOVF	EEDATL,W	; Get LSB of word
00633 1F5A 001E 		movwi	FSR1++	; Store in user location
00634 1F5B 0814 		MOVF	EEDATH,W	; Get MSB of word
00635 1F5C 001E 		movwi	FSR1++	; Store in user location
SerialServo.asm                                                       Page: 56
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00636 1F5D 0BF9 		decfsz	Param79,F
00637 1F5E 3202 		bra	ReadProgBlock_1
00638 1F5F 0020 		movlb	0
00639 1F60 0008 		return
00640 1F61 	;
00641 1F61 0A91 	ReadProgBlock_1	incf	EEADRL,F
00642 1F62 33F3 		bra	ReadProgBlock_L1
00643 1F63 	;
00644 1F63 	;=====================================================
00645 1F63 	; Erase Program memory block
00646 1F63 	;
00647 1F63 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO
00648 1F63 	;
00649 1F63 2772 	EraseProgBlock	call	LoadProgAddr
00650 1F64 1795 		BSF	EECON1,EEPGD	;Point to program memory
00651 1F65 1315 		BCF	EECON1,CFGS	;Not configuration space
00652 1F66 1615 		BSF	EECON1,FREE	;Specify an erase operation, automaticaly cleared
00653 1F67 1515 		BSF	EECON1,WREN	;Enable writes
00654 1F68 3055 		MOVLW	55h	;Start of required sequence to initiate erase
00655 1F69 0096 		MOVWF	EECON2	;Write 55h
00656 1F6A 30AA 		MOVLW	0AAh
00657 1F6B 0096 		MOVWF	EECON2	;Write AAh
00658 1F6C 1495 		BSF	EECON1,WR	;Set WR bit to begin erase
00659 1F6D 0000 		NOP		;Any instructions here are ignored as processor
00660 1F6E 0000 		NOP		; halts to begin erase sequence
00661 1F6F 				;Processor will stop here and wait for erase complete.
00662 1F6F 				;after erase processor continues with 3rd instruction
00663 1F6F 1115 		BCF	EECON1,WREN	;Disable writes
00664 1F70 0020 		movlb	0
00665 1F71 0008 		return
00666 1F72 	;
00667 1F72 	;=========================================================
00668 1F72 	; Load the program address PROG_ADDR_HI:PROG_ADDR_LO into EEADRH:EEADRL
00669 1F72 	;
00670 1F72 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, bank 0
00671 1F72 	; Exit: bank 16
00672 1F72 	;
00673 1F72 0821 	LoadProgAddr	movf	PROG_ADDR_HI,W
00674 1F73 0023 		movlb	EEADRH	;bank ?
00675 1F74 0092 		MOVWF	EEADRH	; Store MSB of address
00676 1F75 0020 		movlb	0	;bank 0
00677 1F76 0820 		movf	PROG_ADDR_LO,W
00678 1F77 0023 		movlb	EEADRH	;bank ?
00679 1F78 0091 		MOVWF	EEADRL	; Store LSB of address
00680 1F79 0008 		return
00681 1F7A 	;
00682 1F7A 	;==========================================================
00683 1F7A 	; Write Program memory block
00684 1F7A 	;
00685 1F7A 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, FSR1
00686 1F7A 	; Exit: FSR1 changed
00687 1F7A 	; 
00688 1F7A 2772 	WriteProgBlock	call	LoadProgAddr
00689 1F7B 1795 		BSF	EECON1,EEPGD	;Point to program memory
00690 1F7C 1315 		BCF	EECON1,CFGS	;Not configuration space
00691 1F7D 1515 		BSF	EECON1,WREN	;Enable writes
00692 1F7E 1695 		BSF	EECON1,LWLO	;Only Load Write Latches
00693 1F7F 3020 		movlw	BlockWords
00694 1F80 00F9 		movwf	Param79
00695 1F81 	;
00696 1F81 0016 	WriteProgBlock_L1	moviw	FSR1++
00697 1F82 0093 		movwf	EEDATL
00698 1F83 0016 		moviw	FSR1++
00699 1F84 0094 		movwf	EEDATH
00700 1F85 	;
00701 1F85 0811 		movf	EEADRL,W
00702 1F86 3A1F 		xorlw	0x1F
00703 1F87 391F 		andlw	0x1F
00704 1F88 1903 		btfsc	_Z	;EEADRL = xxx1 1111?
00705 1F89 3209 		bra	WriteProgBlock_Wr	; Yes
00706 1F8A 	;
00707 1F8A 3055 		movlw	0x55	; Start of required write sequence:
00708 1F8B 0096 		movwf	EECON2
00709 1F8C 30AA 		movlw	0xAA
00710 1F8D 0096 		movwf	EECON2
00711 1F8E 1495 		bsf	EECON1,WR	; Set WR bit to begin write to latches
00712 1F8F 0000 		nop
00713 1F90 0000 		nop
00714 1F91 0A91 		incf	EEADRL,F
00715 1F92 33EE 		bra	WriteProgBlock_L1
00716 1F93 	;
00717 1F93 1295 	WriteProgBlock_Wr	bcf	EECON1,LWLO	; Write memory not latches
00718 1F94 3055 		movlw	0x55	; Start of required write sequence:
00719 1F95 0096 		movwf	EECON2
00720 1F96 30AA 		movlw	0xAA
00721 1F97 0096 		movwf	EECON2
00722 1F98 1495 		bsf	EECON1,WR	; Set WR bit to begin write
00723 1F99 0000 		nop
00724 1F9A 0000 		nop
00725 1F9B 	;
00726 1F9B 1115 		bcf	EECON1,WREN
00727 1F9C 	;
00728 1F9C 0020 	WriteProgBlock_end	movlb	0
00729 1F9D 0008 		return	
00730 1F9E 	;
00731 1F9E 	;============================================================
00732 1F9E 	; call once
00733 1F9E 	;
00734 1F9E 0021 	InitializeBLIO	MOVLB	0x01	; select bank 1
SerialServo.asm                                                       Page: 57
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00735 1F9F 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00736 1FA0 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00737 1FA1 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00738 1FA2 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00739 1FA3 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00740 1FA4 1515 		bsf	OPTION_REG,PS2
00741 1FA5 	;
00742 1FA5 30F0 		MOVLW	OSCCON_Value
00743 1FA6 0099 		MOVWF	OSCCON
00744 1FA7 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00745 1FA8 0097 		movwf	WDTCON
00746 1FA9 	;
00747 1FA9 0024 		movlb	4	; bank 4
00748 1FAA 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00749 1FAB 	;
00750 1FAB 0023 		MOVLB	0x03	; bank 3
00751 1FAC 3003 		movlw	ANSELA_Val
00752 1FAD 008C 		movwf	ANSELA
00753 1FAE 3000 		movlw	ANSELB_Val
00754 1FAF 008D 		movwf	ANSELB
00755 1FB0 	;
00756 1FB0 	;
00757 1FB0 		if UseAltSerialPort
00758 1FB0 	;SPI MISO >> SDI1 RB1, default
00759 1FB0 	;SPI CLK >> RB4, default
00760 1FB0 0022 		movlb	2	;bank 2
00761 1FB1 179D 		bsf	APFCON0,RXDTSEL	;RX >> RB2
00762 1FB2 141E 		bsf	APFCON1,TXCKSEL	;TX >> RB5
00763 1FB3 171D 		bsf	APFCON0,SDO1SEL	;SPI MOSI >> SDO1 RA6
00764 1FB4 		endif
00765 1FB4 	;
00766 1FB4 0020 		MOVLB	0x00	;Bank 0
00767 1FB5 	; setup data ports
00768 1FB5 3011 		movlw	PortBValue
00769 1FB6 008D 		movwf	PORTB	;init port B
00770 1FB7 3000 		movlw	PortAValue
00771 1FB8 008C 		movwf	PORTA
00772 1FB9 0021 		MOVLB	0x01	; bank 1
00773 1FBA 30BF 		movlw	PortADDRBits
00774 1FBB 008C 		movwf	TRISA
00775 1FBC 30C6 		movlw	PortBDDRBits	;setup for programer
00776 1FBD 008D 		movwf	TRISB
00777 1FBE 	;
00778 1FBE 	; setup serial I/O
00779 1FBE 0023 		movlb	BAUDCON	; bank 3
00780 1FBF 3008 		movlw	BAUDCON_Value
00781 1FC0 009F 		movwf	BAUDCON
00782 1FC1 30CF 		MOVLW	low BaudRate
00783 1FC2 009B 		MOVWF	SPBRGL
00784 1FC3 3000 		MOVLW	high BaudRate
00785 1FC4 009C 		MOVWF	SPBRGH
00786 1FC5 3024 		MOVLW	TXSTA_Value
00787 1FC6 009E 		MOVWF	TXSTA
00788 1FC7 3090 		MOVLW	RCSTA_Value
00789 1FC8 009D 		MOVWF	RCSTA
00790 1FC9 	;	movlb	0x01	; bank 1
00791 1FC9 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00792 1FC9 0020 		movlb	0x00	; bank 0
00793 1FCA 	;
00794 1FCA 	;	bsf	INTCON,PEIE	; enable periferal interupts
00795 1FCA 138B 		bcf	INTCON,GIE	; disable interupts
00796 1FCB 	;
00797 1FCB 0008 		return
00798 1FCC 	;
00799 1FCC 	;
00800 1FCC 	 
00801 1FCC 	 
00802 1FCC 	 
00803 1FCC 	 
00804 1FCC 	 
00805 1FCC 	 
00806 1FCC 	 
00807 1FCC 	 
00808 1FCC 	 
00809 1FCC 	 
00810 1FCC 	 
00811 1FCC 	 
00812 1FCC 	 
00813 1FCC 	 
00814 1FCC 	 
00815 1FCC 	 
00816 1FCC 	 
00817 1FCC 	 
00818 1FCC 	 
00819 1FCC 	 
00820 1FCC 	 
00821 1FCC 	 
00822 1FCC 	 
00823 1FCC 	 
00824 1FCC 	 
00825 1FCC 	 
00826 1FCC 	 
01982 1FCC 	;
01983 1FCC 	;
01984 1FCC 		END

X-Ref Table
ADCON0	009D 	ReadAN, ReadAN_1, ReadAN0_ColdStart
ADCON1	009E 	ReadAN0_ColdStart
SerialServo.asm   X-Ref Table                                            Page: 58
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

ADGO	0001 	ReadAN_1
ADON	0000 	ReadAN
ADRESH	009C 	ReadAN_1
ADRESL	009B 	ReadAN_1
AN0_Val	0000 	ReadAN_TryAN0, ReadAN_AN0_3, ReadAN0_ColdStart
AN1_Val	0004 	ReadAN, ReadAN_AN0
AN2_Val	0008 	ReadAN, ReadAN_TryAN2, ReadAN_AN0_1
AN3_Val	000C 	ReadAN_AN0_2
ANFlags	00B2 	ML_1, ReadAN_TryAN0, ReadAN_AN0
ANNumMask	007C 	ReadAN
ANSELA	018C 	InitializeIO, InitializeBLIO
ANSELA_Val	0003 	InitializeIO, InitializeBLIO
ANSELB	018D 	InitializeIO, InitializeBLIO
ANSELB_Val	0000 	InitializeIO, InitializeBLIO
APFCON0	011D 	InitializeIO, InitializeBLIO
APFCON1	011E 	InitializeIO, InitializeBLIO
AS5047D_Flags	0070 	ReadEncoder, Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_ReadReg
		AS5047_Read, CheckParity_L1
AS5047_ANGLECOM	7FFF 	AS5047_ReadPos
AS5047_ANGLEUNC	7FFE 	AS5047_ReadPos_1
AS5047_DIAAGCReg	3FFC 	AS5047_ReadPos_1
AS5047_ErrReg	0001 	AS5047_ReadPos_1
AS5047_NOP	C000 	Init_AS5047D, AS5047_Read
AS5047_Read ^	0B25 	AS5047_ReadReg
AS5047_ReadBit	4000 	Init_AS5047D
AS5047_ReadPos ^	0AE7 	ReadEncoder, AS5047_ReadPos_1
AS5047_ReadPos_1 ^	0AF8 	AS5047_ReadPos
AS5047_ReadReg ^	0B1D 	AS5047_ReadPos_1
AS5047_Settings1	0018 	AS5047_ReadPos_1
AS5047_Settings2	0019 	AS5047_ReadPos_1
AS5047_ZPOSL	0017 	AS5047_ReadPos_1
AS5047_ZPOSM	0016 	AS5047_ReadPos_1
AddressMask	00E0 	BufferIHData, BIHD_PutInBuff
AllDataRXd	RX_ParseFlags,6	RS232_Parse, RS232_Parse_DALo_End
AngleReadFlag	AS5047D_Flags,1	Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read
Aux0DigOut_1 ^	004D 	LED1_Blink_end
Aux0DigOut_2 ^	0050 	LED1_Blink_end, Aux0DigOut_1
Aux0DigOut_end ^	0052 	LED1_Blink_end
Aux1DigOut_1 ^	0083 	LED2_Blink_end
Aux1DigOut_2 ^	0086 	LED2_Blink_end, Aux1DigOut_1
Aux1DigOut_end ^	0088 	LED2_Blink_end
BAUDCON	019F 	InitializeIO, InitializeBLIO
BAUDCON_Value	0008 	InitializeIO, InitializeBLIO
BF	0000 	SPI_SendRecWord_L1, SPI_SendRecWord_L2
BIHD_FlushBuff ^	1EAE 	BufferIHData
BIHD_PutInBuff ^	1EAF 	BufferIHData
BIHD_PutInBuff_E2 ^	1EB8 	BufferIHData
BIHD_PutInBuff_L1 ^	1EC2 	BIHD_PutInBuff_L1
BLPV_BadType ^	1E94 	BLP_Validate
BLPV_Data ^	1E8A 	BLP_Validate
BLPV_EndCmd ^	1E86 	BLP_Validate
BLPV_Exit ^	1E92 	BLPV_BadType
BLPV_Exit_Ack ^	1E91 	BLPV_Data
BLPV_HighAddr ^	1E8C 	BLP_Validate
BLP_IHS_AddrLSB ^	1E5B 	BLP_TestNum_2
BLP_IHS_AddrMSB ^	1E57 	BLP_TestNum_2
BLP_IHS_CSum ^	1E6F 	BLP_TestNum_2
BLP_IHS_Data ^	1E66 	BLP_TestNum_2
BLP_IHS_DataType ^	1E5F 	BLP_TestNum_2
BLP_IHS_Length ^	1E4B 	BLP_TestNum_2
BLP_L1 ^	1E17 	BLP_L2, BLP_NextState, BLP_IHS_Data
BLP_L2 ^	1E18 	BLP_TestNum, BLP_TestNum_1
BLP_NextState ^	1E55 	BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
BLP_SaveIH_Length ^	1E52 	BLP_IHS_Length
BLP_TestNum ^	1E21 	BLP_L2
BLP_TestNum_1 ^	1E36 	BLP_TestNum
BLP_TestNum_2 ^	1E3E 	BLP_TestNum_1
BLP_Validate ^	1E78 	BLP_IHS_CSum
BLP_WriteBuffer ^	1ECD 	BLPV_EndCmd, BIHD_FlushBuff, BIHD_PutInBuff_L1
BLP_WriteBuffer_end ^	1EDD 	BLP_WriteBuffer
BL_Parse ^	1E12 	BootLoaderStart
BL_ParseNextLine ^	1E13 	BLP_TestNum, BLP_TestNum_2, BLP_IHS_Length, BLP_IHS_CSum
		BLPV_Exit
BSR	0008 	ProgStartVector
BattVolts	Cur_AN1	Cmd_GetBattVolts
BaudRate	00CF 	InitializeIO, InitializeBLIO
BlockSize	0040 	BootLoaderStart
BlockWords	0020 	BIHD_PutInBuff_L1, TestErased, CompareBlock, EraseSourceBuffer, ReadProgBlock
		WriteProgBlock
BootLoaderStart ^	1E00 	, InitializeIO, BufferIHData
BootLoader_End ^	1E10 	BootLoaderStart
BufferIHData ^	1E96 	BLPV_Data
C	0000 	DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_CalcCurPos, DM3_GoRev, DM3_ErrIsPos
		DM4_NotOverCurrent, DoMode4_MovPlus, ClampInt_E2, ClampInt_1, Cmd_SetMode, Cmd_SetAuxConfig
		Cmd_GetAuxConfig, Cmd_SetAuxNValue, Cmd_GetAuxNValue, BLP_TestNum, BLP_IHS_Length
		BufferIHData, BIHD_PutInBuff_L1
CB_Next ^	1F43 	CompareBlock_L1
CB_NotBlank ^	1F3B 	CompareBlock_L1
CCP1CON	0293 	Aux1DigOut_end, IRQ_Servo1_1, IRQ_Servo1_OH, IRQ_Servo1_Idle, IRQ_Servo1_OL
		StartServo, InitializeIO
CCP1CON_Clr	0009 	IRQ_Servo1_OH
CCP1CON_Idle	000A 	Aux1DigOut_end, IRQ_Servo1_Idle
CCP1CON_Set	0008 	IRQ_Servo1_OL, StartServo
CCP1IE	0002 	InitializeIO
CCP1IF	0002 	Aux1DigOut_end, IRQ_Servo1_X
CCP1M0	0000 	IRQ_Servo1_1, IRQ_Servo1_Idle
CCP1M1	0001 	IRQ_Servo1_1, IRQ_Servo1_Idle
CCPR1H	0292 	IRQ_Servo1_OH, IRQ_Servo1_Dwell, StartServo
CCPR1L	0291 	IRQ_Servo1_OH, IRQ_Servo1_Dwell, StartServo
SerialServo.asm   X-Ref Table                                            Page: 59
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

CFGS	0006 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
CKE	0006 	Init_AS5047D
CREN	0004 	RX_TheByte_Err, GetChar_Err
CalcParity ^	0B43 	Init_AS5047D, AS5047_ReadPos, AS5047_Read
CalcParity_L1 ^	0B46 	CalcParity_L1
CalcdDwell	02A2 	IRQ_Servo1_OH, IRQ_Servo1_20mS, IRQ_Servo1_CalcDwell, IRQ_Servo1_Idle
		IRQ_Servo1_Dwell, StartServo, SetMiddlePosition
CalcdDwellH	02A3 	IRQ_Servo1_OH, IRQ_Servo1_20mS, IRQ_Servo1_CalcDwell, IRQ_Servo1_Idle
		IRQ_Servo1_Dwell, StartServo, SetMiddlePosition
CheckCurrent ^	02CC 	DoModeTwo, DoModeThree, DoMode4
CheckGripCurrent ^	02DE 	DoMode4
CheckParity ^	0B56 	Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg
CheckParity_L1 ^	0B59 	CheckParity_L1
ChkSum	002D 	BootLoaderStart, BL_ParseNextLine, BLP_SaveIH_Length, BLP_IHS_AddrMSB
		BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
ClampInt ^	04FE 	DoModeZero, DoModeTwo_Go, DM3_NotOverCurrent, DoMode4_Go
ClampIntMD3 ^	04F9 	DM3_UpdatePos
ClampInt_1 ^	050A 	ClampInt_E2
ClampInt_E2 ^	0502 	ClampIntMD3
ClampInt_tooHigh ^	0516 	ClampInt_E2
ClampInt_tooLow ^	0511 	ClampInt_1
ClearRam ^	00CA 	InitializeIO
ClearRam_2 ^	00DB 	ClearRam
ClearRam_L2 ^	00E4 	ClearRam, ClearRam_2, ClearRam_L2
CmdErrorFlag	AS5047D_Flags,3	ReadEncoder, Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg
Cmd_GetAuxConfig ^	0925 	Dispatcher_2
Cmd_GetAuxNValue ^	094E 	Dispatcher_2
Cmd_GetAuxNValue_Ana ^	0963 	Cmd_GetAuxNValue
Cmd_GetAuxNValue_Btn ^	0980 	Cmd_GetAuxNValue
Cmd_GetAuxNValue_Btn1 ^	0987 	Cmd_GetAuxNValue_Btn
Cmd_GetAuxNValue_Btn2 ^	098E 	Cmd_GetAuxNValue_Btn1
Cmd_GetAuxNValue_Dig ^	096D 	Cmd_GetAuxNValue
Cmd_GetAuxNValue_Dig1 ^	0974 	Cmd_GetAuxNValue_Dig
Cmd_GetAuxNValue_Dig2 ^	097B 	Cmd_GetAuxNValue_Dig1
Cmd_GetBattVolts ^	09B8 	Dispatcher_4
Cmd_GetCmdPos ^	08A4 	HandleRXData_1
Cmd_GetDeadBand ^	0907 	HandleRXData_1
Cmd_GetEnaOvrCur ^	08E7 	HandleRXData_1
Cmd_GetEnc ^	09A0 	Dispatcher_4
Cmd_GetEncAbs ^	09A5 	Dispatcher_4
Cmd_GetEncoderOffset ^	0995 	Dispatcher_2
Cmd_GetFFwd ^	08B5 	HandleRXData_1
Cmd_GetFRev ^	08BF 	HandleRXData_1
Cmd_GetGripI ^	0916 	Dispatcher_2
Cmd_GetI ^	099A 	Dispatcher_4
Cmd_GetMaxI ^	08AD 	HandleRXData_1
Cmd_GetMax_uS ^	08D3 	HandleRXData_1
Cmd_GetMin_uS ^	08C9 	HandleRXData_1
Cmd_GetMode ^	089C 	HandleRXData_1
Cmd_GetRevDir ^	08DE 	HandleRXData_1
Cmd_GetSpeed ^	08F8 	HandleRXData_1
Cmd_GetStatus ^	09C4 	Dispatcher_4
Cmd_GetStopCenter ^	08EF 	HandleRXData_1
Cmd_GetUseFastPWM ^	0910 	HandleRXData_1
Cmd_GetUseIdleCenter ^	0901 	HandleRXData_1
Cmd_RestoreParams ^	09B4 	Dispatcher_4
Cmd_RunBootloader ^	09D1 	Dispatcher_4
Cmd_SaveParams ^	09B0 	Dispatcher_4
Cmd_SendIDString ^	09E3 	Dispatcher_6
Cmd_SendIDString_L1 ^	09E4 	Cmd_SendIDString_L1
Cmd_SetAuxConfig ^	0919 	Dispatcher_3
Cmd_SetAuxNDigOut ^	0946 	Cmd_SetAuxNValue
Cmd_SetAuxNLED ^	0946 	Cmd_SetAuxNValue
Cmd_SetAuxNValue ^	0931 	Dispatcher_3
Cmd_SetCmdPos ^	089F 	Dispatcher_1
Cmd_SetDeadBand ^	0904 	Dispatcher_1
Cmd_SetEnaOvrCur ^	08E1 	Dispatcher_1
Cmd_SetEncoderOffset ^	0990 	Dispatcher_3
Cmd_SetFFwd ^	08B0 	Dispatcher_1
Cmd_SetFRev ^	08BA 	Dispatcher_1
Cmd_SetGripI ^	0913 	Dispatcher_3
Cmd_SetMasterAddr ^	09D7 	Dispatcher_6
Cmd_SetMaxI ^	08AA 	Dispatcher_1
Cmd_SetMax_uS ^	08CE 	Dispatcher_1
Cmd_SetMin_uS ^	08C4 	Dispatcher_1
Cmd_SetMode ^	0895 	Dispatcher_1
Cmd_SetRevDir ^	08D8 	Dispatcher_1
Cmd_SetSlaveAddr ^	09DD 	Dispatcher_6
Cmd_SetSpeed ^	08F4 	Dispatcher_1
Cmd_SetStopCenter ^	08EA 	Dispatcher_1
Cmd_SetUseFastPWM ^	090A 	Dispatcher_1
Cmd_SetUseIdleCenter ^	08FB 	Dispatcher_1
CompareBlock ^	1F2C 	BLP_WriteBuffer
CompareBlock_L1 ^	1F2E 	CB_Next
ContinueReadFlag	AS5047D_Flags,2	Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read
Copy7CToSig ^	04BD 	DoModeZero, DM1_FF, DM1_FR, DoModeTwo_Go, DM3_UpdatePos, DoMode4_Go
		StartServo
Copy7CToSig_1 ^	04C6 	Copy7CToSig, Copy7CToSig_1
Copy7CToSig_Done ^	04CE 	Copy7CToSig
CopyToRam ^	00E9 	Cmd_RestoreParams, InitializeIO
CopyToRam_L1 ^	00EE 	CopyToRam_L1
Cur_AN0	00B3 	ML_1, CheckCurrent, CheckGripCurrent, ReadAN, ReadAN_TryAN0, ReadAN_AN0
		Cmd_GetI
Cur_AN1	00B5 	ReadAN_AN1, Cmd_GetAuxNValue_Ana, Cmd_GetBattVolts
Cur_AN2	00B7 	DoModeZero, DoModeOne, ReadAN_AN2, Cmd_GetBattVolts
Cur_AN3	00B9 	ReadAN_AN2
DM1_FF ^	02C0 	DoModeOne
DM1_FR ^	02C6 	DoModeOne
SerialServo.asm   X-Ref Table                                            Page: 60
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

DM2_NotOverCurrent ^	0310 	DoModeTwo
DM3_CPV_End ^	0365 	DM3_NotOverCurrent
DM3_CalcCurPos ^	036D 	DM3_CPV_End
DM3_CalcSCmd ^	03CA 	DM3_NoDB, DM3_PosLimit
DM3_CalcSCmd_1 ^	03D5 	DM3_CalcSCmd
DM3_CalcSCmd_2s ^	03D2 	DM3_CalcSCmd
DM3_ErrIsPos ^	03B1 	DM3_SetServoPWM
DM3_GoRev ^	0387 	DM3_CalcCurPos
DM3_IdleInactive ^	03EA 	DM3_IdleServo
DM3_IdleServo ^	03DE 	DM3_ServoHere, DM3_SetServoPWM, DM3_ErrIsPos
DM3_NoDB ^	03B8 	DM3_SetServoPWM, DM3_ErrIsPos
DM3_NotOverCurrent ^	0358 	DoModeThree
DM3_PosLimit ^	03C3 	DM3_NoDB
DM3_ServoHere ^	0351 	DoModeThree
DM3_ServoThere ^	0368 	DM3_CalcCurPos, DM3_GoRev
DM3_SetServoPWM ^	0393 	DM3_ServoThere, DM3_CalcCurPos
DM3_UpdatePos ^	03E7 	DM3_CalcSCmd_1
DM4_NotOverCurrent ^	03FB 	DoMode4
DataInBuffer	IH_Flags,1	BootLoaderStart, BL_Parse, BLPV_EndCmd, BufferIHData, BIHD_PutInBuff_L1
		EraseSourceBuffer
DataReceivedFlag	SerFlags,1	RX_TheByte, No_NewDataAN0
DataSentFlag	SerFlags,2	TX_TheByte, ML_Ser_Out
DeadBand	005A 	DM3_SetServoPWM, DM3_ErrIsPos, Cmd_SetDeadBand, Cmd_GetDeadBand
DebounceTime	000A 	HdlBtn_DB
DecTimer ^	010B 	DecTimer4, DecTimer3, DecTimer2
DecTimer1 ^	010A 	ProgStartVector
DecTimer2 ^	0108 	ProgStartVector
DecTimer3 ^	0106 	ProgStartVector
DecTimer4 ^	0104 	ProgStartVector
DelayWuS ^	012D 	DecTimer, ReadAN_1, ReadAN0_ColdStart
DelayWuS_Loop ^	012E 	DelayWuS_Loop
DestAddHiRXd	RX_ParseFlags,5	RS232_Parse
DestAddLoRXd	RX_ParseFlags,4	RS232_Parse, RS232_Parse_SALo_end
DestBuffer	2140 	BootLoaderStart, FSR1_DestBuff
Dispatcher_1 ^	082B 	HandleRXData_1
Dispatcher_2 ^	0841 	Dispatcher_1
Dispatcher_3 ^	0853 	Dispatcher_2
Dispatcher_4 ^	0865 	Dispatcher_3
Dispatcher_5 ^	087D 	Dispatcher_4
Dispatcher_6 ^	0885 	Dispatcher_5
DoMode4 ^	03EE 	ML_Ser_End
DoMode4_1 ^	0436 	DoMode4
DoMode4_Go ^	042D 	DoMode4_Minus_1, DoMode4_Hold
DoMode4_Hold ^	041A 	DM4_NotOverCurrent, DoMode4_MovPlus
DoMode4_Minus ^	0415 	DM4_NotOverCurrent
DoMode4_Minus_1 ^	0416 	DM4_NotOverCurrent, DoMode4_Hold
DoMode4_MovPlus ^	041E 	DM4_NotOverCurrent
DoMode4_Plus ^	0429 	DoMode4_MovPlus
DoMode4_Plus_1 ^	042A 	DoMode4_MovPlus
DoModeOne ^	02A2 	ML_Ser_End
DoModeThree ^	0346 	ML_Ser_End
DoModeTwo ^	0304 	ML_Ser_End
DoModeTwo_1 ^	0344 	DoModeTwo
DoModeTwo_Go ^	033D 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_Plus
DoModeTwo_Minus ^	0328 	DM2_NotOverCurrent
DoModeTwo_MovPlus ^	032D 	DM2_NotOverCurrent
DoModeTwo_NoSpeed ^	0339 	DM2_NotOverCurrent, DoModeTwo_MovPlus
DoModeTwo_Plus ^	0334 	DoModeTwo_MovPlus
DoModeZero ^	0296 	ML_Ser_End
EEADR	0191 	EERead, EEWrite
EEADRH	0192 	LoadProgAddr
EEADRL	0191 	ReadEEData, WriteEEData, ReadProgBlock_1, LoadProgAddr, WriteProgBlock_L1
EEAddrTemp	002A 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DelayWuS_Loop
		EERead, EEWriteW, EEWrite
EECON1	0195 	EERead, EEWrite, EEWriteLoop, ReadEEData, WriteEEData, WriteEEData_L1
		ReadProgBlock, ReadProgBlock_L1, EraseProgBlock, WriteProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
EECON2	0196 	EEWrite, WriteEEData, EraseProgBlock, WriteProgBlock_L1, WriteProgBlock_Wr
EEDAT	0193 	EERead, EEWrite
EEDATH	0194 	ReadProgBlock_L1, WriteProgBlock_L1
EEDATL	0193 	ReadEEData, WriteEEData, ReadProgBlock_L1, WriteProgBlock_L1
EEDataTemp	002B 	SaveParams_L1, EEWrite, Cmd_RunBootloader
EEPGD	0007 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
EERead ^	0134 	CopyToRam_L1
EEWrite ^	013E 	SaveParams_L1
EEWriteLoop ^	0150 	EEWriteLoop
EEWriteW ^	013D 	Cmd_RunBootloader
EncoderAccum	0040 	Cmd_GetEncAbs, ReadEncoder_2, HA_SetIt, Home_Here
EncoderFlags	0045 	CopyToRam, SaveParams, ReadEncoder, ReadEncoder_1, ReadEncoder_2
		SaveHomePos
EncoderHome	0046 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetIt
EncoderOffset	0048 	DM3_ServoHere, DM3_SetServoPWM, Cmd_SetEncoderOffset, Cmd_GetEncoderOffset
EncoderVal	0043 	DoModeOne, DM3_ServoHere, DM3_SetServoPWM, Cmd_GetEnc, ReadEncoder
		ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3, SaveHomePos, HA_SetItNeg
		HA_SetIt
EraseBlock_L1 ^	1F4A 	EraseBlock_L1
EraseProgBlock ^	1F63 	BLP_WriteBuffer
EraseSourceBuffer ^	1F46 	BootLoaderStart, BLP_WriteBuffer_end
F	0001 	ProgStartVector, SystemBlink_end, LED1_Blinking, Aux0DigOut_end, LED2_Blinking
		IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, IRQ_Servo1_Dwell, ClearRam, ClearRam_L2, CopyToRam_L1
		SaveParams_L1, DecTimer, DelayWuS_Loop, StoreSerIn, GetSerIn, StoreSerOut, GetSerOut
		RS232_Parse, RS232_Parse_Byte, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End
		RS232_Parse_L1, RS232_ClearTXData_L1, RS232_Send, RS232_Send_L1, ML_1, DoModeZero
		DoModeOne, CheckCurrent, CheckGripCurrent, DM2_NotOverCurrent, DoModeTwo_Minus
		DoModeTwo_MovPlus, DoModeTwo_Plus, DM3_CPV_End, DM3_CalcCurPos, DM3_GoRev, DM3_SetServoPWM
		DM3_ErrIsPos, DM4_NotOverCurrent, DoMode4_Minus_1, DoMode4_MovPlus, DoMode4_Plus_1
		HandleButtons, Cmd_SendIDString_L1, ReadEncoder_1, ReadEncoder_2, Home_Absolute_2
SerialServo.asm   X-Ref Table                                            Page: 61
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

		SaveHomePos, HA_SetItNeg, Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg, CalcParity_L1
		CheckParity_L1, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2, BLP_SaveIH_Length, BLP_NextState
		BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BufferIHData
		BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, TestErased_L1, CB_Next, EraseBlock_L1, ReadProgBlock_L1
		ReadProgBlock_1, WriteProgBlock_L1
FERR	0002 	RX_TheByte_Err, GetChar_Err
FREE	0004 	EraseProgBlock
FSR0	0004 	ClearRam, ClearRam_2, ClearRam_L2, StoreSerIn, StoreSerOut, ClampIntMD3
		ClampInt, HandleRXData_1
FSR0H	0005 	ClearRam, CopyToRam, SaveParams, DecTimer, StoreSerIn, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, ReadAN, Cmd_SetAuxConfig
		Cmd_SetAuxNValue, Cmd_SetAuxNDigOut, BLP_WriteBuffer, FSR0_SerialBuffer
FSR0L	0004 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DecTimer, GetSerIn
		GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, ReadAN_TryAN0, ReadAN_AN0
		ReadAN_AN1, ReadAN_AN2, Cmd_SetAuxConfig, Cmd_SetAuxNValue, Cmd_SetAuxNDigOut, BLP_WriteBuffer
		FSR0_SerialBuffer
FSR0_SerialBuffer ^	1EDE 	BL_ParseNextLine, BLPV_HighAddr, BIHD_PutInBuff_E2
FSR1	0006 	HandleRXData_1
FSR1H	0007 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, Cmd_GetAuxConfig
		Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana, BIHD_PutInBuff_E2, FSR1_DestBuff, FSR1_SourceBuffer
FSR1L	0006 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, Cmd_GetAuxConfig
		Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana, BIHD_PutInBuff_E2, FSR1_DestBuff, FSR1_SourceBuffer
FSR1_DestBuff ^	1EE3 	BLP_WriteBuffer
FSR1_SourceBuffer ^	1EE8 	BLP_WriteBuffer, EraseSourceBuffer
FirstRAMParam	EncoderFlags	CopyToRam, SaveParams
FlushInBuff ^	018F 	RS232_Parse_Error
GIE	0007 	EEWrite, EEWriteLoop, Copy7CToSig_1, InitializeIO, InitializeBLIO
GO	0001 	ReadAN0_ColdStart
GO_NOT_DONE	0001 	ReadAN
GetChar ^	1EED 	BLP_L2, GetChar, GetChar_Err
GetChar_Err ^	1EF8 	GetChar
GetSerIn ^	017E 	RS232_Parse_Byte
GetSerInBytes ^	0195 	MainLoop
GetSerIn_End ^	018D 	GetSerIn
GetSerOut ^	01B3 	ML_Ser_Out
GetSerOut_End ^	01C2 	GetSerOut
GripIMet	ssTempFlags,4	CheckGripCurrent, DoMode4_MovPlus, DoMode4_Go, DoMode4_1
GripIOver	ssTempFlags,5	CheckGripCurrent, DoMode4_Hold, DoMode4_Go, DoMode4_1
HA_SetIt ^	0AAD 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos
HA_SetItNeg ^	0AAB 	Home_Absolute_2
HandleButtons ^	043A 	No_NewDataAN0
HandleRXData ^	0804 	MainLoop
HandleRXData_1 ^	080A 	HandleRXData
HandleRXData_Rtn ^	0808 	Cmd_SetMode, Cmd_SetAuxConfig, Cmd_GetAuxConfig, Cmd_SetAuxNValue
		Cmd_GetAuxNValue
HdlBtn_1 ^	0449 	HandleButtons
HdlBtn_Btn1 ^	0452 	HdlBtn_1
HdlBtn_Btn2 ^	0453 	HdlBtn_1
HdlBtn_Btn3 ^	0454 	HdlBtn_1
HdlBtn_Btn4 ^	0455 	HdlBtn_1
HdlBtn_DB ^	0446 	HandleButtons, HdlBtn_Btn1, HdlBtn_Btn2, HdlBtn_Btn3, HdlBtn_Btn4
Home_Absolute_1 ^	0A61 	ReadEncoder_2
Home_Absolute_2 ^	0A6D 	ReadEncoder_2, Home_Absolute_1
Home_Absolute_3 ^	0A8C 	Home_Absolute_2
Home_Here ^	0AB8 	ReadEncoder_2
IDString ^	09EC 	Cmd_SendIDString_L1
IHS_Length	0001 	BLP_L2
IH_Ack	002A 	BootLoaderStart, BLPV_EndCmd, BLPV_Exit_Ack
IH_Addr_Hi	0025 	BootLoaderStart, BLPV_HighAddr, BufferIHData
IH_Addr_Lo	0023 	BootLoaderStart, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BufferIHData
		BIHD_PutInBuff
IH_ByteCount	0028 	BootLoaderStart, BL_ParseNextLine, BLP_IHS_Data, BIHD_PutInBuff_E2
IH_Bytes	0027 	BootLoaderStart, BLP_SaveIH_Length, BLP_IHS_DataType, BLP_IHS_Data
IH_ErrorBadCSum	002D 	BLP_IHS_CSum
IH_ErrorBadLen	002B 	BLP_IHS_Length
IH_ErrorBadType	003D 	BLPV_BadType
IH_Flags	002C 	BootLoaderStart, BL_Parse, BLP_L1, BLP_TestNum_1, BLPV_EndCmd, BufferIHData
		BIHD_PutInBuff_L1, EraseSourceBuffer
IH_State	002A 	BootLoaderStart, BL_ParseNextLine, BLP_L2, BLP_TestNum, BLP_TestNum_2
		BLP_NextState, BLP_IHS_DataType
IH_TempVal	002B 	BootLoaderStart, BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_Length, BLP_SaveIH_Length
		BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
IH_Type	0029 	BootLoaderStart, BLP_IHS_DataType, BLP_Validate
INDF0	0000 	ClearRam_L2, DecTimer, StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_DALo_End
		Cmd_GetRevDir, Cmd_GetEnaOvrCur, Cmd_GetUseIdleCenter, Cmd_GetUseFastPWM, Cmd_SetAuxNValue
INDF1	0001 	Cmd_SetMode, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_SetUseIdleCenter, Cmd_SetUseFastPWM
		Cmd_SetAuxConfig, Cmd_GetAuxConfig, Cmd_GetAuxNValue
INTCON	000B 	EEWrite, EEWriteLoop, Copy7CToSig_1, InitializeIO, InitializeBLIO
IRQ_Ser_End ^	00C9 	IRQ_Servo1_End
IRQ_Servo1_1 ^	0092 	Aux1DigOut_end
IRQ_Servo1_20mS ^	00A8 	IRQ_Servo1_OH
IRQ_Servo1_CalcDwell ^	00AD 	IRQ_Servo1_OH
IRQ_Servo1_Dwell ^	00C0 	Aux1DigOut_end, IRQ_Servo1_Idle
IRQ_Servo1_End ^	00C6 	Aux1DigOut_end
IRQ_Servo1_Idle ^	00B2 	IRQ_Servo1_1
IRQ_Servo1_OH ^	0099 	IRQ_Servo1_Idle
IRQ_Servo1_OL ^	00BE 	IRQ_Servo1_1
IRQ_Servo1_X ^	00C4 	IRQ_Servo1_CalcDwell
Init_AS5047D ^	0ABD 	InitializeIO
InitializeBLIO ^	1F9E 	BootLoaderStart
InitializeIO ^	0B6B 	start
LATA	010C 	LED1_Blink_end, Aux0DigOut_1, LED2_Blink_end, Aux1DigOut_1
LATB	010D 	Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L2
LED1_Bit	0002 	ProgStartVector, SystemBlink_end, LED1_NextBlink, LED1_Blink_end, Aux0DigOut_1
		Aux0DigOut_2
LED1_BlinkCount	0026 	SystemBlink_end, LED1_Blinking, LED1_Start
LED1_Blink_end ^	0042 	SystemBlink_end, LED1_Blinking
LED1_Blinking ^	002E 	SystemBlink_end
SerialServo.asm   X-Ref Table                                            Page: 62
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

LED1_Blinks	0024 	SystemBlink_end, LED1_Start, LED1_Blink_end, Cmd_SetAuxNDigOut
		InitializeIO
LED1_Count	0028 	SystemBlink_end, LED1_Blinking, LED1_NextBlink
LED1_Lat	LATA,LED1_Bit	LED1_Blink_end, Aux0DigOut_1
LED1_NextBlink ^	003E 	LED1_Blinking
LED1_Start ^	003C 	LED1_Blinking
LED1_Tris	TRISA,LED1_Bit	ProgStartVector, SystemBlink_end, LED1_NextBlink, Aux0DigOut_2
LED2_Bit	0003 	ProgStartVector, Aux0DigOut_end, LED2_NextBlink, LED2_Blink_end, Aux1DigOut_1
		Aux1DigOut_2
LED2_BlinkCount	0027 	Aux0DigOut_end, LED2_Blinking, LED2_Start
LED2_Blink_end ^	0078 	Aux0DigOut_end, LED2_Blinking
LED2_Blinking ^	0064 	Aux0DigOut_end
LED2_Blinks	0025 	Aux0DigOut_end, LED2_Start, LED2_Blink_end
LED2_Count	0029 	Aux0DigOut_end, LED2_Blinking, LED2_NextBlink
LED2_Lat	LATA,LED2_Bit	LED2_Blink_end, Aux1DigOut_1
LED2_NextBlink ^	0074 	LED2_Blinking
LED2_Start ^	0072 	LED2_Blinking
LED2_Tris	TRISA,LED2_Bit	ProgStartVector, Aux0DigOut_end, LED2_NextBlink, Aux1DigOut_2
LEDErrorTime	000A 	ML_1
LEDFastTime	0014 	LED1_NextBlink, LED2_NextBlink
LEDTIME	0064 	LED1_Blinking, LED2_Blinking, ML_1, InitializeIO
LWLO	0005 	WriteProgBlock, WriteProgBlock_Wr
LastRAMParam	SysFlags	CopyToRam_L1, SaveParams_L1
LoadProgAddr ^	1F72 	ReadProgBlock, EraseProgBlock, WriteProgBlock
MD3_FFwd	ssStatus,0	DM3_CalcCurPos, DM3_GoRev, DM3_IdleServo, DM3_IdleInactive
MD3_FRev	ssStatus,1	DM3_CalcCurPos, DM3_GoRev, DM3_IdleServo, DM3_IdleInactive
ML_1 ^	0267 	MainLoop
ML_Ser_End ^	028D 	ML_Ser_Out
ML_Ser_Out ^	0286 	No_NewDataAN0
MSN_Done	IH_Flags,0	BootLoaderStart, BLP_L1, BLP_TestNum_1
MagEnc_HighZone	EncoderFlags,0	ReadEncoder, ReadEncoder_2
MagEnc_Homed	EncoderFlags,4	ReadEncoder, ReadEncoder_2, SaveHomePos
MagEnc_Index	EncoderFlags,2	ReadEncoder, ReadEncoder_2
MagEnc_IndexLatch	EncoderFlags,3	ReadEncoder, ReadEncoder_1, ReadEncoder_2
MagEnc_LowZone	EncoderFlags,1	ReadEncoder, ReadEncoder_1, ReadEncoder_2
MainLoop ^	025D 	ModeReturn
ModeReturn ^	0295 	DoModeZero, DoModeOne, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_Go
		DoModeTwo_1, DM3_UpdatePos, DM3_IdleInactive, DM4_NotOverCurrent, DoMode4_Go, DoMode4_1
ModeZeroPot	Cur_AN2	DoModeZero, DoModeOne, Cmd_GetBattVolts
NOT_WPUEN	0007 	InitializeIO, InitializeBLIO
NewDataAN0	ANFlags,0	ML_1, ReadAN_TryAN0, ReadAN_AN0
No_NewDataAN0 ^	027B 	ML_1
OERR	0001 	RX_TheByte_Err, GetChar_Err
OPTION_REG	0095 	InitializeIO, InitializeBLIO
OSCCON	0099 	InitializeIO, InitializeBLIO
OSCCON_Value	00F0 	InitializeIO, InitializeBLIO
OldAN0Value	00BD 	ML_1
OverCurrentFlag	ssTempFlags,3	CheckCurrent, DoModeTwo, DoModeThree, DoMode4
PCLATH	000A 	ProgStartVector
PEIE	0006 	InitializeIO
PIE1	0091 	InitializeIO
PIR1	0011 	ProgStartVector, Aux1DigOut_end, IRQ_Servo1_X, IRQ_Servo1_End, No_NewDataAN0
		GetChar, SendChar
POP_SerOut_End ^	01B1 	StoreSerOut
PORTA	000C 	SystemBlink_end, Aux0DigOut_end, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1
		Cmd_GetAuxNValue_Dig2, InitializeIO, InitializeBLIO
PORTB	000D 	InitializeIO, InitializeBLIO
PR2	001B 	InitializeIO
PR2_Value	007D 	InitializeIO
PROG_ADDR_HI	0021 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PROG_ADDR_LO	0020 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PS0	0000 	InitializeIO, InitializeBLIO
PS1	0001 	InitializeIO, InitializeBLIO
PS2	0002 	InitializeIO, InitializeBLIO
PSA	0003 	InitializeIO, InitializeBLIO
Param76	0076 	ReadEncoder, ReadEncoder_2, CalcParity, CalcParity_L1, CheckParity
		CheckParity_L1
Param77	0077 	DelayWuS, DelayWuS_Loop, ReadEncoder, ReadEncoder_1, ReadEncoder_2
		CalcParity, CalcParity_L1, CheckParity, CheckParity_L1, CompareBlock_L1, CB_NotBlank
Param78	0078 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_Byte, RS232_Parse_Sync2
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
		RS232_Parse_L1, RS232_ClearTXData, RS232_ClearTXData_L1, ML_Ser_Out, CheckCurrent
		CheckGripCurrent, DM3_CalcCurPos, ReadAN, ReadAN_TryAN2, ReadAN_TryAN0, ReadAN_AN0
		ReadAN_AN0_1, ReadAN_AN0_2, ReadAN_AN0_3, ReadAN_1, HandleRXData_1, Dispatcher_1
		Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetAuxNValue, Cmd_SetAuxNDigOut
		Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Btn
		ReadEncoder, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3, Init_AS5047D
		AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read, SPI_SendRecWord_L1, SPI_SendRecWord_L2
		CalcParity_L1, CheckParity_L1, BLP_L2, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2
		BLP_IHS_CSum, BufferIHData, CompareBlock_L1, CB_NotBlank
Param79	0079 	RS232_Send, RS232_Send_L1, DoModeOne, CheckCurrent, CheckGripCurrent
		DM3_SetServoPWM, DM3_NoDB, DM3_PosLimit, DM3_CalcSCmd, DM3_CalcSCmd_2s, DM3_CalcSCmd_1
		Cmd_SendIDString, Cmd_SendIDString_L1, ReadEncoder, ReadEncoder_2, Home_Absolute_1
		Home_Absolute_2, Home_Absolute_3, Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1
		AS5047_ReadReg, AS5047_Read, SPI_SendRecWord, SPI_SendRecWord_L1, CalcParity_L1
		CheckParity_L1, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, TestErased, TestErased_L1
		CompareBlock, CB_Next, EraseSourceBuffer, EraseBlock_L1, ReadProgBlock, ReadProgBlock_L1
		WriteProgBlock
Param7A	007A 	RS232_Send, RS232_Send_L1, DoModeOne, DM3_SetServoPWM, DM3_NoDB, DM3_PosLimit
		ReadEncoder, ReadEncoder_2, Init_AS5047D
Param7B	007B 	Init_AS5047D
Param7C	007C 	DoModeZero, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_MovPlus, DoModeTwo_Go
		DM3_NotOverCurrent, DM3_SetServoPWM, DM3_ErrIsPos, DM3_CalcSCmd_1, DM3_IdleServo
		DM4_NotOverCurrent, DoMode4_MovPlus, DoMode4_Go, Copy7CToSig, Copy7CToSig_1, SetMiddlePosition
		ClampInt_E2, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh
Param7D	007D 	DoModeZero, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_MovPlus, DoModeTwo_Go
		DM3_NotOverCurrent, DM3_SetServoPWM, DM3_ErrIsPos, DM3_CalcSCmd_1, DM3_IdleServo
		DM4_NotOverCurrent, DoMode4_MovPlus, DoMode4_Go, Copy7CToSig, Copy7CToSig_1, SetMiddlePosition
		ClampInt_E2, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh
SerialServo.asm   X-Ref Table                                            Page: 63
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

Param7F	007F 	ClearRam, ClearRam_2, ClearRam_L2
ParityErrFlag	AS5047D_Flags,0	ReadEncoder, CheckParity_L1
PortADDRBits	00BF 	InitializeIO, InitializeBLIO
PortAValue	0000 	InitializeIO, InitializeBLIO
PortBDDRBits	00C6 	InitializeIO, InitializeBLIO
PortBValue	0011 	InitializeIO, InitializeBLIO
ProgStartVector ^	0002 	BootLoader_End
ProgWordCount	0022 	BootLoaderStart, BIHD_PutInBuff, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
PulseSent	ssTempFlags,0	Aux1DigOut_end, DM2_NotOverCurrent, DM3_CalcCurPos, DM4_NotOverCurrent
RCIE	0005 	InitializeIO
RCIF	0005 	IRQ_Servo1_End, GetChar
RCREG	0199 	RX_TheByte, RX_TheByte_Err, GetChar, GetChar_Err
RCSTA	019D 	RX_TheByte, RX_TheByte_Err, InitializeIO, GetChar, GetChar_Err, InitializeBLIO
RCSTA_Value	0090 	InitializeIO, InitializeBLIO
RD	0000 	EERead, ReadEEData, ReadProgBlock_L1
RP_DataBytes	0004 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_ClearTXData
		RS232_Send
RP_LongAddr	0000 	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Send
RS232_ClearTXData ^	0234 	RS232_Send_L1
RS232_ClearTXData_L1 ^	023C 	RS232_ClearTXData_L1
RS232_MasterAddr	0056 	RS232_Parse_SALo, RS232_Send, Cmd_SetMasterAddr
RS232_Parse ^	01C4 	MainLoop
RS232_Parse_Byte ^	01CF 	RS232_Parse
RS232_Parse_DALo_End ^	0206 	RS232_Parse_SALo_end
RS232_Parse_Data_end ^	0217 	RS232_Parse_DALo_End
RS232_Parse_Error ^	0232 	RS232_Parse_Sync2, RS232_Parse_Data_end
RS232_Parse_L1 ^	0225 	RS232_Parse_L1
RS232_Parse_Rtn ^	01F6 	RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo_end
		RS232_Parse_DALo_End
RS232_Parse_SALo ^	01E6 	RS232_Parse_Sync2
RS232_Parse_SALo_end ^	01F8 	RS232_Parse_SALo
RS232_Parse_Sync2 ^	01DE 	RS232_Parse_Byte
RS232_Send ^	0241 	RS232_Send_S0
RS232_Send_L1 ^	0250 	RS232_Send_L1
RS232_Send_S0 ^	0800 	Cmd_GetMode, Cmd_GetCmdPos, Cmd_GetMaxI, Cmd_GetFFwd, Cmd_GetFRev
		Cmd_GetMin_uS, Cmd_GetMax_uS, Cmd_GetRevDir, Cmd_GetEnaOvrCur, Cmd_GetStopCenter
		Cmd_GetSpeed, Cmd_GetUseIdleCenter, Cmd_GetDeadBand, Cmd_GetUseFastPWM, Cmd_GetGripI
		Cmd_GetAuxConfig, Cmd_GetAuxNValue_Ana, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1
		Cmd_GetAuxNValue_Dig2, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1, Cmd_GetAuxNValue_Btn2
		Cmd_GetEncoderOffset, Cmd_GetI, Cmd_GetEnc, Cmd_GetEncAbs, Cmd_GetBattVolts, Cmd_GetStatus
		Cmd_SetMasterAddr, Cmd_SetSlaveAddr
RS232_SlaveAddr	0057 	RS232_Parse_SALo_end, RS232_Send, Cmd_SetSlaveAddr
RXByte	0035 	RX_TheByte, RX_TheByte_Err, No_NewDataAN0
RXDTSEL	0007 	InitializeIO, InitializeBLIO
RXDataIsNew	RX_Flags,1	RS232_Parse, RS232_Parse_L1, MainLoop, HandleRXData
RXDataValidFlag	RX_Flags,0	RS232_Parse, RS232_Parse_L1, HandleRXData
RXDstIsMe	RX_Flags,3	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_L1
RXSrcIsMaster	RX_Flags,2	RS232_Parse, RS232_Parse_SALo, RS232_Parse_L1
RXTimeout	0005 	RS232_Parse_Byte
RX_CSUM	00A3 	RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_Data	00AA 	RS232_Parse_Data_end, HandleRXData_1
RX_DataCount	00A2 	RS232_Parse_SALo, RS232_Parse_DALo_End
RX_DstAdd	00A5 	RS232_Parse_SALo_end
RX_Flags	00A1 	RS232_Parse, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_L1
		MainLoop, HandleRXData
RX_ParseFlags	00A0 	RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo
		RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_Parse_Error
RX_SrcAdd	00A4 	RS232_Parse_SALo
RX_TempData	00A6 	RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_TheByte ^	015E 	IRQ_Servo1_End
RX_TheByte_Err ^	0168 	RX_TheByte
ReadAN ^	0456 	ML_1
ReadAN0_ColdStart ^	04B2 	start, ReadAN
ReadAN_1 ^	04A5 	ReadAN_TryAN0, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2, ReadAN_AN0_3
ReadAN_AN0 ^	0484 	ReadAN, ReadAN_TryAN0
ReadAN_AN0_1 ^	048B 	ReadAN_AN1
ReadAN_AN0_2 ^	0492 	ReadAN_AN2
ReadAN_AN0_3 ^	0499 	ReadAN_AN2
ReadAN_AN1 ^	049C 	ReadAN
ReadAN_AN2 ^	049F 	ReadAN, ReadAN_TryAN2
ReadAN_Rtn ^	04BB 	ReadAN
ReadAN_TryAN0 ^	0479 	ReadAN_TryAN2
ReadAN_TryAN2 ^	0470 	ReadAN
ReadEEData ^	1F04 	BootLoaderStart
ReadEncoder ^	0A09 	No_NewDataAN0
ReadEncoder_1 ^	0A23 	ReadEncoder
ReadEncoder_2 ^	0A2D 	ReadEncoder, ReadEncoder_1
ReadProgBlock ^	1F51 	BLP_WriteBuffer
ReadProgBlock_1 ^	1F61 	ReadProgBlock_L1
ReadProgBlock_L1 ^	1F56 	ReadProgBlock_1
SDO1SEL	0006 	InitializeIO, InitializeBLIO
SMP	0007 	Init_AS5047D
SPBRGH	019C 	InitializeIO, InitializeBLIO
SPBRGL	019B 	InitializeIO, InitializeBLIO
SPI_CLK_Tris	TRISB,4	Init_AS5047D
SPI_CSn	LATB,0	Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L2
SPI_CSn_Tris	TRISB,0	Init_AS5047D
SPI_MISO_Tris	TRISB,1	Init_AS5047D
SPI_MOSI_Tris	TRISA,6	Init_AS5047D
SPI_SendRecWord ^	0B2E 	Init_AS5047D, AS5047_ReadPos, AS5047_Read
SPI_SendRecWord_L1 ^	0B33 	SPI_SendRecWord_L1
SPI_SendRecWord_L2 ^	0B3A 	SPI_SendRecWord_L2
SSP1BUF	0211 	SPI_SendRecWord, SPI_SendRecWord_L1, SPI_SendRecWord_L2
SSP1CON1	0215 	Init_AS5047D
SSP1CON1_Val	0022 	Init_AS5047D
SSP1STAT	0214 	Init_AS5047D, SPI_SendRecWord_L1, SPI_SendRecWord_L2
STATUS	0003 	ProgStartVector, SystemBlink_end, LED1_Blinking, LED1_Blink_end, Aux0DigOut_end
		LED2_Blinking, LED2_Blink_end, CopyToRam_L1, SaveParams_L1, DecTimer, RX_TheByte
		GetSerIn, StoreSerOut, GetSerOut, RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2
SerialServo.asm   X-Ref Table                                            Page: 64
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
		MainLoop, DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_CPV_End, DM3_CalcCurPos, DM3_GoRev
		DM3_SetServoPWM, DM3_ErrIsPos, DM3_NoDB, DM3_PosLimit, DM3_CalcSCmd, DM4_NotOverCurrent
		DoMode4_MovPlus, HandleButtons, ReadAN, ReadAN_TryAN2, ReadAN_TryAN0, ReadAN_AN0_1
		ReadAN_AN0_2, Copy7CToSig, ClampInt_E2, ClampInt_1, HandleRXData_1, Dispatcher_1
		Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetMode, Cmd_SetRevDir
		Cmd_SetEnaOvrCur, Cmd_SetUseIdleCenter, Cmd_SetUseFastPWM, Cmd_SetAuxConfig, Cmd_GetAuxConfig
		Cmd_SetAuxNValue, Cmd_GetAuxNValue, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1
		Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1, Cmd_SendIDString_L1, ReadEncoder, ReadEncoder_1
		ReadEncoder_2, BootLoaderStart, BLP_L2, BLP_TestNum, BLP_IHS_Length, BLP_IHS_DataType
		BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate, BufferIHData, BIHD_PutInBuff_L1, GetChar
		TestErased_L1, CompareBlock_L1, CB_NotBlank, WriteProgBlock_L1
SW1_Flag	SysFlags,0	SystemBlink_end, HandleButtons, HdlBtn_1, Cmd_GetAuxNValue_Btn
SW1_In	PORTA,2	SystemBlink_end, Cmd_GetAuxNValue_Dig
SW2_Flag	SysFlags,1	Aux0DigOut_end, HandleButtons, HdlBtn_1, Cmd_GetAuxNValue_Btn1
SW2_In	PORTA,3	Aux0DigOut_end, Cmd_GetAuxNValue_Dig1
SW3_Flag	SysFlags,2	HandleButtons, HdlBtn_1
SW3_In	PORTA,4	Cmd_GetAuxNValue_Dig2
SW4_Flag	SysFlags,3	HandleButtons, HdlBtn_1
SaveHomePos ^	0A9F 	ReadEncoder_2
SaveParams ^	00F6 	Cmd_SaveParams, Cmd_SetMasterAddr, Cmd_SetSlaveAddr, SaveHomePos
SaveParams_L1 ^	00FB 	SaveParams_L1
SendChar ^	1EFE 	BootLoaderStart, BLP_IHS_Length, BLP_IHS_CSum, BLPV_EndCmd, BLPV_Exit
		SendChar
SerFlags	0036 	TX_TheByte, RX_TheByte, No_NewDataAN0, ML_Ser_Out
Ser_Buff_Bank	2	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes, StoreSerOut, GetSerOut
Ser_In_Buff	0126 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut
Ser_In_Bytes	0120 	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes
Ser_In_InPtr	0122 	StoreSerIn, FlushInBuff
Ser_In_OutPtr	0123 	GetSerIn, FlushInBuff
Ser_Out_Buff	0146 	StoreSerOut, GetSerOut
Ser_Out_Bytes	0121 	GetSerInBytes, StoreSerOut, GetSerOut
Ser_Out_InPtr	0124 	StoreSerOut
Ser_Out_OutPtr	0125 	GetSerOut
SerialBuffer	2180 	BootLoaderStart, FSR0_SerialBuffer
ServoCurrent	Cur_AN0	CheckCurrent, CheckGripCurrent
ServoFastForward	004C 	DM1_FF, Cmd_SetFFwd, Cmd_GetFFwd
ServoFastReverse	004A 	DM1_FR, ClampIntMD3, Cmd_SetFRev, Cmd_GetFRev
ServoIdle	ssTempFlags,2	IRQ_Servo1_1, DoModeOne, DoModeTwo_1, DM3_IdleServo, DM3_IdleInactive
		DoMode4_1, Copy7CToSig_Done, SetMiddlePosition
ServoMax_uS	0052 	Cmd_SetMax_uS, Cmd_GetMax_uS
ServoMin_uS	0050 	ClampInt, Cmd_SetMin_uS, Cmd_GetMin_uS
ServoOff	ssTempFlags,1	Aux1DigOut_end, StartServo, SetMiddlePosition, InitializeIO
ServoSpeed	0054 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus
		DM3_CPV_End, DM3_CalcCurPos, DM3_GoRev, DM4_NotOverCurrent, DoMode4_Minus, DoMode4_MovPlus
		DoMode4_Plus, Cmd_SetSpeed, Cmd_GetSpeed
ServoStopCenter	004E 	DM3_CalcSCmd_1, DM3_IdleServo, Cmd_SetStopCenter, Cmd_GetStopCenter
SetMiddlePosition ^	04E8 	StartServo
SigOutTime	02A0 	IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, Copy7CToSig, Copy7CToSig_1
SigOutTimeH	02A1 	Copy7CToSig, Copy7CToSig_1
SourceAddHiRXd	RX_ParseFlags,3	RS232_Parse
SourceAddLoRXd	RX_ParseFlags,2	RS232_Parse, RS232_Parse_SALo
SourceBuffer	2100 	BootLoaderStart, BIHD_PutInBuff_E2, BLP_WriteBuffer, FSR1_SourceBuffer
StartServo ^	04D1 	start
StoreSerIn ^	0170 	No_NewDataAN0
StoreSerOut ^	019D 	RS232_Send, RS232_Send_L1, StoreSerOut_S0
StoreSerOut_S0 ^	0A05 	Cmd_SendIDString_L1
SyncByte1RXd	RX_ParseFlags,0	RS232_Parse, RS232_Parse_Byte
SyncByte2RXd	RX_ParseFlags,1	RS232_Parse, RS232_Parse_Sync2
SysFlags	005F 	SystemBlink_end, Aux0DigOut_end, CopyToRam_L1, SaveParams_L1, HandleButtons
		HdlBtn_1, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1
SysLEDCount	0023 	ProgStartVector, SystemBlink_Std, InitializeIO
SysLED_Bit	0007 	ProgStartVector, SystemBlink_Std
SysLED_BlinkCount	0022 	SystemBlink_Std
SysLED_Blinks	0021 	ProgStartVector
SysLED_Time	0020 	SystemBlink_Std, ML_1, InitializeIO
SysLED_Tris	TRISA,SysLED_Bit	ProgStartVector, SystemBlink_Std
SysMode	0055 	ML_Ser_End, Cmd_SetMode, Cmd_GetMode, InitializeIO
SystemBlink_Std ^	0017 	ProgStartVector
SystemBlink_end ^	001C 	ProgStartVector
SystemTick_end ^	0088 	ProgStartVector
T1CON	0018 	InitializeIO
T1CON_Val	0021 	InitializeIO
T1GCON	0019 	InitializeIO
T2CON	001C 	InitializeIO
T2CON_Value	004F 	InitializeIO
TMR0CS	0005 	InitializeIO, InitializeBLIO
TMR1GE	0007 	InitializeIO
TMR1H	0017 	StartServo
TMR1L	0016 	StartServo
TMR2IE	0001 	InitializeIO
TMR2IF	0001 	ProgStartVector
TRISA	008C 	ProgStartVector, SystemBlink_Std, SystemBlink_end, LED1_NextBlink, Aux0DigOut_2
		Aux0DigOut_end, LED2_NextBlink, Aux1DigOut_2, Init_AS5047D, InitializeIO, InitializeBLIO
TRISB	008D 	Init_AS5047D, InitializeIO, InitializeBLIO
TXByte	0034 	TX_TheByte, ML_Ser_Out
TXCKSEL	0000 	InitializeIO, InitializeBLIO
TXIF	0004 	No_NewDataAN0, SendChar
TXREG	019A 	TX_TheByte, SendChar
TXSTA	019E 	InitializeIO, InitializeBLIO
TXSTA_Value	0024 	InitializeIO, InitializeBLIO
TX_ACK ^	0A04 	Cmd_SetMode, Cmd_SetCmdPos, Cmd_SetMaxI, Cmd_SetFFwd, Cmd_SetFRev
		Cmd_SetMin_uS, Cmd_SetMax_uS, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_SetStopCenter
		Cmd_SetSpeed, Cmd_SetUseIdleCenter, Cmd_SetDeadBand, Cmd_SetUseFastPWM, Cmd_SetGripI
		Cmd_SetAuxConfig, Cmd_SetAuxNValue, Cmd_SetAuxNDigOut, Cmd_SetEncoderOffset, Cmd_SaveParams
		Cmd_RestoreParams
TX_Data	00AE 	RS232_ClearTXData, RS232_Send, HandleRXData_1
TX_TheByte ^	0156 	No_NewDataAN0
TestErased ^	1F1F 	BLP_WriteBuffer
SerialServo.asm   X-Ref Table                                            Page: 65
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

TestErased_L1 ^	1F21 	TestErased_L1
Timer1Hi	002D 	DecTimer1, DecTimer
Timer1Lo	002C 	DecTimer, RS232_Parse, RS232_Parse_Byte
Timer2Hi	002F 	DecTimer2, DecTimer
Timer2Lo	002E 	DecTimer
Timer3Hi	0031 	DecTimer3, DecTimer
Timer3Lo	0030 	DecTimer
Timer4Hi	0033 	DecTimer4, DecTimer
Timer4Lo	0032 	DecTimer, HandleButtons, HdlBtn_DB, InitializeIO
UseAltSerialPort	0001 	InitializeBLIO
UseEEParams	0001 	ClearRam, CopyToRam
UsePID	0000 	InitializeBLIO, ClampInt_tooHigh, RS232_Send_S0, Dispatcher_2, Dispatcher_3
		Cmd_GetI
UseRS232Chksum	0001 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_Send_L1
UseRS232SendSyncBytes	0000 	RS232_Parse, RS232_Send
UseRS232SyncBytes	0001 	RS232_Parse, RS232_Parse_Byte
W	0000 	SystemBlink_Std, SystemBlink_end, LED1_Blinking, LED1_Start, LED1_Blink_end
		Aux0DigOut_end, LED2_Blinking, LED2_Start, LED2_Blink_end, IRQ_Servo1_OH, IRQ_Servo1_CalcDwell
		IRQ_Servo1_Dwell, CopyToRam_L1, SaveParams_L1, DecTimer, EERead, EEWrite, TX_TheByte
		RX_TheByte, RX_TheByte_Err, StoreSerIn, GetSerIn, GetSerInBytes, StoreSerOut, GetSerOut
		RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End
		RS232_Parse_Data_end, RS232_Send, RS232_Send_L1, ML_1, No_NewDataAN0, ML_Ser_End
		DoModeZero, DoModeOne, DM1_FF, DM1_FR, CheckCurrent, CheckGripCurrent, DM2_NotOverCurrent
		DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus, DoModeTwo_NoSpeed, DoModeTwo_Go
		DM3_ServoHere, DM3_NotOverCurrent, DM3_ServoThere, DM3_CalcCurPos, DM3_GoRev, DM3_SetServoPWM
		DM3_ErrIsPos, DM3_NoDB, DM3_PosLimit, DM3_CalcSCmd, DM3_CalcSCmd_2s, DM3_CalcSCmd_1
		DM3_IdleServo, DM4_NotOverCurrent, DoMode4_Minus, DoMode4_MovPlus, DoMode4_Plus
		DoMode4_Go, ReadAN, ReadAN_TryAN2, ReadAN_TryAN0, ReadAN_AN0_1, ReadAN_AN0_2, ReadAN_1
		Copy7CToSig, Copy7CToSig_1, ClampInt_E2, ClampInt_1, HandleRXData_1, Dispatcher_1
		Dispatcher_2, Dispatcher_3, Dispatcher_4, Dispatcher_5, Cmd_SetMode, Cmd_GetMode
		Cmd_GetCmdPos, Cmd_GetMaxI, Cmd_GetFFwd, Cmd_GetFRev, Cmd_GetMin_uS, Cmd_GetMax_uS
		Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_GetStopCenter, Cmd_GetSpeed, Cmd_SetUseIdleCenter
		Cmd_GetDeadBand, Cmd_SetUseFastPWM, Cmd_GetGripI, Cmd_SetAuxConfig, Cmd_GetAuxConfig
		Cmd_SetAuxNValue, Cmd_SetAuxNDigOut, Cmd_GetAuxNValue, Cmd_GetAuxNValue_Ana, Cmd_GetAuxNValue_Dig
		Cmd_GetAuxNValue_Btn, Cmd_GetEncoderOffset, Cmd_GetI, Cmd_GetEnc, Cmd_GetEncAbs
		Cmd_GetBattVolts, Cmd_GetStatus, Cmd_SendIDString_L1, ReadEncoder, ReadEncoder_1
		ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3, SaveHomePos, HA_SetIt
		Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L1, SPI_SendRecWord_L2, CalcParity_L1
		CheckParity_L1, InitializeIO, BLP_L2, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2
		BLP_IHS_Length, BLP_SaveIH_Length, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType
		BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate, BufferIHData, BIHD_PutInBuff, BIHD_PutInBuff_E2
		BIHD_PutInBuff_L1, GetChar, GetChar_Err, ReadEEData, CompareBlock_L1, CB_NotBlank
		ReadProgBlock_L1, LoadProgAddr, WriteProgBlock_L1
WDTCON	0097 	InitializeIO, InitializeBLIO
WPUA	020C 	InitializeIO, InitializeBLIO
WPUA5	0005 	InitializeIO, InitializeBLIO
WR	0001 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
WREG	0009 	ReadAN_1, ReadAN0_ColdStart, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2
		Home_Absolute_3, CheckParity_L1, BLP_WriteBuffer
WREN	0002 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock
		WriteProgBlock_Wr
WriteEEData ^	1F0D 	BootLoaderStart
WriteEEData_L1 ^	1F1A 	WriteEEData_L1
WriteProgBlock ^	1F7A 	BLP_WriteBuffer
WriteProgBlock_L1 ^	1F81 	WriteProgBlock_L1
WriteProgBlock_Wr ^	1F93 	WriteProgBlock_L1
Z	0002 	ProgStartVector, SystemBlink_end, LED1_Blinking, LED1_Blink_end, Aux0DigOut_end
		LED2_Blinking, LED2_Blink_end, CopyToRam_L1, SaveParams_L1, DecTimer, RX_TheByte
		GetSerIn, StoreSerOut, GetSerOut, RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
		MainLoop, DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_CPV_End, DM3_CalcCurPos, DM3_SetServoPWM
		DM3_ErrIsPos, DM3_NoDB, DM3_PosLimit, DM3_CalcSCmd, DM4_NotOverCurrent, DoMode4_MovPlus
		HandleButtons, ReadAN, ReadAN_TryAN2, ReadAN_TryAN0, ReadAN_AN0_1, ReadAN_AN0_2
		Copy7CToSig, HandleRXData_1, Dispatcher_1, Dispatcher_2, Dispatcher_3, Dispatcher_4
		Dispatcher_5, Cmd_SetRevDir, Cmd_SetEnaOvrCur, Cmd_SetUseIdleCenter, Cmd_SetUseFastPWM
		Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1
		Cmd_SendIDString_L1, ReadEncoder, ReadEncoder_1, ReadEncoder_2, BootLoaderStart
		BLP_L2, BLP_TestNum, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum, BLP_Validate
		BufferIHData, BIHD_PutInBuff_L1, GetChar, TestErased_L1, CompareBlock_L1, CB_NotBlank
		WriteProgBlock_L1
_C	STATUS,C	DM2_NotOverCurrent, DM4_NotOverCurrent
_Z	STATUS,Z	WriteProgBlock_L1
kAuxIOAnalogIn	0004 	ReadAN, ReadAN_TryAN2, ReadAN_AN0_1, ReadAN_AN0_2
kAuxIODigitalOut	0003 	LED1_Blink_end, LED2_Blink_end
kAuxIOLEDBtn	0001 	SystemBlink_end, Aux0DigOut_end
kDeadBand	0064 	InitializeBLIO
kGripI	0028 	InitializeBLIO
kGripperHC	0004 	CheckGripCurrent
kMaxMode	0004 	Cmd_SetMode
kMaxPulseWidth	3F98 	InitializeBLIO
kMaxT	076C 	ReadEncoder_2, Home_Absolute_2, Home_Absolute_3
kMidPulseWidth	0BB8 	SetMiddlePosition
kMinPulseWidth	0064 	InitializeBLIO
kRS232SyncByteValue	00DD 	RS232_Parse_Byte, RS232_Parse_Sync2
kRS232_MasterAddr	0001 	InitializeBLIO
kRS232_SlaveAddr	0002 	InitializeBLIO
kServoCenterStop	0B81 	InitializeBLIO
kServoDwellTime	9C40 	IRQ_Servo1_20mS, IRQ_Servo1_Idle, StartServo, SetMiddlePosition
kServoFastDwellTime	4E20 	IRQ_Servo1_OH
kServoFastForward	0BE5 	InitializeBLIO
kServoFastReverse	0B1D 	InitializeBLIO
kServoSpeed	000A 	InitializeBLIO
kStandAlone	0000 	Init_AS5047D
kSysFlags	0000 	InitializeBLIO
kSysMode	0003 	InitializeBLIO
kUpper4Bits	003C 	ReadEncoder, ReadEncoder_1, ReadEncoder_2
kssFlags	0019 	InitializeBLIO
kssMaxI	0032 	InitializeBLIO
SerialServo.asm   X-Ref Table                                            Page: 66
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

nvDeadBand	0015 	InitializeBLIO
nvEncoderFlags	0000 	InitializeBLIO, CopyToRam, SaveParams
nvEncoderHome	0001 	InitializeBLIO
nvEncoderOffset	0003 	InitializeBLIO
nvFirstParamByte	nvEncoderFlags	InitializeBLIO, CopyToRam, SaveParams
nvLastParamByte	nvSysFlags	InitializeBLIO
nvRS232_MasterAddr	0011 	InitializeBLIO
nvRS232_SlaveAddr	0012 	InitializeBLIO
nvServoFastForward	0007 	InitializeBLIO
nvServoFastReverse	0005 	InitializeBLIO
nvServoMax_uS	000D 	InitializeBLIO
nvServoMin_uS	000B 	InitializeBLIO
nvServoSpeed	000F 	InitializeBLIO
nvServoStopCenter	0009 	InitializeBLIO
nvSysFlags	001A 	InitializeBLIO
nvSysMode	0010 	InitializeBLIO
nvssAux0Config	0017 	InitializeBLIO
nvssAux1Config	0018 	InitializeBLIO
nvssAux2Config	0019 	InitializeBLIO
nvssFlags	0013 	InitializeBLIO
nvssGripI	0016 	InitializeBLIO
nvssMaxI	0014 	InitializeBLIO
oldCode	0000 	DecTimer
ssAux0Config	005C 	SystemBlink_end, LED1_Blink_end, ReadAN, ReadAN_AN0_1, Cmd_SetAuxConfig
		Cmd_GetAuxConfig, Cmd_SetAuxNValue, Cmd_GetAuxNValue
ssAux1Config	005D 	Aux0DigOut_end, LED2_Blink_end, ReadAN_TryAN2, ReadAN_AN0_2
ssCmdPos	0037 	DoModeTwo, DM2_NotOverCurrent, DoModeTwo_NoSpeed, DoModeThree, DM3_NotOverCurrent
		DM3_ServoThere, DM3_CalcCurPos, DM3_GoRev, DoMode4, DM4_NotOverCurrent, Cmd_SetCmdPos
		Cmd_GetCmdPos, InitializeIO
ssCmdPosVerified	ssStatus+1,2	DM3_NotOverCurrent, Cmd_GetCmdPos
ssCurPos	0039 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_Plus, DoModeTwo_NoSpeed
		DoModeTwo_Go, DM3_ServoHere, DM3_ServoThere, DM3_CalcCurPos, DM3_GoRev, DM3_SetServoPWM
		DM4_NotOverCurrent, DoMode4_Minus_1, DoMode4_Plus_1, DoMode4_Go
ssEnableFastPWM	ssFlags,4	IRQ_Servo1_OH, Cmd_SetUseFastPWM, Cmd_GetUseFastPWM
ssEnableOverCur	ssFlags,0	CheckCurrent, Cmd_SetEnaOvrCur, Cmd_GetEnaOvrCur
ssEncCmdError	ssStatus+1,1	ReadEncoder
ssEncParityError	ssStatus+1,0	ReadEncoder
ssFlags	0058 	IRQ_Servo1_OH, CheckCurrent, DM3_CalcSCmd, DM3_IdleServo, Cmd_SetRevDir
		Cmd_GetRevDir, Cmd_SetEnaOvrCur, Cmd_GetEnaOvrCur, Cmd_SetUseIdleCenter, Cmd_GetUseIdleCenter
		Cmd_SetUseFastPWM, Cmd_GetUseFastPWM
ssGripI	005B 	CheckGripCurrent, Cmd_SetGripI, Cmd_GetGripI
ssGripMCur	ssStatus,5	CheckGripCurrent, Cmd_GetStatus
ssGripOCur	ssStatus,4	CheckGripCurrent, Cmd_GetStatus
ssMaxI	0059 	CheckCurrent, Cmd_SetMaxI, Cmd_GetMaxI
ssMode3IdleCenter	ssFlags,3	DM3_IdleServo, Cmd_SetUseIdleCenter, Cmd_GetUseIdleCenter
ssRX_Timeout	ssStatus,3	RS232_Parse, Cmd_GetStatus
ssReverseDir	ssFlags,1	DM3_CalcSCmd, Cmd_SetRevDir, Cmd_GetRevDir
ssStatus	003C 	RS232_Parse, ML_1, CheckGripCurrent, DoModeTwo, DM2_NotOverCurrent
		DoModeThree, DM3_NotOverCurrent, DM3_CalcCurPos, DM3_GoRev, DM3_IdleServo, DM3_IdleInactive
		DoMode4, DM4_NotOverCurrent, Cmd_GetCmdPos, Cmd_GetStatus, ReadEncoder
ssTempFlags	003B 	Aux1DigOut_end, IRQ_Servo1_1, DoModeOne, CheckCurrent, CheckGripCurrent
		DoModeTwo, DM2_NotOverCurrent, DoModeTwo_1, DoModeThree, DM3_CalcCurPos, DM3_IdleServo
		DM3_IdleInactive, DoMode4, DM4_NotOverCurrent, DoMode4_Hold, DoMode4_MovPlus, DoMode4_Go
		DoMode4_1, Copy7CToSig_Done, StartServo, SetMiddlePosition, InitializeIO
ssio_OverCurSD	ssStatus,2	ML_1, DoModeTwo, DM2_NotOverCurrent, DoModeThree, DM3_NotOverCurrent
		DoMode4, DM4_NotOverCurrent
start ^	0258 	ProgStartVector
useRS232	0001 	InitializeIO
 

X-Ref Table (The UnCalled)
AS5047_ReadANGLEUNCReg !	0AFB 	
AS5047_ReadDIAAGCReg !	0B00 	
AS5047_ReadErrorReg !	0B19 	
AS5047_ReadStgs1Reg !	0B0F 	
AS5047_ReadStgs2Reg !	0B14 	
AS5047_ReadZPOSLReg !	0B0A 	
AS5047_ReadZPOSMReg !	0B05 	
AS5047_Write !	0ACB 	
Bank0_Rtn !	04BB 	
BootLoader !	1E00 	
Cmd_GetCalPot !	09BE 	
Cmd_GetCmdPos_end !	08AA 	
Delay100uS !	012A 	
Delay10uS !	0128 	
Delay40uS !	012C 	
EEReadW !	0133 	
EraseBlock !	1F48 	
GetSerOutBytes !	0199 	
HA_SetItPos !	0AA8 	
Home_Absolute !	0A4E 	
IRQ_Ser !	00C6 	
IRQ_Servo1 !	0088 	
POP_SerOut !	01AB 	
RS232_Parse_DALo !	01F8 	
RS232_Parse_Data !	0206 	
ReadAN_3 !	04BA 	
ReadAN_AN3 !	04A2 	
StopServo !	04ED 	
SystemBlink_DoIt !	0019 	
TestT1_Zero !	0124 	
TestT2_Zero !	0120 	
TestT3_Zero !	011C 	
TestT4_Zero !	0118 	
WriteProgBlock_end !	1F9C 	
 

Memory Usage Map ('X' = Used, '-' = Unused)
 
SerialServo.asm   Memory Usage Map                                       Page: 67
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

0000  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500  : XXXXXXXXXXXXXXXX XXXXXXXXXXX----- ---------------- ----------------
0800  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0AC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0BC0  : X--------------- ---------------- ---------------- ----------------
1E00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1EC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1FC0  : XXXXXXXXXXXX---- ---------------- ---------------- ----------------
 
Program Memory Words Used:2728
Program Memory Words Free:5464
 
UserID
8000  :XXXX
 
Config
8007  :XX
 
EEPROM
F000  : XXXXXXXXXXXXXXXX XXXXXXXXXXX----- ---------------- ----------------
F0C0  : ---------------- ---------------- ---------------- ---------------X
 
Data EEPROM Bytes Used:28
Data EEPROM Bytes Free:228
