SerialServo.asm                                                       Page: 1
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

***** #202 Duplicate Label BF *****
***** #202 Duplicate Label UA *****
***** #202 Duplicate Label R_NOT_W *****
***** #202 Duplicate Label S *****
***** #202 Duplicate Label P *****
***** #202 Duplicate Label D_NOT_A *****
***** #202 Duplicate Label CKE *****
***** #202 Duplicate Label SMP *****
***** #202 Duplicate Label SSPM0 *****
***** #202 Duplicate Label SSPM1 *****
***** #202 Duplicate Label SSPM2 *****
***** #202 Duplicate Label SSPM3 *****
***** #202 Duplicate Label CKP *****
***** #202 Duplicate Label SSPEN *****
***** #202 Duplicate Label SSPOV *****
***** #202 Duplicate Label WCOL *****
***** #202 Duplicate Label SSPM0 *****
***** #202 Duplicate Label SSPM1 *****
***** #202 Duplicate Label SSPM2 *****
***** #202 Duplicate Label SSPM3 *****
***** #202 Duplicate Label CKP *****
***** #202 Duplicate Label SSPEN *****
***** #202 Duplicate Label SSPOV *****
***** #202 Duplicate Label WCOL *****
***** #202 Duplicate Label SEN *****
***** #202 Duplicate Label RSEN *****
***** #202 Duplicate Label PEN *****
***** #202 Duplicate Label RCEN *****
***** #202 Duplicate Label ACKEN *****
***** #202 Duplicate Label ACKDT *****
***** #202 Duplicate Label ACKSTAT *****
***** #202 Duplicate Label GCEN *****
***** #202 Duplicate Label DHEN *****
***** #202 Duplicate Label AHEN *****
***** #202 Duplicate Label SBCDE *****
***** #202 Duplicate Label SDAHT *****
***** #202 Duplicate Label BOEN *****
***** #202 Duplicate Label SCIE *****
***** #202 Duplicate Label PCIE *****
***** #202 Duplicate Label ACKTIM *****
***** #202 Duplicate Label BF *****
***** #202 Duplicate Label UA *****
***** #202 Duplicate Label R_NOT_W *****
***** #202 Duplicate Label S *****
***** #202 Duplicate Label P *****
***** #202 Duplicate Label D_NOT_A *****
***** #202 Duplicate Label CKE *****
***** #202 Duplicate Label SMP *****
***** #202 Duplicate Label SSPM0 *****
***** #202 Duplicate Label SSPM1 *****
***** #202 Duplicate Label SSPM2 *****
***** #202 Duplicate Label SSPM3 *****
***** #202 Duplicate Label CKP *****
***** #202 Duplicate Label SSPEN *****
***** #202 Duplicate Label SSPOV *****
***** #202 Duplicate Label WCOL *****
***** #202 Duplicate Label SEN *****
***** #202 Duplicate Label RSEN *****
***** #202 Duplicate Label PEN *****
***** #202 Duplicate Label RCEN *****
***** #202 Duplicate Label ACKEN *****
***** #202 Duplicate Label ACKDT *****
***** #202 Duplicate Label ACKSTAT *****
***** #202 Duplicate Label GCEN *****
***** #202 Duplicate Label DHEN *****
***** #202 Duplicate Label AHEN *****
***** #202 Duplicate Label SBCDE *****
***** #202 Duplicate Label SDAHT *****
***** #202 Duplicate Label BOEN *****
***** #202 Duplicate Label SCIE *****
***** #202 Duplicate Label PCIE *****
***** #202 Duplicate Label ACKTIM *****
***** #202 Duplicate Label PSS1BD0 *****
***** #202 Duplicate Label PSS1BD1 *****
***** #202 Duplicate Label PSS1AC0 *****
***** #202 Duplicate Label PSS1AC1 *****
***** #202 Duplicate Label CCP1AS0 *****
***** #202 Duplicate Label CCP1AS1 *****
***** #202 Duplicate Label CCP1AS2 *****
***** #202 Duplicate Label CCP1ASE *****
***** #202 Duplicate Label PSS2BD0 *****
***** #202 Duplicate Label PSS2BD1 *****
***** #202 Duplicate Label PSS2AC0 *****
***** #202 Duplicate Label PSS2AC1 *****
***** #202 Duplicate Label CCP2AS0 *****
***** #202 Duplicate Label CCP2AS1 *****
***** #202 Duplicate Label CCP2AS2 *****
***** #202 Duplicate Label CCP2ASE *****
***** #202 Duplicate Label C1TSEL0 *****
***** #202 Duplicate Label C1TSEL1 *****
***** #202 Duplicate Label C2TSEL0 *****
***** #202 Duplicate Label C2TSEL1 *****
***** #202 Duplicate Label C3TSEL0 *****
***** #202 Duplicate Label C3TSEL1 *****
***** #202 Duplicate Label C4TSEL0 *****
***** #202 Duplicate Label C4TSEL1 *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
SerialServo.asm                                                       Page: 2
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
SerialServo.asm                                                       Page: 3
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPNZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
***** #106 Unprocessed Opcode SKPZ *****
00001 0000 	;====================================================================================================
00002 0000 	;
00003 0000 	;    Filename:      SerialServo.asm
00004 0000 	;    Date:          8/11/2019
00005 0000 	;    File Version:  1.1b2
00006 0000 	;
00007 0000 	;    Author:        David M. Flynn
00008 0000 	;    Company:       Oxford V.U.E., Inc.
00009 0000 	;    E-Mail:        dflynn@oxfordvue.com
00010 0000 	;    Web Site:      http://www.oxfordvue.com/
00011 0000 	;
00012 0000 	;====================================================================================================
00013 0000 	;    SerialServo is sample code.
00014 0000 	;    Controls a single robot arm joint using an R/C servo (SG90) modified
00015 0000 	;    for continuous rotation.  Features and configurations will be added as needed.
00016 0000 	;
00017 0000 	;    Features: 	TTL Packet Serial
00018 0000 	;	R/C Servo PWM output
00019 0000 	;	Current sensing.
00020 0000 	;	3 Buttons/LEDs for config
00021 0000 	;	Absolute magnetic encoder
00022 0000 	;
00023 0000 	;Mode 0: (LED 1 = off) servo test mode, copy AN4 Pot value x 2 + 1976 to servo PWM.
00024 0000 	;Mode 1: (LED 1 = 1 flash) servo and encoder test mode, AN4 Pot value + 950 - EncoderVal to servo dir.
00025 0000 	;Mode 2: Basic Serial Servo, output servo pulse of ssCmdPos x 0.5uS.
00026 0000 	;Mode 3: Absolute encoder position control. ssCmdPos = 0..4095
00027 0000 	;Mode 4: Gripper force control.
00028 0000 	;
00029 0000 	;    History:
00030 0000 	; 1.1b2   8/11/2019	Continue fixes for 14bit encoder. New defaults Mode 3 (2950 ±100, fast, Idle center)
00031 0000 	; 1.1b1   3/21/2019	Port for Rev C PCB
00032 0000 	; 1.0b7   10/3/2018	Mode 3 is working for 4-wheel rover corner pivot motors.
00033 0000 	; 1.0b6   8/18/2018	Moved analog variables to bank 1. Fast blink on error. EncoderOffset for mode3
00034 0000 	; 1.0b5   7/23/2018	Aux IO
00035 0000 	; 1.0b4   7/14/2018	Better defaults. Gripper mode (4).
00036 0000 	; 1.0b3   6/19/2018	Added ssEnableFastPWM
00037 0000 	; 1.0b2   6/3/2018	Servo current is averaged, DD DD Sync bytes and checksum.
00038 0000 	; 1.0b1   6/1/2018	Modes 2 and 3 are working. No current limit yet.
00039 0000 	; 1.0a3   5/31/2018    Added Speed, StopCenter.
00040 0000 	; 1.0a2   5/25/2018	Added some more commands.
00041 0000 	; 1.0a1   5/24/2018	It begins to work.
00042 0000 	; 1.0d1   4/26/2018	First code.
00043 0000 	;
00044 0000 	;====================================================================================================
00045 0000 	; ToDo:
00046 0000 	;
00047 0000 	; Mode 3:
00048 0000 	; 1) On power on reset set command position to current position including offset.
00049 0000 	; 2) Speed is used as acceleration, add speed (counts/second).
00050 0000 	;
00051 0000 	;====================================================================================================
00052 0000 	;====================================================================================================
00053 0000 	; What happens next:
00054 0000 	;   At power up the system LED will blink.
00055 0000 	;   Mode 0: (LED 1 = off) servo test mode, copy AN4 Pot value to servo.
00056 0000 	;   Mode 1: (LED 1 = 1 flash) servo  and encoder test mode, AN4 Pot value - EncoderVal to servo dir.
00057 0000 	;   Mode 2: Basic Serial Servo, output servo pulse of CmdPos * 0.5uS.
00058 0000 	;   Mode 3: Absolute encoder position control.
00059 0000 	;   Mode 4: Gripper force control.
00060 0000 	;====================================================================================================
00061 0000 	;
SerialServo.asm                                                       Page: 4
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00062 0000 	;   Pin 1 (RA2/AN2) SW1/LED1 (Active Low Input/Output)
00063 0000 	;   Pin 2 (RA3/AN3) SW2/LED2 (Active Low Input/Output)
00064 0000 	;   Pin 3 (RA4/AN4) n/c
00065 0000 	;   Pin 4 (RA5/MCLR*) VPP/MCLR*
00066 0000 	;   Pin 5 (GND) Ground
00067 0000 	;   Pin 6 (RB0) MagEnc_CSBit (Active Low Output)
00068 0000 	;   Pin 7 (RB1/AN11/SDA1) MISO MagEnc_DataBit (Digital Input)
00069 0000 	;   Pin 8 (RB2/AN10/TX) TTL Serial RX
00070 0000 	;   Pin 9 (RB3/CCP1) Pulse output for Servo
00071 0000 	;
00072 0000 	;   Pin 10 (RB4/AN8/SLC1) SCL1 MagEnc_CLKBit
00073 0000 	;   Pin 11 (RB5/AN7) TTL Serial TX
00074 0000 	;   Pin 12 (RB6/AN5/CCP2) ICSPCLK
00075 0000 	;   Pin 13 (RB7/AN6) ICSPDAT
00076 0000 	;   Pin 14 (Vcc) +5 volts
00077 0000 	;   Pin 15 (RA6) MOSI MagEnc_DataBit (Digital Output)
00078 0000 	;   Pin 16 (RA7/CCP2) LED3 (Active Low Output)(System LED)
00079 0000 	;   Pin 17 (RA0/AN0) Current sensing analog input
00080 0000 	;   Pin 18 (RA1/AN1) Battery voltage sensing analog input
00081 0000 	;
00082 0000 	;====================================================================================================
00083 0000 	;
00084 0000 	;
00085 0000 		list	p=16f1847,r=hex,W=1	; list directive to define processor
00001 0000 		nolist
00002 0000 	;
00003 0000 	;==========================================================================
00004 0000 	;  MPASM PIC16F1847 processor include
00005 0000 	; 
00006 0000 	;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
00007 0000 	;  Modified by DMF 11/16/2013
00008 0000 	;==========================================================================
00009 0000 	;
01163 0000 		NOLIST
01164 0000 	;
00088 0000 		list
00089 0000 	;
00090 8007 EFA4 		__CONFIG _CONFIG1,_FOSC_INTOSC & _WDTE_OFF & _MCLRE_OFF & _IESO_OFF
00091 0000 	;
00092 0000 	;
00093 0000 	; INTOSC oscillator: I/O function on CLKIN pin
00094 0000 	; WDT disabled
00095 0000 	; PWRT disabled
00096 0000 	; MCLR/VPP pin function is digital input
00097 0000 	; Program memory code protection is disabled
00098 0000 	; Data memory code protection is disabled
00099 0000 	; Brown-out Reset enabled
00100 0000 	; CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin
00101 0000 	; Internal/External Switchover mode is disabled
00102 0000 	; Fail-Safe Clock Monitor is enabled
00103 0000 	;
00104 8008 DFFF 		__CONFIG _CONFIG2,_WRT_OFF & _PLLEN_ON & _LVP_OFF
00105 0000 	;
00106 0000 	; Write protection off
00107 0000 	; 4x PLL Enabled
00108 0000 	; Stack Overflow or Underflow will cause a Reset
00109 0000 	; Brown-out Reset Voltage (Vbor), low trip point selected.
00110 0000 	; Low-voltage programming enabled
00111 0000 	;
00112 0000 	; '__CONFIG' directive is used to embed configuration data within .asm file.
00113 0000 	; The lables following the directive are located in the respective .inc file.
00114 0000 	; See respective data sheet for additional information on configuration word.
00115 0000 	;
00116 0000 		constant	oldCode=0
00117 0000 		constant	useRS232=1
00118 0000 		constant	UseEEParams=1
00119 0000 	;
00120 0000 		constant	UseAltSerialPort=1
00121 0000 		constant	RP_LongAddr=0
00122 0000 		constant	RP_AddressBytes=1
00123 0000 		constant	RP_DataBytes=4
00124 0000 		constant	UseRS232SyncBytes=1
00125 0000 00DD 	kRS232SyncByteValue	EQU	0xDD
00126 0000 		constant	UseRS232Chksum=1
00127 0000 	;
00128 0000 0001 	kRS232_MasterAddr	EQU	0x01	;Master's Address
00129 0000 0002 	kRS232_SlaveAddr	EQU	0x02	;This Slave's Address
00130 0000 0004 	kGripperHC	EQU	0x04	;Gripper hysteresis
00131 0000 	;
00132 0000 0003 	#Define	_C	STATUS,C
00133 0000 0003 	#Define	_Z	STATUS,Z
00134 0000 	;
00135 0000 	;====================================================================================================
00138 0000 		nolist
00139 0000 	;
00140 0000 	;    Port A bits
00141 0000 00BF 	PortADDRBits	EQU	b'10111111'
00142 0000 0000 	PortAValue	EQU	b'00000000'
00143 0000 0003 	ANSELA_Val	EQU	b'00000011'	;RA0/AN0, RA4/AN4
00144 0000 	;
00145 0000 000C 	#Define	RA0_In	PORTA,0	;Current, Analog Input
00146 0000 000C 	#Define	RA1_In	PORTA,1	;Battery Volts, Analog Input
00147 0000 000C 	#Define	SW1_In	PORTA,2	;SW1/LED1
00148 0000 000C 	#Define	SW2_In	PORTA,3	;SW2/LED2
00149 0000 000C 	#Define	RA4_In	PORTA,4	;n/c
00150 0000 000C 	#Define	RA5_In	PORTA,5	;VPP/MCLR*
00151 0000 000C 	#Define	RA6_Out	PORTA,6	;MagEnc_DataBit Encoder MOSI (SPI, Digital Output)
00152 0000 000C 	#Define	RA7_In	PORTA,7	;LED3 (Active Low Output)(System LED)
00153 0000 0002 	LED1_Bit	EQU	2	;LED1 (Active Low Output)
SerialServo.asm                                                       Page: 5
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00154 0000 0003 	LED2_Bit	EQU	3	;LED2 (Active Low Output)
00155 0000 0007 	SysLED_Bit	EQU	7	;LED3 (Active Low Output)
00156 0000 008C 	#Define	LED1_Tris	TRISA,LED1_Bit	;LED1 (Active Low Output)
00157 0000 010C 	#Define	LED1_Lat	LATA,LED1_Bit	;LED1 (Active Low Output)
00158 0000 008C 	#Define	LED2_Tris	TRISA,LED2_Bit	;LED2 (Active Low Output)
00159 0000 010C 	#Define	LED2_Lat	LATA,LED2_Bit	;LED2 (Active Low Output)
00160 0000 008C 	#Define	SysLED_Tris	TRISA,SysLED_Bit	;LED3 (Active Low Output)
00161 0000 	;
00162 0000 00F8 	Servo_AddrDataMask	EQU	0xF8
00163 0000 	;
00164 0000 	;
00165 0000 	;    Port B bits
00166 0000 00C6 	PortBDDRBits	EQU	b'11000110'	;MagEnc_CSBit, CCP1, MagEnc_CLKBit
00167 0000 0011 	PortBValue	EQU	b'00010001'
00168 0000 0000 	ANSELB_Val	EQU	b'00000000'	;RB5/AN7
00169 0000 	;
00170 0000 010D 	#Define	RB0_Out	LATB,0	;MagEnc_CSBit (Active Low Output)
00171 0000 000D 	#Define	RB1_In	PORTB,1	;MISO MagEnc_DataBit (Digital Input)
00172 0000 000D 	#Define	RB2_In	PORTB,2	;RX Serial Data
00173 0000 000D 	#Define	RB3_Out	PORTB,3	;CCP1 Output
00174 0000 000D 	#Define	RB4_In	PORTB,4	;SCL1 MagEnc_CLKBit
00175 0000 000D 	#Define	RB5_In	PORTB,5	;TX Serial Data
00176 0000 000D 	#Define	RB6_In	PORTB,6	;ICSPCLK
00177 0000 000D 	#Define	RB7_In	PORTB,7	;ICSPDAT
00178 0000 	;
00179 0000 	;
00180 0000 	;========================================================================================
00181 0000 	;========================================================================================
00182 0000 	;
00183 0000 	;Constants
00184 0000 00FF 	All_In	EQU	0xFF
00185 0000 0000 	All_Out	EQU	0x00
00186 0000 	;
00187 0000 0009 	CCP1CON_Clr	EQU	b'00001001'
00188 0000 0008 	CCP1CON_Set	EQU	b'00001000'
00189 0000 000A 	CCP1CON_Idle	EQU	b'00001010'
00190 0000 	;
00191 0000 	;OSCCON_Value	EQU	b'01110010'	; 8 MHz
00192 0000 00F0 	OSCCON_Value	EQU	b'11110000'	;32MHz
00193 0000 	;
00194 0000 	;T2CON_Value	EQU	b'01001110'	;T2 On, /16 pre, /10 post
00195 0000 004F 	T2CON_Value	EQU	b'01001111'	;T2 On, /64 pre, /10 post
00196 0000 007D 	PR2_Value	EQU	.125
00197 0000 	;
00198 0000 0064 	LEDTIME	EQU	d'100'	;1.00 seconds
00199 0000 000A 	LEDErrorTime	EQU	d'10'
00200 0000 0014 	LEDFastTime	EQU	d'20'
00201 0000 	;
00202 0000 	;T1CON_Val	EQU	b'00000001'	;Fosc=8MHz, PreScale=1,Fosc/4,Timer ON
00203 0000 0021 	T1CON_Val	EQU	b'00100001'	;Fosc=32MHz, PreScale=4,Fosc/4,Timer ON
00204 0000 	;
00205 0000 	;TXSTA_Value	EQU	b'00100000'	;8 bit, TX enabled, Async, low speed
00206 0000 0024 	TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, high speed
00207 0000 0090 	RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00208 0000 0008 	BAUDCON_Value	EQU	b'00001000'	;BRG16=1
00209 0000 	; 8MHz clock low speed (BRGH=0,BRG16=1)
00210 0000 	;Baud_300	EQU	d'1666'	;0.299, -0.02%
00211 0000 	;Baud_1200	EQU	d'416'	;1.199, -0.08%
00212 0000 	;Baud_2400	EQU	d'207'	;2.404, +0.16%
00213 0000 	;Baud_9600	EQU	d'51'	;9.615, +0.16%
00214 0000 	; 32MHz clock low speed (BRGH=1,BRG16=1)
00215 0000 682A 	Baud_300	EQU	.26666	;300, 0.00%
00216 0000 1A0A 	Baud_1200	EQU	.6666	;1200, 0.00%
00217 0000 0D04 	Baud_2400	EQU	.3332	;2400, +0.01%
00218 0000 0340 	Baud_9600	EQU	.832	;9604, +0.04%
00219 0000 01A0 	Baud_19200	EQU	.416	;19.18k, -0.08%
00220 0000 00CF 	Baud_38400	EQU	.207	;38.46k, +0.16%
00221 0000 008A 	Baud_57600	EQU	.138	;57.55k, -0.08%
00222 0000 00CF 	BaudRate	EQU	Baud_38400
00223 0000 	;
00224 0000 9C40 	kServoDwellTime	EQU	.40000	;20mS
00225 0000 4E20 	kServoFastDwellTime	EQU	.20000	;10mS
00226 0000 0003 	kSysMode	EQU	.3	;Default Mode Basic Servo
00227 0000 000A 	kServoSpeed	EQU	.10	;Slow 5uS/Update
00228 0000 0019 	kssFlags	EQU	b'00011001'	;ssEnableFastPWM,ssMode3IdleCenter,ssEnableOverCur=true
00229 0000 0032 	kssMaxI	EQU	.50	;Low
00230 0000 0708 	kMinPulseWidth	EQU	.1800	;900uS
00231 0000 0BB8 	kMidPulseWidth	EQU	.3000	;1500uS
00232 0000 1068 	kMaxPulseWidth	EQU	.4200	;2100uS
00233 0000 0B86 	kServoCenterStop	EQU	.2950
00234 0000 0BEA 	kServoFastForward	EQU	kServoCenterStop+.100
00235 0000 0B22 	kServoFastReverse	EQU	kServoCenterStop-.100
00236 0000 0064 	kDeadBand	EQU	.100	;100 encoder counts
00237 0000 0000 	kSysFlags	EQU	.0
00238 0000 0028 	kGripI	EQU	.40
00239 0000 	;
00240 0000 000A 	DebounceTime	EQU	.10
00241 0000 0004 	kMaxMode	EQU	.4
00242 0000 	;
00243 0000 	; AuxIO modes
00244 0000 0000 	kAuxIOnone	EQU	0x00
00245 0000 0001 	kAuxIOLEDBtn	EQU	0x01
00246 0000 0002 	kAuxIODigitalIn	EQU	0x02
00247 0000 0003 	kAuxIODigitalOut	EQU	0x03
00248 0000 0004 	kAuxIOAnalogIn	EQU	0x04
00249 0000 0005 	kAuxIOHomeSw	EQU	0x05
00250 0000 0006 	kAuxIOFwdLimit	EQU	0x06
00251 0000 0007 	kAuxIORevLimit	EQU	0x07
00252 0000 	;
SerialServo.asm                                                       Page: 6
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00253 0000 	;================================================================================================
00254 0000 	;***** VARIABLE DEFINITIONS
00255 0000 	; there are 256 bytes of ram, Bank0 0x20..0x7F, Bank1 0xA0..0xEF, Bank2 0x120..0x16F
00256 0000 	; there are 256 bytes of EEPROM starting at 0x00 the EEPROM is not mapped into memory but
00257 0000 	;  accessed through the EEADR and EEDATA registers
00258 0000 	;================================================================================================
00259 0000 	;  Bank0 Ram 020h-06Fh 80 Bytes
00260 0000 	;
00261 0000 		cblock	0x20
00262 0000 	;
00263 0000 0020 		SysLED_Time		;sys LED time
00264 0000 0021 		SysLED_Blinks		;0=1 flash,1,2,3
00265 0000 0022 		SysLED_BlinkCount
00266 0000 0023 		SysLEDCount		;sys LED Timer tick count
00267 0000 	;
00268 0000 0024 		LED1_Blinks		;0=off,1,2,3
00269 0000 0025 		LED2_Blinks
00270 0000 0026 		LED1_BlinkCount		;LED1_Blinks..0
00271 0000 0027 		LED2_BlinkCount
00272 0000 0028 		LED1_Count		;tick count
00273 0000 0029 		LED2_Count
00274 0000 	;
00275 0000 002A 		EEAddrTemp		;EEProm address to read or write
00276 0000 002B 		EEDataTemp		;Data to be writen to EEProm
00277 0000 	;
00278 0000 002C 		Timer1Lo		;1st 16 bit timer
00279 0000 002D 		Timer1Hi		; 50 mS RX timeiout
00280 0000 002E 		Timer2Lo		;2nd 16 bit timer
00281 0000 002F 		Timer2Hi		;
00282 0000 0030 		Timer3Lo		;3rd 16 bit timer
00283 0000 0031 		Timer3Hi		;GP wait timer
00284 0000 0032 		Timer4Lo		;4th 16 bit timer
00285 0000 0033 		Timer4Hi		; debounce timer
00286 0000 	;
00287 0000 0034 		TXByte		;Next byte to send
00288 0000 0035 		RXByte		;Last byte received
00289 0000 0036 		SerFlags
00290 0000 	;
00291 0000 	;
00292 0000 0037 		ssCmdPos:2		;Commanded position, 0=not used
00293 0000 0039 		ssCurPos:2
00294 0000 003B 		ssMD3_Dest:2
00295 0000 003D 		ssTempFlags
00296 0000 003E 		ssStatus:4		;Status and condition flags for the user.
00297 0000 	;
00298 0000 0042 		EncoderAccum:3		;Accumulated distance
00299 0000 0045 		EncoderVal:2		;Value last read, raw 12 bit data
00300 0000 	;-----------------------
00301 0000 	;Below here are saved in eprom
00302 0000 0047 		EncoderFlags
00303 0000 0048 	                       EncoderHome:2                                 ;Absolute Home
00304 0000 004A 	                       EncoderOffset:2		;Used in mode 2 for single rotation
00305 0000 	;
00306 0000 004C 		ServoFastForward:2
00307 0000 004E 		ServoFastReverse:2
00308 0000 0050 		ServoStopCenter:2		;Mode 3 Idle position
00309 0000 0052 		ServoMin_uS:2
00310 0000 0054 		ServoMax_uS:2
00311 0000 0056 		ServoSpeed		;0 = off, 1..63 position change per cycle
00312 0000 0057 		SysMode
00313 0000 0058 		RS232_MasterAddr
00314 0000 0059 		RS232_SlaveAddr
00315 0000 005A 		ssFlags		;Serial Servo flags
00316 0000 005B 		ssMaxI		;Max Current 0=off
00317 0000 005C 		DeadBand		;Used by Mode 2
00318 0000 005D 		ssGripI		;Gripper tension
00319 0000 005E 		ssAux0Config
00320 0000 005F 		ssAux1Config
00321 0000 0060 		ssAux2Config
00322 0000 0061 		SysFlags		;saved in eprom 0x64 must
00323 0000 				; move something to another
00324 0000 				; bank before adding anything new
00325 0000 	;
00326 0000 		endc
00327 0000 	;--------------------------------------------------------------
00328 0000 	;---SerFlags bits---
00329 0000 0036 	#Define	DataReceivedFlag	SerFlags,1
00330 0000 0036 	#Define	DataSentFlag	SerFlags,2
00331 0000 	;
00332 0000 	;---ssTempFlags bits---
00333 0000 003D 	#Define	PulseSent	ssTempFlags,0
00334 0000 003D 	#Define	ServoOff	ssTempFlags,1
00335 0000 003D 	#Define	ServoIdle	ssTempFlags,2
00336 0000 003D 	#Define	OverCurrentFlag	ssTempFlags,3
00337 0000 003D 	#Define	GripIMet	ssTempFlags,4
00338 0000 003D 	#Define	GripIOver	ssTempFlags,5
00339 0000 	;
00340 0000 	;----ssStatus bits
00341 0000 003E 	#Define	MD3_FFwd	ssStatus,0
00342 0000 003E 	#Define	MD3_FRev	ssStatus,1
00343 0000 003E 	#Define	ssio_OverCurSD	ssStatus,2	;Servo stopped for over-current
00344 0000 003E 	#Define	ssRX_Timeout	ssStatus,3	;cleared by host read
00345 0000 003E 	#Define	ssGripOCur	ssStatus,4	;cleared by host read
00346 0000 003E 	#Define	ssGripMCur	ssStatus,5	;cleared by host read
00347 0000 	;
00348 0000 	; all bits of ssStatus+1 are cleared by a host kCmd_GetStatus command.
00349 0000 003F 	#Define	ssEncParityError	ssStatus+1,0	;cleared by host read
00350 0000 003F 	#Define	ssEncCmdError	ssStatus+1,1	;cleared by host read	
00351 0000 	;
SerialServo.asm                                                       Page: 7
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00352 0000 	;---------------
00353 0000 0047 	#Define	FirstRAMParam	EncoderFlags
00354 0000 0061 	#Define	LastRAMParam	SysFlags
00355 0000 	;
00356 0000 	;---ssFlags bits---
00357 0000 005A 	#Define	ssEnableOverCur	ssFlags,0	;disable if current is too high
00358 0000 005A 	#Define	ssReverseDir	ssFlags,1	;if set ServoFastForward<=>ServoFastReverse
00359 0000 	;
00360 0000 005A 	#Define	ssMode3IdleCenter	ssFlags,3	;0= Disable PWM, 1= output ServoStopCenter
00361 0000 005A 	#Define	ssEnableFastPWM	ssFlags,4	;0= 20mS PWM, 1= 10mS PWM
00362 0000 005A 	#Define	ssEnableAN4	ssFlags,5	;0= Mode 0,1 disabled; 1= Enabled;
00363 0000 	;
00364 0000 0061 	#Define	SW1_Flag	SysFlags,0
00365 0000 0061 	#Define	SW2_Flag	SysFlags,1
00366 0000 0061 	#Define	SW3_Flag	SysFlags,2
00367 0000 0061 	#Define	SW4_Flag	SysFlags,3
00368 0000 	;
00369 0000 	;================================================================================================
00370 0000 	;  Bank1 Ram 0A0h-0EFh 80 Bytes
00371 0000 		cblock	0x0A0
00372 0000 00A0 		RX_ParseFlags
00373 0000 00A1 		RX_Flags
00374 0000 00A2 		RX_DataCount
00375 0000 00A3 		RX_CSUM
00376 0000 00A4 		RX_SrcAdd:RP_AddressBytes
00377 0000 00A5 		RX_DstAdd:RP_AddressBytes
00378 0000 00A6 		RX_TempData:RP_DataBytes
00379 0000 00AA 		RX_Data:RP_DataBytes
00380 0000 00AE 		TX_Data:RP_DataBytes
00381 0000 	;
00382 0000 00B2 		ANFlags
00383 0000 00B3 		Cur_AN0:2		;IServo
00384 0000 00B5 		Cur_AN1:2		;Battery Volts
00385 0000 00B7 		Cur_AN2:2		;SW1_LED1
00386 0000 00B9 		Cur_AN3:2		;SW2_LED2
00387 0000 	;
00388 0000 00BB 		OldAN0Value:2
00389 0000 		endc
00390 0000 	;
00391 0000 00B3 	#Define	ServoCurrent	Cur_AN0
00392 0000 00B5 	#Define	BattVolts	Cur_AN1
00393 0000 00B7 	#Define	ModeZeroPot	Cur_AN2
00394 0000 	;
00395 0000 	;---ANFlags bits---
00396 0000 00B2 	#Define	NewDataAN0	ANFlags,0
00397 0000 00B2 	#Define	NewDataAN1	ANFlags,1
00398 0000 	;
00399 0000 	;================================================================================================
00400 0000 	;  Bank2 Ram 120h-16Fh 80 Bytes
00401 0000 	;
00402 0000 0002 	#Define	Ser_Buff_Bank	2
00403 0000 	;
00404 0000 		cblock	0x120
00405 0000 0120 		Ser_In_Bytes		;Bytes in Ser_In_Buff
00406 0000 0121 		Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00407 0000 0122 		Ser_In_InPtr
00408 0000 0123 		Ser_In_OutPtr
00409 0000 0124 		Ser_Out_InPtr
00410 0000 0125 		Ser_Out_OutPtr
00411 0000 0126 		Ser_In_Buff:20
00412 0000 0146 		Ser_Out_Buff:20
00413 0000 		endc
00414 0000 	;
00415 0000 	;================================================================================================
00416 0000 	;  Bank3 Ram 1A0h-1EFh 80 Bytes
00417 0000 	;=========================================================================================
00418 0000 	;  Bank5 Ram 2A0h-2EFh 80 Bytes
00419 0000 	;
00420 0000 		cblock	0x2A0
00421 0000 02A0 		SigOutTime
00422 0000 02A1 		SigOutTimeH
00423 0000 02A2 		CalcdDwell
00424 0000 02A3 		CalcdDwellH
00425 0000 		endc
00426 0000 	;
00427 0000 	;=======================================================================================================
00428 0000 	;  Common Ram 70-7F same for all banks
00429 0000 	;      except for ISR_W_Temp these are used for paramiter passing and temp vars
00430 0000 	;=======================================================================================================
00431 0000 	;
00432 0000 		cblock	0x70
00433 0000 0070 		Param70
00434 0000 0071 		Param71
00435 0000 0072 		Param72
00436 0000 0073 		Param73
00437 0000 0074 		Param74
00438 0000 0075 		Param75
00439 0000 0076 		Param76
00440 0000 0077 		Param77
00441 0000 0078 		Param78
00442 0000 0079 		Param79
00443 0000 007A 		Param7A
00444 0000 007B 		Param7B
00445 0000 007C 		Param7C
00446 0000 007D 		Param7D
00447 0000 007E 		Param7E
00448 0000 007F 		Param7F
00449 0000 		endc
00450 0000 	;
SerialServo.asm                                                       Page: 8
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00451 0000 	;=========================================================================================
00452 0000 	;Conditions
00453 0000 0080 	HasISR	EQU	0x80	;used to enable interupts 0x80=true 0x00=false
00454 0000 	;
00455 0000 0070 	AS5047D_Flags	EQU	Param70	;Check that Param70 is OK to use
00456 0000 	;
00457 0000 0070 	#Define	ParityErrFlag	AS5047D_Flags,0
00458 0000 0070 	#Define	AngleReadFlag	AS5047D_Flags,1
00459 0000 0070 	#define	ContinueReadFlag	AS5047D_Flags,2
00460 0000 0070 	#Define	CmdErrorFlag	AS5047D_Flags,3
00461 0000 	;
00462 0000 	;=========================================================================================
00463 0000 	;==============================================================================================
00464 0000 	; ID Locations
00465 0000 		__idlocs	0x10b4
00466 0000 	;
00467 0000 	;==============================================================================================
00468 0000 	; EEPROM locations (NV-RAM) 0x00..0x7F (offsets)
00469 0000 	;
00470 0000 	; default values
00471 0000 		ORG	0xF000
00472 F000 0000 		de	0x00	;nvEncoderFlags
00473 F001 0000 0000 		de	0x00,0x00	;nvEncoderHome
00474 F003 0000 0000 		de	0x00,0x00	;nvEncoderOffset
00475 F005 00EA 		de	low kServoFastForward
00476 F006 000B 		de	high kServoFastForward
00477 F007 0022 		de	low kServoFastReverse
00478 F008 000B 		de	high kServoFastReverse
00479 F009 0086 		de	low kServoCenterStop	;nvServoStopCenter
00480 F00A 000B 		de	high kServoCenterStop
00481 F00B 0008 		de	low kMinPulseWidth	;nvServoMin_uS
00482 F00C 0007 		de	high kMinPulseWidth
00483 F00D 0068 		de	low kMaxPulseWidth	;nvServoMax_uS
00484 F00E 0010 		de	high kMaxPulseWidth
00485 F00F 000A 		de	kServoSpeed	;nvServoSpeed
00486 F010 0003 		de	kSysMode	;nvSysMode
00487 F011 0001 		de	kRS232_MasterAddr	;nvRS232_MasterAddr, 0x0F
00488 F012 0002 		de	kRS232_SlaveAddr	;nvRS232_SlaveAddr, 0x10
00489 F013 0019 		de	kssFlags	;nvssFlags
00490 F014 0032 		de	kssMaxI	;nvssMaxI
00491 F015 0064 		de	kDeadBand	;nvDeadBand
00492 F016 0028 		de	kGripI
00493 F017 0000 		de	0x00	;ssAux0Config
00494 F018 0000 		de	0x00	;ssAux1Config
00495 F019 0000 		de	0x00	;ssAux2Config
00496 F01A 0000 		de	kSysFlags	;nvSysFlags
00497 F01B 	;
00498 F01B 		ORG	0xF0FF
00499 F0FF 0000 		de	0x00	;Skip BootLoader
00500 F100 	;
00501 F100 		cblock	0x0000
00502 F100 	;
00503 F100 0000 		nvEncoderFlags
00504 F100 0001 	                       nvEncoderHome:2
00505 F100 0003 	                       nvEncoderOffset:2
00506 F100 	;
00507 F100 0005 		nvServoFastForward:2
00508 F100 0007 		nvServoFastReverse:2
00509 F100 0009 		nvServoStopCenter:2
00510 F100 000B 		nvServoMin_uS:2
00511 F100 000D 		nvServoMax_uS:2
00512 F100 000F 		nvServoSpeed
00513 F100 0010 		nvSysMode
00514 F100 0011 		nvRS232_MasterAddr
00515 F100 0012 		nvRS232_SlaveAddr
00516 F100 0013 		nvssFlags
00517 F100 0014 		nvssMaxI
00518 F100 0015 		nvDeadBand
00519 F100 0016 		nvssGripI
00520 F100 0017 		nvssAux0Config
00521 F100 0018 		nvssAux1Config
00522 F100 0019 		nvssAux2Config
00523 F100 001A 		nvSysFlags
00524 F100 		endc
00525 F100 	;
00526 F100 0000 	#Define	nvFirstParamByte	nvEncoderFlags
00527 F100 001A 	#Define	nvLastParamByte	nvSysFlags
00528 F100 	;
00529 F100 	;
00530 F100 	;==============================================================================================
00531 F100 	;============================================================================================
00532 F100 	;
00533 F100 1E00 	BootLoaderStart	EQU	0x1E00
00534 F100 	;
00535 F100 		ORG	0x000	; processor reset vector
00536 0000 319E 		movlp	high BootLoaderStart
00537 0001 2E00 		goto	BootLoaderStart
00538 0002 018A 	ProgStartVector	CLRF	PCLATH
00539 0003 2B9A 	  	goto	start	; go to beginning of program
00540 0004 	;
00541 0004 	;===============================================================================================
00542 0004 	; Interupt Service Routine
00543 0004 	;
00544 0004 	; we loop through the interupt service routing every 0.008192 seconds
00545 0004 	;
00546 0004 	;
00547 0004 		ORG	0x004	; interrupt vector location
00548 0004 018A 		CLRF	PCLATH
00549 0005 0188 		CLRF	BSR	; bank0
SerialServo.asm                                                       Page: 9
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00550 0006 	;
00551 0006 	;
00552 0006 1C91 		BTFSS	PIR1,TMR2IF
00553 0007 287D 		goto	SystemTick_end
00554 0008 	;
00555 0008 1091 		BCF	PIR1,TMR2IF	; reset interupt flag bit
00556 0009 	;------------------
00557 0009 	; These routines run 100 times per second
00558 0009 	;
00559 0009 	;------------------
00560 0009 	;Decrement timers until they are zero
00561 0009 	;
00562 0009 20FD 		call	DecTimer1	;if timer 1 is not zero decrement
00563 000A 20FB 		call	DecTimer2
00564 000B 20F9 		call	DecTimer3
00565 000C 20F7 		call	DecTimer4
00566 000D 	;
00567 000D 	;-----------------------------------------------------------------
00568 000D 	; blink LEDs
00569 000D 	;
00570 000D 	; All LEDs off
00571 000D 0021 		movlb	0x01	;bank 1
00572 000E 178C 		bsf	SysLED_Tris
00573 000F 	;
00574 000F 150C 		BSF	LED1_Tris
00575 0010 158C 		BSF	LED2_Tris
00576 0011 	;
00577 0011 	; Read Switches
00578 0011 0020 		movlb	0x00	;bank 0
00579 0012 	;--------------------
00580 0012 	; Sys LED time
00581 0012 0BA3 		DECFSZ	SysLEDCount,F	;Is it time?
00582 0013 3207 		bra	SystemBlink_end	; No, not yet
00583 0014 	;
00584 0014 08A1 		movf	SysLED_Blinks,F
***** #106 Unprocessed Opcode SKPNZ *****
00585 0015 		SKPNZ		;Standard Blinking?
00586 0015 3200 		bra	SystemBlink_Std	; Yes
00587 0016 	;
00588 0016 	; custom blinking
00589 0016 	;
00590 0016 01A2 	SystemBlink_Std	CLRF	SysLED_BlinkCount
00591 0017 0820 		MOVF	SysLED_Time,W
00592 0018 00A3 	SystemBlink_DoIt	MOVWF	SysLEDCount
00593 0019 0021 		movlb	0x01	;bank 1
00594 001A 138C 		bcf	SysLED_Tris	;LED ON
00595 001B 	SystemBlink_end:
00596 001B 	;--------------------
00597 001B 	; Flash LEDs
00598 001B 0020 		movlb	0x00	;bank 0
00599 001C 085E 		movf	ssAux0Config,W
00600 001D 390F 		andlw	0x0F
00601 001E 3C01 		sublw	kAuxIOLEDBtn
***** #106 Unprocessed Opcode SKPZ *****
00602 001F 		SKPZ
00603 001F 321D 		bra	LED1_Blink_end
00604 0020 	; Get Button Value
00605 0020 0021 		movlb	0x01	;bank 1
00606 0021 150C 		BSF	LED1_Tris
00607 0022 0020 		movlb	0x00	;bank 0
00608 0023 1061 		BCF	SW1_Flag
00609 0024 1D0C 		BTFSS	SW1_In
00610 0025 1461 		BSF	SW1_Flag
00611 0026 	;
00612 0026 08A4 		movf	LED1_Blinks,F
***** #106 Unprocessed Opcode SKPZ *****
00613 0027 		SKPZ		;LED1 active?
00614 0027 3203 		bra	LED1_Blinking	; Yes
00615 0028 01A6 		clrf	LED1_BlinkCount
00616 0029 01A8 		clrf	LED1_Count
00617 002A 3212 		bra	LED1_Blink_end
00618 002B 	;
00619 002B 0828 	LED1_Blinking	movf	LED1_Count,W
00620 002C 0426 		iorwf	LED1_BlinkCount,W
***** #106 Unprocessed Opcode SKPNZ *****
00621 002D 		SKPNZ		;Startup?
00622 002D 3209 		bra	LED1_Start
00623 002E 	;
00624 002E 0BA8 		decfsz	LED1_Count,F	;Done w/ blink
00625 002F 320D 		bra	LED1_Blink_end	; no
00626 0030 	;
00627 0030 08A6 		movf	LED1_BlinkCount,F
***** #106 Unprocessed Opcode SKPNZ *****
00628 0031 		SKPNZ		;Done w/ cycle?
00629 0031 3205 		bra	LED1_Start	; Yes
00630 0032 	;
00631 0032 0BA6 		decfsz	LED1_BlinkCount,F
00632 0033 3205 		bra	LED1_NextBlink
00633 0034 3064 		movlw	LEDTIME	;long off time
00634 0035 00A8 		movwf	LED1_Count
00635 0036 3206 		bra	LED1_Blink_end
00636 0037 	;
00637 0037 0824 	LED1_Start	movf	LED1_Blinks,W
00638 0038 00A6 		movwf	LED1_BlinkCount
00639 0039 3014 	LED1_NextBlink	movlw	LEDFastTime
00640 003A 00A8 		movwf	LED1_Count
00641 003B 	;
00642 003B 0021 		movlb	0x01
00643 003C 110C 		BCF	LED1_Tris
SerialServo.asm                                                       Page: 10
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00644 003D 	LED1_Blink_end:
00645 003D 	;-------------
00646 003D 	;kAuxIODigitalOut
00647 003D 0020 		movlb	0x00	;bank 0
00648 003E 085E 		movf	ssAux0Config,W
00649 003F 390F 		andlw	0x0F
00650 0040 3C03 		sublw	kAuxIODigitalOut
***** #106 Unprocessed Opcode SKPZ *****
00651 0041 		SKPZ
00652 0041 320A 		bra	Aux0DigOut_end
00653 0042 	;
00654 0042 1C24 		btfss	LED1_Blinks,0
00655 0043 3203 		bra	Aux0DigOut_1
00656 0044 0022 		movlb	0x02	;bank 2
00657 0045 150C 		bsf	LED1_Lat
00658 0046 3203 		bra	Aux0DigOut_2
00659 0047 	;
00660 0047 0022 	Aux0DigOut_1	movlb	0x02	;bank 2
00661 0048 110C 		bcf	LED1_Lat
00662 0049 3200 		bra	Aux0DigOut_2
00663 004A 	;
00664 004A 0021 	Aux0DigOut_2	movlb	0x01	;bank 1
00665 004B 110C 		BCF	LED1_Tris
00666 004C 	Aux0DigOut_end:
00667 004C 	;-------------
00668 004C 0020 		movlb	0x00	;bank 0
00669 004D 085F 		movf	ssAux1Config,W
00670 004E 390F 		andlw	0x0F
00671 004F 3C01 		sublw	kAuxIOLEDBtn
***** #106 Unprocessed Opcode SKPZ *****
00672 0050 		SKPZ
00673 0050 321D 		bra	LED2_Blink_end
00674 0051 	; Get Button Value
00675 0051 0021 		movlb	0x01	;bank 1
00676 0052 158C 		BSF	LED2_Tris
00677 0053 0020 		movlb	0x00	;bank 0
00678 0054 10E1 		BCF	SW2_Flag
00679 0055 1D8C 		BTFSS	SW2_In
00680 0056 14E1 		BSF	SW2_Flag
00681 0057 	;
00682 0057 08A5 		movf	LED2_Blinks,F
***** #106 Unprocessed Opcode SKPZ *****
00683 0058 		SKPZ		;LED2 active?
00684 0058 3203 		bra	LED2_Blinking	; Yes
00685 0059 01A7 		clrf	LED2_BlinkCount
00686 005A 01A9 		clrf	LED2_Count
00687 005B 3212 		bra	LED2_Blink_end
00688 005C 	;
00689 005C 0829 	LED2_Blinking	movf	LED2_Count,W
00690 005D 0427 		iorwf	LED2_BlinkCount,W
***** #106 Unprocessed Opcode SKPNZ *****
00691 005E 		SKPNZ		;Startup?
00692 005E 3209 		bra	LED2_Start
00693 005F 	;
00694 005F 0BA9 		decfsz	LED2_Count,F	;Done w/ blink
00695 0060 320D 		bra	LED2_Blink_end	; no
00696 0061 	;
00697 0061 08A7 		movf	LED2_BlinkCount,F
***** #106 Unprocessed Opcode SKPNZ *****
00698 0062 		SKPNZ		;Done w/ cycle?
00699 0062 3205 		bra	LED2_Start	; Yes
00700 0063 	;
00701 0063 0BA7 		decfsz	LED2_BlinkCount,F
00702 0064 3205 		bra	LED2_NextBlink
00703 0065 3064 		movlw	LEDTIME	;long off time
00704 0066 00A9 		movwf	LED2_Count
00705 0067 3206 		bra	LED2_Blink_end
00706 0068 	;
00707 0068 0825 	LED2_Start	movf	LED2_Blinks,W
00708 0069 00A7 		movwf	LED2_BlinkCount
00709 006A 3014 	LED2_NextBlink	movlw	LEDFastTime
00710 006B 00A9 		movwf	LED2_Count
00711 006C 	;
00712 006C 0021 		movlb	0x01
00713 006D 118C 		BCF	LED2_Tris
00714 006E 	LED2_Blink_end:
00715 006E 	;-------------
00716 006E 	;kAuxIODigitalOut
00717 006E 0020 		movlb	0x00	;bank 0
00718 006F 085F 		movf	ssAux1Config,W
00719 0070 390F 		andlw	0x0F
00720 0071 3C03 		sublw	kAuxIODigitalOut
***** #106 Unprocessed Opcode SKPZ *****
00721 0072 		SKPZ
00722 0072 320A 		bra	Aux1DigOut_end
00723 0073 	;
00724 0073 1C25 		btfss	LED2_Blinks,0
00725 0074 3203 		bra	Aux1DigOut_1
00726 0075 0022 		movlb	0x02	;bank 2
00727 0076 158C 		bsf	LED2_Lat
00728 0077 3203 		bra	Aux1DigOut_2
00729 0078 	;
00730 0078 0022 	Aux1DigOut_1	movlb	0x02	;bank 2
00731 0079 118C 		bcf	LED2_Lat
00732 007A 3200 		bra	Aux1DigOut_2
00733 007B 	;
00734 007B 0021 	Aux1DigOut_2	movlb	0x01	;bank 1
00735 007C 118C 		BCF	LED2_Tris
00736 007D 	Aux1DigOut_end:
SerialServo.asm                                                       Page: 11
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00737 007D 	;-------------
00738 007D 	;
00739 007D 	SystemTick_end:
00740 007D 	;
00741 007D 	;==================================================================================
00742 007D 	;
00743 007D 	; Handle CCP1 Interupt Flag, Enter w/ bank 0 selected
00744 007D 	;
00745 007D 0020 	IRQ_Servo1	MOVLB	0	;bank 0
00746 007E 1D11 		BTFSS	PIR1,CCP1IF
00747 007F 323B 		bra	IRQ_Servo1_End
00748 0080 	;
00749 0080 143D 		bsf	PulseSent	;ok to update CurPos
00750 0081 	;
00751 0081 1CBD 		BTFSS	ServoOff	;Are we sending a pulse?
00752 0082 3204 		bra	IRQ_Servo1_1	; Yes
00753 0083 	;
00754 0083 	;Servo is off, idle CCP1 and keep output low
00755 0083 0025 		MOVLB	0x05	;Bank 5
00756 0084 300A 		movlw	CCP1CON_Idle
00757 0085 0093 		movwf	CCP1CON
00758 0086 322E 		bra	IRQ_Servo1_Dwell
00759 0087 	;
00760 0087 193D 	IRQ_Servo1_1	btfsc	ServoIdle
00761 0088 321E 		bra	IRQ_Servo1_Idle
00762 0089 0025 		MOVLB	0x05	;Bank 5
00763 008A 1893 		BTFSC	CCP1CON,CCP1M1	;Idling?
00764 008B 3227 		bra	IRQ_Servo1_OL	; Yes, go high after dwell
00765 008C 1813 		BTFSC	CCP1CON,CCP1M0	;Cleared output on match?
00766 008D 3225 		bra	IRQ_Servo1_OL	; No
00767 008E 	; An output just went high
00768 008E 	;
00769 008E 0820 	IRQ_Servo1_OH	MOVF	SigOutTime,W	;Put the pulse into the CCP reg.
00770 008F 0791 		ADDWF	CCPR1L,F
00771 0090 0821 		MOVF	SigOutTime+1,W
00772 0091 3D92 		ADDWFC	CCPR1H,F
00773 0092 3009 		MOVLW	CCP1CON_Clr	;Clear output on match
00774 0093 0093 		MOVWF	CCP1CON	;CCP1 clr on match
00775 0094 	;Calculate dwell time
00776 0094 0020 		movlb	0	;bank 0
00777 0095 1E5A 		btfss	ssEnableFastPWM
00778 0096 3206 		bra	IRQ_Servo1_20mS
00779 0097 0025 		movlb	5	;Bank 5
00780 0098 3020 		MOVLW	LOW kServoFastDwellTime
00781 0099 00A2 		MOVWF	CalcdDwell
00782 009A 304E 		MOVLW	HIGH kServoFastDwellTime
00783 009B 00A3 		MOVWF	CalcdDwellH
00784 009C 3205 		bra	IRQ_Servo1_CalcDwell
00785 009D 	;
00786 009D 0025 	IRQ_Servo1_20mS	movlb	5	;Bank 5
00787 009E 3040 		MOVLW	LOW kServoDwellTime
00788 009F 00A2 		MOVWF	CalcdDwell
00789 00A0 309C 		MOVLW	HIGH kServoDwellTime
00790 00A1 00A3 		MOVWF	CalcdDwellH
00791 00A2 	;
00792 00A2 0820 	IRQ_Servo1_CalcDwell	MOVF	SigOutTime,W
00793 00A3 02A2 		SUBWF	CalcdDwell,F
00794 00A4 0821 		MOVF	SigOutTime+1,W
00795 00A5 3BA3 		SUBWFB	CalcdDwellH,F
00796 00A6 3212 		bra	IRQ_Servo1_X
00797 00A7 	;
00798 00A7 0025 	IRQ_Servo1_Idle	MOVLB	0x05
00799 00A8 1893 		BTFSC	CCP1CON,CCP1M1	;Idling?
00800 00A9 320B 		bra	IRQ_Servo1_Dwell	; yes, continue idling.
00801 00AA 1C13 		BTFSS	CCP1CON,CCP1M0	;Just went low?
00802 00AB 33E2 		bra	IRQ_Servo1_OH	; No, finish pulse
00803 00AC 300A 		movlw	CCP1CON_Idle	; Yes, start idling
00804 00AD 0093 		movwf	CCP1CON
00805 00AE 3040 		MOVLW	LOW kServoDwellTime
00806 00AF 00A2 		MOVWF	CalcdDwell
00807 00B0 309C 		MOVLW	HIGH kServoDwellTime
00808 00B1 00A3 		MOVWF	CalcdDwellH
00809 00B2 3202 		bra	IRQ_Servo1_Dwell
00810 00B3 	;
00811 00B3 	; output went low so this cycle is done
00812 00B3 3008 	IRQ_Servo1_OL	MOVLW	CCP1CON_Set	;Set output on match
00813 00B4 0093 		MOVWF	CCP1CON
00814 00B5 	;
00815 00B5 0822 	IRQ_Servo1_Dwell	MOVF	CalcdDwell,W
00816 00B6 0791 		ADDWF	CCPR1L,F
00817 00B7 0823 		MOVF	CalcdDwellH,W
00818 00B8 3D92 		ADDWFC	CCPR1H,F
00819 00B9 	;
00820 00B9 0020 	IRQ_Servo1_X	MOVLB	0x00
00821 00BA 1111 		BCF	PIR1,CCP1IF
00822 00BB 	IRQ_Servo1_End:
00823 00BB 	;-----------------------------------------------------------------------------------------
00824 00BB 	;AUSART Serial ISR
00825 00BB 	;
00826 00BB 1E91 	IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00827 00BC 3201 		BRA	IRQ_Ser_End
00828 00BD 22AD 		CALL	RX_TheByte
00829 00BE 	;
00830 00BE 	IRQ_Ser_End:
00831 00BE 	;-----------------------------------------------------------------------------------------
00832 00BE 0009 		retfie		; return from interrupt
00833 00BF 	;
00834 00BF 	;
00835 00BF 	;=========================================================================================
SerialServo.asm                                                       Page: 12
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00836 00BF 	;*****************************************************************************************
00837 00BF 	;=========================================================================================
00838 00BF 	;
00839 00BF 		include <F1847_Common.inc>
00001 00BF 	;=========================================================================================
00002 00BF 	; Commonly used routines PIC16F1847 version
00003 00BF 	;
00004 00BF 	;    Filename:      F1847 Common.inc
00005 00BF 	;    Date:          4/6/2019
00006 00BF 	;    File Version:  1.0.2
00007 00BF 	;
00008 00BF 	;    Author:        David M. Flynn
00009 00BF 	;    Company:       Oxford V.U.E., Inc.
00010 00BF 	;    E-Mail:        dflynn@oxfordvue.com
00011 00BF 	;    Web Site:      http://www.oxfordvue.com/
00012 00BF 	;
00013 00BF 	;=========================================================================================
00014 00BF 	;    History:
00015 00BF 	;
00016 00BF 	; 1.0.2  4/6/2019	Fixes to EERead/EEwrite
00017 00BF 	; 1.0.2 2/16/2019	Fix: added FSR0H to DecTimer.
00018 00BF 	; 1.0.1 11/21/2015	Updates DecTimer.
00019 00BF 	; 1.0   11/16/2013	Updated from F648A Common.inc
00020 00BF 	;
00021 00BF 	;=========================================================================================
00022 00BF 	; Routines:
00023 00BF 	;
00024 00BF 	; ClearRam	(2+0) Clears all RAM, call once before initializing variables, FSR0
00025 00BF 	; CopyToRam	(1+0) copy param memory (EEPROM) to ram, call once, FSR0
00026 00BF 	; SaveParams	(1+0) copy ram to param memory (EEPROM), FSR0
00027 00BF 	;
00028 00BF 	;  Set FSR0H before calling these routines
00029 00BF 	; DecTimer4	(0+0) Decrement routine for 16 bit timers, FSR0
00030 00BF 	; DecTimer3
00031 00BF 	; DecTimer2
00032 00BF 	; DecTimer1
00033 00BF 	; DecTimer	(0+0) High byte of counter address in W
00034 00BF 	;
00035 00BF 	; TestT4_Zero	Test for 16 bit timers = zero
00036 00BF 	; TestT3_Zero	If Timer is zero return Z flag,1 else Z=0
00037 00BF 	; TestT2_Zero
00038 00BF 	; TestT1_Zero
00039 00BF 	;
00040 00BF 	; Delay10uS	(0+0)Delay uS    1 cycle = 1uS, 8Mhz clock version
00041 00BF 	; Delay100uS
00042 00BF 	; Delay40uS
00043 00BF 	; DelayWuS
00044 00BF 	;
00045 00BF 	; EEReadW	(0+0) Read EEPROM address in W
00046 00BF 	; EERead	(0+0) Read EEPROM address in EEAddrTemp
00047 00BF 	; EEWriteW	(0+0) Write EEPROM address in W, Data in EEDataTemp
00048 00BF 	; EEWrite	(0+0) Write EEPROM address in EEAdrTemp, Data in EEDataTemp, FSR0
00049 00BF 	;
00050 00BF 	;=========================================================================================
00051 00BF 		ifndef UseEEParams
00053 00BF 		endif
00054 00BF 	;=========================================================================================
00055 00BF 	; Clears all RAM
00056 00BF 	; Entry: none
00057 00BF 	; Exit: none
00058 00BF 	; RAM used: All
00059 00BF 	; Calls:(2+0) ClearRam_L2
00060 00BF 	;
00061 00BF 0020 	ClearRam	MOVLB	0x00
00062 00C0 305F 		MOVLW	0x5F	;Clear 20h-7Eh, 95 bytes
00063 00C1 00FF 		MOVWF	Param7F
00064 00C2 3020 		MOVLW	0x20
00065 00C3 0084 		MOVWF	FSR0
00066 00C4 0185 		CLRF	FSR0H
00067 00C5 20D9 		CALL	ClearRam_L2
00068 00C6 	;
00069 00C6 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00070 00C7 00FF 		MOVWF	Param7F
00071 00C8 30A0 		MOVLW	0xA0
00072 00C9 0084 		MOVWF	FSR0
00073 00CA 20D9 		CALL	ClearRam_L2
00074 00CB 	;
00075 00CB 0A85 		INCF	FSR0H,F	
00076 00CC 20D0 		CALL	ClearRam_2	;Banks 2,3
00077 00CD 0A85 		INCF	FSR0H,F	
00078 00CE 20D0 		CALL	ClearRam_2	;Banks 4,5
00079 00CF 0A85 		INCF	FSR0H,F	;Banks 6,7
00080 00D0 	;	
00081 00D0 3050 	ClearRam_2	MOVLW	0x50	;Clear 120h-16Fh, 80 bytes
00082 00D1 00FF 		MOVWF	Param7F
00083 00D2 3020 		MOVLW	0x20
00084 00D3 0084 		MOVWF	FSR0
00085 00D4 20D9 		CALL	ClearRam_L2
00086 00D5 	;
00087 00D5 3050 		MOVLW	0x50	;Clear A0h-EFh, 80 bytes
00088 00D6 00FF 		MOVWF	Param7F
00089 00D7 30A0 		MOVLW	0xA0
00090 00D8 0084 		MOVWF	FSR0
00091 00D9 	;
00092 00D9 0180 	ClearRam_L2	CLRF	INDF0
00093 00DA 0A84 		INCF	FSR0,F
00094 00DB 0BFF 		DECFSZ	Param7F,F
00095 00DC 33FC 		bra	ClearRam_L2
00096 00DD 0008 		RETURN
SerialServo.asm                                                       Page: 13
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00097 00DE 	;
00098 00DE 		if UseEEParams
00099 00DE 	;==========================================================================
00100 00DE 	; copy param memory to ram
00101 00DE 	;
00102 00DE 3000 	CopyToRam	MOVLW	nvFirstParamByte
00103 00DF 00AA 		MOVWF	EEAddrTemp
00104 00E0 3047 		MOVLW	FirstRAMParam
00105 00E1 0084 		MOVWF	FSR0L
00106 00E2 0185 		CLRF	FSR0H
00107 00E3 2126 	CopyToRam_L1	CALL	EERead
00108 00E4 001A 		movwi	FSR0++
00109 00E5 0AAA 		INCF	EEAddrTemp,F
00110 00E6 3062 		MOVLW	LastRAMParam+1
00111 00E7 0204 		SUBWF	FSR0L,W
***** #106 Unprocessed Opcode SKPZ *****
00112 00E8 		SKPZ
00113 00E8 33FA 		BRA	CopyToRam_L1
00114 00E9 0008 		RETURN
00115 00EA 	;
00116 00EA 	;===========================================================================
00117 00EA 	; copy ram to param memory
00118 00EA 	;
00119 00EA 3000 	SaveParams	MOVLW	nvFirstParamByte
00120 00EB 00AA 		MOVWF	EEAddrTemp
00121 00EC 3047 		MOVLW	FirstRAMParam
00122 00ED 0084 		MOVWF	FSR0L
00123 00EE 0185 		CLRF	FSR0H
00124 00EF 0012 	SaveParams_L1	moviw	FSR0++
00125 00F0 00AB 		MOVWF	EEDataTemp
00126 00F1 2130 		CALL	EEWrite
00127 00F2 0AAA 		INCF	EEAddrTemp,F
00128 00F3 3062 		MOVLW	LastRAMParam+1	;last byte
00129 00F4 0204 		SUBWF	FSR0L,W
***** #106 Unprocessed Opcode SKPZ *****
00130 00F5 		SKPZ
00131 00F5 33F9 		BRA	SaveParams_L1
00132 00F6 0008 		RETURN
00133 00F7 	;
00134 00F7 		endif
00135 00F7 	;=====================================================================================================
00136 00F7 	;=========================================================================================================
00137 00F7 	; Decrement routine for 16 bit timers
00138 00F7 	; Set FSR0H before calling these routines.
00139 00F7 	;
00140 00F7 3033 	DecTimer4	movlw	Timer4Hi
00141 00F8 3205 		bra	DecTimer
00142 00F9 3031 	DecTimer3	movlw	Timer3Hi
00143 00FA 3203 		bra	DecTimer
00144 00FB 302F 	DecTimer2	movlw	Timer2Hi
00145 00FC 3201 		bra	DecTimer
00146 00FD 302D 	DecTimer1	movlw	Timer1Hi
00147 00FE 	;DecTimer
00148 00FE 	; entry: FSR=Timer(n)Hi
00149 00FE 0084 	DecTimer	MOVWF	FSR0L
00150 00FF 3000 		movlw	High Timer4Hi
00151 0100 0085 		movwf	FSR0H
00152 0101 0013 		MOVIW	FSR0--	;TimerNHi
00153 0102 0400 		IORWF	INDF0,W	;TimerNLo
***** #106 Unprocessed Opcode SKPNZ *****
00154 0103 		SKPNZ
00155 0103 0008 		RETURN
00156 0104 3001 		MOVLW	0x01
00157 0105 0280 		SUBWF	INDF0,F	;TimerNLo
00158 0106 0A84 		INCF	FSR0L,F
00159 0107 0103 		CLRW
00160 0108 3B80 		SUBWFB	INDF0,F	;TimerNHi
00161 0109 0008 		RETURN
00162 010A 	;
00163 010A 	;==============================================================================================
00164 010A 	; Test for 16 bit timers = zero
00165 010A 	;If Timer is zero return Z flag,1 else Z=0
00166 010A 	;
00167 010A 0020 	TestT4_Zero	movlb	0
00168 010B 0832 		movf	Timer4Lo,W
00169 010C 0433 		iorwf	Timer4Hi,W
00170 010D 0008 		return
00171 010E 	;
00172 010E 0020 	TestT3_Zero	movlb	0
00173 010F 0830 		movf	Timer3Lo,W
00174 0110 0431 		iorwf	Timer3Hi,W
00175 0111 0008 		return
00176 0112 	;
00177 0112 0020 	TestT2_Zero	movlb	0
00178 0113 082E 		movf	Timer2Lo,W
00179 0114 042F 		iorwf	Timer2Hi,W
00180 0115 0008 		return
00181 0116 	;
00182 0116 0020 	TestT1_Zero	movlb	0
00183 0117 082C 		movf	Timer1Lo,W
00184 0118 042D 		iorwf	Timer1Hi,W
00185 0119 0008 		return	
00186 011A 	;
00187 011A 		if oldCode
00203 011A 		endif
00204 011A 	;======================================================================================
00205 011A 	;Delay uS    1 cycle = .125uS, 32MHz clock version
00206 011A 	; RAM used: Param77
00207 011A 	; Calls:(0) none
SerialServo.asm                                                       Page: 14
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00208 011A 	;
00209 011A 3005 	Delay10uS	MOVLW	0x05	;(2*3+5)/2=10
00210 011B 3203 		bra	DelayWuS
00211 011C 3041 	Delay100uS	MOVLW	d'65'	;(28*3+5)/2=100
00212 011D 3201 		bra	DelayWuS
00213 011E 3019 	Delay40uS	MOVLW	d'25'	;(11*3+5)=40
00214 011F 00F7 	DelayWuS	MOVWF	Param77
00215 0120 0000 	DelayWuS_Loop	nop
00216 0121 0000 		nop
00217 0122 0BF7 		DECFSZ	Param77,F
00218 0123 33FC 		bra	DelayWuS_Loop
00219 0124 0008 		RETURN
00220 0125 	;==============================================================================================
00221 0125 	; Read EEPROM
00222 0125 	; entry: EEPROM address to read in W
00223 0125 	;        Bank 0 selected
00224 0125 	; exit: W=EEDATA, Bank 0 selected
00225 0125 	;
00226 0125 00AA 	EEReadW	movwf	EEAddrTemp
00227 0126 	;
00228 0126 	;==============================================================================================
00229 0126 	; Read EEPROM
00230 0126 	; entry: EEPROM address to read in EEAddrTemp
00231 0126 	;        Bank 0 selected
00232 0126 	; exit: W=EEDATA, Bank 0 selected
00233 0126 	;
00234 0126 082A 	EERead	movf	EEAddrTemp,W
00235 0127 0023 		MOVLB	0x03	;Bank 3
00236 0128 0091 		movwf	EEADR	;Address to read
00237 0129 1315 		bcf	EECON1,CFGS	;not config mem
00238 012A 1395 		bcf	EECON1,EEPGD	;Data memory
00239 012B 1415 		bsf	EECON1,RD
00240 012C 0813 		movf	EEDAT,W	;W=EEDAT
00241 012D 0020 		MOVLB	0x00	;Bank 0
00242 012E 0008 		return
00243 012F 	;
00244 012F 	;==============================================================================================
00245 012F 	; Write EEPROM
00246 012F 	; entry: EEPROM address to write in W
00247 012F 	;        EEPROM data to write in EEDataTemp
00248 012F 	;        Bank 0 selected
00249 012F 	; exit: Bank 0 selected
00250 012F 	;
00251 012F 00AA 	EEWriteW	movwf	EEAddrTemp
00252 0130 	;
00253 0130 	;==============================================================================================
00254 0130 	; Write EEPROM
00255 0130 	; entry: EEPROM address to write in EEAdrTemp
00256 0130 	;        EEPROM data to write in EEDataTemp
00257 0130 	;        Bank 0 selected
00258 0130 	; exit: Bank 0 selected
00259 0130 	;
00260 0130 082A 	EEWrite	MOVF	EEAddrTemp,W
00261 0131 0023 		MOVLB	0x03	;Bank 3
00262 0132 0091 		movwf	EEADR	;Address to write
00263 0133 0020 		movlb	0x00	; bank 0
00264 0134 082B 		movf	EEDataTemp,W
00265 0135 0023 		movlb	0x03
00266 0136 0093 		movwf	EEDAT
00267 0137 1315 		bcf	EECON1,CFGS	;not config mem
00268 0138 1395 		bcf	EECON1,EEPGD	;Data memory
00269 0139 1515 		bsf	EECON1,WREN
00270 013A 138B 		bcf	INTCON,GIE	;Disale Ints
00271 013B 1B8B 		btfsc	INTCON,GIE
00272 013C 33FD 		bra	$-2
00273 013D 3055 		movlw	0x55
00274 013E 0096 		movwf	EECON2	;write 55
00275 013F 30AA 		movlw	0xAA
00276 0140 0096 		movwf	EECON2	;write AA
00277 0141 1495 		bsf	EECON1,WR
00278 0142 1895 	EEWriteLoop	btfsc	EECON1,WR	
00279 0143 33FE 		bra	EEWriteLoop
00280 0144 1115 		bcf	EECON1,WREN
00281 0145 178B 		bsf	INTCON,GIE
00282 0146 0020 		MOVLB	0x00	;Bank 0
00283 0147 0008 		return
00284 0148 	;
00285 0148 	;	
00286 0148 	;=========================================================================================
00287 0148 	;=========================================================================================
00288 0148 	;
00289 0148 	;
00290 0148 	;
00291 0148 	;
00840 0148 		include <MagEncoder.inc>
00001 0148 	;*****************************************************************************************
00002 0148 	;    Filename:      MagEncoder.inc
00003 0148 	;    Date:          8/11/2019
00004 0148 	;    File Version:  1.1.1
00005 0148 	;    
00006 0148 	;    Author:        David M. Flynn
00007 0148 	;    Company:       Oxford V.U.E., Inc.
00008 0148 	;    E-Mail:        dflynn@oxfordvue.com
00009 0148 	;    Web Site:      http://www.oxfordvue.com/
00010 0148 	;
00011 0148 	;*****************************************************************************************
00012 0148 	; Absolute Magnetic Encoder Reader
00013 0148 	; Written for the 16F1847 running at 32MHz
00014 0148 	; Add ReadEncoder to your main loop, must be call often enough so roll over/under
SerialServo.asm                                                       Page: 15
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00015 0148 	;  is seen.
00016 0148 	; If the last ReadEncoder saw zero then MagEnc_Index is set.
00017 0148 	; If a roll over/under was detected MagEnc_IndexLatch will be set, you must clear it
00018 0148 	;  before calling ReadEncoder again.
00019 0148 	; Works in any segment, requires no additional stack.
00020 0148 	;
00021 0148 	; uses AS5047D_Lib.inc
00022 0148 	;
00023 0148 	; Constants for 14 bit encoder:
00024 0148 003C 	kUpper4Bits	EQU	0x3C	;test >= 0x3C00 or < 0x0400
00025 0148 	; 
00026 0148 	; History:
00027 0148 	;   1.1.1   8/11/2019	Updated for 14bit encoder.
00028 0148 	;   1.1     3/23/2019	Changed to use AS5047D
00029 0148 	;   1.0.1   5/28/2017  Added Home routines.
00030 0148 	;   1.0.0   5/27/2017  First Code and it WORKS!
00031 0148 	;*****************************************************************************************
00032 0148 	; Routines:
00033 0148 	;
00034 0148 	; ReadEncoder	Add change from last read to EncoderAccum,
00035 0148 	;	 update MagEnc_Index and MagEnc_IndexLatch.
00036 0148 	; Home_Absolute        Home absolute, Set home as encoder zero.
00037 0148 	; Home_Here            Set Home as last read value.
00038 0148 	;*****************************************************************************************
00039 0148 	; Add the following to the Bank 0 variables.
00040 0148 	;	cblock		;Variables bank0
00041 0148 	;	EncoderAccum:3		;Accumulated distance
00042 0148 	;	EncoderVal:2		;Value last read, raw 12 bit data
00043 0148 	;	EncoderFlags                                  ;saved in eprom
00044 0148 	;                      EncoderHome:2                                 ;Absolute Home, saved in eprom
00045 0148 	;	endc
00046 0148 	;
00047 0148 0047 	#Define	MagEnc_HighZone	EncoderFlags,0	
00048 0148 0047 	#Define	MagEnc_LowZone	EncoderFlags,1
00049 0148 0047 	#Define	MagEnc_Index	EncoderFlags,2
00050 0148 0047 	#Define	MagEnc_IndexLatch	EncoderFlags,3	;set if zero is crossed or Encode value = zero
00051 0148 0047 	#Define                MagEnc_Homed           EncoderFlags,4
00052 0148 	;
00053 0148 	;=========================================
00054 0148 	; ReadEncoder
00055 0148 	; Entry: none
00056 0148 	; Exit: EncoderValue,EncoderAccum,EncoderFlags
00057 0148 	; Calls: none
00058 0148 	; Uses: Param76,Param77,Param78,Param79,Param7A FSR0
00059 0148 	;
00060 0148 2221 	ReadEncoder	call	AS5047_ReadPos
00061 0149 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00062 0149 	;
00063 0149 0020 		movlb	0	;bank0
00064 014A 	;
00065 014A 1870 		btfsc	ParityErrFlag
00066 014B 143F 		bsf	ssEncParityError
00067 014C 	;	return
00068 014C 	;
00069 014C 19F0 		btfsc	CmdErrorFlag
00070 014D 14BF 		bsf	ssEncCmdError
00071 014E 	;	return
00072 014E 	;	
00073 014E 	;
00074 014E 	;copy to temp Param77:Param76 = Enc Value, Param7A:Param79 = Old value
00075 014E 0878 		movf	Param78,W
00076 014F 00F6 		movwf	Param76
00077 0150 0879 		movf	Param79,W
00078 0151 00F7 		movwf	Param77
00079 0152 	;
00080 0152 0845 		movf	EncoderVal,W
00081 0153 00F9 		movwf	Param79                ;retain old value
00082 0154 0846 		movf	EncoderVal+1,W
00083 0155 00FA 		movwf	Param7A
00084 0156 	;
00085 0156 0876 		movf	Param76,W
00086 0157 00C5 		movwf	EncoderVal
00087 0158 0877 		movf	Param77,W
00088 0159 00C6 		movwf	EncoderVal+1
00089 015A 	;
00090 015A 	; handle overflow, goes from >0x3C00 to <0x0400
00091 015A 1C47 		btfss	MagEnc_HighZone
00092 015B 3205 		bra	ReadEncoder_1
00093 015C 303C 		movlw	kUpper4Bits
00094 015D 0577 		andwf	Param77,W
***** #106 Unprocessed Opcode SKPNZ *****
00095 015E 		SKPNZ		;Less than 4096?
00096 015E 1777 		bsf	Param77,6	; yes, set 15th bit, aka add 0x4000
00097 015F 15C7 		bsf	MagEnc_IndexLatch	;crossed zero
00098 0160 3209 		bra	ReadEncoder_2
00099 0161 	;
00100 0161 	; handle underflow, goes from <0x0400 to <=0x3C00
00101 0161 1CC7 	ReadEncoder_1	btfss	MagEnc_LowZone
00102 0162 3207 		bra	ReadEncoder_2
00103 0163 303C 		movlw	kUpper4Bits
00104 0164 0577 		andwf	Param77,W
00105 0165 3A3C 		xorlw	kUpper4Bits
***** #106 Unprocessed Opcode SKPZ *****
00106 0166 		SKPZ		;>=0x3C00?
00107 0166 3203 		bra	ReadEncoder_2	; No
00108 0167 	;Val = value - 0x4000
00109 0167 3040 		movlw	0x40
00110 0168 02F7 		subwf	Param77,F
00111 0169 15C7 		bsf	MagEnc_IndexLatch	;crossed zero
SerialServo.asm                                                       Page: 16
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00112 016A 	;
00113 016A 	; calculate new flag values
00114 016A 1147 	ReadEncoder_2	bcf	MagEnc_Index
00115 016B 0845 		movf	EncoderVal,W
00116 016C 0446 		iorwf	EncoderVal+1,W
***** #106 Unprocessed Opcode SKPNZ *****
00117 016D 		SKPNZ		;value is 0?
00118 016D 1547 		bsf	MagEnc_Index	; Yes
00119 016E 	;
00120 016E 1947 		btfsc	MagEnc_Index
00121 016F 15C7 		bsf	MagEnc_IndexLatch
00122 0170 	;
00123 0170 10C7 		bcf	MagEnc_LowZone
00124 0171 303C 		movlw	kUpper4Bits
00125 0172 0546 		andwf	EncoderVal+1,W
***** #106 Unprocessed Opcode SKPNZ *****
00126 0173 		SKPNZ		;Less than 0x0400?
00127 0173 14C7 		bsf	MagEnc_LowZone	; Yes
00128 0174 	;
00129 0174 1047 		bcf	MagEnc_HighZone
00130 0175 303C 		movlw	kUpper4Bits
00131 0176 0546 		andwf	EncoderVal+1,W	;2 high bits
00132 0177 3A3C 		xorlw	kUpper4Bits
***** #106 Unprocessed Opcode SKPNZ *****
00133 0178 		SKPNZ		;both bits set, >=0x3C00
00134 0178 1447 		bsf	MagEnc_HighZone	; yes
00135 0179 	;
00136 0179 	; calc change = new - old
00137 0179 0879 		movf	Param79,W	;old value
00138 017A 02F6 		subwf	Param76,F	;= new value - old value
00139 017B 087A 		movf	Param7A,W	;old value high byte
00140 017C 3BF7 		subwfb	Param77,F	;= new value - old value 
00141 017D 01F8 		clrf	Param78	;sign extend to 24 bits
00142 017E 30FF 		movlw	0xFF
00143 017F 1BF7 		btfsc	Param77,7	;sign bit set?
00144 0180 00F8 		movwf	Param78	; Yes
00145 0181 	;
00146 0181 	; add the change to the accumulated value
00147 0181 0876 		movf	Param76,W
00148 0182 07C2 		addwf	EncoderAccum,F
00149 0183 0877 		movf	Param77,W
00150 0184 3DC3 		addwfc	EncoderAccum+1,F
00151 0185 0878 		movf	Param78,W
00152 0186 3DC4 		addwfc	EncoderAccum+2,F
00153 0187 	;
00154 0187 0008 		return
00155 0188 	;
00156 0188 	;=========================================================================================
00157 0188 	; Home absolute, Set home as encoder HM absolute.
00158 0188 	; Call ReadEncoder once first.
00159 0188 	; Entry: HM = Absolute Home, EncoderVal = Current Position Absolute,
00160 0188 	;        kMaxT = ±Max travel from HM,
00161 0188 	;        EncoderAccum = 0 = Current Position Incremental
00162 0188 	; Exit: EncoderAccum = Current Position Relitive
00163 0188 	;
00164 0188 	; The Math:
00165 0188 	;  ' tests for Current Position > HM
00166 0188 	;  if HM + kMaxT >= 4096 then 'Dual zone
00167 0188 	;    if EncoderVal > HM then 
00168 0188 	;      'Current Position is positive between HM and 4096
00169 0188 	;      EncoderAccum = EncoderVal - HM
00170 0188 	;    elseif EncoderVal < ((HM + kMaxT) mod 4096) then 
00171 0188 	;      'Current Position is positive between 0 and HM + kMaxT
00172 0188 	;      EncoderAccum = EncoderVal + 4096 - HM
00173 0188 	;  else 'Single zone
00174 0188 	;    if EncoderVal > HM and EncoderVal <= HM + kMaxT then
00175 0188 	;      'Current Position is positive between HM and HM + kMAxT
00176 0188 	;      EncoderAccum = EncoderVal - HM
00177 0188 	;
00178 0188 	;  ' test for Current Position < HM
00179 0188 	;  if HM - kMaxT < 0 then 'Dual zone
00180 0188 	;    if (EncoderVal < HM) then
00181 0188 	;      'Current Position is between HM and 0
00182 0188 	;      EncoderAccum = EncoderVal - HM
00183 0188 	;    elseif (EncoderVal > 8192 - HM - kMaxT) then
00184 0188 	;      'Current Position is between 0 and HM - kMaxT
00185 0188 	;      EncoderAccum = EncoderVal - 4096 - HM
00186 0188 	;  else 'Single zone
00187 0188 	;    if EncoderVal < HM and EncoderVal > HM - kMaxT then
00188 0188 	;      'Current Position is between HM and HM - kMaxT
00189 0188 	;      EncoderAccum = EncoderVal - HM
00190 0188 	;      
00191 0188 	;
00192 0188 076C 	kMaxT                  EQU                    .1900                  ;Less than a half turn
00193 0188 	;
00194 0188 21F2 	Home_Absolute	call                   Home_Here
00195 0189 1E47 	                       btfss                  MagEnc_Homed           ;First boot?
00196 018A 324D 	                       bra                    SaveHomePos            ; Yes
00197 018B 	;
00198 018B 	;  ' tests for Current Position > HM
00199 018B 	;if HM + kMaxT >= 4096 then 'Dual zone
00200 018B 306C 	                       movlw                  low kMaxT
00201 018C 0748 	                       addwf                  EncoderHome,W
00202 018D 00F8 	                       movwf                  Param78
00203 018E 3007 	                       movlw                  high kMaxT
00204 018F 3D49 	                       addwfc                 EncoderHome+1,W
00205 0190 00F9 	                       movwf                  Param79
00206 0191 39F0 	                       andlw                  0xF0
***** #106 Unprocessed Opcode SKPNZ *****
SerialServo.asm                                                       Page: 17
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00207 0192 	                       SKPNZ
00208 0192 3207 	                       bra                    Home_Absolute_1
00209 0193 	;    if EncoderVal > HM then 
00210 0193 	;      'Current Position is positive between HM and 4096
00211 0193 	;      EncoderAccum = EncoderVal - HM
00212 0193 0845 	                       movf                   EncoderVal,W
00213 0194 0248 	                       subwf                  EncoderHome,W
00214 0195 0846 	                       movf                   EncoderVal+1,W
00215 0196 3B49 	                       subwfb                 EncoderHome+1,W
00216 0197 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > HM?
00217 0198 324E 	                       bra                    HA_SetIt               ; Yes
00218 0199 320C 	                       bra                    Home_Absolute_2
00219 019A 	;        
00220 019A 	;  else 'Single zone
00221 019A 	;    if EncoderVal > HM and EncoderVal < HM + kMaxT then
00222 019A 	;      'Current Position is positive between HM and HM + kMAxT
00223 019A 	;      EncoderAccum = EncoderVal - HM
00224 019A 0848 	Home_Absolute_1        movf                   EncoderHome,W
00225 019B 0245 	                       subwf                  EncoderVal,W
00226 019C 0849 	                       movf                   EncoderHome+1,W
00227 019D 3B46 	                       subwfb                 EncoderVal+1,W
00228 019E 1F89 	                       btfss                  WREG,7
00229 019F 3206 	                       bra                    Home_Absolute_2
00230 01A0 0878 	                       movf                   Param78,W              ;HM + kMaxT
00231 01A1 0245 	                       subwf                  EncoderVal,W
00232 01A2 0879 	                       movf                   Param79,W
00233 01A3 3B46 	                       subwfb                 EncoderVal+1,W
00234 01A4 1B89 	                       btfsc                  WREG,7                 ;EncoderVal < HM + kMaxT?
00235 01A5 3241 	                       bra                    HA_SetIt               ; Yes
00236 01A6 	;
00237 01A6 	;  ' test for Current Position < HM
00238 01A6 	;  if HM - kMaxT < 0 then 'Dual zone
00239 01A6 306C 	Home_Absolute_2        movlw                  low kMaxT
00240 01A7 0248 	                       subwf                  EncoderHome,W
00241 01A8 3007 	                       movlw                  high kMaxT
00242 01A9 3B49 	                       subwfb                 EncoderHome+1,W
00243 01AA 1F89 	                       btfss                  WREG,7                 ;HM - kMaxT < 0?
00244 01AB 3219 	                       bra                    Home_Absolute_3        ; No, not dual zone
00245 01AC 	;    if (EncoderVal < HM) then
00246 01AC 	;      'Current Position is between HM and 0
00247 01AC 	;      EncoderAccum = EncoderVal - HM
00248 01AC 0848 	                       movf                   EncoderHome,W
00249 01AD 0245 	                       subwf                  EncoderVal,W
00250 01AE 0849 	                       movf                   EncoderHome+1,W
00251 01AF 3B46 	                       subwfb                 EncoderVal+1,W
00252 01B0 1B89 	                       btfsc                  WREG,7                 ;EncoderVal < HM?
00253 01B1 3235 	                       bra                    HA_SetIt               ; Yes
00254 01B2 	;    elseif (EncoderVal > 8192 - HM - kMaxT) then
00255 01B2 	;      'Current Position is between 0 and HM - kMaxT
00256 01B2 	;      EncoderAccum = EncoderVal - 4096 - HM
00257 01B2 3000 	                       movlw                  low .8192              ;Param78:Param79 = .8192
00258 01B3 00F8 	                       movwf                  Param78
00259 01B4 3020 	                       movlw                  high .8192
00260 01B5 00F9 	                       movwf                  Param79
00261 01B6 0848 	                       movf                   EncoderHome,W          ;Param78:Param79 -= EncoderHome
00262 01B7 02F8 	                       subwf                  Param78,F
00263 01B8 0849 	                       movf                   EncoderHome+1,W
00264 01B9 3BF9 	                       subwfb                 Param79,F
00265 01BA 306C 	                       movlw                  low kMaxT              ;Param78:Param79 -= kMaxT
00266 01BB 02F8 	                       subwf                  Param78,F
00267 01BC 3007 	                       movlw                  high kMaxT
00268 01BD 3BF9 	                       subwfb                 Param79,F
00269 01BE 0845 	                       movf                   EncoderVal,W 
00270 01BF 0278 	                       subwf                  Param78,W
00271 01C0 0846 	                       movf                   EncoderVal+1,W
00272 01C1 3B79 	                       subwfb                 Param79,W
00273 01C2 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > Param78:Param79?
00274 01C3 3221 	                       bra                    HA_SetItNeg            ; Yes
00275 01C4 0008 	                       return                                        ; No, not in this zone
00276 01C5 	;
00277 01C5 	;  else 'Single zone
00278 01C5 	;    if EncoderVal < HM and EncoderVal > HM - kMaxT then
00279 01C5 	;      'Current Position is between HM and HM - kMaxT
00280 01C5 	;      EncoderAccum = EncoderVal - HM
00281 01C5 0848 	Home_Absolute_3        movf                   EncoderHome,W
00282 01C6 0245 	                       subwf                  EncoderVal,W
00283 01C7 0849 	                       movf                   EncoderHome+1,W
00284 01C8 3B46 	                       subwfb                 EncoderVal+1,W
00285 01C9 1F89 	                       btfss                  WREG,7                 ;EncoderVal < HM?
00286 01CA 0008 	                       return                                        ; No
00287 01CB 306C 	                       movlw                  low kMaxT              ;Param78:Param79 = EncoderHome - kMaxT
00288 01CC 0248 	                       subwf                  EncoderHome,W
00289 01CD 00F8 	                       movwf                  Param78
00290 01CE 3007 	                       movlw                  high kMaxT
00291 01CF 3B49 	                       subwfb                 EncoderHome+1,W
00292 01D0 00F9 	                       movwf                  Param79
00293 01D1 0845 	                       movf                   EncoderVal,W
00294 01D2 0278 	                       subwf                  Param78,W
00295 01D3 0846 	                       movf                   EncoderVal+1,W
00296 01D4 3B79 	                       subwfb                 Param79,W
00297 01D5 1B89 	                       btfsc                  WREG,7                 ;EncoderVal > HM - kMaxT?
00298 01D6 3210 	                       bra                    HA_SetIt               ; Yes
00299 01D7 0008 	                       return                                        ; No, must be zero
00300 01D8 	;
00301 01D8 	;======================
00302 01D8 1647 	SaveHomePos            bsf                    MagEnc_Homed
00303 01D9 0845 	                       movf                   EncoderVal,W
00304 01DA 00C8 	                       movwf                  EncoderHome
00305 01DB 0846 	                       movf                   EncoderVal+1,W
SerialServo.asm                                                       Page: 18
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00306 01DC 00C9 	                       movwf                  EncoderHome+1
00307 01DD 	                       mCall1To0              SaveParams
00307 01DD 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00307 01DE 20EA      M		CALL	SaveParams		CALL	Destination
00307 01DF 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00307 01E0 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00308 01E1 0008 	                       return
00309 01E2 	;======================
00310 01E2 	;EncoderAccum = EncoderVal + 4096 - HM
00311 01E2 	;                      movlw                  low .4096
00312 01E2 	;                      addwf                  EncoderVal,F
00313 01E2 3010 	HA_SetItPos            movlw                  high .4096
00314 01E3 3DC6 	                       addwfc                 EncoderVal+1,F
00315 01E4 3202 	                       bra                    HA_SetIt
00316 01E5 	;======================
00317 01E5 	;EncoderAccum = EncoderVal - 4096 - HM
00318 01E5 	;                      movlw                  low .4096
00319 01E5 	;                      subwf                  EncoderVal,F
00320 01E5 3010 	HA_SetItNeg            movlw                  high .4096
00321 01E6 3BC6 	                       subwfb                 EncoderVal+1,F
00322 01E7 	;======================
00323 01E7 	;EncoderAccum = EncoderVal - HM
00324 01E7 0848 	HA_SetIt               movf                   EncoderHome,W
00325 01E8 0245 	                       subwf                  EncoderVal,W
00326 01E9 00C2 	                       movwf                  EncoderAccum
00327 01EA 0849 	                       movf                   EncoderHome+1,W
00328 01EB 3B46 	                       subwfb                 EncoderVal+1,W
00329 01EC 00C3 	                       movwf                  EncoderAccum+1
00330 01ED 30FF 	                       movlw                  0xFF
00331 01EE 1FC3 	                       btfss                  EncoderAccum+1,7
00332 01EF 3000 	                       movlw                  0x00
00333 01F0 00C4 	                       movwf                  EncoderAccum+2
00334 01F1 0008 	                       return
00335 01F2 	;
00336 01F2 	;                       
00337 01F2 	;=========================================================================================
00338 01F2 	; Set Home as last read value
00339 01F2 	; Call ReadEncoder once first.
00340 01F2 	;
00341 01F2 0020 	Home_Here              movlb                  0
00342 01F3 01C2 	                       clrf                   EncoderAccum
00343 01F4 01C3 	                       clrf                   EncoderAccum+1
00344 01F5 01C4 	                       clrf                   EncoderAccum+2
00345 01F6 0008 	                       return
00346 01F7 	;
00347 01F7 	;=========================================================================================
00348 01F7 	;=========================================================================================
00349 01F7 		
00350 01F7 		
00351 01F7 		
00352 01F7 		
00353 01F7 		
00354 01F7 		
00355 01F7 		
00356 01F7 		
00357 01F7 		
00358 01F7 		
00359 01F7 		
00360 01F7 		
00361 01F7 		
00362 01F7 		
00363 01F7 		
00364 01F7 		
00365 01F7 		
00366 01F7 		
00367 01F7 		
00368 01F7 		
00841 01F7 		include <AS5047D_Lib.inc>
00001 01F7 	;******************************************************************
00002 01F7 	; AS5047D Library for PIC16F1847
00003 01F7 	; Filename: AS5047D_Lib.inc
00004 01F7 	; Created: 1/12/2019
00005 01F7 	; Revision: 1.0d1 1/12/2019
00006 01F7 	;******************************************************************
00007 01F7 	; History:
00008 01F7 	;   1.0d1 1/12/2019	First Code
00009 01F7 	;******************************************************************
00010 01F7 	; Notes:
00011 01F7 	; SPI I/O for AS5047D Magnetic Shaft Angle Encoder.
00012 01F7 	; CKP=0, CKE=1, SMP=1
00013 01F7 	; RB0	SPI CSn
00014 01F7 	; RA6	SPI MOSI  aka SDO1
00015 01F7 	; RB1	SPI MISO  aka SDI1
00016 01F7 	; RB4	SPI CLK
00017 01F7 	;
00018 01F7 	;******************************************************************
00019 01F7 	; Rotines:	(Stack Words Used)
00020 01F7 	; Init_AS5047D	(0) Call once to setup SSP1
00021 01F7 	;
00022 01F7 	; AS5047D_WrtZPOSM	(1) call AS5047_Write with AS5047_ZPOSM and Prog_AS5047_ZPOSM
00023 01F7 	; AS5047D_WrtZPOSL	(1) call AS5047_Write with AS5047_ZPOSL and Prog_AS5047_ZPOSL
00024 01F7 	; AS5047D_WrtSettings2 (1) call AS5047_Write with AS5047_Settings2 and Prog_AS5047_Settings2
00025 01F7 	; AS5047D_WrtSettings1 (1) call AS5047_Write with AS5047_Settings1 and Prog_AS5047_Settings1
00026 01F7 	;
00027 01F7 	; AS5047_Write	(1) Write data to AS5047D
00028 01F7 	; AS5047_ReadPos	(1) AS5047_ANGLECOM >> SPI_SendRecWord
00029 01F7 	; AS5047_ReadANGLEUNCReg (1) AS5047_ANGLEUNC >> AS5047_Read
00030 01F7 	; AS5047_ReadDIAAGCReg (1) AS5047_DIAAGCReg >> AS5047_Read
00031 01F7 	; AS5047_ReadZPOSMReg	(1) AS5047_ZPOSM >> AS5047_Read
SerialServo.asm                                                       Page: 19
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00032 01F7 	; AS5047_ReadZPOSLReg  (1) AS5047_ZPOSL >> AS5047_Read
00033 01F7 	; AS5047_ReadStgs1Reg	(1) AS5047_Settings1 >> AS5047_Read
00034 01F7 	; AS5047_ReadStgs2Reg	(1) AS5047_Settings2 >> AS5047_Read
00035 01F7 	; AS5047_ReadErrorReg  (1) AS5047_ErrReg >> AS5047_Read
00036 01F7 	; AS5047_Read	(1) Send a read command + NOP, returns data
00037 01F7 	; SPI_SendRecWord	(0) Send Param79:Param78, Receive Param79:Param78
00038 01F7 	;
00039 01F7 	; CalcParity	(0) Param79:Param78 = Parity Bit + 15 bit word
00040 01F7 	; CheckParity	(0) Param79:Param78 = unchanged, ParityErrFlag
00041 01F7 	;******************************************************************
00042 01F7 	;
00043 01F7 		ifndef kStandAlone
00045 01F7 		endif
00046 01F7 	;
00047 01F7 	; Bank 0 persistant variables used by stand alone version
00048 01F7 	;	Prog_AS5047_ZPOSM:2
00049 01F7 	;	Prog_AS5047_ZPOSL:2
00050 01F7 	;	Prog_AS5047_Settings2:2
00051 01F7 	;	Prog_AS5047_Settings1:2
00052 01F7 	;
00053 01F7 8000 	AS5047_ParityBit	EQU	0x8000	;P
00054 01F7 4000 	AS5047_ReadBit	EQU	0x4000	; R
00055 01F7 C000 	AS5047_NOP	EQU	0xC000	;PR+0x0000
00056 01F7 	; Volatile Registers
00057 01F7 0001 	AS5047_ErrReg	EQU	0x0001	; R+0x0001
00058 01F7 0003 	AS5047_ProgReg	EQU	0x0003
00059 01F7 3FFC 	AS5047_DIAAGCReg	EQU	0x3FFC
00060 01F7 3FFD 	AS5047_MAGReg	EQU	0x3FFD
00061 01F7 7FFE 	AS5047_ANGLEUNC	EQU	0x3FFE+AS5047_ReadBit
00062 01F7 7FFF 	AS5047_ANGLECOM	EQU	0x3FFF+AS5047_ReadBit
00063 01F7 	; Non-Volatile Registers
00064 01F7 0016 	AS5047_ZPOSM	EQU	0x0016
00065 01F7 0017 	AS5047_ZPOSL	EQU	0x0017
00066 01F7 0018 	AS5047_Settings1	EQU	0x0018
00067 01F7 0019 	AS5047_Settings2	EQU	0x0019
00068 01F7 	;
00069 01F7 	; ***** Add to global declarations ****
00070 01F7 	;AS5047D_Flags	EQU	Param70	;Check that Param70 is OK to use
00071 01F7 	;
00072 01F7 	;#Define	ParityErrFlag	AS5047D_Flags,0
00073 01F7 	;#Define	AngleReadFlag	AS5047D_Flags,1
00074 01F7 	;#define	ContinueReadFlag	AS5047D_Flags,2
00075 01F7 	;#Define	CmdErrorFlag	AS5047D_Flags,3
00076 01F7 	;
00077 01F7 	;Diagnostics register bits
00078 01F7 0003 	MagFldLowErrBit	EQU	3
00079 01F7 0002 	MagFldHighErrBit	EQU	2
00080 01F7 	;
00081 01F7 	;******************************************************************
00082 01F7 	; Initialize the MSSP
00083 01F7 	; *SPI: CKP=0 Clock Idle is Low State,
00084 01F7 	; SPI: CKE=1 Transmit occurs on transition from active to Idle clock state
00085 01F7 	; *SPI: CKE=0 Transmit occurs on transition from Idle to active clock state
00086 01F7 	; *SPI: SMP=1 Input data sampled at end of data output time
00087 01F7 	; SPI master clock=Fosc/64
00088 01F7 	;
00089 01F7 0022 	SSP1CON1_Val	EQU	b'00100010'	;SSPEN=1, SPI Fosc/64
00090 01F7 010D 	#Define	SPI_CSn	LATB,0
00091 01F7 008D 	#Define	SPI_CSn_Tris	TRISB,0
00092 01F7 008C 	#Define	SPI_MOSI_Tris	TRISA,6
00093 01F7 008D 	#Define	SPI_MISO_Tris	TRISB,1
00094 01F7 008D 	#Define	SPI_CLK_Tris	TRISB,4
00095 01F7 	;
00096 01F7 0022 	Init_AS5047D	movlb	2	;bank 2
00097 01F8 140D 		bsf	SPI_CSn	;inactive
00098 01F9 	;
00099 01F9 0021 		movlb	1	;bank 1
00100 01FA 100D 		bcf	SPI_CSn_Tris	;output
00101 01FB 148D 		bsf	SPI_MISO_Tris	;input
00102 01FC 130C 		bcf	SPI_MOSI_Tris	;output
00103 01FD 120D 		bcf	SPI_CLK_Tris	;output
00104 01FE 	;
00105 01FE 0024 		movlb	4	;bank 4
00106 01FF 3022 		movlw	SSP1CON1_Val
00107 0200 0095 		movwf	SSP1CON1
00108 0201 1794 		bsf	SSP1STAT,SMP
00109 0202 	;	bsf	SSP1STAT,CKE	;CKE=1
00110 0202 1314 		bcf	SSP1STAT,CKE	;CKE=1
00111 0203 	;
00112 0203 	;	BANKSEL	PEI1
00113 0203 	;	bsf	PIE1,SSP1	;enable interupt
00114 0203 0020 		movlb	0	;bank 0
00115 0204 0008 		return
00116 0205 	;
00117 0205 		if kStandAlone
00194 0205 		endif
00195 0205 	;*******************************************************************
00196 0205 	; Write data to AS5047D
00197 0205 	;  Write address, dicard dummy data
00198 0205 	;  Write data, save old data
00199 0205 	;  Send NOP, save new data
00200 0205 	;
00201 0205 	; Entry: Param79:Param78 = Address, Param7B:Param7A = Data
00202 0205 	; Exit: Param79:Param78 = Data read back 14 bit value, ParityErrFlag, CmdErrorFlag,
00203 0205 	;   Param7B:Param7A = old data 16 bits including error and parity bits
00204 0205 	; RAM Used: Param76..Param7A
00205 0205 	; Calls:CalcParity, SPI_SendRecWord
00206 0205 	;
00207 0205 10F0 	AS5047_Write	bcf	AngleReadFlag
SerialServo.asm                                                       Page: 20
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00208 0206 1170 		bcf	ContinueReadFlag
00209 0207 	;
00210 0207 1379 		bcf	Param79,6	;Write Address, dicard dummy data
00211 0208 227D 		call	CalcParity
00212 0209 2268 		call	SPI_SendRecWord	;ignore rec'd word
00213 020A 	;
00214 020A 087B 		movf	Param7B,W	;Send data
00215 020B 00F9 		movwf	Param79
00216 020C 087A 		movf	Param7A,W
00217 020D 00F8 		movwf	Param78
00218 020E 1379 		bcf	Param79,6	;Write data, save old value
00219 020F 227D 		call	CalcParity
00220 0210 2268 		call	SPI_SendRecWord
00221 0211 0879 		movf	Param79,W	;store old data
00222 0212 00FB 		movwf	Param7B
00223 0213 0878 		movf	Param78,W
00224 0214 00FA 		movwf	Param7A
00225 0215 	;
00226 0215 3000 		movlw	low AS5047_NOP	;send NOP, save data for verify
00227 0216 00F8 		movwf	Param78
00228 0217 30C0 		movlw	high AS5047_NOP
00229 0218 00F9 		movwf	Param79
00230 0219 2268 		call	SPI_SendRecWord
00231 021A 2290 		call	CheckParity	;set ParityErrFlag
00232 021B 11F0 		bcf	CmdErrorFlag
00233 021C 1B79 		btfsc	Param79,6	;Cmd Error?
00234 021D 15F0 		bsf	CmdErrorFlag
00235 021E 303F 		movlw	0x3F
00236 021F 05F9 		andwf	Param79,F
00237 0220 0008 		return
00238 0221 	;
00239 0221 	;*******************************************************************
00240 0221 	; Read the compensated position
00241 0221 	;
00242 0221 	; Entry: none
00243 0221 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00244 0221 	; RAM Used: Param76, Param77, Param78, Param79
00245 0221 	; Calls: SPI_SendRecWord, CheckParity
00246 0221 	;
00247 0221 30FF 	AS5047_ReadPos	movlw	low AS5047_ANGLECOM
00248 0222 00F8 		movwf	Param78
00249 0223 307F 		movlw	high AS5047_ANGLECOM
00250 0224 00F9 		movwf	Param79
00251 0225 	;
00252 0225 227D 		call	CalcParity
00253 0226 2268 		call	SPI_SendRecWord
00254 0227 	;
00255 0227 2290 		call	CheckParity
00256 0228 11F0 		bcf	CmdErrorFlag
00257 0229 1B79 		btfsc	Param79,6	;Cmd Error?
00258 022A 15F0 		bsf	CmdErrorFlag
00259 022B 303F 		movlw	0x3F
00260 022C 05F9 		andwf	Param79,F
00261 022D 	;
00262 022D 	; if (!ContinueReadFlag || !AngleReadFlag) then ignore data and read again
00263 022D 1D70 		btfss	ContinueReadFlag
00264 022E 3203 		bra	AS5047_ReadPos_1
00265 022F 1CF0 		btfss	AngleReadFlag
00266 0230 3201 		bra	AS5047_ReadPos_1
00267 0231 0008 		return
00268 0232 	;
00269 0232 1570 	AS5047_ReadPos_1	bsf	ContinueReadFlag
00270 0233 14F0 		bsf	AngleReadFlag
00271 0234 33EC 		bra	AS5047_ReadPos	;one more time
00272 0235 	;
00273 0235 	;*******************************************************************
00274 0235 	; Read the Angle Uncompensated Register
00275 0235 	;
00276 0235 	; Entry: none
00277 0235 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00278 0235 	; RAM Used: Param76, Param77, Param78, Param79
00279 0235 	; calls: AS5047_Read
00280 0235 	;
00281 0235 30FE 	AS5047_ReadANGLEUNCReg	movlw	low AS5047_ANGLEUNC
00282 0236 00F8 		movwf	Param78
00283 0237 307F 		movlw	high AS5047_ANGLEUNC
00284 0238 00F9 		movwf	Param79
00285 0239 2A57 		goto	AS5047_ReadReg
00286 023A 	;
00287 023A 	;*******************************************************************
00288 023A 	; Read the Diagnostics Register
00289 023A 	;
00290 023A 	; Entry: none
00291 023A 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00292 023A 	; RAM Used: Param76, Param77, Param78, Param79
00293 023A 	; calls: AS5047_Read
00294 023A 	;
00295 023A 30FC 	AS5047_ReadDIAAGCReg	movlw	low AS5047_DIAAGCReg
00296 023B 00F8 		movwf	Param78
00297 023C 303F 		movlw	high AS5047_DIAAGCReg
00298 023D 00F9 		movwf	Param79
00299 023E 2A57 		goto	AS5047_ReadReg
00300 023F 	;
00301 023F 	;*******************************************************************
00302 023F 	; Read the Zero position MSB Register
00303 023F 	;
00304 023F 	; Entry: none
00305 023F 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00306 023F 	; RAM Used: Param76, Param77, Param78, Param79
SerialServo.asm                                                       Page: 21
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00307 023F 	; calls: AS5047_Read
00308 023F 	;
00309 023F 3016 	AS5047_ReadZPOSMReg	movlw	low AS5047_ZPOSM
00310 0240 00F8 		movwf	Param78
00311 0241 3000 		movlw	high AS5047_ZPOSM
00312 0242 00F9 		movwf	Param79
00313 0243 2A57 		goto	AS5047_ReadReg
00314 0244 	;
00315 0244 	;*******************************************************************
00316 0244 	; Read the Zero position LSB Register
00317 0244 	;
00318 0244 	; Entry: none
00319 0244 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00320 0244 	; RAM Used: Param76, Param77, Param78, Param79
00321 0244 	; calls: AS5047_Read
00322 0244 	;
00323 0244 3017 	AS5047_ReadZPOSLReg	movlw	low AS5047_ZPOSL
00324 0245 00F8 		movwf	Param78
00325 0246 3000 		movlw	high AS5047_ZPOSL
00326 0247 00F9 		movwf	Param79
00327 0248 2A57 		goto	AS5047_ReadReg
00328 0249 	;
00329 0249 	;*******************************************************************
00330 0249 	; Read the Settings1 Register
00331 0249 	;
00332 0249 	; Entry: none
00333 0249 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00334 0249 	; RAM Used: Param76, Param77, Param78, Param79
00335 0249 	; calls: AS5047_Read
00336 0249 	;
00337 0249 3018 	AS5047_ReadStgs1Reg	movlw	low AS5047_Settings1
00338 024A 00F8 		movwf	Param78
00339 024B 3000 		movlw	high AS5047_Settings1
00340 024C 00F9 		movwf	Param79
00341 024D 2A57 		goto	AS5047_ReadReg
00342 024E 	;
00343 024E 	;*******************************************************************
00344 024E 	; Read the Settings2 Register
00345 024E 	;
00346 024E 	; Entry: none
00347 024E 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00348 024E 	; RAM Used: Param76, Param77, Param78, Param79
00349 024E 	; calls: AS5047_Read
00350 024E 	;
00351 024E 3019 	AS5047_ReadStgs2Reg	movlw	low AS5047_Settings2
00352 024F 00F8 		movwf	Param78
00353 0250 3000 		movlw	high AS5047_Settings2
00354 0251 00F9 		movwf	Param79
00355 0252 2A57 		goto	AS5047_ReadReg
00356 0253 	;
00357 0253 	;*******************************************************************
00358 0253 	; Read the Error Register
00359 0253 	;
00360 0253 	; Entry: none
00361 0253 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00362 0253 	; RAM Used: Param76, Param77, Param78, Param79
00363 0253 	; calls: AS5047_Read
00364 0253 	;
00365 0253 3001 	AS5047_ReadErrorReg	movlw	low AS5047_ErrReg
00366 0254 00F8 		movwf	Param78
00367 0255 3000 		movlw	high AS5047_ErrReg
00368 0256 00F9 		movwf	Param79
00369 0257 	;
00370 0257 	; fall through to AS5047_ReadReg
00371 0257 	;*******************************************************************
00372 0257 	; Read any Register
00373 0257 	;
00374 0257 	; Entry: Param79:Param78 = 14 bit address to read
00375 0257 	; Exit: Param79:Param78 = 14 bit value, ParityErrFlag, CmdErrorFlag
00376 0257 	; RAM Used: Param76, Param77, Param78, Param79
00377 0257 	; calls: AS5047_Read
00378 0257 	;
00379 0257 225F 	AS5047_ReadReg	call	AS5047_Read
00380 0258 	;
00381 0258 2290 		call	CheckParity
00382 0259 11F0 		bcf	CmdErrorFlag
00383 025A 1B79 		btfsc	Param79,6	;Cmd Error?
00384 025B 15F0 		bsf	CmdErrorFlag
00385 025C 303F 		movlw	0x3F
00386 025D 05F9 		andwf	Param79,F
00387 025E 0008 		return
00388 025F 	;
00389 025F 	;*******************************************************************
00390 025F 	; Read Data
00391 025F 	;  Send a read command, dicards dummy data
00392 025F 	;  Send NOP, returns data
00393 025F 	;
00394 025F 	; Entry: Param79:Param78 = 14 bit Address
00395 025F 	; Exit: Param79:Param78 = Parity+EF+data
00396 025F 	; RAM Used: Param76,Param77,Param78, Param79
00397 025F 	; Calls: CalcParity,SPI_SendRecWord
00398 025F 	;
00399 025F 1170 	AS5047_Read	bcf	ContinueReadFlag
00400 0260 10F0 		bcf	AngleReadFlag
00401 0261 	;
00402 0261 1779 		bsf	Param79,6	;read bit
00403 0262 227D 		call	CalcParity
00404 0263 2268 		call	SPI_SendRecWord
00405 0264 3000 		movlw	low AS5047_NOP
SerialServo.asm                                                       Page: 22
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00406 0265 00F8 		movwf	Param78
00407 0266 30C0 		movlw	high AS5047_NOP
00408 0267 00F9 		movwf	Param79
00409 0268 	;
00410 0268 	; fall through to SPI_SendRecWord
00411 0268 	;*******************************************************************
00412 0268 	; Send and Receive
00413 0268 	;
00414 0268 	; Entry: Param79:Param78 = word to send
00415 0268 	; Exit: Param79:Param78 = word received
00416 0268 	; RAM Used: Param78, Param79
00417 0268 	; Calls: none
00418 0268 	;
00419 0268 0022 	SPI_SendRecWord	movlb	2	;bank 2
00420 0269 100D 		bcf	SPI_CSn	;assert chip select
00421 026A 0024 		movlb	4	;bank 4
00422 026B 0879 		movf	Param79,W
00423 026C 0091 		movwf	SSP1BUF
00424 026D 0000 	SPI_SendRecWord_L1	nop
00425 026E 1C14 		btfss	SSP1STAT,BF
00426 026F 33FD 		bra	SPI_SendRecWord_L1
00427 0270 0811 		movf	SSP1BUF,W
00428 0271 00F9 		movwf	Param79
00429 0272 	;
00430 0272 0878 		movf	Param78,W
00431 0273 0091 		movwf	SSP1BUF
00432 0274 0000 	SPI_SendRecWord_L2	nop
00433 0275 1C14 		btfss	SSP1STAT,BF
00434 0276 33FD 		bra	SPI_SendRecWord_L2
00435 0277 0811 		movf	SSP1BUF,W
00436 0278 00F8 		movwf	Param78
00437 0279 	;
00438 0279 0022 		movlb	2
00439 027A 140D 		bsf	SPI_CSn	;disable chip select
00440 027B 0020 		movlb	0	;bank 0
00441 027C 0008 		return
00442 027D 	;
00443 027D 	;*******************************************************************
00444 027D 	; Calculate Even Parity Bit for Param79:Param78
00445 027D 	;
00446 027D 	; Entry: Param79:Param78 = 15 bit word
00447 027D 	; Exit: Param79:Param78 = Parity Bit + 15 bit word
00448 027D 	; RAM Used: Param76,Param77,Param78,Param79
00449 027D 	; Calls: none
00450 027D 	;
00451 027D 01F6 	CalcParity	clrf	Param76
00452 027E 300F 		movlw	.15	;bit count
00453 027F 00F7 		movwf	Param77
00454 0280 0DF8 	CalcParity_L1	rlf	Param78,F
00455 0281 0DF9 		rlf	Param79,F
00456 0282 3080 		movlw	0x80
00457 0283 0579 		andwf	Param79,W
00458 0284 06F6 		xorwf	Param76,F
00459 0285 0BF7 		decfsz	Param77,F
00460 0286 33F9 		bra	CalcParity_L1
00461 0287 0DF8 		rlf	Param78,F
00462 0288 0DF9 		rlf	Param79,F	;LSb to _C
00463 0289 0DF8 		rlf	Param78,F	;_C to LSb
00464 028A 0DF9 		rlf	Param79,F
00465 028B 3080 		movlw	0x80
00466 028C 0576 		andwf	Param76,W	;get parity bit
00467 028D 13F9 		bcf	Param79,7	;force to 0 (default)
00468 028E 04F9 		iorwf	Param79,F	;set parity bit
00469 028F 0008 		return
00470 0290 	;
00471 0290 	;**********************************************************************
00472 0290 	; Check Even Parity Bit for Param79:Param78
00473 0290 	;
00474 0290 	; Entry: Param79:Param78 = Parity Bit + 15 bit word
00475 0290 	; Exit: Param79:Param78 = unchanged, ParityErrFlag
00476 0290 	; RAM Used: Param76,Param77,Param78,Param79
00477 0290 	; Calls: none
00478 0290 	;
00479 0290 01F6 	CheckParity	clrf	Param76
00480 0291 300F 		movlw	.15	;bit count
00481 0292 00F7 		movwf	Param77
00482 0293 0DF8 	CheckParity_L1	rlf	Param78,F
00483 0294 0DF9 		rlf	Param79,F
00484 0295 3080 		movlw	0x80
00485 0296 0579 		andwf	Param79,W
00486 0297 06F6 		xorwf	Param76,F
00487 0298 0BF7 		decfsz	Param77,F
00488 0299 33F9 		bra	CheckParity_L1
00489 029A 0DF8 		rlf	Param78,F
00490 029B 0DF9 		rlf	Param79,F	;LSb to _C
00491 029C 0DF8 		rlf	Param78,F	;_C to LSb
00492 029D 0DF9 		rlf	Param79,F
00493 029E 0876 		movf	Param76,W	;get calc'd parity bit
00494 029F 0679 		xorwf	Param79,W	;xor w/ parity bit
00495 02A0 3980 		andlw	0x80
00496 02A1 1070 		bcf	ParityErrFlag
00497 02A2 1B89 		btfsc	WREG,7
00498 02A3 1470 		bsf	ParityErrFlag
00499 02A4 0008 		return
00500 02A5 	;
00501 02A5 	;*************************************************************************
00502 02A5 	;*************************************************************************
00842 02A5 		include <SerBuff1938.inc>
00001 02A5 	;=========================================================================================
SerialServo.asm                                                       Page: 23
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00002 02A5 	;
00003 02A5 	;    Filename:      SerBuff.inc
00004 02A5 	;    Date:          5/24/2018                                    
00005 02A5 	;    File Version:  1.0.5
00006 02A5 	;
00007 02A5 	;    Author:        David M. Flynn
00008 02A5 	;    Company:       Oxford V.U.E., Inc.
00009 02A5 	;    E-Mail:        dflynn@oxfordvue.com
00010 02A5 	;
00011 02A5 	;=========================================================================================
00012 02A5 	;=========================================================================================
00013 02A5 	; Notes:
00014 02A5 	;
00015 02A5 	; History:
00016 02A5 	; 1.0.5    5/24/2018   Added GetSerInBytes.
00017 02A5 	; 1.0.4    5/23/2018	Added FlushInBuff.
00018 02A5 	; 1.0.3    12/15/2015	Optimized some code to be segment independent.
00019 02A5 	; 1.0.2    10/23/2015	Modified for 'F1938
00020 02A5 	; 1.0.1    12/6/2013	Modified for 'F1847
00021 02A5 	; 1.0      5/25/2008	First Rev'd version
00022 02A5 	;
00023 02A5 	;=========================================================================================
00024 02A5 	; Bank0 Variables:
00025 02A5 	;
00026 02A5 	;	cblock	0x20
00027 02A5 	;	TXByte		;Next byte to send
00028 02A5 	;	RXByte		;Last byte received
00029 02A5 	;	SerFlags
00030 02A5 	;	endc
00031 02A5 	;
00032 02A5 	;#Define	DataReceivedFlag	SerFlags,1
00033 02A5 	;#Define	DataSentFlag	SerFlags,2
00034 02A5 	;
00035 02A5 	; Bank2 Variables:
00036 02A5 	;#Define	Ser_Buff_Bank	2
00037 02A5 	;	cblock	0x120
00038 02A5 	;	Ser_In_Bytes		;Bytes in Ser_In_Buff
00039 02A5 	;	Ser_Out_Bytes		;Bytes in Ser_Out_Buff
00040 02A5 	;	Ser_In_InPtr
00041 02A5 	;	Ser_In_OutPtr
00042 02A5 	;	Ser_Out_InPtr
00043 02A5 	;	Ser_Out_OutPtr
00044 02A5 	;	Ser_In_Buff:20
00045 02A5 	;	Ser_Out_Buff:20
00046 02A5 	;	endc
00047 02A5 	;
00048 02A5 	;=========================================================================================
00049 02A5 	; Routines	(Bank In/Bank Out)
00050 02A5 	;
00051 02A5 	; TX_TheByte	(0+0) Send one byte to UART
00052 02A5 	; RX_TheByte	(0+0) Receive one byte from UART
00053 02A5 	; StoreSerIn	(X/0) Put the byte in W into the serial input buffer, FSR0
00054 02A5 	; GetSerIn	(X/0) Get a byte from the serial input buffer, FSR0
00055 02A5 	; FlushInBuff	(X/0) Flush the serial incoming buffer.
00056 02A5 	; GetSerInBytes	(X/0) Get the number of bytes in the serial input buffer
00057 02A5 	; GetSerOutBytes	(X/0) Get the number of bytes in the serial ouput buffer
00058 02A5 	; StoreSerOut	(X/0) Put the byte in W into the serial output buffer, FSR0
00059 02A5 	; POP_SerOut	(X/0) Remove the last char stored in the output buffer
00060 02A5 	; GetSerOut	(X/0) Get a byte from the serial Output buffer, FSR0
00061 02A5 	;	       W=Byte, Param78:0=ValidFlag
00062 02A5 	;=========================================================================================
00063 02A5 	;=========================================================================================
00064 02A5 	; *** Put in main loop ***
00065 02A5 	;
00066 02A5 	; Handle Serial Communications
00067 02A5 	;	BTFSC	PIR1,TXIF	;TX done?
00068 02A5 	;	CALL	TX_TheByte	; Yes
00069 02A5 	;
00070 02A5 	; move any serial data received into the 32 byte input buffer
00071 02A5 	;	BTFSS	DataReceivedFlag
00072 02A5 	;	BRA	ML_Ser_Out
00073 02A5 	;	MOVF	RXByte,W
00074 02A5 	;	BCF	DataReceivedFlag
00075 02A5 	;	CALL	StoreSerIn
00076 02A5 	;
00077 02A5 	;=========================================================================================
00078 02A5 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00079 02A5 	;
00080 02A5 	;ML_Ser_Out	BTFSS	DataSentFlag
00081 02A5 	;	BRA	ML_Ser_End
00082 02A5 	;	CALL	GetSerOut
00083 02A5 	;	BTFSS	Param78,0
00084 02A5 	;	BRA	ML_Ser_End
00085 02A5 	;	MOVWF	TXByte
00086 02A5 	;	BCF	DataSentFlag
00087 02A5 	;ML_Ser_End
00088 02A5 	;
00089 02A5 	;=========================================================================================
00090 02A5 	; *** Put in Init section ***
00091 02A5 	;BAUDCON_Value	EQU	b'00001000'
00092 02A5 	;TXSTA_Value	EQU	b'00100100'	;8 bit, TX enabled, Async, High speed
00093 02A5 	;RCSTA_Value	EQU	b'10010000'	;RX enabled, 8 bit, Continious receive
00094 02A5 	;; 8MHz clock low speed (BRGH=0,BRG16=1)
00095 02A5 	;;Baud_300	EQU	d'1666'	;0.299, -0.02%
00096 02A5 	;;Baud_1200	EQU	d'416'	;1.199, -0.08%
00097 02A5 	;;Baud_2400	EQU	d'207'	;2.404, +0.16%
00098 02A5 	;;Baud_9600	EQU	d'51'	;9.615, +0.16%
00099 02A5 	;; 8MHz clock high speed (BRGH=1,BRG16=1)
00100 02A5 	;Baud_300	EQU	d'6666'	;0.299, -0.02%
SerialServo.asm                                                       Page: 24
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00101 02A5 	;Baud_1200	EQU	d'1666'	;1.199, -0.08%
00102 02A5 	;Baud_2400	EQU	d'832'	;2.404, +0.16%
00103 02A5 	;Baud_9600	EQU	d'207'	;9.615, +0.16%
00104 02A5 	;Baud_19_2	EQU	d'103'	;19.23k, +0.16
00105 02A5 	;Baud_57_6	EQU	d'34'	;57.14k, -0.79
00106 02A5 	;BaudRate	EQU	Baud_9600
00107 02A5 	;-------------
00108 02A5 	;
00109 02A5 	; setup serial I/O
00110 02A5 	;	movlb	0x03	; bank 3
00111 02A5 	;	MOVLW	TXSTA_Value
00112 02A5 	;	MOVWF	TXSTA
00113 02A5 	;	MOVLW	low BaudRate
00114 02A5 	;	MOVWF	SPBRGL
00115 02A5 	;	MOVLW	high BaudRate
00116 02A5 	;	MOVWF	SPBRGH
00117 02A5 	;	MOVLW	RCSTA_Value
00118 02A5 	;	MOVWF	RCSTA
00119 02A5 	;
00120 02A5 	;	movlb	0x01	; bank 1
00121 02A5 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00122 02A5 	;	movlb	0x00	; bank 0
00123 02A5 	;	BSF	INTCON,PEIE	;Peripheral IRQ Enable
00124 02A5 	;	BSF	INTCON,GIE
00125 02A5 	;
00126 02A5 	;=========================================================================================
00127 02A5 	; *** Put in ISR ***
00128 02A5 	;-----------------------------------------------------------------------------------------
00129 02A5 	;AUSART Serial ISR
00130 02A5 	;
00131 02A5 	;IRQ_Ser	BTFSS	PIR1,RCIF	;RX has a byte?
00132 02A5 	;	BRA	IRQ_Ser_End
00133 02A5 	;	CALL	RX_TheByte
00134 02A5 	;
00135 02A5 	;IRQ_Ser_End
00136 02A5 	;
00137 02A5 	;=========================================================================================
00138 02A5 	; Send one byte
00139 02A5 	; Entry: Bank0
00140 02A5 	; Exit: Bank0
00141 02A5 	;
00142 02A5 	;
00143 02A5 1936 	TX_TheByte	BTFSC	DataSentFlag
00144 02A6 0008 		RETURN
00145 02A7 0834 		MOVF	TXByte,W	
00146 02A8 0023  a		MOVLB	TXREG	;banksel
00145 02A9 		BANKSEL	TXREG
00147 02A9 009A 		MOVWF	TXREG
00148 02AA 0020 		MOVLB	0
00149 02AB 1536 		BSF	DataSentFlag
00150 02AC 0008 		RETURN
00151 02AD 	;
00152 02AD 	;=========================================================================================
00153 02AD 	;
00154 02AD 	RX_TheByte:
00155 02AD 0023  a		MOVLB	RCSTA	;banksel
00154 02AE 		BANKSEL	RCSTA	; bank 3
00156 02AE 081D 		MOVF	RCSTA,W
00157 02AF 3906 		ANDLW	0x06
***** #106 Unprocessed Opcode SKPZ *****
00158 02B0 		SKPZ		;Frame or Overrun Err?
00159 02B0 3205 		BRA	RX_TheByte_Err	; yes
00160 02B1 0819 		MOVF	RCREG,W
00161 02B2 	;
00162 02B2 0020 		movlb	0x00	; bank 0
00163 02B3 00B5 		MOVWF	RXByte
00164 02B4 14B6 		BSF	DataReceivedFlag
00165 02B5 0008 		RETURN
00166 02B6 	;
00167 02B6 0819 	RX_TheByte_Err	MOVF	RCREG,W	;bad byte so drop it
00168 02B7 01B5 		CLRF	RXByte
00169 02B8 121D 		BCF	RCSTA,CREN
00170 02B9 111D 		BCF	RCSTA,FERR
00171 02BA 109D 		BCF	RCSTA,OERR
00172 02BB 161D 		BSF	RCSTA,CREN
00173 02BC 0020 		movlb	0x00
00174 02BD 0008 		RETURN
00175 02BE 	;
00176 02BE 	;=========================================================================================
00177 02BE 	;=========================================================================================
00178 02BE 	; Put the byte in W into the serial input buffer
00179 02BE 	;
00180 02BE 	; Entry: W = byte to store
00181 02BE 	; Exit: none
00182 02BE 	; Ram Used: Param78, FSR
00183 02BE 	;
00184 02BE 00F8 	StoreSerIn	MOVWF	Param78
00185 02BF 0022 		MOVLB	Ser_Buff_Bank
00186 02C0 0AA0 		INCF	Ser_In_Bytes,F
00187 02C1 	;	
00188 02C1 0822 		MOVF	Ser_In_InPtr,W
00189 02C2 391F 		ANDLW	0x1F
00190 02C3 0AA2 		INCF	Ser_In_InPtr,F
00191 02C4 3E26 		ADDLW	low Ser_In_Buff
00192 02C5 0084 		MOVWF	FSR0
00193 02C6 3001 		MOVLW	high Ser_In_Buff
00194 02C7 0085 		MOVWF	FSR0H
00195 02C8 0878 		MOVF	Param78,W
00196 02C9 0080 		MOVWF	INDF0
SerialServo.asm                                                       Page: 25
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00197 02CA 0020 		MOVLB	0x00
00198 02CB 0008 		RETURN
00199 02CC 	;
00200 02CC 	;=========================================================================================
00201 02CC 	; Get a byte from the serial input buffer
00202 02CC 	;
00203 02CC 	; Entry: none
00204 02CC 	; Exit: W=byte from buffer, Param78,0=valid
00205 02CC 	;
00206 02CC 0022 	GetSerIn	MOVLB	Ser_Buff_Bank
00207 02CD 1078 		BCF	Param78,0	;no data
00208 02CE 08A0 		MOVF	Ser_In_Bytes,F
***** #106 Unprocessed Opcode SKPNZ *****
00209 02CF 		SKPNZ
00210 02CF 320A 		bra	GetSerIn_End
00211 02D0 1478 		BSF	Param78,0
00212 02D1 03A0 		DECF	Ser_In_Bytes,F
00213 02D2 0823 		MOVF	Ser_In_OutPtr,W
00214 02D3 391F 		ANDLW	0x1F
00215 02D4 0AA3 		INCF	Ser_In_OutPtr,F
00216 02D5 3E26 		ADDLW	low Ser_In_Buff
00217 02D6 0084 		MOVWF	FSR0L
00218 02D7 3001 		MOVLW	high Ser_In_Buff
00219 02D8 0085 		MOVWF	FSR0H
00220 02D9 0800 		MOVF	INDF0,W
00221 02DA 0020 	GetSerIn_End	movlb	0
00222 02DB 0008 		return
00223 02DC 	;
00224 02DC 	;=========================================================================================
00225 02DC 	; Flush the serial incoming buffer
00226 02DC 	; Entry: none
00227 02DC 	; Exit: bank 0
00228 02DC 	;
00229 02DC 0022 	FlushInBuff	movlb	Ser_Buff_Bank
00230 02DD 01A0 		clrf	Ser_In_Bytes
00231 02DE 01A3 		clrf	Ser_In_OutPtr
00232 02DF 01A2 		clrf	Ser_In_InPtr
00233 02E0 0020 		movlb	0
00234 02E1 0008 		return
00235 02E2 	;
00236 02E2 	;=========================================================================================
00237 02E2 	; Get the number of bytes in the serial input buffer
00238 02E2 	;
00239 02E2 	; Entry: none
00240 02E2 	; Exit: W=bytes in buffer, Z
00241 02E2 	;
00242 02E2 0022 	GetSerInBytes	MOVLB	Ser_Buff_Bank
00243 02E3 0820 		MOVF	Ser_In_Bytes,W
00244 02E4 0020 		movlb	0
00245 02E5 0008 		return
00246 02E6 	;
00247 02E6 	;=========================================================================================
00248 02E6 	; Get the number of bytes in the serial ouput buffer
00249 02E6 	;
00250 02E6 	; Entry: none
00251 02E6 	; Exit: W=bytes in buffer, Z
00252 02E6 	;
00253 02E6 0022 	GetSerOutBytes	MOVLB	Ser_Buff_Bank
00254 02E7 0821 		MOVF	Ser_Out_Bytes,W
00255 02E8 0020 		movlb	0
00256 02E9 0008 		return
00257 02EA 	;
00258 02EA 	;=========================================================================================
00259 02EA 	; Put the byte in W into the serial output buffer
00260 02EA 	;
00261 02EA 	; Entry: W = byte to store
00262 02EA 	; Exit: Param78 & W = byte stored, Bank 0
00263 02EA 	; Ram used: Param78, FSR0
00264 02EA 	; Calls: (0) none
00265 02EA 	;
00266 02EA 00F8 	StoreSerOut	MOVWF	Param78
00267 02EB 0022 		MOVLB	Ser_Buff_Bank
00268 02EC 0AA1 		INCF	Ser_Out_Bytes,F
00269 02ED 	;	
00270 02ED 0824 		MOVF	Ser_Out_InPtr,W
00271 02EE 391F 		ANDLW	0x1F
00272 02EF 0AA4 		INCF	Ser_Out_InPtr,F
00273 02F0 3E46 		ADDLW	low Ser_Out_Buff
00274 02F1 0084 		MOVWF	FSR0
00275 02F2 3001 		MOVLW	high Ser_In_Buff
00276 02F3 0085 		MOVWF	FSR0H
00277 02F4 0878 		MOVF	Param78,W
00278 02F5 0080 		MOVWF	INDF0
00279 02F6 0020 		movlb	0
00280 02F7 0008 		return
00281 02F8 	;
00282 02F8 	;=========================================================================================
00283 02F8 	; Remove the last char stored in the output buffer
00284 02F8 	;
00285 02F8 0022 	POP_SerOut	MOVLB	Ser_Buff_Bank
00286 02F9 08A1 		MOVF	Ser_Out_Bytes,F
***** #106 Unprocessed Opcode SKPNZ *****
00287 02FA 		SKPNZ
00288 02FA 3202 		bra	POP_SerOut_End
00289 02FB 03A1 		DECF	Ser_Out_Bytes,F
00290 02FC 03A4 		DECF	Ser_Out_InPtr,F
00291 02FD 0020 	POP_SerOut_End	movlb	0
00292 02FE 0008 		return
00293 02FF 	;
SerialServo.asm                                                       Page: 26
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00294 02FF 	;=========================================================================================
00295 02FF 	; Get a byte from the serial Output buffer
00296 02FF 	;
00297 02FF 	; Entry: none
00298 02FF 	; Exit: W=byte from buffer, Param78,0=valid
00299 02FF 	;
00300 02FF 0022 	GetSerOut	MOVLB	Ser_Buff_Bank
00301 0300 1078 		BCF	Param78,0	;no data
00302 0301 08A1 		MOVF	Ser_Out_Bytes,F
***** #106 Unprocessed Opcode SKPNZ *****
00303 0302 		SKPNZ
00304 0302 320A 		bra	GetSerOut_End
00305 0303 1478 		BSF	Param78,0
00306 0304 03A1 		DECF	Ser_Out_Bytes,F
00307 0305 0825 		MOVF	Ser_Out_OutPtr,W
00308 0306 391F 		ANDLW	0x1F
00309 0307 0AA5 		INCF	Ser_Out_OutPtr,F
00310 0308 3E46 		ADDLW	low Ser_Out_Buff
00311 0309 0084 		MOVWF	FSR0L
00312 030A 3001 		MOVLW	high Ser_In_Buff
00313 030B 0085 		MOVWF	FSR0H
00314 030C 0800 		MOVF	INDF0,W
00315 030D 0020 	GetSerOut_End	movlb	0
00316 030E 0008 		return
00317 030F 	;
00318 030F 	;=========================================================================================
00319 030F 	;
00320 030F 	;
00321 030F 	;
00322 030F 	;
00323 030F 	;
00324 030F 	;
00325 030F 	;
00326 030F 	;
00327 030F 	;
00328 030F 	;
00329 030F 	;
00330 030F 	;
00331 030F 	;
00332 030F 	;
00333 030F 	;
00334 030F 	;
00335 030F 	;
00336 030F 	;
00337 030F 	;
00338 030F 	;
00843 030F 		include <RS232_Parse.inc>
00001 030F 	;=========================================================================================
00002 030F 	;
00003 030F 	;    Filename:      RS232_Parse.inc
00004 030F 	;    Date:          5/25/2018
00005 030F 	;    File Version:  1.0d5
00006 030F 	;
00007 030F 	;    Author:        David M. Flynn
00008 030F 	;    Company:       Oxford V.U.E., Inc.
00009 030F 	;    E-Mail:        dflynn@oxfordvue.com
00010 030F 	;
00011 030F 	;=========================================================================================
00012 030F 	; Routines:
00013 030F 	;
00014 030F 	; RS232_Parse	Call from main loop
00015 030F 	; RS232_ClearTXData	Clear the TX data, FSR1
00016 030F 	; RS232_Send	Send the data at TX_data, FSR0, FSR1
00017 030F 	;
00018 030F 	;=========================================================================================
00019 030F 	; Notes:
00020 030F 	;
00021 030F 	; History:
00022 030F 	; 1.0b5  5/25/2018	RS232_MasterAddr, RS232_SlaveAddr now in ram
00023 030F 	; 1.0d4  5/18/2018	Added RS232_ClearTXData, RS232_Send.
00024 030F 	; 1.0d3  5/17/2018	Used Timer1Lo for RXTimeout.
00025 030F 	; 1.0d2  4/26/2018	Comments, used in robot arm project.
00026 030F 	; 1.0d1  1/12/2016	Modified for I2C to RS-232 8 byte packets.
00027 030F 	; 1.0d1  11/9/2015	Adapted for QD Tester
00028 030F 	; 1.0    12/6/2013	First Rev'd version
00029 030F 	;
00030 030F 	; RS232_Parse	(X/0) Parse any bytes received by the serial port
00031 030F 	; Packet format: (FF FF) SA0 (SA1) DA0 (DA1) D0 D1 D2 D3 D4 D5 D6 D7 (CS)
00032 030F 	;  FF = Sync byte, SAn = Source Address, DA = Destination Address,
00033 030F 	;       Dn = Data, CS Check Sum (xor of Address and Data bytes)
00034 030F 	;  SA must be RS232_RAddr ( the boss )
00035 030F 	;  DA must be RS232_MyAddr ( this program )
00036 030F 	;  If the checksum matches put the data bytes in the RX_Data buffer,
00037 030F 	;   set RXDataValidFlag and RXDataIsNew.
00038 030F 	;=========================================================================================
00039 030F 	;	constant RP_LongAddr=1		;16 bit addresses
00040 030F 	; default to a 6 byte packet SA DA D0 D1 D2 D3
00041 030F 	;
00042 030F 		ifndef UseRS232SyncBytes
00044 030F 		endif
00045 030F 	;
00046 030F 		ifndef UseRS232SendSyncBytes
00048 030F 		endif
00049 030F 	;
00050 030F 		ifndef RP_LongAddr
00052 030F 		endif
00053 030F 	;
00054 030F 		ifndef RP_DataBytes
00056 030F 		endif
SerialServo.asm                                                       Page: 27
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00057 030F 	;
00058 030F 		ifndef UseRS232Chksum
00060 030F 		endif
00061 030F 	;
00062 030F 		constant RXTimeout=5		;50 mS max between incoming bytes
00063 030F 	;=========================================================================================
00064 030F 	; Bank0 variable used by RS232_Parse:
00065 030F 	;
00066 030F 	;	cblock
00067 030F 	;	RS232_MasterAddr
00068 030F 	;	RS232_SlaveAddr
00069 030F 	;	endc
00070 030F 	;
00071 030F 	; Bank1 variable used by RS232_Parse:
00072 030F 	;
00073 030F 	;	cblock
00074 030F 	;	RX_ParseFlags
00075 030F 	;	RX_Flags
00076 030F 	;	RX_DataCount
00077 030F 	;	RX_CSUM
00078 030F 	;	RX_TempData:RP_DataBytes
00079 030F 	;	RX_Data:RP_DataBytes
00080 030F 	;	TX_Data:RP_DataBytes
00081 030F 	;	endc
00082 030F 	;RX_ParseFlags Bits
00083 030F 00A0 	#Define	SyncByte1RXd	RX_ParseFlags,0
00084 030F 00A0 	#Define	SyncByte2RXd	RX_ParseFlags,1
00085 030F 00A0 	#Define	SourceAddLoRXd	RX_ParseFlags,2
00086 030F 00A0 	#Define	SourceAddHiRXd	RX_ParseFlags,3
00087 030F 00A0 	#Define	DestAddLoRXd	RX_ParseFlags,4
00088 030F 00A0 	#Define	DestAddHiRXd	RX_ParseFlags,5
00089 030F 00A0 	#Define	AllDataRXd	RX_ParseFlags,6
00090 030F 	;
00091 030F 	;RX_Flags Bits
00092 030F 00A1 	#Define	RXDataValidFlag	RX_Flags,0
00093 030F 00A1 	#Define	RXDataIsNew	RX_Flags,1
00094 030F 00A1 	#Define	RXSrcIsMaster	RX_Flags,2
00095 030F 00A1 	#Define	RXDstIsMe	RX_Flags,3
00096 030F 	;
00097 030F 	;
00098 030F 	; *** put in main loop
00099 030F 	;	CALL	RS232_Parse
00100 030F 	; if RXDataValidFlag is set data may be used
00101 030F 	;
00102 030F 	;=========================================================================================
00103 030F 	; Parse any bytes received by the serial port
00104 030F 	;
00105 030F 	; Receive 0xFF,0xFF,SA0,(SA1),DA0,(DA1),Cmd,Data0,Data1,Data2,CS
00106 030F 	;
00107 030F 	;
00108 030F 	; Entry: none
00109 030F 	; Exit: none
00110 030F 	; Ram Used: Param78, FSR
00111 030F 	; Calls (1+0): GetSerIn
00112 030F 	;
00113 030F 0021 	RS232_Parse	movlb	0x01	;bank 1
00114 0310 08A0 		movf	RX_ParseFlags,F
***** #106 Unprocessed Opcode SKPNZ *****
00115 0311 		SKPNZ		;Receive in process?
00116 0311 3206 		bra	RS232_Parse_Byte	; no
00117 0312 	;
00118 0312 0020 		movlb	0	;bank 0
00119 0313 08AC 		movf	Timer1Lo,F
***** #106 Unprocessed Opcode SKPZ *****
00120 0314 		SKPZ		;Timed out?
00121 0314 3203 		bra	RS232_Parse_Byte	; no
00122 0315 	;timed out
00123 0315 15BE 		bsf	ssRX_Timeout
00124 0316 0021 		movlb	0x01	;bank 1
00125 0317 01A0 		clrf	RX_ParseFlags
00126 0318 	;
00127 0318 22CC 	RS232_Parse_Byte	CALL	GetSerIn
00128 0319 1C78 		BTFSS	Param78,0	;Got a byte?
00129 031A 0008 		RETURN		; No
00130 031B 	;
00131 031B 00F8 		MOVWF	Param78	;Data Byte RXd
00132 031C 3005 		movlw	RXTimeout	;Reset time-out timer
00133 031D 00AC 		movwf	Timer1Lo
00134 031E 	; Command inturpreter
00135 031E 		if UseRS232SyncBytes
00136 031E 	;
00137 031E 0021 		movlb	0x01	;bank 1
00138 031F 08A0 		MOVF	RX_ParseFlags,F
***** #106 Unprocessed Opcode SKPZ *****
00139 0320 		SKPZ		;Beginning new packet?
00140 0320 3204 		BRA	RS232_Parse_Sync2	; No
00141 0321 30DD 		MOVLW	kRS232SyncByteValue
00142 0322 0278 		SUBWF	Param78,W
***** #106 Unprocessed Opcode SKPNZ *****
00143 0323 		SKPNZ		;Sync byte OK?
00144 0323 1420 		BSF	SyncByte1RXd	; Yes
00145 0324 3216 		bra	RS232_Parse_Rtn
00146 0325 	;
00147 0325 18A0 	RS232_Parse_Sync2	btfsc	SyncByte2RXd
00148 0326 3205 		bra	RS232_Parse_SALo
00149 0327 30DD 		movlw	kRS232SyncByteValue
00150 0328 0278 		subwf	Param78,W
***** #106 Unprocessed Opcode SKPZ *****
00151 0329 		SKPZ
SerialServo.asm                                                       Page: 28
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00152 0329 2B74 		goto	RS232_Parse_Error
00153 032A 14A0 		bsf	SyncByte2RXd
00154 032B 320F 		bra	RS232_Parse_Rtn
00155 032C 	;
00156 032C 		endif
00157 032C 	;
00158 032C 	; LSB of Source Address
00159 032C 0021 	RS232_Parse_SALo	movlb	0x01	;bank 1
00160 032D 1920 		btfsc	SourceAddLoRXd
00161 032E 320E 		bra	RS232_Parse_SALo_end
00162 032F 	;
00163 032F 01A3 		clrf	RX_CSUM
00164 0330 01A2 		clrf	RX_DataCount
00165 0331 1521 		bsf	RXSrcIsMaster
00166 0332 0020 		movlb	0
00167 0333 0858 		movf	RS232_MasterAddr,W
00168 0334 0021 		movlb	1
00169 0335 0278 		subwf	Param78,W
***** #106 Unprocessed Opcode SKPZ *****
00170 0336 		SKPZ
00171 0336 1121 		bcf	RXSrcIsMaster
00172 0337 1520 		bsf	SourceAddLoRXd
00173 0338 0878 		movf	Param78,W
00174 0339 00A4 		movwf	RX_SrcAdd
00175 033A 06A3 		xorwf	RX_CSUM,F
00176 033B 0020 	RS232_Parse_Rtn	movlb	0x00	;bank 0
00177 033C 0008 		return
00178 033D 	RS232_Parse_SALo_end:
00179 033D 	;
00180 033D 	; MSB of Source Address
00181 033D 		if RP_LongAddr
00196 033D 		endif
00197 033D 	;
00198 033D 	; LSB of Destination Address
00199 033D 1A20 	RS232_Parse_DALo	btfsc	DestAddLoRXd
00200 033E 320B 		bra	RS232_Parse_DALo_End
00201 033F 15A1 		bsf	RXDstIsMe
00202 0340 0020 		movlb	0
00203 0341 0859 		movf	RS232_SlaveAddr,W
00204 0342 0021 		movlb	1
00205 0343 0278 		subwf	Param78,W
***** #106 Unprocessed Opcode SKPZ *****
00206 0344 		SKPZ
00207 0344 11A1 		bcf	RXDstIsMe
00208 0345 1620 		bsf	DestAddLoRXd
00209 0346 0878 		movf	Param78,W
00210 0347 00A5 		movwf	RX_DstAdd
00211 0348 06A3 		xorwf	RX_CSUM,F
00212 0349 33F1 		bra	RS232_Parse_Rtn
00213 034A 	RS232_Parse_DALo_End:
00214 034A 	;
00215 034A 	; MSB of Destination Address
00216 034A 		if RP_LongAddr
00231 034A 		endif
00232 034A 	;
00233 034A 1B20 	RS232_Parse_Data	btfsc	AllDataRXd
00234 034B 320E 		bra	RS232_Parse_Data_end
00235 034C 0822 		movf	RX_DataCount,W
00236 034D 3EA6 		addlw	low RX_TempData
00237 034E 0084 		movwf	FSR0L
00238 034F 3000 		movlw	high RX_TempData
00239 0350 0085 		movwf	FSR0H
00240 0351 0878 		movf	Param78,W
00241 0352 06A3 		xorwf	RX_CSUM,F
00242 0353 0080 		movwf	INDF0
00243 0354 0AA2 		incf	RX_DataCount,F
00244 0355 3004 		movlw	RP_DataBytes
00245 0356 0222 		subwf	RX_DataCount,W
***** #106 Unprocessed Opcode SKPZ *****
00246 0357 		SKPZ
00247 0357 33E3 		bra	RS232_Parse_Rtn
00248 0358 1720 		bsf	AllDataRXd
00249 0359 	;
00250 0359 		if UseRS232Chksum
00251 0359 33E1 		bra	RS232_Parse_Rtn
00252 035A 		endif
00253 035A 	RS232_Parse_Data_end
00254 035A 	;
00255 035A 		if UseRS232Chksum
00256 035A 	; checksum
00257 035A 0878 		movf	Param78,W
00258 035B 0223 		subwf	RX_CSUM,W
***** #106 Unprocessed Opcode SKPZ *****
00259 035C 		SKPZ		;Checksum matches?
00260 035C 3217 		bra	RS232_Parse_Error	; No
00261 035D 	;
00262 035D 		endif
00263 035D 	;
00264 035D 30A6 		movlw	low RX_TempData
00265 035E 0084 		movwf	FSR0L
00266 035F 3000 		movlw	high RX_TempData
00267 0360 0085 		movwf	FSR0H
00268 0361 	;
00269 0361 30AA 		movlw	low RX_Data
00270 0362 0086 		movwf	FSR1L
00271 0363 3000 		movlw	high RX_Data
00272 0364 0087 		movwf	FSR1H
00273 0365 	;
00274 0365 3004 		movlw	RP_DataBytes
SerialServo.asm                                                       Page: 29
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00275 0366 00F8 		movwf	Param78
00276 0367 0012 	RS232_Parse_L1	moviw	FSR0++
00277 0368 001E 		movwi	FSR1++
00278 0369 0BF8 		decfsz	Param78,F
00279 036A 33FC 		bra	RS232_Parse_L1
00280 036B 	;
00281 036B 14A1 		bsf	RXDataIsNew	;good packet rx'd
00282 036C 1421 		bsf	RXDataValidFlag
00283 036D 1D21 		btfss	RXSrcIsMaster	;from master?
00284 036E 1021 		bcf	RXDataValidFlag	; no
00285 036F 1DA1 		btfss	RXDstIsMe	;to me?
00286 0370 1021 		bcf	RXDataValidFlag	; no
00287 0371 	;
00288 0371 01A0 		clrf	RX_ParseFlags
00289 0372 0020 		movlb	0x00
00290 0373 0008 		return
00291 0374 	;
00292 0374 	;
00293 0374 	; We didn't get the sync byte we were expecting so restart the parser
00294 0374 01A0 	RS232_Parse_Error	CLRF	RX_ParseFlags
00295 0375 2ADC 		goto	FlushInBuff
00296 0376 	;
00297 0376 	;=========================================================================================
00298 0376 	; Clear the TX data, unused bytes are sent as 0x00
00299 0376 	; Entry: none
00300 0376 	; Exit: Bank 0
00301 0376 	; Ram used: Param78, FSR1
00302 0376 	; Calls: none
00303 0376 3001 	RS232_ClearTXData	movlw	1	;bank 1
00304 0377 3004 		movlw	RP_DataBytes
00305 0378 00F8 		movwf	Param78
00306 0379 30AE 		movlw	low TX_Data
00307 037A 0086 		movwf	FSR1L
00308 037B 3000 		movlw	high TX_Data
00309 037C 0087 		movwf	FSR1H
00310 037D 3000 		movlw	0x00
00311 037E 001E 	RS232_ClearTXData_L1	movwi	FSR1++
00312 037F 0BF8 		decfsz	Param78,F
00313 0380 33FD 		bra	RS232_ClearTXData_L1
00314 0381 0020 		movlb	0x00
00315 0382 0008 		return
00316 0383 	;
00317 0383 	;=========================================================================================
00318 0383 	; Send a data packet
00319 0383 	;
00320 0383 	;Entry: TX_Data = Data to send 
00321 0383 	;Exit: TX_Data is cleared
00322 0383 	;Ram used: Param78,Param79,Param7A,FSR0,FSR1
00323 0383 	;Calls: (1+0) StoreSerOut
00324 0383 	;
00325 0383 	RS232_Send:
00326 0383 	;
00327 0383 		if UseRS232SendSyncBytes
00334 0383 		endif
00335 0383 	;
00336 0383 0020 		movlb	0x00	;bank 0
00337 0384 01FA 		clrf	Param7A	;CSum
00338 0385 0859 		movf	RS232_SlaveAddr,W	;source address
00339 0386 06FA 		xorwf	Param7A,F
00340 0387 22EA 		call	StoreSerOut
00341 0388 	;
00342 0388 		if RP_LongAddr
00346 0388 		endif
00347 0388 	;
00348 0388 0858 		movf	RS232_MasterAddr,W	;destination address
00349 0389 06FA 		xorwf	Param7A,F
00350 038A 22EA 		call	StoreSerOut
00351 038B 	;
00352 038B 		if RP_LongAddr
00356 038B 		endif
00357 038B 	;
00358 038B 0021 		movlb	1	;bank 1
00359 038C 3004 		movlw	RP_DataBytes
00360 038D 00F9 		movwf	Param79
00361 038E 30AE 		movlw	low TX_Data
00362 038F 0086 		movwf	FSR1L
00363 0390 3000 		movlw	high TX_Data
00364 0391 0087 		movwf	FSR1H
00365 0392 	;
00366 0392 0016 	RS232_Send_L1	moviw	FSR1++
00367 0393 06FA 		xorwf	Param7A,F
00368 0394 22EA 		call	StoreSerOut
00369 0395 0BF9 		decfsz	Param79,F
00370 0396 33FB 		bra	RS232_Send_L1
00371 0397 	;
00372 0397 		if UseRS232Chksum
00373 0397 087A 		movf	Param7A,W
00374 0398 22EA 		call	StoreSerOut
00375 0399 		endif
00376 0399 	;
00377 0399 2B76 		goto	RS232_ClearTXData
00378 039A 	;
00379 039A 	;=========================================================================================
00380 039A 	;
00381 039A 	;
00382 039A 	;
00383 039A 	;
00384 039A 	;
00385 039A 	;
SerialServo.asm                                                       Page: 30
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00386 039A 	;
00387 039A 	;
00388 039A 	;
00389 039A 	;
00390 039A 	;
00391 039A 	;
00392 039A 	;
00393 039A 	;
00394 039A 	;
00395 039A 	;
00396 039A 	;
00397 039A 	;
00398 039A 	;
00399 039A 	;
00400 039A 	;
00401 039A 	;
00402 039A 	;
00403 039A 	;
00844 039A 	;
00845 039A 	;=========================================================================================
00846 039A 	;
00847 039A 2615 	start	call	InitializeIO
00848 039B 	;
00849 039B 25CE 		CALL	StartServo
00850 039C 25B1 		CALL	ReadAN0_ColdStart
00851 039D 	;
00852 039D 	;=========================================================================================
00853 039D 	;*****************************************************************************************
00854 039D 	;=========================================================================================
00855 039D 0064 	MainLoop	CLRWDT
00856 039E 	;
00857 039E 22E2 		call	GetSerInBytes
***** #106 Unprocessed Opcode SKPZ *****
00858 039F 		SKPZ		;Any data?
00859 039F 230F 		CALL	RS232_Parse	; yes
00860 03A0 	;
00861 03A0 0021 		movlb	1
00862 03A1 1CA1 		btfss	RXDataIsNew
00863 03A2 3203 		bra	ML_1
00864 03A3 		mCall0To1	HandleRXData
00864 03A3 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00864 03A4 2005      M		CALL	HandleRXData		CALL	Destination
00864 03A5 018A      M		CLRF	PCLATH		CLRF	PCLATH
00865 03A6 	ML_1:
00866 03A6 	;
00867 03A6 	; Fast blink the system LED is the servo is stopped because of an error
00868 03A6 0020 		MOVLB	0x00
00869 03A7 3064 		MOVLW	LEDTIME
00870 03A8 193E 		btfsc	ssio_OverCurSD
00871 03A9 300A 		movlw	LEDErrorTime
00872 03AA 00A0 		MOVWF	SysLED_Time
00873 03AB 	;
00874 03AB 255E 		CALL	ReadAN
00875 03AC 	;
00876 03AC 	; Average AN0
00877 03AC 0021  a		MOVLB	Cur_AN0	;banksel
00876 03AD 		BankSel	Cur_AN0
00878 03AD 1C32 		btfss	NewDataAN0
00879 03AE 320B 		bra	No_NewDataAN0
00880 03AF 1032 		bcf	NewDataAN0
00881 03B0 083B 		movf	OldAN0Value,W
00882 03B1 07B3 		addwf	Cur_AN0,F
00883 03B2 083C 		movf	OldAN0Value+1,W
00884 03B3 3DB4 		addwfc	Cur_AN0+1,F
00885 03B4 3634 		lsrf	Cur_AN0+1,W
00886 03B5 00B4 		movwf	Cur_AN0+1
00887 03B6 00BC 		movwf	OldAN0Value+1
00888 03B7 0C33 		rrf	Cur_AN0,W
00889 03B8 00B3 		movwf	Cur_AN0
00890 03B9 00BB 		movwf	OldAN0Value
00891 03BA 	;
00892 03BA 	No_NewDataAN0:
00893 03BA 2148 		call	ReadEncoder
00894 03BB 	;
00895 03BB 2543 		call	HandleButtons
00896 03BC 	;
00897 03BC 	;---------------------
00898 03BC 	; Handle Serial Communications
00899 03BC 1A11 		BTFSC	PIR1,TXIF	;TX done?
00900 03BD 22A5 		CALL	TX_TheByte	; Yes
00901 03BE 	;
00902 03BE 	; move any serial data received into the 32 byte input buffer
00903 03BE 1CB6 		BTFSS	DataReceivedFlag
00904 03BF 3203 		BRA	ML_Ser_Out
00905 03C0 0835 		MOVF	RXByte,W
00906 03C1 10B6 		BCF	DataReceivedFlag
00907 03C2 22BE 		CALL	StoreSerIn
00908 03C3 	;
00909 03C3 	; If the serial data has been sent and there are bytes in the buffer, send the next byte
00910 03C3 	;
00911 03C3 1D36 	ML_Ser_Out	BTFSS	DataSentFlag
00912 03C4 3205 		BRA	ML_Ser_End
00913 03C5 22FF 		CALL	GetSerOut
00914 03C6 1C78 		BTFSS	Param78,0
00915 03C7 3202 		BRA	ML_Ser_End
00916 03C8 00B4 		MOVWF	TXByte
00917 03C9 1136 		BCF	DataSentFlag
00918 03CA 	ML_Ser_End:
00919 03CA 	;----------------------
SerialServo.asm                                                       Page: 31
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00920 03CA 	;
00921 03CA 0020 		movlb	0x00	;bank 0
00922 03CB 0857 		movf	SysMode,W
00923 03CC 000B 		brw
00924 03CD 2BD3 		goto	DoModeZero
00925 03CE 2BDF 		goto	DoModeOne
00926 03CF 2C41 		goto	DoModeTwo
00927 03D0 2C80 		goto	DoModeThree
00928 03D1 2CFA 		goto	DoMode4
00929 03D2 	;
00930 03D2 	ModeReturn:
00931 03D2 	;
00932 03D2 2B9D 		goto	MainLoop
00933 03D3 	;=========================================================================================
00934 03D3 	;*****************************************************************************************
00935 03D3 	;=========================================================================================
00936 03D3 	;Simple servo testing
00937 03D3 	; copy AN4 value x2 + .1976 to servo value
00938 03D3 	;
00939 03D3 	DoModeZero:
00940 03D3 0021  a		MOVLB	ModeZeroPot	;banksel
00939 03D4 		BankSel	ModeZeroPot
00941 03D4 3537 		lslf	ModeZeroPot,W
00942 03D5 00FC 		movwf	Param7C
00943 03D6 0D38 		rlf	ModeZeroPot+1,W
00944 03D7 00FD 		movwf	Param7D
00945 03D8 30B8 		movlw	low .1976
00946 03D9 07FC 		addwf	Param7C,F
00947 03DA 3007 		movlw	high .1976
00948 03DB 3DFD 		addwfc	Param7D,F
00949 03DC 	;
00950 03DC 25F6 		call	ClampInt
00951 03DD 25BC 		call	Copy7CToSig
00952 03DE 	;
00953 03DE 2BD2 		goto	ModeReturn
00954 03DF 	;=========================================================================================
00955 03DF 	;Testing servo and encoder
00956 03DF 	; if AN4 + .950 > EncoderVal set servo to ServoFastForward
00957 03DF 	; elseif AN4 + .1050 < EncoderVal set servo to ServoFastReverse
00958 03DF 	; else Set ServoIdle
00959 03DF 	;
00960 03DF 	DoModeOne:
00961 03DF 0021  a		MOVLB	ModeZeroPot	;banksel
00960 03E0 		BankSel	ModeZeroPot
00962 03E0 	;
00963 03E0 	;Param7A:Param79 = Cur_AN4 + .950
00964 03E0 30B6 		movlw	low .950
00965 03E1 0737 		addwf	ModeZeroPot,W
00966 03E2 00F9 		movwf	Param79
00967 03E3 3003 		movlw	high .950
00968 03E4 3D38 		addwfc	ModeZeroPot+1,W
00969 03E5 00FA 		movwf	Param7A
00970 03E6 	;
00971 03E6 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
00972 03E6 0020  a		MOVLB	EncoderVal	;banksel
00971 03E7 		BankSel	EncoderVal
00973 03E7 0845 		movf	EncoderVal,W
00974 03E8 02F9 		subwf	Param79,F
00975 03E9 0846 		movf	EncoderVal+1,W
00976 03EA 3BFA 		subwfb	Param7A,F
00977 03EB 	;
00978 03EB 1FFA 		btfss	Param7A,7	;Param7A:Param79 < 0?
00979 03EC 3210 		bra	DM1_FF	; No, EncoderVal <= (AN4 + .950)
00980 03ED 	;
00981 03ED 	;Param7A:Param79 = Cur_AN4 + .1050
00982 03ED 0021  a		MOVLB	ModeZeroPot	;banksel
00981 03EE 		BankSel	ModeZeroPot
00983 03EE 301A 		movlw	low .1050
00984 03EF 0737 		addwf	ModeZeroPot,W
00985 03F0 00F9 		movwf	Param79
00986 03F1 3004 		movlw	high .1050
00987 03F2 3D38 		addwfc	ModeZeroPot+1,W
00988 03F3 00FA 		movwf	Param7A
00989 03F4 	;
00990 03F4 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
00991 03F4 0020  a		MOVLB	EncoderVal	;banksel
00990 03F5 		BankSel	EncoderVal
00992 03F5 0845 		movf	EncoderVal,W
00993 03F6 02F9 		subwf	Param79,F
00994 03F7 0846 		movf	EncoderVal+1,W
00995 03F8 3BFA 		subwfb	Param7A,F
00996 03F9 	;
00997 03F9 1BFA 		btfsc	Param7A,7	;Param7A:Param79 < 0?
00998 03FA 3208 		bra	DM1_FR	; Yes, EncoderVal > (AN4 + .1050)
00999 03FB 	;
01000 03FB 	; EncoderVal > (ModeZeroPot + .950) && EncoderVal <= (ModeZeroPot + .1050)
01001 03FB 153D 		bsf	ServoIdle
01002 03FC 2BD2 		goto	ModeReturn
01003 03FD 	;
01004 03FD 084C 	DM1_FF	movf	ServoFastForward,W
01005 03FE 00FC 		movwf	Param7C
01006 03FF 084D 		movf	ServoFastForward+1,W
01007 0400 00FD 		movwf	Param7D
01008 0401 25BC 		call	Copy7CToSig
01009 0402 2BD2 		goto	ModeReturn
01010 0403 	;
01011 0403 084E 	DM1_FR	movf	ServoFastReverse,W
01012 0404 00FC 		movwf	Param7C
01013 0405 084F 		movf	ServoFastReverse+1,W
SerialServo.asm                                                       Page: 32
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01014 0406 00FD 		movwf	Param7D
01015 0407 25BC 		call	Copy7CToSig
01016 0408 2BD2 		goto	ModeReturn
01017 0409 	;
01018 0409 	;=========================================================================================
01019 0409 	; if ssEnableOverCur and Cur_AN0>ssMaxI*4 then
01020 0409 	;   OverCurrentFlag=true
01021 0409 0020 	CheckCurrent	movlb	0x00	;Bank 0
01022 040A 1C5A 		btfss	ssEnableOverCur
01023 040B 0008 		return
01024 040C 	;Param79:Param78 = ssMaxI * 4
01025 040C 01F9 		clrf	Param79
01026 040D 355B 		lslf	ssMaxI,W
01027 040E 00F8 		movwf	Param78
01028 040F 0DF9 		rlf	Param79,F
01029 0410 35F8 		lslf	Param78,F
***** Warning #109 Destination required!  Defaulting to 1 (File) *****
01030 0411 0DF9 		rlf	Param79
01031 0412 	;Param79:Param78 -= Cur_AN0
01032 0412 0021  a		MOVLB	ServoCurrent	;banksel
01031 0413 		BankSel	ServoCurrent
01033 0413 0833 		movf	ServoCurrent,W
01034 0414 02F8 		subwf	Param78,F
01035 0415 0834 		movf	ServoCurrent+1,W
01036 0416 3BF9 		subwfb	Param79,F
01037 0417 0020 		movlb	0x00	;Bank 0
01038 0418 	;
01039 0418 1BF9 		btfsc	Param79,7	;Cur_AN0>ssMaxI*4?
01040 0419 15BD 		bsf	OverCurrentFlag
01041 041A 0008 		return
01042 041B 	;
01043 041B 	;=========================================================================================
01044 041B 	; if Cur_AN0>ssGripI*4 then
01045 041B 	;   GripIMet=true
01046 041B 	; if Cur_AN0>(ssGripI+0x10)*4 then
01047 041B 	;   GripIOver=true
01048 041B 0020 	CheckGripCurrent	movlb	0x00	;Bank 0
01049 041C 	;Param79:Param78 = ssGripI * 4
01050 041C 01F9 		clrf	Param79
01051 041D 355D 		lslf	ssGripI,W
01052 041E 00F8 		movwf	Param78
01053 041F 0DF9 		rlf	Param79,F
01054 0420 35F8 		lslf	Param78,F
***** Warning #109 Destination required!  Defaulting to 1 (File) *****
01055 0421 0DF9 		rlf	Param79
01056 0422 	;Param79:Param78 -= Cur_AN0
01057 0422 0021  a		MOVLB	ServoCurrent	;banksel
01056 0423 		BankSel	ServoCurrent
01058 0423 0833 		movf	ServoCurrent,W
01059 0424 02F8 		subwf	Param78,F
01060 0425 0834 		movf	ServoCurrent+1,W
01061 0426 3BF9 		subwfb	Param79,F
01062 0427 0020 		movlb	0x00	;Bank 0
01063 0428 	;
01064 0428 1BF9 		btfsc	Param79,7	;Cur_AN0>ssGripI*4?
01065 0429 163D 		bsf	GripIMet	; Yes
01066 042A 1BF9 		btfsc	Param79,7	;Cur_AN0>ssGripI*4?
01067 042B 16BE 		bsf	ssGripMCur
01068 042C 	;Param79:Param78 = (ssGripI+0x10) * 4
01069 042C 01F9 		clrf	Param79
01070 042D 3004 		movlw	kGripperHC
01071 042E 075D 		addwf	ssGripI,W
01072 042F 00F8 		movwf	Param78
01073 0430 3000 		movlw	0x00
01074 0431 3DF9 		addwfc	Param79,F
01075 0432 35F8 		lslf	Param78,F
01076 0433 0DF9 		rlf	Param79,F
01077 0434 35F8 		lslf	Param78,F
***** Warning #109 Destination required!  Defaulting to 1 (File) *****
01078 0435 0DF9 		rlf	Param79
01079 0436 	;Param79:Param78 -= Cur_AN0
01080 0436 0021  a		MOVLB	ServoCurrent	;banksel
01079 0437 		BankSel	ServoCurrent
01081 0437 0833 		movf	ServoCurrent,W
01082 0438 02F8 		subwf	Param78,F
01083 0439 0834 		movf	ServoCurrent+1,W
01084 043A 3BF9 		subwfb	Param79,F
01085 043B 0020 		movlb	0x00	;Bank 0
01086 043C 	;
01087 043C 1BF9 		btfsc	Param79,7	;Cur_AN0>(ssGripI+10)*4?
01088 043D 16BD 		bsf	GripIOver
01089 043E 1BF9 		btfsc	Param79,7	;Cur_AN0>(ssGripI+10)*4?
01090 043F 163E 		bsf	ssGripOCur
01091 0440 0008 		return
01092 0441 	;
01093 0441 	;=========================================================================================
01094 0441 	;Idle routine for Basic Serial Servo mode
01095 0441 	;
01096 0441 0020 	DoModeTwo	movlb	0
01097 0442 1BB8 		btfsc	ssCmdPos+1,7	;Any command issued?
01098 0443 323A 		bra	DoModeTwo_1	; No, Idle the servo
01099 0444 	;
01100 0444 	;Check for over current, kill position command if over current is detected.
01101 0444 2409 		call	CheckCurrent
01102 0445 1DBD 		btfss	OverCurrentFlag
01103 0446 3206 		bra	DM2_NotOverCurrent
01104 0447 01B7 		clrf	ssCmdPos
01105 0448 01B8 		clrf	ssCmdPos+1
01106 0449 17B8 		bsf	ssCmdPos+1,7
SerialServo.asm                                                       Page: 33
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01107 044A 153E 		bsf	ssio_OverCurSD
01108 044B 11BD 		bcf	OverCurrentFlag
01109 044C 3231 		bra	DoModeTwo_1
01110 044D 	;
01111 044D 	DM2_NotOverCurrent:
01112 044D 113E 		bcf	ssio_OverCurSD
01113 044E 08D6 		movf	ServoSpeed,F
***** #106 Unprocessed Opcode SKPNZ *****
01114 044F 		SKPNZ		;Speed = 0?
01115 044F 3223 		bra	DoModeTwo_NoSpeed	; yes
01116 0450 1C3D 		btfss	PulseSent	;Time to update?
01117 0451 2BD2 		goto	ModeReturn	; No
01118 0452 103D 		bcf	PulseSent
01119 0453 	;Param7D:Param7C = Cmd-Cur
01120 0453 0839 		movf	ssCurPos,W
01121 0454 0237 		subwf	ssCmdPos,W
01122 0455 00FC 		movwf	Param7C
01123 0456 083A 		movf	ssCurPos+1,W
01124 0457 3B38 		subwfb	ssCmdPos+1,W
01125 0458 00FD 		movwf	Param7D
01126 0459 	; if Param7D:Param7C = 0 then we are In Position
01127 0459 047C 		iorwf	Param7C,W
***** #106 Unprocessed Opcode SKPNZ *****
01128 045A 		SKPNZ
01129 045A 321C 		bra	DoModeTwo_Go	; if Cmd = Cur Go
01130 045B 	;
01131 045B 	;
01132 045B 1FFD 		BTFSS	Param7D,7	;Cmd<Cur? Set if Cur>Cmd
01133 045C 2C68 		GOTO	DoModeTwo_MovPlus	; Yes
01134 045D 	;Move minus
01135 045D 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01136 045E 2C63 		GOTO	DoModeTwo_Minus	; No
01137 045F 0856 		MOVF	ServoSpeed,W
01138 0460 077C 		ADDWF	Param7C,W
01139 0461 1803 		BTFSC	_C	;Dist<Speed?
01140 0462 3210 		bra	DoModeTwo_NoSpeed	; No
01141 0463 	;
01142 0463 	; Subtract speed from current position
01143 0463 0856 	DoModeTwo_Minus	MOVF	ServoSpeed,W
01144 0464 02B9 		SUBWF	ssCurPos,F	;SigOutTime
01145 0465 3000 		MOVLW	0x00
01146 0466 3BBA 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01147 0467 320F 		bra	DoModeTwo_Go
01148 0468 	;
01149 0468 	;=============================
01150 0468 	; 7D:7C = distance to go
01151 0468 	;
01152 0468 08FD 	DoModeTwo_MovPlus	MOVF	Param7D,F
***** #106 Unprocessed Opcode SKPZ *****
01153 0469 		SKPZ		;Dist>255 to go?
01154 0469 3204 		bra	DoModeTwo_Plus	; Yes
01155 046A 0856 		MOVF	ServoSpeed,W
01156 046B 027C 		SUBWF	Param7C,W	;Dist-Speed
01157 046C 		SKPNB		;Speed>Dist?
01157 046C 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01158 046D 3205 		bra	DoModeTwo_NoSpeed	; Yes
01159 046E 	;
01160 046E 0856 	DoModeTwo_Plus	MOVF	ServoSpeed,W	;7D:7C = CurPos + Speed
01161 046F 07B9 		ADDWF	ssCurPos,F
01162 0470 0103 		CLRW
01163 0471 3DBA 		ADDWFC	ssCurPos+1,F
01164 0472 3204 		bra	DoModeTwo_Go
01165 0473 	;
01166 0473 	;
01167 0473 	; set current position at command position
01168 0473 0837 	DoModeTwo_NoSpeed	movf	ssCmdPos,W
01169 0474 00B9 		movwf	ssCurPos
01170 0475 0838 		movf	ssCmdPos+1,W
01171 0476 00BA 		movwf	ssCurPos+1
01172 0477 	; make it so
01173 0477 0839 	DoModeTwo_Go	movf	ssCurPos,W
01174 0478 00FC 		movwf	Param7C
01175 0479 083A 		movf	ssCurPos+1,W
01176 047A 00FD 		movwf	Param7D
01177 047B 25F6 		call	ClampInt
01178 047C 25BC 		call	Copy7CToSig
01179 047D 2BD2 		goto	ModeReturn
01180 047E 	;
01181 047E 	DoModeTwo_1:
01182 047E 153D 		bsf	ServoIdle	;power down servo
01183 047F 2BD2 		goto	ModeReturn
01184 0480 	;
01185 0480 	;=========================================================================================
01186 0480 	;Idle routine for Absolute encoder position control.
01187 0480 	; if ssCmdPos > EncoderVal set servo to ServoFastForward
01188 0480 	; elseif ssCmdPos + DeadBand < EncoderVal set servo to ServoFastReverse
01189 0480 	; else Set ServoIdle
01190 0480 	;
01191 0480 	; Ram Used:Param79,Param7A,Param7C,Param7D
01192 0480 	;
01193 0480 0020 	DoModeThree	movlb	0	;bank 0
01194 0481 1BB8 		btfsc	ssCmdPos+1,7
01195 0482 3227 		bra	DM3_IdleServo
01196 0483 	;
01197 0483 	;Check for over current, kill position command if over current is detected.
01198 0483 2409 		call	CheckCurrent
01199 0484 1DBD 		btfss	OverCurrentFlag
01200 0485 3206 		bra	DM3_NotOverCurrent
01201 0486 01B7 		clrf	ssCmdPos
SerialServo.asm                                                       Page: 34
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01202 0487 01B8 		clrf	ssCmdPos+1
01203 0488 17B8 		bsf	ssCmdPos+1,7
01204 0489 153E 		bsf	ssio_OverCurSD
01205 048A 11BD 		bcf	OverCurrentFlag
01206 048B 321E 		bra	DM3_IdleServo
01207 048C 	;
01208 048C 	DM3_NotOverCurrent:
01209 048C 	;Param7A:Param79 = ssCmdPos
01210 048C 113E 		bcf	ssio_OverCurSD
01211 048D 0837 		movf	ssCmdPos,W
01212 048E 00F9 		movwf	Param79
01213 048F 0838 		movf	ssCmdPos+1,W
01214 0490 00FA 		movwf	Param7A
01215 0491 	;
01216 0491 	;Param7A:Param79 = Param7A:Param79 - ((EncoderVal + EncoderOffset) mod 16384)
01217 0491 0845 		movf	EncoderVal,W
01218 0492 074A 		addwf	EncoderOffset,W
01219 0493 00FC 		movwf	Param7C
01220 0494 0846 		movf	EncoderVal+1,W
01221 0495 3D4B 		addwfc	EncoderOffset+1,W
01222 0496 393F 		andlw	0x3F
01223 0497 00FD 		movwf	Param7D
01224 0498 087C 		movf	Param7C,W	;(EncoderVal + EncoderOffset) mod 16384
01225 0499 02F9 		subwf	Param79,F
01226 049A 087D 		movf	Param7D,W
01227 049B 3BFA 		subwfb	Param7A,F
01228 049C 	;
01229 049C 1FFA 		btfss	Param7A,7	;Param7A:Param79 < 0?
01230 049D 3219 		bra	DM3_FF	; No, EncoderVal <= ssCmdPos
01231 049E 	;
01232 049E 	;Param7A:Param79 = ssCmdPos + DeadBand
01233 049E 085C 		movf	DeadBand,W
01234 049F 0737 		addwf	ssCmdPos,W
01235 04A0 00F9 		movwf	Param79
01236 04A1 3000 		movlw	0x00
01237 04A2 3D38 		addwfc	ssCmdPos+1,W
01238 04A3 00FA 		movwf	Param7A
01239 04A4 	;
01240 04A4 	;Param7A:Param79 = Param7A:Param79 - EncoderVal
01241 04A4 087C 		movf	Param7C,W	;(EncoderVal + EncoderOffset) mod 4096
01242 04A5 02F9 		subwf	Param79,F
01243 04A6 087D 		movf	Param7D,W
01244 04A7 3BFA 		subwfb	Param7A,F
01245 04A8 	;
01246 04A8 1BFA 		btfsc	Param7A,7	;Param7A:Param79 < 0?
01247 04A9 3217 		bra	DM3_FR	; Yes, EncoderVal > (ssCmdPos + DeadBand)
01248 04AA 	;
01249 04AA 	; EncoderVal > ssCmdPos && EncoderVal <= (ssCmdPos + DeadBand)
01250 04AA 103E 	DM3_IdleServo	bcf	MD3_FFwd
01251 04AB 10BE 		bcf	MD3_FRev
01252 04AC 1DDA 		btfss	ssMode3IdleCenter
01253 04AD 3207 		bra	DM3_IdleInactive
01254 04AE 0850 		movf	ServoStopCenter,W
01255 04AF 00BB 		movwf	ssMD3_Dest
01256 04B0 00B9 		movwf	ssCurPos
01257 04B1 0851 		movf	ServoStopCenter+1,W
01258 04B2 00BC 		movwf	ssMD3_Dest+1
01259 04B3 00BA 		movwf	ssCurPos+1
01260 04B4 3215 		bra	DM3_UpdatePos
01261 04B5 	;
01262 04B5 153D 	DM3_IdleInactive	bsf	ServoIdle
01263 04B6 2BD2 		goto	ModeReturn
01264 04B7 	;
01265 04B7 18DA 	DM3_FF	btfsc	ssReverseDir
01266 04B8 320A 		bra	DM3_FR_1
01267 04B9 18BE 	DM3_FF_1	btfsc	MD3_FRev	;Moving Reverse dir?
01268 04BA 33EF 		bra	DM3_IdleServo	; Yes
01269 04BB 143E 		bsf	MD3_FFwd
01270 04BC 084C 		movf	ServoFastForward,W
01271 04BD 00BB 		movwf	ssMD3_Dest
01272 04BE 084D 		movf	ServoFastForward+1,W
01273 04BF 00BC 		movwf	ssMD3_Dest+1
01274 04C0 3209 		bra	DM3_UpdatePos
01275 04C1 	;
01276 04C1 18DA 	DM3_FR	btfsc	ssReverseDir
01277 04C2 33F6 		bra	DM3_FF_1
01278 04C3 183E 	DM3_FR_1	btfsc	MD3_FFwd	;Moving Forward dir?
01279 04C4 33E5 		bra	DM3_IdleServo	; Yes
01280 04C5 14BE 		bsf	MD3_FRev
01281 04C6 084E 		movf	ServoFastReverse,W
01282 04C7 00BB 		movwf	ssMD3_Dest
01283 04C8 084F 		movf	ServoFastReverse+1,W
01284 04C9 00BC 		movwf	ssMD3_Dest+1
01285 04CA 	;
01286 04CA 08D6 	DM3_UpdatePos	movf	ServoSpeed,F
***** #106 Unprocessed Opcode SKPNZ *****
01287 04CB 		SKPNZ		;Speed = 0?
01288 04CB 3223 		bra	DM3_NoSpeed	; yes
01289 04CC 1C3D 		btfss	PulseSent	;Time to update?
01290 04CD 2BD2 		goto	ModeReturn	; No
01291 04CE 103D 		bcf	PulseSent
01292 04CF 	;Param7D:Param7C = Dest-Cur
01293 04CF 0839 		movf	ssCurPos,W
01294 04D0 023B 		subwf	ssMD3_Dest,W
01295 04D1 00FC 		movwf	Param7C
01296 04D2 083A 		movf	ssCurPos+1,W
01297 04D3 3B3C 		subwfb	ssMD3_Dest+1,W
01298 04D4 00FD 		movwf	Param7D
01299 04D5 	; if Param7D:Param7C = 0 then we are In Position
SerialServo.asm                                                       Page: 35
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01300 04D5 047C 		iorwf	Param7C,W
***** #106 Unprocessed Opcode SKPNZ *****
01301 04D6 		SKPNZ
01302 04D6 321C 		bra	DM3_Go	; if Cmd = Cur Go
01303 04D7 	;
01304 04D7 	;
01305 04D7 1FFD 		BTFSS	Param7D,7	;Cmd<Cur? Set if Cur>Cmd
01306 04D8 2CE4 		GOTO	DM3_MovPlus	; Yes
01307 04D9 	;Move minus
01308 04D9 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01309 04DA 2CDF 		GOTO	DM3_Minus	; No
01310 04DB 0856 		MOVF	ServoSpeed,W
01311 04DC 077C 		ADDWF	Param7C,W
01312 04DD 1803 		BTFSC	_C	;Dist<Speed?
01313 04DE 3210 		bra	DM3_NoSpeed	; No
01314 04DF 	;
01315 04DF 	; Subtract speed from current position
01316 04DF 0856 	DM3_Minus	MOVF	ServoSpeed,W
01317 04E0 02B9 		SUBWF	ssCurPos,F	;SigOutTime
01318 04E1 3000 		MOVLW	0x00
01319 04E2 3BBA 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01320 04E3 320F 		bra	DM3_Go
01321 04E4 	;
01322 04E4 	;=============================
01323 04E4 	; 7D:7C = distance to go
01324 04E4 	;
01325 04E4 08FD 	DM3_MovPlus	MOVF	Param7D,F
***** #106 Unprocessed Opcode SKPZ *****
01326 04E5 		SKPZ		;Dist>255 to go?
01327 04E5 3204 		bra	DM3_Plus	; Yes
01328 04E6 0856 		MOVF	ServoSpeed,W
01329 04E7 027C 		SUBWF	Param7C,W	;Dist-Speed
01330 04E8 		SKPNB		;Speed>Dist?
01330 04E8 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01331 04E9 3205 		bra	DM3_NoSpeed	; Yes
01332 04EA 	;
01333 04EA 0856 	DM3_Plus	MOVF	ServoSpeed,W	;7D:7C = CurPos + Speed
01334 04EB 07B9 		ADDWF	ssCurPos,F
01335 04EC 0103 		CLRW
01336 04ED 3DBA 		ADDWFC	ssCurPos+1,F
01337 04EE 3204 		bra	DM3_Go
01338 04EF 	;
01339 04EF 	;
01340 04EF 	; set current position at destination position
01341 04EF 083B 	DM3_NoSpeed	movf	ssMD3_Dest,W
01342 04F0 00B9 		movwf	ssCurPos
01343 04F1 083C 		movf	ssMD3_Dest+1,W
01344 04F2 00BA 		movwf	ssCurPos+1
01345 04F3 	;
01346 04F3 0839 	DM3_Go	movf	ssCurPos,W
01347 04F4 00FC 		movwf	Param7C
01348 04F5 083A 		movf	ssCurPos+1,W
01349 04F6 00FD 		movwf	Param7D
01350 04F7 25F6 		call	ClampInt
01351 04F8 25BC 		call	Copy7CToSig
01352 04F9 2BD2 		goto	ModeReturn
01353 04FA 	;
01354 04FA 	;=========================================================================================
01355 04FA 	;Idle routine for Gripper Serial Servo mode
01356 04FA 	; Servo is set to idle only is no command or over current.
01357 04FA 	;
01358 04FA 0020 	DoMode4	movlb	0
01359 04FB 1BB8 		btfsc	ssCmdPos+1,7	;Any command issued?
01360 04FC 3242 		bra	DoMode4_1	; No, Idle the servo
01361 04FD 	;
01362 04FD 	;Check for over current, kill position command if over current is detected.
01363 04FD 2409 		call	CheckCurrent
01364 04FE 241B 		call	CheckGripCurrent
01365 04FF 1DBD 		btfss	OverCurrentFlag
01366 0500 3206 		bra	DM4_NotOverCurrent
01367 0501 01B7 		clrf	ssCmdPos	;kill the command
01368 0502 01B8 		clrf	ssCmdPos+1
01369 0503 17B8 		bsf	ssCmdPos+1,7
01370 0504 153E 		bsf	ssio_OverCurSD
01371 0505 11BD 		bcf	OverCurrentFlag
01372 0506 3238 		bra	DoMode4_1	;Idle the servo
01373 0507 	;
01374 0507 	DM4_NotOverCurrent:
01375 0507 	; Speed cannot be 0, if 0 set to 1 (slow)
01376 0507 113E 		bcf	ssio_OverCurSD
01377 0508 08D6 		movf	ServoSpeed,F
***** #106 Unprocessed Opcode SKPNZ *****
01378 0509 		SKPNZ		;Speed = 0?
01379 0509 0AD6 		incf	ServoSpeed,F	; yes, make it 1
01380 050A 1C3D 		btfss	PulseSent	;Time to update?
01381 050B 2BD2 		goto	ModeReturn	; No
01382 050C 103D 		bcf	PulseSent
01383 050D 	;Param7D:Param7C = Cmd-Cur
01384 050D 0839 		movf	ssCurPos,W
01385 050E 0237 		subwf	ssCmdPos,W
01386 050F 00FC 		movwf	Param7C
01387 0510 083A 		movf	ssCurPos+1,W
01388 0511 3B38 		subwfb	ssCmdPos+1,W
01389 0512 00FD 		movwf	Param7D
01390 0513 	; if Param7D:Param7C = 0 then we are In Position
01391 0513 047C 		iorwf	Param7C,W
***** #106 Unprocessed Opcode SKPNZ *****
01392 0514 		SKPNZ
01393 0514 320F 		bra	DoMode4_Hold	; if Cmd = Cur Go
SerialServo.asm                                                       Page: 36
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01394 0515 	;
01395 0515 	;Sign bit set if Cur>Cmd
01396 0515 1FFD 		BTFSS	Param7D,7	;Cmd>Cur?
01397 0516 3211 		bra	DoMode4_MovPlus	; Yes
01398 0517 	;Move minus
01399 0517 0F7D 		INCFSZ	Param7D,W	;Dist=0xFFxx?
01400 0518 2D1F 		GOTO	DoMode4_Minus	; No
01401 0519 0856 		MOVF	ServoSpeed,W
01402 051A 077C 		ADDWF	Param7C,W
01403 051B 1C03 		BTFSS	_C	;Dist<Speed?
01404 051C 3202 		bra	DoMode4_Minus	; Yes
01405 051D 3001 		movlw	0x01	; No, use 1 as speed
01406 051E 3201 		bra	DoMode4_Minus_1
01407 051F 	;
01408 051F 	; Subtract speed from current position
01409 051F 0856 	DoMode4_Minus	MOVF	ServoSpeed,W
01410 0520 02B9 	DoMode4_Minus_1	SUBWF	ssCurPos,F	;SigOutTime
01411 0521 3000 		MOVLW	0x00
01412 0522 3BBA 		SUBWFB	ssCurPos+1,F	;SigOutTimeH
01413 0523 3212 		bra	DoMode4_Go
01414 0524 	;
01415 0524 	;=============================
01416 0524 	; if Cur_AN0>(ssGripI+0x10)*4 then move minus 1
01417 0524 1EBD 	DoMode4_Hold	btfss	GripIOver	;Gripping too hard?
01418 0525 2D36 		goto	DoMode4_Go	; No
01419 0526 3001 		movlw	0x01	; No, use 2 as speed
01420 0527 33F8 		bra	DoMode4_Minus_1
01421 0528 	;
01422 0528 	;=============================
01423 0528 	; 7D:7C = distance to go
01424 0528 	;
01425 0528 1A3D 	DoMode4_MovPlus	btfsc	GripIMet	;Servo Current > ssGripI?
01426 0529 33FA 		bra	DoMode4_Hold	; Yes, don't move more closed.
01427 052A 	;
01428 052A 08FD 		MOVF	Param7D,F
***** #106 Unprocessed Opcode SKPZ *****
01429 052B 		SKPZ		;Dist>255 to go?
01430 052B 3206 		bra	DoMode4_Plus	; Yes
01431 052C 0856 		MOVF	ServoSpeed,W
01432 052D 027C 		SUBWF	Param7C,W	;Dist-Speed
01433 052E 		SKPB		;Speed>Dist?
01433 052E 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01434 052F 3202 		bra	DoMode4_Plus	; No
01435 0530 3001 		movlw	0x01	;Use 1 as speed
01436 0531 3201 		bra	DoMode4_Plus_1
01437 0532 	;
01438 0532 0856 	DoMode4_Plus	MOVF	ServoSpeed,W	;CurPos += Speed
01439 0533 07B9 	DoMode4_Plus_1	ADDWF	ssCurPos,F
01440 0534 0103 		CLRW
01441 0535 3DBA 		ADDWFC	ssCurPos+1,F
01442 0536 	;
01443 0536 	; make it so
01444 0536 0839 	DoMode4_Go	movf	ssCurPos,W	;7D:7C = CurPos
01445 0537 00FC 		movwf	Param7C
01446 0538 083A 		movf	ssCurPos+1,W
01447 0539 00FD 		movwf	Param7D
01448 053A 25F6 		call	ClampInt
01449 053B 25BC 		call	Copy7CToSig
01450 053C 123D 		bcf	GripIMet
01451 053D 12BD 		bcf	GripIOver
01452 053E 2BD2 		goto	ModeReturn
01453 053F 	;
01454 053F 	DoMode4_1:
01455 053F 153D 		bsf	ServoIdle	;power down servo
01456 0540 123D 		bcf	GripIMet
01457 0541 12BD 		bcf	GripIOver
01458 0542 2BD2 		goto	ModeReturn
01459 0543 	;
01460 0543 	;=========================================================================================
01461 0543 	;=========================================================================================
01462 0543 	;DebounceTime,kMaxMode
01463 0543 	;Timer4Lo,SysMode
01464 0543 0020 	HandleButtons	movlb	0x00	;bank 0
***** #105 Unrecognized Symbol f *****
01465 0544 0832 		movf	Timer4Lo,f
***** #106 Unprocessed Opcode SKPNZ *****
01466 0545 		SKPNZ		;Debounced?
01467 0545 320B 		bra	HdlBtn_1	; Yes
01468 0546 	;
01469 0546 1861 		btfsc	SW1_Flag
01470 0547 3206 		bra	HdlBtn_DB
01471 0548 18E1 		btfsc	SW2_Flag
01472 0549 3204 		bra	HdlBtn_DB
01473 054A 1961 		btfsc	SW3_Flag
01474 054B 3202 		bra	HdlBtn_DB
01475 054C 1DE1 		btfss	SW4_Flag
01476 054D 0008 		return
01477 054E 	;
01478 054E 300A 	HdlBtn_DB	movlw	DebounceTime
01479 054F 00B2 		movwf	Timer4Lo
01480 0550 0008 		return
01481 0551 	; we are de-bounced
01482 0551 1861 	HdlBtn_1	btfsc	SW1_Flag
01483 0552 3207 		bra	HdlBtn_Btn1
01484 0553 18E1 		btfsc	SW2_Flag
01485 0554 3206 		bra	HdlBtn_Btn2
01486 0555 1961 		btfsc	SW3_Flag
01487 0556 3205 		bra	HdlBtn_Btn3
01488 0557 19E1 		btfsc	SW4_Flag
SerialServo.asm                                                       Page: 37
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01489 0558 3204 		bra	HdlBtn_Btn4
01490 0559 0008 		return
01491 055A 	;
01492 055A 	; Mode
01493 055A 	HdlBtn_Btn1:
01494 055A 2D4E 		goto	HdlBtn_DB
01495 055B 	;
01496 055B 	HdlBtn_Btn2:
01497 055B 2D4E 		goto	HdlBtn_DB
01498 055C 	;
01499 055C 	HdlBtn_Btn3:
01500 055C 2D4E 		goto	HdlBtn_DB
01501 055D 	; not used
01502 055D 	HdlBtn_Btn4:
01503 055D 2D4E 		goto	HdlBtn_DB
01504 055E 	;
01505 055E 	;=========================================================================================
01506 055E 	; Setup or Read AN0 or Read AN4
01507 055E 007C 	ANNumMask	EQU	0x7C
01508 055E 0000 	AN0_Val	EQU	0x00
01509 055E 0004 	AN1_Val	EQU	0x04
01510 055E 0008 	AN2_Val	EQU	0x08
01511 055E 000C 	AN3_Val	EQU	0x0C
01512 055E 	;AN4_Val	EQU	0x10
01513 055E 	;AN7_Val	EQU	0x1C
01514 055E 	;
01515 055E 0021 	ReadAN	MOVLB	1	;bank 1
01516 055F 1C1D 		BTFSS	ADCON0,ADON	;Is the Analog input ON?
01517 0560 3250 		BRA	ReadAN0_ColdStart	; No, go start it
01518 0561 	;
01519 0561 189D 		BTFSC	ADCON0,GO_NOT_DONE	;Conversion done?
01520 0562 3257 		BRA	ReadAN_Rtn	; No
01521 0563 	;
01522 0563 3000 		movlw	HIGH Cur_AN0
01523 0564 0085 		movwf	FSR0H
01524 0565 081D 		movf	ADCON0,W
01525 0566 0020 		movlb	0x00	;bank 0
01526 0567 397C 		andlw	ANNumMask
***** #106 Unprocessed Opcode SKPNZ *****
01527 0568 		SKPNZ
01528 0568 3219 		bra	ReadAN_AN0
01529 0569 	;
01530 0569 00F8 		movwf	Param78	;AN select bits
01531 056A 	;Aux0 SW1_LED1
01532 056A 085E 		movf	ssAux0Config,W
01533 056B 390F 		andlw	0x0F
01534 056C 3C04 		sublw	kAuxIOAnalogIn
***** #106 Unprocessed Opcode SKPZ *****
01535 056D 		SKPZ
01536 056D 3203 		bra	ReadAN_TryAN2
01537 056E 3008 		movlw	AN2_Val
01538 056F 0278 		subwf	Param78,W	;AN select bits
***** #106 Unprocessed Opcode SKPNZ *****
01539 0570 		SKPNZ
01540 0570 322D 		bra	ReadAN_AN2
01541 0571 	;Aux1 SW2_LED2
01542 0571 085F 	ReadAN_TryAN2	movf	ssAux1Config,W
01543 0572 390F 		andlw	0x0F
01544 0573 3C04 		sublw	kAuxIOAnalogIn
***** #106 Unprocessed Opcode SKPZ *****
01545 0574 		SKPZ
01546 0574 3203 		bra	ReadAN_TryAN0
01547 0575 3008 		movlw	AN2_Val
01548 0576 0278 		subwf	Param78,W	;AN select bits
***** #106 Unprocessed Opcode SKPNZ *****
01549 0577 		SKPNZ
01550 0577 3226 		bra	ReadAN_AN2
01551 0578 	;IServo
01552 0578 3000 	ReadAN_TryAN0	movlw	AN0_Val
01553 0579 0278 		subwf	Param78,W
***** #106 Unprocessed Opcode SKPNZ *****
01554 057A 		SKPNZ
01555 057A 3207 		bra	ReadAN_AN0
01556 057B 	;
01557 057B 3000 		movlw	AN0_Val	;next to read
01558 057C 00F8 		movwf	Param78
01559 057D 30B3 		movlw	LOW Cur_AN0
01560 057E 0084 		movwf	FSR0L
01561 057F 0021  a		MOVLB	Cur_AN0	;banksel
01560 0580 		BankSel	Cur_AN0	;where the analog stuff is
01562 0580 1432 		bsf	NewDataAN0
01563 0581 3222 		bra	ReadAN_1
01564 0582 	;
01565 0582 30B3 	ReadAN_AN0	movlw	low Cur_AN0
01566 0583 0084 		movwf	FSR0L
01567 0584 0021  a		MOVLB	Cur_AN0	;banksel
01566 0585 		BankSel	Cur_AN0	;where the analog stuff is
01568 0585 1432 		bsf	NewDataAN0
01569 0586 3004 		movlw	AN1_Val	;next to read
01570 0587 00F8 		movwf	Param78
01571 0588 085E 		movf	ssAux0Config,W
01572 0589 390F 		andlw	0x0F
01573 058A 3C04 		sublw	kAuxIOAnalogIn
***** #106 Unprocessed Opcode SKPNZ *****
01574 058B 		SKPNZ
01575 058B 3218 		bra	ReadAN_1
01576 058C 	;
01577 058C 3008 	ReadAN_AN0_1	movlw	AN2_Val	;next to read
01578 058D 00F8 		movwf	Param78
SerialServo.asm                                                       Page: 38
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01579 058E 085F 		movf	ssAux1Config,W
01580 058F 390F 		andlw	0x0F
01581 0590 3C04 		sublw	kAuxIOAnalogIn
***** #106 Unprocessed Opcode SKPNZ *****
01582 0591 		SKPNZ
01583 0591 3212 		bra	ReadAN_1
01584 0592 	;
01585 0592 300C 	ReadAN_AN0_2	movlw	AN3_Val	;next to read
01586 0593 00F8 		movwf	Param78
01587 0594 0860 		movf	ssAux2Config,W
01588 0595 390F 		andlw	0x0F
01589 0596 3C04 		sublw	kAuxIOAnalogIn
***** #106 Unprocessed Opcode SKPNZ *****
01590 0597 		SKPNZ
01591 0597 320C 		bra	ReadAN_1
01592 0598 	;
01593 0598 3000 	ReadAN_AN0_3	movlw	AN0_Val	;next to read
01594 0599 00F8 		movwf	Param78
01595 059A 3209 		bra	ReadAN_1
01596 059B 	;
01597 059B 30B5 	ReadAN_AN1	movlw	low Cur_AN1
01598 059C 0084 		movwf	FSR0L
01599 059D 33EE 		bra	ReadAN_AN0_1
01600 059E 	;
01601 059E 30B7 	ReadAN_AN2	movlw	low Cur_AN2
01602 059F 0084 		movwf	FSR0L
01603 05A0 33F1 		bra	ReadAN_AN0_2
01604 05A1 	;
01605 05A1 30B9 	ReadAN_AN3	movlw	low Cur_AN3
01606 05A2 0084 		movwf	FSR0L
01607 05A3 33F4 		bra	ReadAN_AN0_3
01608 05A4 	;
01609 05A4 0021 	ReadAN_1	movlb	0x01	;bank 1
01610 05A5 081B 		MOVF	ADRESL,W
01611 05A6 001A 		MOVWI	FSR0++
01612 05A7 081C 		MOVF	ADRESH,W
01613 05A8 001A 		MOVWI	FSR0++
01614 05A9 	;
01615 05A9 0878 		movf	Param78,W
01616 05AA 1409 		BSF	WREG,0	;ADC ON
01617 05AB 009D 		MOVWF	ADCON0
01618 05AC 3004 		movlw	0x04	;Acquisition time 5uS
01619 05AD 211F 		call	DelayWuS
01620 05AE 149D 		BSF	ADCON0,ADGO	;Start next conversion.
01621 05AF 0020 		movlb	0x00	; bank 0
01622 05B0 0008 		return
01623 05B1 	;
01624 05B1 0021 	ReadAN0_ColdStart	MOVLB	1
01625 05B2 30E0 		MOVLW	b'11100000'	;Right Just, fosc/64
01626 05B3 	;	MOVLW	b'11110000'	;Right Just, Frc
01627 05B3 009E 		MOVWF	ADCON1
01628 05B4 3000 		MOVLW	AN0_Val	;Select AN0
01629 05B5 1409 		BSF	WREG,0	;ADC ON
01630 05B6 009D 		MOVWF	ADCON0
01631 05B7 3004 		movlw	0x04	;Acquisition time 5uS
01632 05B8 211F 		call	DelayWuS
01633 05B9 149D 	ReadAN_3	BSF	ADCON0,GO
01634 05BA 	ReadAN_Rtn:
01635 05BA 0020 	Bank0_Rtn	MOVLB	0
01636 05BB 0008 		Return
01637 05BC 	;
01638 05BC 	;=========================================================================================
01639 05BC 	;
01640 05BC 	; Don't disable interrupts if you don't need to...
01641 05BC 0025 	Copy7CToSig	MOVLB	0x05	;bank 5
01642 05BD 087C 		MOVF	Param7C,W
01643 05BE 0220 		SUBWF	SigOutTime,W
***** #106 Unprocessed Opcode SKPZ *****
01644 05BF 		SKPZ
01645 05BF 3203 		bra	Copy7CToSig_1
01646 05C0 087D 		MOVF	Param7D,W
01647 05C1 0221 		SUBWF	SigOutTimeH,W
***** #106 Unprocessed Opcode SKPNZ *****
01648 05C2 		SKPNZ
01649 05C2 3208 		bra	Copy7CToSig_Done
01650 05C3 	;
01651 05C3 138B 	Copy7CToSig_1	bcf	INTCON,GIE
01652 05C4 1B8B 		btfsc	INTCON,GIE
01653 05C5 33FD 		bra	Copy7CToSig_1
01654 05C6 087C 		MOVF	Param7C,W
01655 05C7 00A0 		MOVWF	SigOutTime
01656 05C8 087D 		MOVF	Param7D,W
01657 05C9 00A1 		MOVWF	SigOutTimeH
01658 05CA 178B 		bsf	INTCON,GIE
01659 05CB 0020 	Copy7CToSig_Done	movlb	0	;bank 0
01660 05CC 113D 		BCF	ServoIdle
01661 05CD 0008 		return
01662 05CE 	;
01663 05CE 	;=========================================================================================
01664 05CE 	;=========================================================================================
01665 05CE 	; Set CCP1 to go high is 0x100 clocks
01666 05CE 	;
01667 05CE 0020 	StartServo	MOVLB	0	;bank 0
01668 05CF 1CBD 		BTFSS	ServoOff
01669 05D0 0008 		RETURN
01670 05D1 10BD 		BCF	ServoOff
01671 05D2 	;
01672 05D2 25E5 		CALL	SetMiddlePosition
01673 05D3 25BC 		CALL	Copy7CToSig
SerialServo.asm                                                       Page: 39
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01674 05D4 	;
01675 05D4 0025 		movlb	0x05	;bank 5
01676 05D5 3040 		MOVLW	LOW kServoDwellTime
01677 05D6 00A2 		MOVWF	CalcdDwell
01678 05D7 309C 		MOVLW	HIGH kServoDwellTime
01679 05D8 00A3 		MOVWF	CalcdDwellH
01680 05D9 0020 		movlb	0	;bank 0
01681 05DA 	;
01682 05DA 3000 		MOVLW	0x00	;start in 0x100 clocks
01683 05DB 0096 		MOVWF	TMR1L
01684 05DC 30FF 		MOVLW	0xFF
01685 05DD 0097 		MOVWF	TMR1H
01686 05DE 	;
01687 05DE 0025 		MOVLB	0x05
01688 05DF 0192 		CLRF	CCPR1H
01689 05E0 0191 		CLRF	CCPR1L
01690 05E1 3008 		MOVLW	CCP1CON_Set
01691 05E2 0093 		MOVWF	CCP1CON	;go high on match
01692 05E3 0020 		MOVLB	0x00	;Bank 0
01693 05E4 0008 		RETURN
01694 05E5 	;
01695 05E5 	;=========
01696 05E5 	;
01697 05E5 30B8 	SetMiddlePosition	MOVLW	LOW kMidPulseWidth
01698 05E6 00FC 		MOVWF	Param7C
01699 05E7 300B 		MOVLW	HIGH kMidPulseWidth
01700 05E8 00FD 		MOVWF	Param7D
01701 05E9 0008 		Return
01702 05EA 	;
01703 05EA 	;=========================================================================================
01704 05EA 0020 	StopServo	movlb	0	;bank 0
01705 05EB 18BD 		BTFSC	ServoOff
01706 05EC 0008 		RETURN
01707 05ED 	;
01708 05ED 0025 		movlb	0x05	;bank 5
01709 05EE 3040 		MOVLW	LOW kServoDwellTime
01710 05EF 00A2 		MOVWF	CalcdDwell
01711 05F0 309C 		MOVLW	HIGH kServoDwellTime
01712 05F1 00A3 		MOVWF	CalcdDwellH
01713 05F2 0020 		movlb	0	;bank 0
01714 05F3 153D 		BSF	ServoIdle
01715 05F4 14BD 		BSF	ServoOff
01716 05F5 0008 		return
01717 05F6 	;
01718 05F6 	;=========================================================================================
01719 05F6 	; ClampInt(Param7D:Param7C,ServoMin_uS,ServoMax_uS)
01720 05F6 	;
01721 05F6 	; Entry: Param7D:Param7C
01722 05F6 	; Exit: Param7D:Param7C=ClampInt(Param7D:Param7C,ServoMin_uS,ServoMax_uS)
01723 05F6 	;
01724 05F6 0020 	ClampInt	movlb	0
01725 05F7 0855 		MOVF	ServoMax_uS+1,W
01726 05F8 027D 		SUBWF	Param7D,W	;7D-ServoMax_uS
01727 05F9 		SKPNB		;7D<Max?
01727 05F9 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01728 05FA 2E02 		GOTO	ClampInt_1	; Yes
***** #106 Unprocessed Opcode SKPZ *****
01729 05FB 		SKPZ		;7D=Max?
01730 05FB 2E10 		GOTO	ClampInt_tooHigh	; No, its greater.
01731 05FC 0854 		MOVF	ServoMax_uS,W	; Yes, MSB was equal check LSB
01732 05FD 027C 		SUBWF	Param7C,W	;7C-ServoMax_uS
***** #106 Unprocessed Opcode SKPNZ *****
01733 05FE 		SKPNZ		;=ServoMax_uS
01734 05FE 0008 		RETURN		;Yes
01735 05FF 		SKPB		;7C<Max?
01735 05FF 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01736 0600 2E10 		GOTO	ClampInt_tooHigh	; No
01737 0601 0008 		RETURN		; Yes
01738 0602 	;
01739 0602 0853 	ClampInt_1	MOVF	ServoMin_uS+1,W
01740 0603 027D 		SUBWF	Param7D,W	;7D-ServoMin_uS
01741 0604 		SKPNB		;7D<Min?
01741 0604 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
01742 0605 2E0B 		GOTO	ClampInt_tooLow	; Yes
***** #106 Unprocessed Opcode SKPZ *****
01743 0606 		SKPZ		;=Min?
01744 0606 0008 		RETURN		; No, 7D>ServoMin_uS
01745 0607 08D2 		MOVF	ServoMin_uS,F	; Yes, MSB is a match
01746 0608 027C 		SUBWF	Param7C,W	;7C-ServoMin_uS
01747 0609 		SKPB		;7C>=Min?
01747 0609 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
01748 060A 0008 		RETURN		; Yes
01749 060B 	;
01750 060B 0852 	ClampInt_tooLow	MOVF	ServoMin_uS,W
01751 060C 00FC 		MOVWF	Param7C
01752 060D 0853 		MOVF	ServoMin_uS+1,W
01753 060E 00FD 		MOVWF	Param7D
01754 060F 0008 		RETURN
01755 0610 	;
01756 0610 0854 	ClampInt_tooHigh	MOVF	ServoMax_uS,W
01757 0611 00FC 		MOVWF	Param7C
01758 0612 0855 		MOVF	ServoMax_uS+1,W
01759 0613 00FD 		MOVWF	Param7D
01760 0614 0008 		RETURN
01761 0615 	;
01762 0615 	;=========================================================================================
01763 0615 	; call once
01764 0615 	;=========================================================================================
01765 0615 	;
SerialServo.asm                                                       Page: 40
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01766 0615 0021 	InitializeIO	MOVLB	0x01	; select bank 1
01767 0616 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
01768 0617 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
01769 0618 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
01770 0619 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
01771 061A 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
01772 061B 1515 		bsf	OPTION_REG,PS2
01773 061C 	;
01774 061C 30F0 		MOVLW	OSCCON_Value
01775 061D 0099 		MOVWF	OSCCON
01776 061E 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
01777 061F 0097 		movwf	WDTCON
01778 0620 	;
01779 0620 0024 		movlb	4	; bank 4
01780 0621 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
01781 0622 	;
01782 0622 0023 		MOVLB	0x03	; bank 3
01783 0623 3003 		movlw	ANSELA_Val
01784 0624 008C 		movwf	ANSELA
01785 0625 3000 		movlw	ANSELB_Val
01786 0626 008D 		movwf	ANSELB
01787 0627 	;
01788 0627 	;Setup T2 for 100/s
01789 0627 0020 		movlb	0	; bank 0
01790 0628 304F 		MOVLW	T2CON_Value
01791 0629 009C 		MOVWF	T2CON
01792 062A 307D 		MOVLW	PR2_Value
01793 062B 009B 		MOVWF	PR2
01794 062C 0021 		movlb	1	; bank 1
01795 062D 1491 		bsf	PIE1,TMR2IE	; enable Timer 2 interupt
01796 062E 	;
01797 062E 	; setup timer 1 for 0.5uS/count
01798 062E 	;
01799 062E 0020 		MOVLB	0x00	; bank 0
01800 062F 3021 		MOVLW	T1CON_Val
01801 0630 0098 		MOVWF	T1CON
01802 0631 1399 		bcf	T1GCON,TMR1GE	;always count
01803 0632 	;
01804 0632 	;SPI MISO >> SDI1 RB1, default
01805 0632 	;SPI CLK >> RB4, default
01806 0632 0022 		movlb	2	;bank 2
01807 0633 179D 		bsf	APFCON0,RXDTSEL	;RX >> RB2
01808 0634 141E 		bsf	APFCON1,TXCKSEL	;TX >> RB5
01809 0635 171D 		bsf	APFCON0,SDO1SEL	;SPI MOSI >> SDO1 RA6
01810 0636 	;	
01811 0636 	; clear memory to zero
01812 0636 20BF 		CALL	ClearRam
01813 0637 0064 		CLRWDT
01814 0638 20DE 		CALL	CopyToRam
01815 0639 	;
01816 0639 	; setup ccp1
01817 0639 	;
01818 0639 14BD 		BSF	ServoOff
01819 063A 	;	BANKSEL	APFCON
01820 063A 	;	BSF	APFCON,CCP1SEL	;CCP1 on RA5
01821 063A 0025  a		MOVLB	CCP1CON	;banksel
01820 063B 		BANKSEL	CCP1CON
01822 063B 0193 		CLRF	CCP1CON
01823 063C 	;
01824 063C 0021 		MOVLB	0x01	;Bank 1
01825 063D 1511 		bsf	PIE1,CCP1IE
01826 063E 	;
01827 063E 	;
01828 063E 0020 		MOVLB	0x00	;Bank 0
01829 063F 	; setup data ports
01830 063F 3011 		movlw	PortBValue
01831 0640 008D 		movwf	PORTB	;init port B
01832 0641 3000 		movlw	PortAValue
01833 0642 008C 		movwf	PORTA
01834 0643 0021 		MOVLB	0x01	; bank 1
01835 0644 30BF 		movlw	PortADDRBits
01836 0645 008C 		movwf	TRISA
01837 0646 30C6 		movlw	PortBDDRBits	;setup for programer
01838 0647 008D 		movwf	TRISB
01839 0648 	;
01840 0648 		if useRS232
01841 0648 	; setup serial I/O
01842 0648 0023  a		MOVLB	BAUDCON	;banksel
01841 0649 		BANKSEL	BAUDCON	; bank 3
01843 0649 3008 		movlw	BAUDCON_Value
01844 064A 009F 		movwf	BAUDCON
01845 064B 30CF 		MOVLW	low BaudRate
01846 064C 009B 		MOVWF	SPBRGL
01847 064D 3000 		MOVLW	high BaudRate
01848 064E 009C 		MOVWF	SPBRGH
01849 064F 3024 		MOVLW	TXSTA_Value
01850 0650 009E 		MOVWF	TXSTA
01851 0651 3090 		MOVLW	RCSTA_Value
01852 0652 009D 		MOVWF	RCSTA
01853 0653 0021 		movlb	0x01	; bank 1
01854 0654 1691 		BSF	PIE1,RCIE	; Serial Receive interupt
01855 0655 0020 		movlb	0x00	; bank 0
01856 0656 	;
01857 0656 		endif
01858 0656 	;
01859 0656 0064 		CLRWDT
01860 0657 	;-----------------------
01861 0657 	;
01862 0657 0020 		MOVLB	0x00
SerialServo.asm                                                       Page: 41
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

01863 0658 3064 		MOVLW	LEDTIME
01864 0659 00A0 		MOVWF	SysLED_Time
01865 065A 3001 		movlw	0x01
01866 065B 00A3 		movwf	SysLEDCount	;start blinking right away
01867 065C 3064 		movlw	.100
01868 065D 00B2 		movwf	Timer4Lo	;ignor buttons for 1st second
01869 065E 	;
01870 065E 0857 		movf	SysMode,W
01871 065F 00A4 		movwf	LED1_Blinks
01872 0660 	;
01873 0660 	;if mode 3 don't move
01874 0660 17B8 		bsf	ssCmdPos+1,7
01875 0661 	;
01876 0661 0064 		CLRWDT
01877 0662 	;
01878 0662 21F7 		call	Init_AS5047D	;initialize the SPI encoder I/O
01879 0663 	;
01880 0663 	;
01881 0663 170B 		bsf	INTCON,PEIE	; enable periferal interupts
01882 0664 178B 		bsf	INTCON,GIE	; enable interupts
01883 0665 	;
01884 0665 0008 		return
01885 0666 	;
01886 0666 	;=========================================================================================
01887 0666 	;=========================================================================================
01888 0666 	;
01889 0666 	;
01890 0666 		org 0x800
01891 0800 		include <SerialServoCmds.inc>
00001 0800 	;=========================================================================================
00002 0800 	;
00003 0800 	;    Filename:      SerialServoCmds.inc
00004 0800 	;    Date:          6/1/2018
00005 0800 	;    File Version:  1.1
00006 0800 	;
00007 0800 	;    Author:        David M. Flynn
00008 0800 	;    Company:       Oxford V.U.E., Inc.
00009 0800 	;    E-Mail:        dflynn@oxfordvue.com
00010 0800 	;    Web Site:      http://www.oxfordvue.com/
00011 0800 	;
00012 0800 	;=========================================================================================
00013 0800 	; Notes:
00014 0800 	;  Command interpreter for SerialServo
00015 0800 	;
00016 0800 	; History
00017 0800 	; 1.1    6/1/2018	All commands are here now.
00018 0800 	; 1.0    5/25/2018	Moved out of SerialServo.asm
00019 0800 	;=========================================================================================
00020 0800 	;
00021 0800 0081 	kCmd_SetMode	EQU	0x81	;+1 data (SysMode), return ACK
00022 0800 0001 	kCmd_GetMode	EQU	0x01
00023 0800 0082 	kCmd_SetCmdPos	EQU	0x82	;+2 data (ssCmdPos), return ACK
00024 0800 0002 	kCmd_GetCmdPos	EQU	0x02
00025 0800 0083 	kCmd_SetMaxI	EQU	0x83	;+1 data (ssMaxI), return ACK
00026 0800 0003 	kCmd_GetMaxI	EQU	0x03
00027 0800 0084 	kCmd_SetFFwd	EQU	0x84	;+2 data (ServoFastForward), return ACK
00028 0800 0004 	kCmd_GetFFwd	EQU	0x04
00029 0800 0085 	kCmd_SetFRev	EQU	0x85	;+2 data (ServoFastReverse), return ACK
00030 0800 0005 	kCmd_GetFRev	EQU	0x05
00031 0800 0086 	kCmd_SetMin_uS	EQU	0x86	;+2 data (ServoMin_uS), return ACK
00032 0800 0006 	kCmd_GetMin_uS	EQU	0x06
00033 0800 0087 	kCmd_SetMax_uS	EQU	0x87	;+2 data (ServoMax_uS), return ACK
00034 0800 0007 	kCmd_GetMax_uS	EQU	0x07
00035 0800 0088 	kCmd_SetRevDir	EQU	0x88	;+1 data (ssReverseDir), return ACK
00036 0800 0008 	kCmd_GetRevDir	EQU	0x08
00037 0800 0089 	kCmd_SetEnaOvrCur	EQU	0x89	;+1 data (ssEnableOverCur), return ACK
00038 0800 0009 	kCmd_GetEnaOvrCur	EQU	0x09
00039 0800 	;
00040 0800 008B 	kCmd_SetStopCenter	EQU	0x8B	;+2 data (ServoStopCenter), return ACK
00041 0800 000B 	kCmd_GetStopCenter	EQU	0x0B
00042 0800 008C 	kCmd_SetSpeed	EQU	0x8C	;+1 data (ServoSpeed), return ACK
00043 0800 000C 	kCmd_GetSpeed	EQU	0x0C
00044 0800 008D 	kCmd_SetUseIdleCenter	EQU	0x8D	;+1 data (ssMode3IdleCenter), return ACK
00045 0800 000D 	kCmd_GetUseIdleCenter	EQU	0x0D
00046 0800 008E 	kCmd_SetDeadBand	EQU	0x8E	;+1 data (DeadBand), return ACK
00047 0800 000E 	kCmd_GetDeadBand	EQU	0x0E
00048 0800 008F 	kCmd_SetUseFastPWM	EQU	0x8F	;+1 data (ssEnableFastPWM), return ACK
00049 0800 000F 	kCmd_GetUseFastPWM	EQU	0x0F
00050 0800 00B1 	kCmd_SetGripI	EQU	0xB1	;+1 data (ssGripI), return ACK
00051 0800 0021 	kCmd_GetGripI	EQU	0x21
00052 0800 00B2 	kCmd_SetAuxConfig	EQU	0xB2	;+2 data (AuxNum,Value), return ACK
00053 0800 0022 	kCmd_GetAuxConfig	EQU	0x22	;+1 data (AuxNum)
00054 0800 00B3 	kCmd_SetAuxNValue	EQU	0xB3	;+2 data (AuxNum,Value), return ACK
00055 0800 0023 	kCmd_GetAuxNValue	EQU	0x23	;(AuxN,ValueL,ValueH)
00056 0800 00B4 	kCmd_SetEncoderOffset	EQU	0xB4	;+2 data (EncoderOffset), return ACK
00057 0800 0024 	kCmd_GetEncoderOffset	EQU	0x24
00058 0800 	;
00059 0800 0091 	kCmd_GetI	EQU	0x91	;return Cur_AN0
00060 0800 0092 	kCmd_GetEnc	EQU	0x92	;return EncoderVal
00061 0800 0093 	kCmd_GetEncAbs	EQU	0x93	;return EncoderAccum
00062 0800 0094 	kCmd_SaveParams	EQU	0x94	;Save all eeprom params, return ACK
00063 0800 0095 	kCmd_RestoreParams	EQU	0x95	;Copy to ram, return ACK
00064 0800 0096 	kCmd_GetBattVolts	EQU	0x96	;return Cur_AN7
00065 0800 0097 	kCmd_GetCalPot	EQU	0x97	;return Cur_AN4
00066 0800 0098 	kCmd_GetStatus	EQU	0x98	;return ssStatus
00067 0800 0099 	kCmd_ReBoot	EQU	0x99	;ReBoot the controller
00068 0800 009A 	kCmd_RunBootloader	EQU	0x9A	;Set EEPROM (0xFF) = 0xFF and reboot
00069 0800 	;
00070 0800 	; these commands save params and return a 0,0,0,0 packet with the new address
SerialServo.asm                                                       Page: 42
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00071 0800 00A1 	kCmd_SetMasterAddr	EQU	0xA1	;+1 data, return a zero packet
00072 0800 00A2 	kCmd_SetSlaveAddr	EQU	0xA2	;+1 data, return a zero packet
00073 0800 	;
00074 0800 	;Special packet (0xDD, 0xDD, 0x01, 0x02, 0xAA, 0x00, 0x00, 0x00, checksum)
00075 0800 00AA 	kCmd_SendIDString	EQU	0xAA	; returns "DMFE Serial Servo\n"
00076 0800 	;
00077 0800 	;=========================================================================================
00078 0800 	;
00079 0800 	RS232_Send_S0	mCall1To0	RS232_Send
00079 0800 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00079 0801 2383      M		CALL	RS232_Send		CALL	Destination
00079 0802 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00079 0803 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00080 0804 0008 		return
00081 0805 	;
00082 0805 	;=========================================================================================
00083 0805 	; Entry: RXDataIsNew=1, data in RX_Data
00084 0805 	;
00085 0805 0021 	HandleRXData	movlb	1	;bank 1
00086 0806 10A1 		bcf	RXDataIsNew
00087 0807 1821 		btfsc	RXDataValidFlag	;from master to me?
00088 0808 3202 		bra	HandleRXData_1
00089 0809 0020 	HandleRXData_Rtn	movlb	0	;bank 0
00090 080A 0008 		return		; no, ignore this packet
00091 080B 	;---kCmd_SetMode-------------------
00092 080B 0020 	HandleRXData_1	movlb	0	;bank 0
00093 080C 30AA 		movlw	low RX_Data
00094 080D 0086 		movwf	FSR1L
00095 080E 3000 		movlw	high RX_Data
00096 080F 0087 		movwf	FSR1H
00097 0810 	;
00098 0810 30AE 		movlw	low TX_Data
00099 0811 0084 		movwf	FSR0L
00100 0812 3000 		movlw	high TX_Data
00101 0813 0085 		movwf	FSR0H
00102 0814 	;
00103 0814 0016 		moviw	FSR1++
00104 0815 00F8 		movwf	Param78	;aka RX_Data
00105 0816 3081 		movlw	kCmd_SetMode
00106 0817 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00107 0818 		SKPZ
00108 0818 3208 		bra	Cmd_SetMode_end
00109 0819 	; Set Mode
00110 0819 3005 		movlw	kMaxMode+1
00111 081A 0201 		subwf	INDF1,W
00112 081B 		SKPB		;kMaxMode+1>Data
00112 081B 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00113 081C 33EC 		bra	HandleRXData_Rtn
00114 081D 	;
00115 081D 0016 		moviw	FSR1++
00116 081E 00D7 		movwf	SysMode
00117 081F 00A4 		movwf	LED1_Blinks
00118 0820 2A03 		goto	TX_ACK
00119 0821 	;
00120 0821 	Cmd_SetMode_end:
00121 0821 	;---kCmd_GetMode------------------
00122 0821 3001 		movlw	kCmd_GetMode
00123 0822 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00124 0823 		SKPZ
00125 0823 3203 		bra	Cmd_GetMode_end
00126 0824 	; Get Mode
00127 0824 0857 		movf	SysMode,W
00128 0825 001A 		movwi	FSR0++
00129 0826 2800 		goto	RS232_Send_S0
00130 0827 	;
00131 0827 	Cmd_GetMode_end:
00132 0827 	;---kCmd_SetCmdPos-------------------
00133 0827 3082 		movlw	kCmd_SetCmdPos
00134 0828 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00135 0829 		SKPZ
00136 0829 3205 		bra	Cmd_SetCmdPos_end
00137 082A 	; Set Command Position
00138 082A 0016 		moviw	FSR1++
00139 082B 00B7 		movwf	ssCmdPos
00140 082C 0016 		moviw	FSR1++
00141 082D 00B8 		movwf	ssCmdPos+1
00142 082E 2A03 		goto	TX_ACK
00143 082F 	;
00144 082F 	Cmd_SetCmdPos_end:
00145 082F 	;---kCmd_GetCmdPos------------------
00146 082F 3002 		movlw	kCmd_GetCmdPos
00147 0830 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00148 0831 		SKPZ
00149 0831 3205 		bra	Cmd_GetCmdPos_end
00150 0832 	; Get Command Position
00151 0832 0837 		movf	ssCmdPos,W
00152 0833 001A 		movwi	FSR0++
00153 0834 0838 		movf	ssCmdPos+1,W
00154 0835 001A 		movwi	FSR0++
00155 0836 2800 		goto	RS232_Send_S0
00156 0837 	;
00157 0837 	Cmd_GetCmdPos_end:
00158 0837 	;---kCmd_SetMaxI-------------------
00159 0837 3083 		movlw	kCmd_SetMaxI
00160 0838 0278 		subwf	Param78,W	;aka RX_Data
SerialServo.asm                                                       Page: 43
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

***** #106 Unprocessed Opcode SKPZ *****
00161 0839 		SKPZ
00162 0839 3203 		bra	Cmd_SetMaxI_end
00163 083A 	; Set Max Current
00164 083A 0016 		moviw	FSR1++
00165 083B 00DB 		movwf	ssMaxI
00166 083C 2A03 		goto	TX_ACK
00167 083D 	;
00168 083D 	Cmd_SetMaxI_end:
00169 083D 	;---kCmd_GetMaxI-------------------
00170 083D 3003 		movlw	kCmd_GetMaxI
00171 083E 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00172 083F 		SKPZ
00173 083F 3203 		bra	Cmd_GetMaxI_end
00174 0840 	; Get Max Current
00175 0840 085B 		movf	ssMaxI,W
00176 0841 001A 		movwi	FSR0++
00177 0842 2800 		goto	RS232_Send_S0
00178 0843 	;
00179 0843 	Cmd_GetMaxI_end:
00180 0843 	;---kCmd_SetFFwd-------------------
00181 0843 3084 		movlw	kCmd_SetFFwd
00182 0844 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00183 0845 		SKPZ
00184 0845 3205 		bra	Cmd_SetFFwd_end
00185 0846 	; Set ServoFastForward
00186 0846 0016 		moviw	FSR1++
00187 0847 00CC 		movwf	ServoFastForward
00188 0848 0016 		moviw	FSR1++
00189 0849 00CD 		movwf	ServoFastForward+1
00190 084A 2A03 		goto	TX_ACK
00191 084B 	;
00192 084B 	Cmd_SetFFwd_end:
00193 084B 	;---kCmd_GetFFwd-------------------
00194 084B 3004 		movlw	kCmd_GetFFwd
00195 084C 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00196 084D 		SKPZ
00197 084D 3205 		bra	Cmd_GetFFwd_end
00198 084E 	; Get ServoFastForward
00199 084E 084C 		movf	ServoFastForward,W
00200 084F 001A 		movwi	FSR0++
00201 0850 084D 		movf	ServoFastForward+1,W
00202 0851 001A 		movwi	FSR0++
00203 0852 2800 		goto	RS232_Send_S0
00204 0853 	;
00205 0853 	Cmd_GetFFwd_end:
00206 0853 	;---kCmd_SetFRev-------------------
00207 0853 3085 		movlw	kCmd_SetFRev
00208 0854 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00209 0855 		SKPZ
00210 0855 3205 		bra	Cmd_SetFRev_end
00211 0856 	; Set ServoFastReverse
00212 0856 0016 		moviw	FSR1++
00213 0857 00CE 		movwf	ServoFastReverse
00214 0858 0016 		moviw	FSR1++
00215 0859 00CF 		movwf	ServoFastReverse+1
00216 085A 2A03 		goto	TX_ACK
00217 085B 	;
00218 085B 	Cmd_SetFRev_end:
00219 085B 	;---kCmd_GetFRev------------------
00220 085B 3005 		movlw	kCmd_GetFRev
00221 085C 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00222 085D 		SKPZ
00223 085D 3205 		bra	Cmd_GetFRev_end
00224 085E 	; Get ServoFastReverse
00225 085E 084E 		movf	ServoFastReverse,W
00226 085F 001A 		movwi	FSR0++
00227 0860 084F 		movf	ServoFastReverse+1,W
00228 0861 001A 		movwi	FSR0++
00229 0862 2800 		goto	RS232_Send_S0
00230 0863 	;
00231 0863 	Cmd_GetFRev_end:
00232 0863 	;---kCmd_SetMin_uS-------------------
00233 0863 3086 		movlw	kCmd_SetMin_uS
00234 0864 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00235 0865 		SKPZ
00236 0865 3205 		bra	Cmd_SetMin_uS_end
00237 0866 	; Set ServoMin_uS
00238 0866 0016 		moviw	FSR1++
00239 0867 00D2 		movwf	ServoMin_uS
00240 0868 0016 		moviw	FSR1++
00241 0869 00D3 		movwf	ServoMin_uS+1
00242 086A 2A03 		goto	TX_ACK
00243 086B 	;
00244 086B 	Cmd_SetMin_uS_end:
00245 086B 	;---kCmd_GetMin_uS----------------
00246 086B 3006 		movlw	kCmd_GetMin_uS
00247 086C 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00248 086D 		SKPZ
00249 086D 3205 		bra	Cmd_GetMin_uS_end
00250 086E 	; Get ServoMin_uS
00251 086E 0852 		movf	ServoMin_uS,W
SerialServo.asm                                                       Page: 44
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00252 086F 001A 		movwi	FSR0++
00253 0870 0853 		movf	ServoMin_uS+1,W
00254 0871 001A 		movwi	FSR0++
00255 0872 2800 		goto	RS232_Send_S0
00256 0873 	;
00257 0873 	Cmd_GetMin_uS_end:
00258 0873 	;---kCmd_SetMax_uS-------------------
00259 0873 3087 		movlw	kCmd_SetMax_uS
00260 0874 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00261 0875 		SKPZ
00262 0875 3205 		bra	Cmd_SetMax_uS_end
00263 0876 	; Set ServoMax_uS
00264 0876 0016 		moviw	FSR1++
00265 0877 00D4 		movwf	ServoMax_uS
00266 0878 0016 		moviw	FSR1++
00267 0879 00D5 		movwf	ServoMax_uS+1
00268 087A 2A03 		goto	TX_ACK
00269 087B 	;
00270 087B 	Cmd_SetMax_uS_end:
00271 087B 	;---kCmd_GetMax_uS-----------------
00272 087B 3007 		movlw	kCmd_GetMax_uS
00273 087C 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00274 087D 		SKPZ
00275 087D 3205 		bra	Cmd_GetMax_uS_end
00276 087E 	; Get ServoMax_uS
00277 087E 0854 		movf	ServoMax_uS,W
00278 087F 001A 		movwi	FSR0++
00279 0880 0855 		movf	ServoMax_uS+1,W
00280 0881 001A 		movwi	FSR0++
00281 0882 2800 		goto	RS232_Send_S0
00282 0883 	;
00283 0883 	Cmd_GetMax_uS_end:
00284 0883 	;---kCmd_SetRevDir---------------
00285 0883 3088 		movlw	kCmd_SetRevDir
00286 0884 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00287 0885 		SKPZ
00288 0885 3205 		bra	Cmd_SetRevDir_End
00289 0886 10DA 		bcf	ssReverseDir
00290 0887 3001 		movlw	0x01
00291 0888 0601 		xorwf	INDF1,W
***** #106 Unprocessed Opcode SKPNZ *****
00292 0889 		SKPNZ		;01h?
00293 0889 14DA 		bsf	ssReverseDir	; Yes
00294 088A 2A03 		goto	TX_ACK
00295 088B 	Cmd_SetRevDir_End:
00296 088B 	;---kCmd_GetRevDir---------------
00297 088B 3008 		movlw	kCmd_GetRevDir
00298 088C 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00299 088D 		SKPZ
00300 088D 3203 		bra	Cmd_GetRevDir_End
00301 088E 18DA 		btfsc	ssReverseDir
00302 088F 1400 		bsf	INDF0,0
00303 0890 2800 		goto	RS232_Send_S0
00304 0891 	Cmd_GetRevDir_End:
00305 0891 	;---kCmd_SetEnaOvrCur------------
00306 0891 3089 		movlw	kCmd_SetEnaOvrCur
00307 0892 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00308 0893 		SKPZ
00309 0893 3205 		bra	Cmd_SetEnaOvrCur_End
00310 0894 105A 		bcf	ssEnableOverCur
00311 0895 3001 		movlw	0x01
00312 0896 0601 		xorwf	INDF1,W
***** #106 Unprocessed Opcode SKPNZ *****
00313 0897 		SKPNZ
00314 0897 145A 		bsf	ssEnableOverCur
00315 0898 2A03 		goto	TX_ACK
00316 0899 	Cmd_SetEnaOvrCur_End:
00317 0899 	;---kCmd_GetEnaOvrCur------------
00318 0899 3009 		movlw	kCmd_GetEnaOvrCur
00319 089A 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00320 089B 		SKPZ
00321 089B 3203 		bra	Cmd_GetEnaOvrCur_End
00322 089C 185A 		btfsc	ssEnableOverCur
00323 089D 1400 		bsf	INDF0,0
00324 089E 2800 		goto	RS232_Send_S0
00325 089F 	Cmd_GetEnaOvrCur_End:
00326 089F 	;
00327 089F 	;---kCmd_SetStopCenter---------
00328 089F 308B 		movlw	kCmd_SetStopCenter
00329 08A0 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00330 08A1 		SKPZ
00331 08A1 3205 		bra	Cmd_SetStopCenter_End
00332 08A2 0016 		moviw	FSR1++
00333 08A3 00D0 		movwf	ServoStopCenter
00334 08A4 0016 		moviw	FSR1++
00335 08A5 00D1 		movwf	ServoStopCenter+1
00336 08A6 2A03 		goto	TX_ACK
00337 08A7 	Cmd_SetStopCenter_End:
00338 08A7 	;---kCmd_GetStopCenter---------
00339 08A7 300B 		movlw	kCmd_GetStopCenter
00340 08A8 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
SerialServo.asm                                                       Page: 45
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00341 08A9 		SKPZ
00342 08A9 3205 		bra	Cmd_GetStopCenter_End
00343 08AA 0850 		movf	ServoStopCenter,W
00344 08AB 001A 		movwi	FSR0++
00345 08AC 0851 		movf	ServoStopCenter+1,W
00346 08AD 001A 		movwi	FSR0++
00347 08AE 2800 		goto	RS232_Send_S0
00348 08AF 	Cmd_GetStopCenter_End:
00349 08AF 	;---kCmd_SetSpeed--------------
00350 08AF 308C 		movlw	kCmd_SetSpeed
00351 08B0 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00352 08B1 		SKPZ
00353 08B1 3204 		bra	Cmd_SetSpeed_End
00354 08B2 0016 		moviw	FSR1++
00355 08B3 393F 		andlw	0x3F	;0..63
00356 08B4 00D6 		movwf	ServoSpeed
00357 08B5 2A03 		goto	TX_ACK
00358 08B6 	Cmd_SetSpeed_End:
00359 08B6 	;---kCmd_GetSpeed--------------
00360 08B6 300C 		movlw	kCmd_GetSpeed
00361 08B7 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00362 08B8 		SKPZ
00363 08B8 3203 		bra	Cmd_GetSpeed_End
00364 08B9 0856 		movf	ServoSpeed,W
00365 08BA 001A 		movwi	FSR0++
00366 08BB 2800 		goto	RS232_Send_S0
00367 08BC 	Cmd_GetSpeed_End:
00368 08BC 	;---kCmd_SetUseIdleCenter------
00369 08BC 308D 		movlw	kCmd_SetUseIdleCenter
00370 08BD 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00371 08BE 		SKPZ
00372 08BE 3205 		bra	Cmd_SetUseIdleCenter_End
00373 08BF 11DA 		bcf	ssMode3IdleCenter
00374 08C0 3001 		movlw	0x01
00375 08C1 0601 		xorwf	INDF1,W
***** #106 Unprocessed Opcode SKPNZ *****
00376 08C2 		SKPNZ
00377 08C2 15DA 		bsf	ssMode3IdleCenter
00378 08C3 2A03 		goto	TX_ACK
00379 08C4 	Cmd_SetUseIdleCenter_End:
00380 08C4 	;---kCmd_GetUseIdleCenter------
00381 08C4 300D 		movlw	kCmd_GetUseIdleCenter
00382 08C5 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00383 08C6 		SKPZ
00384 08C6 3203 		bra	Cmd_GetUseIdleCenter_End
00385 08C7 19DA 		btfsc	ssMode3IdleCenter
00386 08C8 1400 		bsf	INDF0,0
00387 08C9 2800 		goto	RS232_Send_S0
00388 08CA 	Cmd_GetUseIdleCenter_End:
00389 08CA 	;---kCmd_SetDeadBand------------
00390 08CA 308E 		movlw	kCmd_SetDeadBand
00391 08CB 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00392 08CC 		SKPZ
00393 08CC 3203 		bra	Cmd_SetDeadBand_End
00394 08CD 0016 		moviw	FSR1++
00395 08CE 00DC 		movwf	DeadBand
00396 08CF 2A03 		goto	TX_ACK	
00397 08D0 	Cmd_SetDeadBand_End:
00398 08D0 	;---kCmd_GetDeadBand------------
00399 08D0 300E 		movlw	kCmd_GetDeadBand
00400 08D1 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00401 08D2 		SKPZ
00402 08D2 3203 		bra	Cmd_GetDeadBand_End
00403 08D3 085C 		movf	DeadBand,W
00404 08D4 001A 		movwi	FSR0++
00405 08D5 2800 		goto	RS232_Send_S0
00406 08D6 	Cmd_GetDeadBand_End:
00407 08D6 	;---kCmd_SetUseFastPWM----------	;+1 data (ssEnableFastPWM), return ACK
00408 08D6 308F 		movlw	kCmd_SetUseFastPWM
00409 08D7 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00410 08D8 		SKPZ
00411 08D8 3205 		bra	Cmd_SetUseFastPWM_End
00412 08D9 125A 		bcf	ssEnableFastPWM
00413 08DA 3001 		movlw	0x01
00414 08DB 0601 		xorwf	INDF1,W
***** #106 Unprocessed Opcode SKPNZ *****
00415 08DC 		SKPNZ
00416 08DC 165A 		bsf	ssEnableFastPWM
00417 08DD 2A03 		goto	TX_ACK
00418 08DE 	Cmd_SetUseFastPWM_End:
00419 08DE 	;---kCmd_GetUseFastPWM----------
00420 08DE 300F 		movlw	kCmd_GetUseFastPWM
00421 08DF 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00422 08E0 		SKPZ
00423 08E0 3203 		bra	Cmd_GetUseFastPWM_End
00424 08E1 1A5A 		btfsc	ssEnableFastPWM
00425 08E2 1400 		bsf	INDF0,0
00426 08E3 2800 		goto	RS232_Send_S0
00427 08E4 	Cmd_GetUseFastPWM_End:
00428 08E4 	;---kCmd_SetGripI-------------------
00429 08E4 30B1 		movlw	kCmd_SetGripI
SerialServo.asm                                                       Page: 46
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00430 08E5 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00431 08E6 		SKPZ
00432 08E6 3203 		bra	Cmd_SetGripI_end
00433 08E7 	; Set Grip Current
00434 08E7 0016 		moviw	FSR1++
00435 08E8 00DD 		movwf	ssGripI
00436 08E9 2A03 		goto	TX_ACK
00437 08EA 	;
00438 08EA 	Cmd_SetGripI_end:
00439 08EA 	;---kCmd_GetGripI-------------------
00440 08EA 3021 		movlw	kCmd_GetGripI
00441 08EB 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00442 08EC 		SKPZ
00443 08EC 3203 		bra	Cmd_GetGripI_end
00444 08ED 	; Get Grip Current
00445 08ED 085D 		movf	ssGripI,W
00446 08EE 001A 		movwi	FSR0++
00447 08EF 2800 		goto	RS232_Send_S0
00448 08F0 	;
00449 08F0 	Cmd_GetGripI_end:
00450 08F0 	;---kCmd_SetAuxConfig-----------	;+3 data (Aux0Config,Aux1Config,Aux2Config), return ACK
00451 08F0 30B2 		movlw	kCmd_SetAuxConfig
00452 08F1 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00453 08F2 		SKPZ
00454 08F2 320C 		bra	Cmd_SetAuxConfig_end
00455 08F3 	; Set Aux N Config
00456 08F3 0801 		movf	INDF1,W
00457 08F4 3C02 		sublw	0x02	;2-AuxNum
00458 08F5 		SKPNB		;<=2?
00458 08F5 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00459 08F6 2809 		goto	HandleRXData_Rtn	; no
00460 08F7 	;
00461 08F7 0016 		moviw	FSR1++
00462 08F8 3E5E 		addlw	low ssAux0Config
00463 08F9 0084 		movwf	FSR0L
00464 08FA 3000 		movlw	high ssAux0Config
00465 08FB 0085 		movwf	FSR0H
00466 08FC 0016 		moviw	FSR1++	;New Config Value
00467 08FD 001A 		movwi	FSR0++
00468 08FE 2A03 		goto	TX_ACK
00469 08FF 	;
00470 08FF 	Cmd_SetAuxConfig_end:
00471 08FF 	;---kCmd_GetAuxConfig-----------
00472 08FF 3022 		movlw	kCmd_GetAuxConfig
00473 0900 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00474 0901 		SKPZ
00475 0901 320C 		bra	Cmd_GetAuxConfig_end
00476 0902 	; Get Aux N Config
00477 0902 0801 		movf	INDF1,W
00478 0903 3C02 		sublw	0x02	;2-AuxNum
00479 0904 		SKPNB		;<=2?
00479 0904 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00480 0905 2809 		goto	HandleRXData_Rtn	; no
00481 0906 	;
00482 0906 0801 		movf	INDF1,W
00483 0907 3E5E 		addlw	low ssAux0Config
00484 0908 0086 		movwf	FSR1L
00485 0909 3000 		movlw	high ssAux0Config
00486 090A 0087 		movwf	FSR1H
00487 090B 	;
00488 090B 0801 		movf	INDF1,W
00489 090C 001A 		movwi	FSR0++
00490 090D 2800 		goto	RS232_Send_S0
00491 090E 	;
00492 090E 	Cmd_GetAuxConfig_end:	
00493 090E 	;---kCmd_SetAuxNValue-----------	;+2 data (AuxNum,Value), return ACK
00494 090E 30B3 		movlw	kCmd_SetAuxNValue
00495 090F 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00496 0910 		SKPZ
00497 0910 321D 		bra	Cmd_SetAuxNValue_end
00498 0911 	; Set Aux N Value
00499 0911 0016 		moviw	FSR1++
00500 0912 00F8 		movwf	Param78	;AuxNum
00501 0913 3C02 		sublw	0x02	;2-AuxNum
00502 0914 		SKPNB		;<=2?
00502 0914 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00503 0915 2809 		goto	HandleRXData_Rtn	; no
00504 0916 	;
00505 0916 0878 		movf	Param78,W	;AuxNum
00506 0917 3E5E 		addlw	low ssAux0Config
00507 0918 0084 		movwf	FSR0L
00508 0919 3000 		movlw	high ssAux0Config
00509 091A 0085 		movwf	FSR0H
00510 091B 	;
00511 091B 0800 		movf	INDF0,W	;ssAuxXConfig
00512 091C 3907 		andlw	0x07
00513 091D 000B 		brw
00514 091E 2A03 		goto	TX_ACK	;kAuxIOnone
00515 091F 3206 		bra	Cmd_SetAuxNLED	;kAuxIOLEDBtn
00516 0920 2A03 		goto	TX_ACK	;kAuxIODigitalIn
00517 0921 3204 		bra	Cmd_SetAuxNDigOut	;kAuxIODigitalOut
00518 0922 2A03 		goto	TX_ACK	;kAuxIOAnalogIn
00519 0923 2A03 		goto	TX_ACK	;kAuxIOHomeSw
00520 0924 2A03 		goto	TX_ACK	;kAuxIOFwdLimit
SerialServo.asm                                                       Page: 47
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00521 0925 2A03 		goto	TX_ACK	;kAuxIORevLimit
00522 0926 	;
00523 0926 	Cmd_SetAuxNDigOut:
00524 0926 0878 	Cmd_SetAuxNLED	movf	Param78,W	;AuxNum
00525 0927 3E24 		addlw	low LED1_Blinks
00526 0928 0084 		movwf	FSR0L
00527 0929 3000 		movlw	high LED1_Blinks
00528 092A 0085 		movwf	FSR0H
00529 092B 0016 		moviw	FSR1++	;AuxVal
00530 092C 001A 		movwi	FSR0++
00531 092D 2A03 		goto	TX_ACK
00532 092E 	;
00533 092E 	Cmd_SetAuxNValue_end:
00534 092E 	;---kCmd_GetAuxNValue-----------	;(AuxN,ValueL,ValueH)
00535 092E 3023 		movlw	kCmd_GetAuxNValue
00536 092F 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00537 0930 		SKPZ
00538 0930 3238 		bra	Cmd_GetAuxNValue_end
00539 0931 	; Get Aux N Value
00540 0931 0801 		movf	INDF1,W
00541 0932 00F8 		movwf	Param78	;AuxNum
00542 0933 3C02 		sublw	0x02	;2-AuxNum
00543 0934 		SKPNB		;<=2?
00543 0934 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00544 0935 2809 		goto	HandleRXData_Rtn	; no
00545 0936 	;
00546 0936 0878 		movf	Param78,W	;AuxNum
00547 0937 3E5E 		addlw	low ssAux0Config
00548 0938 0086 		movwf	FSR1L
00549 0939 3000 		movlw	high ssAux0Config
00550 093A 0087 		movwf	FSR1H
00551 093B 	;
00552 093B 0801 		movf	INDF1,W	;ssAuxXConfig
00553 093C 3907 		andlw	0x07
00554 093D 000B 		brw
00555 093E 2809 		goto	HandleRXData_Rtn	;kAuxIOnone, not valid
00556 093F 321B 		bra	Cmd_GetAuxNValue_Btn	;kAuxIOLEDBtn
00557 0940 320F 		bra	Cmd_GetAuxNValue_Dig	;kAuxIODigitalIn
00558 0941 320E 		bra	Cmd_GetAuxNValue_Dig	;kAuxIODigitalOut
00559 0942 3203 		bra	Cmd_GetAuxNValue_Ana	;kAuxIOAnalogIn
00560 0943 320C 		bra	Cmd_GetAuxNValue_Dig	;kAuxIOHomeSw
00561 0944 320B 		bra	Cmd_GetAuxNValue_Dig	;kAuxIOFwdLimit
00562 0945 320A 		bra	Cmd_GetAuxNValue_Dig	;kAuxIORevLimit
00563 0946 	;
00564 0946 3578 	Cmd_GetAuxNValue_Ana	lslf	Param78,W	;AuxNum X2
00565 0947 3EB5 		addlw	low Cur_AN1
00566 0948 0086 		movwf	FSR1L
00567 0949 3000 		movlw	high Cur_AN1
00568 094A 0087 		movwf	FSR1H
00569 094B 0016 		moviw	FSR1++
00570 094C 001A 		movwi	FSR0++
00571 094D 0016 		moviw	FSR1++
00572 094E 001A 		movwi	FSR0++
00573 094F 2800 		goto	RS232_Send_S0
00574 0950 	;
00575 0950 	; Send the value of the port bit 0x00 or 0x01
00576 0950 0878 	Cmd_GetAuxNValue_Dig	movf	Param78,W	;AuxNum
***** #106 Unprocessed Opcode SKPZ *****
00577 0951 		SKPZ
00578 0951 3204 		bra	Cmd_GetAuxNValue_Dig1
00579 0952 190C 		btfsc	SW1_In
00580 0953 3001 		movlw	0x01
00581 0954 001A 		movwi	FSR0++
00582 0955 2800 		goto	RS232_Send_S0
00583 0956 	;
00584 0956 0103 	Cmd_GetAuxNValue_Dig1	clrw
00585 0957 198C 		btfsc	SW2_In
00586 0958 3001 		movlw	0x01
00587 0959 001A 		movwi	FSR0++
00588 095A 2800 		goto	RS232_Send_S0
00589 095B 	;
00590 095B 	; Send the Button value
00591 095B 0878 	Cmd_GetAuxNValue_Btn	movf	Param78,W	;AuxNum
***** #106 Unprocessed Opcode SKPZ *****
00592 095C 		SKPZ
00593 095C 3204 		bra	Cmd_GetAuxNValue_Btn1
00594 095D 1861 		btfsc	SW1_Flag
00595 095E 3001 		movlw	0x01
00596 095F 001A 		movwi	FSR0++
00597 0960 2800 		goto	RS232_Send_S0
00598 0961 	;
00599 0961 3C01 	Cmd_GetAuxNValue_Btn1	sublw	0x01
***** #106 Unprocessed Opcode SKPZ *****
00600 0962 		SKPZ
00601 0962 3204 		bra	Cmd_GetAuxNValue_Btn2
00602 0963 18E1 		btfsc	SW2_Flag
00603 0964 3001 		movlw	0x01
00604 0965 001A 		movwi	FSR0++
00605 0966 2800 		goto	RS232_Send_S0
00606 0967 	;
00607 0967 0103 	Cmd_GetAuxNValue_Btn2	clrw
00608 0968 	;	btfsc	SW3_Flag
00609 0968 	;	movlw	0x01
00610 0968 	;	movwi	FSR0++
00611 0968 2800 		goto	RS232_Send_S0
00612 0969 	;
00613 0969 	;
00614 0969 	Cmd_GetAuxNValue_end:
SerialServo.asm                                                       Page: 48
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00615 0969 	;---kCmd_SetEncoderOffset-------  +2 data (EncoderOffset), return ACK
00616 0969 30B4 		movlw	kCmd_SetEncoderOffset
00617 096A 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00618 096B 		SKPZ
00619 096B 3205 		bra	Cmd_SetEncoderOffset_End
00620 096C 	;
00621 096C 0016 		moviw	FSR1++
00622 096D 00CA 		movwf	EncoderOffset
00623 096E 0016 		moviw	FSR1++
00624 096F 00CB 		movwf	EncoderOffset+1
00625 0970 2A03 		goto	TX_ACK
00626 0971 	Cmd_SetEncoderOffset_End:
00627 0971 	;---kCmd_GetEncoderOffset-------
00628 0971 3024 		movlw	kCmd_GetEncoderOffset
00629 0972 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00630 0973 		SKPZ
00631 0973 3205 		bra	Cmd_GetEncoderOffset_End
00632 0974 	;
00633 0974 084A 		movf	EncoderOffset,W
00634 0975 001A 		movwi	FSR0++
00635 0976 084B 		movf	EncoderOffset+1,W
00636 0977 001A 		movwi	FSR0++
00637 0978 2800 		goto	RS232_Send_S0
00638 0979 	Cmd_GetEncoderOffset_End:
00639 0979 	;---kCmd_GetI-------------------
00640 0979 3091 		movlw	kCmd_GetI
00641 097A 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00642 097B 		SKPZ
00643 097B 3206 		bra	Cmd_GetI_end
00644 097C 	; Get servo current
00645 097C 0021  a		MOVLB	Cur_AN0	;banksel
00644 097D 		BankSel	Cur_AN0
00646 097D 0833 		movf	Cur_AN0,W
00647 097E 001A 		movwi	FSR0++
00648 097F 0834 		movf	Cur_AN0+1,W
00649 0980 001A 		movwi	FSR0++
00650 0981 2800 		goto	RS232_Send_S0
00651 0982 	;
00652 0982 	Cmd_GetI_end:
00653 0982 	;---kCmd_GetEnc-------------------
00654 0982 3092 		movlw	kCmd_GetEnc
00655 0983 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00656 0984 		SKPZ
00657 0984 3205 		bra	Cmd_GetEnc_end
00658 0985 	; Get Encoder Raw Position
00659 0985 0845 		movf	EncoderVal,W
00660 0986 001A 		movwi	FSR0++
00661 0987 0846 		movf	EncoderVal+1,W
00662 0988 001A 		movwi	FSR0++
00663 0989 2800 		goto	RS232_Send_S0
00664 098A 	;
00665 098A 	Cmd_GetEnc_end:
00666 098A 	;---kCmd_GetEncAbs-------------------
00667 098A 3093 		movlw	kCmd_GetEncAbs
00668 098B 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00669 098C 		SKPZ
00670 098C 320B 		bra	Cmd_GetEncAbs_end
00671 098D 	; Get Encoder Accumulated Position
00672 098D 0842 		movf	EncoderAccum,W
00673 098E 001A 		movwi	FSR0++
00674 098F 0843 		movf	EncoderAccum+1,W
00675 0990 001A 		movwi	FSR0++
00676 0991 0844 		movf	EncoderAccum+2,W
00677 0992 001A 		movwi	FSR0++
00678 0993 3000 		movlw	0x00
00679 0994 1BC4 		btfsc	EncoderAccum+2,7
00680 0995 30FF 		movlw	0xFF
00681 0996 001A 		movwi	FSR0++	;sign extrnded Int24
00682 0997 2800 		goto	RS232_Send_S0
00683 0998 	;
00684 0998 	Cmd_GetEncAbs_end:
00685 0998 	;---kCmd_SaveParams-----------------
00686 0998 3094 		movlw	kCmd_SaveParams
00687 0999 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00688 099A 		SKPZ
00689 099A 3205 		bra	Cmd_SaveParams_end
00690 099B 		mCall1To0	SaveParams
00690 099B 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00690 099C 20EA      M		CALL	SaveParams		CALL	Destination
00690 099D 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00690 099E 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00691 099F 2A03 		goto	TX_ACK
00692 09A0 	Cmd_SaveParams_end:
00693 09A0 	;---kCmd_RestoreParams--------------
00694 09A0 3095 		movlw	kCmd_RestoreParams
00695 09A1 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00696 09A2 		SKPZ
00697 09A2 3205 		bra	Cmd_RestoreParams_end
00698 09A3 		mCall1To0	CopyToRam
00698 09A3 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00698 09A4 20DE      M		CALL	CopyToRam		CALL	Destination
00698 09A5 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
SerialServo.asm                                                       Page: 49
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00698 09A6 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00699 09A7 2A03 		goto	TX_ACK
00700 09A8 	Cmd_RestoreParams_end:
00701 09A8 	;---kCmd_GetBattVolts---------------
00702 09A8 3096 		movlw	kCmd_GetBattVolts
00703 09A9 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00704 09AA 		SKPZ
00705 09AA 3206 		bra	Cmd_GetBattVolts_end
00706 09AB 	; Get battery volts
00707 09AB 0021  a		MOVLB	BattVolts	;banksel
00706 09AC 		BankSel	BattVolts
00708 09AC 0835 		movf	BattVolts,W
00709 09AD 001A 		movwi	FSR0++
00710 09AE 0836 		movf	BattVolts+1,W
00711 09AF 001A 		movwi	FSR0++
00712 09B0 2800 		goto	RS232_Send_S0
00713 09B1 	Cmd_GetBattVolts_end:
00714 09B1 	;---kCmd_GetCalPot------------------
00715 09B1 	;	movlw	kCmd_GetCalPot
00716 09B1 	;	subwf	Param78,W	;aka RX_Data
00717 09B1 	;	SKPZ
00718 09B1 	;	bra	Cmd_GetCalPot_end
00719 09B1 	; Get calibration pot
00720 09B1 	;	BankSel	Cur_AN4
00721 09B1 	;	movf	Cur_AN4,W
00722 09B1 	;	movwi	FSR0++
00723 09B1 	;	movf	Cur_AN4+1,W
00724 09B1 	;	movwi	FSR0++
00725 09B1 	;	goto	RS232_Send_S0
00726 09B1 	Cmd_GetCalPot_end:
00727 09B1 	;---kCmd_GetStatus----------------
00728 09B1 3098 		movlw	kCmd_GetStatus
00729 09B2 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00730 09B3 		SKPZ
00731 09B3 320D 		bra	Cmd_GetStatus_end
00732 09B4 083E 		movf	ssStatus,W
00733 09B5 001A 		movwi	FSR0++
00734 09B6 083F 		movf	ssStatus+1,W
00735 09B7 001A 		movwi	FSR0++
00736 09B8 0840 		movf	ssStatus+2,W
00737 09B9 001A 		movwi	FSR0++
00738 09BA 0840 		movf	ssStatus+2,W
00739 09BB 001A 		movwi	FSR0++
00740 09BC 	;reset flags
00741 09BC 11BE 		bcf	ssRX_Timeout
00742 09BD 12BE 		bcf	ssGripMCur
00743 09BE 123E 		bcf	ssGripOCur
00744 09BF 	;
00745 09BF 01BF 		clrf	ssStatus+1
00746 09C0 	;	
00747 09C0 2800 		goto	RS232_Send_S0
00748 09C1 	Cmd_GetStatus_end:
00749 09C1 	;---kCmd_ReBoot---------------------
00750 09C1 3099 		movlw	kCmd_ReBoot
00751 09C2 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00752 09C3 		SKPZ
00753 09C3 3201 		bra	Cmd_ReBoot_end
00754 09C4 0001 		reset		;Does not return anything
00755 09C5 	Cmd_ReBoot_end:
00756 09C5 	;---kCmd_RunBootloader--------------
00757 09C5 309A 		movlw	kCmd_RunBootloader
00758 09C6 0278 		subwf	Param78,W
***** #106 Unprocessed Opcode SKPZ *****
00759 09C7 		SKPZ
00760 09C7 3207 		bra	Cmd_RunBootloader_end
00761 09C8 30FF 		movlw	0xFF
00762 09C9 00AB 		movwf	EEDataTemp
00763 09CA 		mCall1To0	EEWriteW	;Write EEPROM address in W
00763 09CA 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00763 09CB 212F      M		CALL	EEWriteW		CALL	Destination
00763 09CC 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00763 09CD 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00764 09CE 0001 		reset
00765 09CF 	Cmd_RunBootloader_end:
00766 09CF 	;---kCmd_SetMasterAddr------------
00767 09CF 30A1 		movlw	kCmd_SetMasterAddr
00768 09D0 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00769 09D1 		SKPZ
00770 09D1 3207 		bra	Cmd_SetMasterAddr_end
00771 09D2 0016 		moviw	FSR1++
00772 09D3 00D8 		movwf	RS232_MasterAddr
00773 09D4 		mCall1To0	SaveParams
00773 09D4 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00773 09D5 20EA      M		CALL	SaveParams		CALL	Destination
00773 09D6 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00773 09D7 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00774 09D8 2800 		goto	RS232_Send_S0
00775 09D9 	Cmd_SetMasterAddr_end:
00776 09D9 	;---kCmd_SetSlaveAddr-------------
00777 09D9 30A2 		movlw	kCmd_SetSlaveAddr
00778 09DA 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00779 09DB 		SKPZ
00780 09DB 3207 		bra	Cmd_SetSlaveAddr_end
00781 09DC 0016 		moviw	FSR1++
SerialServo.asm                                                       Page: 50
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00782 09DD 00D9 		movwf	RS232_SlaveAddr
00783 09DE 		mCall1To0	SaveParams
00783 09DE 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00783 09DF 20EA      M		CALL	SaveParams		CALL	Destination
00783 09E0 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00783 09E1 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00784 09E2 2800 		goto	RS232_Send_S0
00785 09E3 	Cmd_SetSlaveAddr_end:
00786 09E3 	;---kCmd_SendIDString------------
00787 09E3 30AA 		movlw	kCmd_SendIDString
00788 09E4 0278 		subwf	Param78,W	;aka RX_Data
***** #106 Unprocessed Opcode SKPZ *****
00789 09E5 		SKPZ
00790 09E5 321C 		bra	Cmd_SendIDString_end
00791 09E6 01F9 		clrf	Param79
00792 09E7 0879 	Cmd_SendIDString_L1	movf	Param79,W
00793 09E8 21EE 		call	IDString
00794 09E9 3800 		iorlw	0x00
***** #106 Unprocessed Opcode SKPNZ *****
00795 09EA 		SKPNZ
00796 09EA 0008 		return
00797 09EB 2204 		call	StoreSerOut_S0
00798 09EC 0AF9 		incf	Param79,F
00799 09ED 33F9 		bra	Cmd_SendIDString_L1
00800 09EE 	;
00801 09EE 000B 	IDString	brw
00802 09EF 3444 		retlw	'D'
00803 09F0 344D 		retlw	'M'
00804 09F1 3446 		retlw	'F'
00805 09F2 3445 		retlw	'E'
00806 09F3 3420 		retlw	' '
00807 09F4 3453 		retlw	'S'
00808 09F5 3465 		retlw	'e'
00809 09F6 3472 		retlw	'r'
00810 09F7 3469 		retlw	'i'
00811 09F8 3461 		retlw	'a'
00812 09F9 346C 		retlw	'l'
00813 09FA 3420 		retlw	' '
00814 09FB 3453 		retlw	'S'
00815 09FC 3465 		retlw	'e'
00816 09FD 3472 		retlw	'r'
00817 09FE 3476 		retlw	'v'
00818 09FF 346F 		retlw	'o'
00819 0A00 340A 		retlw	'\n'
00820 0A01 3400 		retlw	0x00
00821 0A02 	;
00822 0A02 	Cmd_SendIDString_end:
00823 0A02 	;--------------------------------
00824 0A02 0008 		return
00825 0A03 	;
00826 0A03 30FF 	TX_ACK	movlw	0xFF
00827 0A04 	StoreSerOut_S0	mCall1To0	StoreSerOut
00827 0A04 118A      M		BCF	PCLATH,3		BCF	PCLATH,3
00827 0A05 22EA      M		CALL	StoreSerOut		CALL	Destination
00827 0A06 158A      M		BSF	PCLATH,3		BSF	PCLATH,3
00827 0A07 120A      M		BCF	PCLATH,4		BCF	PCLATH,4
00828 0A08 0008 		return
00829 0A09 	;
00830 0A09 	;=========================================================================================
00831 0A09 	;=========================================================================================
01892 0A09 	;
01893 0A09 		org BootLoaderStart
01894 1E00 		include <BootLoader.inc>
00001 1E00 	;************************************************
00002 1E00 	; BootLoader for PIC16F1847
00003 1E00 	; filename: Bootloader1847.inc
00004 1E00 	; Created: 3/21/2019
00005 1E00 	; Revision: 1.0a1 4/7/2019
00006 1E00 	;************************************************
00007 1E00 	; History
00008 1E00 	; 1.0a1 4/7/2019	First working version.
00009 1E00 	; 1.0d1 3/21/2019	first code
00010 1E00 	;************************************************
00011 1E00 	; Notes:
00012 1E00 	;
00013 1E00 	;  Does not program data EEProm, or other than prog mem 0..BootLoaderStart-1
00014 1E00 	;
00015 1E00 	; Must be the last thing in prog mem, will not overwrite itself or anything after it.
00016 1E00 	;
00017 1E00 	;BootLoaderStart	EQU	0x1E00
00018 1E00 	;	org BootLoaderStart
00019 1E00 	;	include <Bootloader1847.inc>
00020 1E00 	;
00021 1E00 	;  Reset vector:
00022 1E00 	;  	movlp	high BootLoaderStart
00023 1E00 	;    	goto	BootLoaderStart
00024 1E00 	;  ProgStartVector	CLRF	PCLATH
00025 1E00 	;	goto	Start
00026 1E00 	;
00027 1E00 	;  DataEEProm (0xFF) = 0xFF = run bootloader
00028 1E00 	;
00029 1E00 	; What happens next:
00030 1E00 	;  If Data EEProm address (0xFF) <> 0xFF then goto ProgStartVector
00031 1E00 	;  Setup  UART for 38.4KBaud
00032 1E00 	;  Parse incoming text as .hex file
00033 1E00 	;   if program memory address > 0 and < BootLoader then
00034 1E00 	;    read block from prog mem
00035 1E00 	;    if compare blocks then
00036 1E00 	;      if prog mem is not blank then erase block
SerialServo.asm                                                       Page: 51
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00037 1E00 	;    write block
00038 1E00 	;
00039 1E00 	;  DataEEProm (0xFF) = 0x00
00040 1E00 	;
00041 1E00 	;  reset
00042 1E00 	;************************************************
00043 1E00 	; .hex
00044 1E00 	;:020000040000FA 
00045 1E00 	;       ^^^^^^ Set high word of address to 0x0000
00046 1E00 	;:100010005A23582356235423422021000C16200033
00047 1E00 	;:100020003A100C1E3A14A10B053221000C122000CC
00048 1E00 	;^ Start code                             ^^ Checksum
00049 1E00 	; ^^ Bytes of data (0x10)
00050 1E00 	;   ^^^^ Address low word (0x0020)
00051 1E00 	;       ^^ Record type 0x00 = Data
00052 1E00 	;         ^^^^ LSB MSB of data for Addr / 2
00053 1E00 	;                                         
00054 1E00 	; Checksum is 2's complement of all other bytes added together
00055 1E00 	; Valid address range 0000 0000 .. 0000 3BFE (bootloader is at 0000 3C00 .. 0000 3FFF, 512 words)
00056 1E00 	;************************************************
00057 1E00 	;
00058 1E00 	;
00059 1E00 		cblock 0x20
00060 1E00 0020 		PROG_ADDR_LO
00061 1E00 0021 		PROG_ADDR_HI
00062 1E00 0022 		ProgWordCount
00063 1E00 		
00064 1E00 0023 		IH_Addr_Lo:2		;
00065 1E00 0025 		IH_Addr_Hi:2		;extended linear address, alway 0x0000 for Prog mem
00066 1E00 0027 		IH_Bytes
00067 1E00 0028 		IH_ByteCount
00068 1E00 0029 		IH_Type		;Record Type 0..5
00069 1E00 002A 		IH_State
00070 1E00 002B 		IH_TempVal
00071 1E00 002C 		IH_Flags
00072 1E00 002D 		ChkSum
00073 1E00 		endc
00074 1E00 	;
00075 1E00 002C 	#Define	MSN_Done	IH_Flags,0	;Most Significant Nibble
00076 1E00 002C 	#Define	DataInBuffer	IH_Flags,1
00077 1E00 	;
00078 1E00 	;IH_Type Types
00079 1E00 0000 	IHT_Data	EQU	0x00
00080 1E00 0001 	IHT_End	EQU	0x01	;ie :00000001FF
00081 1E00 0002 	IHT_XSA	EQU	0x02	;extended segment address, not supported
00082 1E00 0003 	IHT_SSA	EQU	0x03	;start segment address, not supported
00083 1E00 0004 	IHT_HighAddr	EQU	0x04	;extended linear address, :02000004FFFFFC
00084 1E00 0005 	IHT_SLA	EQU	0x05	;start linear address, not supported, :04000005000000CD2A
00085 1E00 	;
00086 1E00 	;IH_State values
00087 1E00 0000 	IHS_WaitForColon	EQU	0x00
00088 1E00 0001 	IHS_Length	EQU	0x01
00089 1E00 0002 	IHS_AddrMSB	EQU	0x02
00090 1E00 0003 	IHS_AddrLSB	EQU	0x03
00091 1E00 0004 	IHS_DataType	EQU	0x04
00092 1E00 0005 	IHS_Data	EQU	0x05
00093 1E00 0006 	IHS_CSum	EQU	0x06	;waiting for check sum
00094 1E00 	;
00095 1E00 002B 	IH_ErrorBadLen	EQU	'+'	;>64 Too big
00096 1E00 002D 	IH_ErrorBadCSum	EQU	'-'	;Checksum didn't match
00097 1E00 002A 	IH_Ack	EQU	'*'	;We got a good Intel Hex line
00098 1E00 	;
00099 1E00 0040 	BlockSize	EQU	0x40
00100 1E00 0020 	BlockWords	EQU	BlockSize/2	;0x20
00101 1E00 00E0 	AddressMask	EQU	0xE0
00102 1E00 	;
00103 1E00 	;Contiguous ram 0x2000..0x23EF
00104 1E00 		cblock 0x2100		;0x0100 after start of ram
00105 1E00 2100 		SourceBuffer:BlockSize
00106 1E00 2140 		DestBuffer:BlockSize
00107 1E00 2180 		SerialBuffer:BlockSize
00108 1E00 		endc
00109 1E00 	;================================================
00110 1E00 	;
00111 1E00 	; Entry: DataEEProm255
00112 1E00 	; Exit: goto ProgStartVector
00113 1E00 	; Calls: none
00114 1E00 	; RAM used: ALL
00115 1E00 	;
00116 1E00 	BootLoader:
00117 1E00 279C 		call	InitializeBLIO	;returns w/ bank 0 selected
00118 1E01 	;
00119 1E01 2706 		call	ReadEEData	;Get Data from EEPROM (0xFF) 
00120 1E02 3AFF 		xorlw	0xFF
***** #106 Unprocessed Opcode SKPZ *****
00121 1E03 		SKPZ		;0xFF xor 0xFF = 0
00122 1E03 320B 		bra	BootLoader_End
00123 1E04 	;
00124 1E04 	; Bootloader is active send "**"
00125 1E04 302A 		movlw	IH_Ack
00126 1E05 2700 		call	SendChar
00127 1E06 302A 		movlw	IH_Ack
00128 1E07 2700 		call	SendChar
00129 1E08 	;
00130 1E08 	;Initialize
00131 1E08 01A0 		clrf	PROG_ADDR_LO
00132 1E09 01A1 		clrf	PROG_ADDR_HI
00133 1E0A 01A5 		clrf	IH_Addr_Hi
00134 1E0B 01A6 		clrf	IH_Addr_Hi+1
SerialServo.asm                                                       Page: 52
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00135 1E0C 2742 		call	EraseSourceBuffer
00136 1E0D 	;
00137 1E0D 2611 		call	BL_Parse
00138 1E0E 	;	
00139 1E0E 	;if successful then clear EEProm(255)
00140 1E0E 270F 		call	WriteEEData
00141 1E0F 	;
00142 1E0F 3180 	BootLoader_End	movlp	0x00
00143 1E10 2802 		goto	ProgStartVector
00144 1E11 	;
00145 1E11 	;==============================================
00146 1E11 	; Parse incoming data and do stuff
00147 1E11 	;
00148 1E11 10AC 	BL_Parse	bcf	DataInBuffer
00149 1E12 01AA 	BL_ParseNextLine	clrf	IH_State
00150 1E13 01A8 		clrf	IH_ByteCount
00151 1E14 01AD 		clrf	ChkSum
00152 1E15 3080 		movlw	low SerialBuffer
00153 1E16 0084 		movwf	FSR0L
00154 1E17 3021 		movlw	high SerialBuffer
00155 1E18 0085 		movwf	FSR0H
00156 1E19 	;
00157 1E19 102C 	BLP_L1	bcf	MSN_Done
00158 1E1A 	;
00159 1E1A 26F0 	BLP_L2	call	GetChar
00160 1E1B 00F8 		movwf	Param78
00161 1E1C 303A 		movlw	':'
00162 1E1D 0278 		subwf	Param78,W
***** #106 Unprocessed Opcode SKPZ *****
00163 1E1E 		SKPZ		;Char=":"
00164 1E1E 3203 		bra	BLP_TestNum	; No
00165 1E1F 	; It's a ":" so set state=1, wait for length
00166 1E1F 3001 		movlw	IHS_Length
00167 1E20 00AA 		movwf	IH_State
00168 1E21 33F7 		bra	BLP_L1
00169 1E22 	;
00170 1E22 08AA 	BLP_TestNum	movf	IH_State,F
***** #106 Unprocessed Opcode SKPNZ *****
00171 1E23 		SKPNZ		;Are we waiting for a number?
00172 1E23 33F6 		bra	BLP_L2	; No
00173 1E24 	;
00174 1E24 3030 		movlw	0x30	;'0'
00175 1E25 0278 		subwf	Param78,W
00176 1E26 		SKPNB		;Char>="0"?
00176 1E26 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00177 1E27 33EA 		bra	BL_ParseNextLine	; No start over
00178 1E28 303A 		movlw	0x3A	;':'
00179 1E29 0278 		subwf	Param78,W
00180 1E2A 		SKPNB
00180 1E2A 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00181 1E2B 320A 		bra	BLP_TestNum_1
00182 1E2C 3041 		movlw	0x41	;'A'
00183 1E2D 0278 		subwf	Param78,W
00184 1E2E 		SKPNB		;Char>="A"?
00184 1E2E 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00185 1E2F 33E2 		bra	BL_ParseNextLine	; No start over
00186 1E30 3047 		movlw	0x47	;'G'
00187 1E31 0278 		subwf	Param78,W
00188 1E32 		SKPB		;Char<"G"
00188 1E32 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00189 1E33 33DE 		bra	BL_ParseNextLine	; No, start over
00190 1E34 3007 		movlw	0x07	; Yes, A..F
00191 1E35 02F8 		subwf	Param78,F
00192 1E36 	;
00193 1E36 3030 	BLP_TestNum_1	movlw	0x30
00194 1E37 02F8 		subwf	Param78,F	;'0' >> 0x00
00195 1E38 182C 		btfsc	MSN_Done
00196 1E39 3204 		bra	BLP_TestNum_2	;do low nibble
00197 1E3A 0E78 		swapf	Param78,W
00198 1E3B 00AB 		movwf	IH_TempVal
00199 1E3C 142C 		bsf	MSN_Done
00200 1E3D 33DC 		bra	BLP_L2
00201 1E3E 	;
00202 1E3E 0878 	BLP_TestNum_2	movf	Param78,W
00203 1E3F 07AB 		addwf	IH_TempVal,F
00204 1E40 	;
00205 1E40 	; We have a number in IH_TempVal
00206 1E40 3001 		movlw	IHS_Length
00207 1E41 022A 		subwf	IH_State,W
***** #106 Unprocessed Opcode SKPZ *****
00208 1E42 		SKPZ		;Waiting for length byte?
00209 1E42 320C 		bra	BLP_IHS_AddrMSB	; No
00210 1E43 3041 		movlw	.65	; Yes, is it in range 0..64?
00211 1E44 022B 		subwf	IH_TempVal,W
00212 1E45 		SKPNB		;<=64?
00212 1E45 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00213 1E46 3203 		bra	BLP_SaveIH_Length
00214 1E47 	;
00215 1E47 302B 		movlw	IH_ErrorBadLen
00216 1E48 2700 		call	SendChar
00217 1E49 2E12 		goto	BL_ParseNextLine
00218 1E4A 	;
00219 1E4A 082B 	BLP_SaveIH_Length	movf	IH_TempVal,W
00220 1E4B 00A7 		movwf	IH_Bytes
00221 1E4C 07AD 		addwf	ChkSum,F
00222 1E4D 0AAA 	BLP_NextState	incf	IH_State,F
00223 1E4E 2E19 		goto	BLP_L1
00224 1E4F 	;
00225 1E4F 3002 	BLP_IHS_AddrMSB	movlw	IHS_AddrMSB
SerialServo.asm                                                       Page: 53
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00226 1E50 022A 		subwf	IH_State,W
***** #106 Unprocessed Opcode SKPZ *****
00227 1E51 		SKPZ		;Waiting for Address MSB?
00228 1E51 3204 		bra	BLP_IHS_AddrLSB	; No
00229 1E52 	;
00230 1E52 082B 		movf	IH_TempVal,W
00231 1E53 00A4 		movwf	IH_Addr_Lo+1
00232 1E54 07AD 		addwf	ChkSum,F
00233 1E55 33F7 		bra	BLP_NextState
00234 1E56 	;
00235 1E56 3003 	BLP_IHS_AddrLSB	movlw	IHS_AddrLSB
00236 1E57 022A 		subwf	IH_State,W
***** #106 Unprocessed Opcode SKPZ *****
00237 1E58 		SKPZ		;Waiting for Address LSB?
00238 1E58 3204 		bra	BLP_IHS_DataType	; No
00239 1E59 	;
00240 1E59 082B 		movf	IH_TempVal,W
00241 1E5A 00A3 		movwf	IH_Addr_Lo
00242 1E5B 07AD 		addwf	ChkSum,F
00243 1E5C 33F0 		bra	BLP_NextState
00244 1E5D 	;
00245 1E5D 3004 	BLP_IHS_DataType	movlw	IHS_DataType
00246 1E5E 022A 		subwf	IH_State,W
***** #106 Unprocessed Opcode SKPZ *****
00247 1E5F 		SKPZ		;Waiting for Data Type?
00248 1E5F 3206 		bra	BLP_IHS_Data	; No
00249 1E60 	;
00250 1E60 082B 		movf	IH_TempVal,W
00251 1E61 00A9 		movwf	IH_Type
00252 1E62 07AD 		addwf	ChkSum,F
00253 1E63 	; Ship IHS_Data if length = 0
00254 1E63 08A7 		movf	IH_Bytes,F
***** #106 Unprocessed Opcode SKPNZ *****
00255 1E64 		SKPNZ		;Expecting zero length data?
00256 1E64 0AAA 		incf	IH_State,F	; Yes
00257 1E65 33E7 		bra	BLP_NextState
00258 1E66 	;
00259 1E66 3005 	BLP_IHS_Data	movlw	IHS_Data
00260 1E67 022A 		subwf	IH_State,W
***** #106 Unprocessed Opcode SKPZ *****
00261 1E68 		SKPZ		;Waiting for Data?
00262 1E68 3208 		bra	BLP_IHS_CSum	; No
00263 1E69 	;
00264 1E69 082B 		movf	IH_TempVal,W
00265 1E6A 001A 		movwi	FSR0++
00266 1E6B 07AD 		addwf	ChkSum,F
00267 1E6C 0AA8 		incf	IH_ByteCount,F
00268 1E6D 	; if IH_ByteCount=IH_Bytes then next state
00269 1E6D 0828 		movf	IH_ByteCount,W
00270 1E6E 0227 		subwf	IH_Bytes,W
***** #106 Unprocessed Opcode SKPZ *****
00271 1E6F 		SKPZ		;Done with data?
00272 1E6F 2E19 		goto	BLP_L1	; No
00273 1E70 33DC 		bra	BLP_NextState	; Yes
00274 1E71 	;
00275 1E71 3006 	BLP_IHS_CSum	movlw	IHS_CSum
00276 1E72 022A 		subwf	IH_State,W
***** #106 Unprocessed Opcode SKPZ *****
00277 1E73 		SKPZ		;Waiting for Checksum?
00278 1E73 2E12 		goto	BL_ParseNextLine	; No, we should never get here
00279 1E74 	; get 2's comp
00280 1E74 01F8 		clrf	Param78
00281 1E75 082D 		movf	ChkSum,W
00282 1E76 0278 		subwf	Param78,W
00283 1E77 022B 		subwf	IH_TempVal,W
***** #106 Unprocessed Opcode SKPZ *****
00284 1E78 		SKPZ		;Checksum matches?
00285 1E78 3201 		bra	BLP_BadCSum
00286 1E79 3203 		bra	BLP_Validate
00287 1E7A 	;
00288 1E7A 302D 	BLP_BadCSum	movlw	IH_ErrorBadCSum
00289 1E7B 2700 		call	SendChar
00290 1E7C 2E12 		goto	BL_ParseNextLine
00291 1E7D 	;
00292 1E7D 	;===================
00293 1E7D 	; We have received a complete Intel Hex command
00294 1E7D 	BLP_Validate:
00295 1E7D 3001 		movlw	IHT_End
00296 1E7E 0229 		subwf	IH_Type,W
***** #106 Unprocessed Opcode SKPZ *****
00297 1E7F 		SKPZ		;End?
00298 1E7F 3205 		bra	BLPV_Data	; No
00299 1E80 	; handle end command
00300 1E80 302A 		movlw	IH_Ack
00301 1E81 2700 		call	SendChar
00302 1E82 18AC 		btfsc	DataInBuffer
00303 1E83 26D1 		call	BLP_WriteBuffer
00304 1E84 0008 		return
00305 1E85 	;
00306 1E85 3000 	BLPV_Data	movlw	IHT_Data
00307 1E86 0229 		subwf	IH_Type,W
***** #106 Unprocessed Opcode SKPZ *****
00308 1E87 		SKPZ		;Data?
00309 1E87 3204 		bra	BLPV_Addr	; No
00310 1E88 	; handle data
00311 1E88 269A 		call	BufferIHData
00312 1E89 	;
00313 1E89 302A 		movlw	IH_Ack
00314 1E8A 2700 		call	SendChar
SerialServo.asm                                                       Page: 54
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00315 1E8B 2E12 		goto	BL_ParseNextLine
00316 1E8C 	;
00317 1E8C 3004 	BLPV_Addr	movlw	IHT_HighAddr
00318 1E8D 0229 		subwf	IH_Type,W
***** #106 Unprocessed Opcode SKPZ *****
00319 1E8E 		SKPZ		;High Address?
00320 1E8E 2E12 		goto	BL_ParseNextLine	; No
00321 1E8F 	; handle high address change
00322 1E8F 3080 		movlw	low SerialBuffer
00323 1E90 0084 		movwf	FSR0L
00324 1E91 3021 		movlw	high SerialBuffer
00325 1E92 0085 		movwf	FSR0H
00326 1E93 0012 		moviw	FSR0++
00327 1E94 00A6 		movwf	IH_Addr_Hi+1
00328 1E95 0012 		moviw	FSR0++
00329 1E96 00A5 		movwf	IH_Addr_Hi
00330 1E97 302A 		movlw	IH_Ack
00331 1E98 2700 		call	SendChar
00332 1E99 2E12 		goto	BL_ParseNextLine
00333 1E9A 	;
00334 1E9A 	;===========================================
00335 1E9A 	; Validate address is in range and move to SourceBuffer
00336 1E9A 	;
00337 1E9A 	; Entry: DataInBuffer, IH_ByteCount, Data in SerialBuffer, 32bit address IH_Addr_Hi:IH_Addr_Lo
00338 1E9A 	; Exit:
00339 1E9A 	; 
00340 1E9A 	BufferIHData:
00341 1E9A 	; check address range
00342 1E9A 0825 		movf	IH_Addr_Hi,W
00343 1E9B 0426 		iorwf	IH_Addr_Hi+1,W
***** #106 Unprocessed Opcode SKPZ *****
00344 1E9C 		SKPZ		;High address = 0x0000 ?
00345 1E9C 0008 		return		; No
00346 1E9D 	; convert to words, IH_Addr_Lo = IH_Addr_Lo / 2
00347 1E9D 36A4 		lsrf	IH_Addr_Lo+1,F
00348 1E9E 0CA3 		rrf	IH_Addr_Lo,F
00349 1E9F 301E 		movlw	high BootLoaderStart
00350 1EA0 0224 		subwf	IH_Addr_Lo+1,W
00351 1EA1 		SKPB		;BootLoaderStart>IH_Addr_Lo?
00351 1EA1 1803      M		BTFSC	STATUS,C		BTFSC	STATUS,C
00352 1EA2 0008 		return		; No
00353 1EA3 	;
00354 1EA3 1CAC 		btfss	DataInBuffer	;Any old data in the buffer?
00355 1EA4 320B 		bra	BIHD_PutInBuff	; No
00356 1EA5 	;
00357 1EA5 	; Continue filling buffer or flush and add to new buffer?
00358 1EA5 	;
00359 1EA5 0824 		movf	IH_Addr_Lo+1,W
00360 1EA6 0221 		subwf	PROG_ADDR_HI,W
***** #106 Unprocessed Opcode SKPZ *****
00361 1EA7 		SKPZ		;Matches?
00362 1EA7 3207 		bra	BIHD_FlushBuff	; No
00363 1EA8 	;
00364 1EA8 30E0 		movlw	AddressMask
00365 1EA9 0520 		andwf	PROG_ADDR_LO,W
00366 1EAA 00F8 		movwf	Param78
00367 1EAB 30E0 		movlw	AddressMask
00368 1EAC 0524 		andwf	IH_Addr_Lo+1,W
00369 1EAD 0278 		subwf	Param78,W
***** #106 Unprocessed Opcode SKPNZ *****
00370 1EAE 		SKPNZ		;Matches?
00371 1EAE 320A 		bra	BIHD_PutInBuff_E2	; Yes
00372 1EAF 	;
00373 1EAF 26D1 	BIHD_FlushBuff	call	BLP_WriteBuffer
00374 1EB0 	;
00375 1EB0 	; Entry: IH_Addr_Lo=Word Address
00376 1EB0 	;
00377 1EB0 0823 	BIHD_PutInBuff	movf	IH_Addr_Lo,W
00378 1EB1 39E0 		andlw	AddressMask
00379 1EB2 00A0 		movwf	PROG_ADDR_LO
00380 1EB3 0824 		movf	IH_Addr_Lo+1,W
00381 1EB4 00A1 		movwf	PROG_ADDR_HI
00382 1EB5 30FF 		movlw	0xFF
00383 1EB6 3AE0 		xorlw	AddressMask	;0x1F
00384 1EB7 0523 		andwf	IH_Addr_Lo,W	;Offset within block
00385 1EB8 00A2 		movwf	ProgWordCount
00386 1EB9 	;
00387 1EB9 3080 	BIHD_PutInBuff_E2	movlw	low SerialBuffer
00388 1EBA 0084 		movwf	FSR0L
00389 1EBB 3021 		movlw	high SerialBuffer
00390 1EBC 0085 		movwf	FSR0H
00391 1EBD 	;
00392 1EBD 	; FSR1 = SourceBuffer + ProgWordCount * 2
00393 1EBD 0187 		clrf	FSR1H
00394 1EBE 3522 		lslf	ProgWordCount,W	;ProgWordCount * 2
00395 1EBF 3E00 		addlw	low SourceBuffer
00396 1EC0 0086 		movwf	FSR1L
00397 1EC1 3021 		movlw	high SourceBuffer
00398 1EC2 3D87 		addwfc	FSR1H,F
00399 1EC3 	;
00400 1EC3 	;Param79 = IH_ByteCount
00401 1EC3 0828 		movf	IH_ByteCount,W
00402 1EC4 00F9 		movwf	Param79
00403 1EC5 	;ProgWordCount += IH_ByteCount / 2
00404 1EC5 3689 		lsrf	WREG,F	; divide by 2
00405 1EC6 07A2 		addwf	ProgWordCount,F
00406 1EC7 	;
00407 1EC7 0012 	BIHD_PutInBuff_L1	moviw	FSR0++
00408 1EC8 001E 		movwi	FSR1++
SerialServo.asm                                                       Page: 55
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00409 1EC9 0BF9 		decfsz	Param79,F
00410 1ECA 33FC 		bra	BIHD_PutInBuff_L1
00411 1ECB 	;
00412 1ECB 14AC 		bsf	DataInBuffer
00413 1ECC 3020 		movlw	BlockWords
00414 1ECD 0222 		subwf	ProgWordCount,W
***** #106 Unprocessed Opcode SKPNZ *****
00415 1ECE 		SKPNZ		;buffer full?
00416 1ECE 3202 		bra	BLP_WriteBuffer	; Yes
00417 1ECF 		SKPNB		;Overflow? This should not happen.
00417 1ECF 1C03      M		BTFSS	STATUS,C		BTFSS	STATUS,C
00418 1ED0 0008 		return		; No
00419 1ED1 	;
00420 1ED1 	; fall thru to BLP_WriteBuffer
00421 1ED1 	;=============================================
00422 1ED1 	; Write SourceBuffer to Prog memory
00423 1ED1 	;
00424 1ED1 	; Entry: SourceBuffer,
00425 1ED1 	;
00426 1ED1 	BLP_WriteBuffer:
00427 1ED1 	; copy old prog mem to DestBuffer
00428 1ED1 3040 		movlw	low DestBuffer
00429 1ED2 0086 		movwf	FSR1L
00430 1ED3 3021 		movlw	high DestBuffer
00431 1ED4 0087 		movwf	FSR1H
00432 1ED5 274F 		call	ReadProgBlock
00433 1ED6 	;
00434 1ED6 3000 		movlw	low SourceBuffer	;new data
00435 1ED7 0086 		movwf	FSR1L
00436 1ED8 3021 		movlw	high SourceBuffer
00437 1ED9 0087 		movwf	FSR1H	
00438 1EDA 3040 		movlw	low DestBuffer	;old data
00439 1EDB 0086 		movwf	FSR1L
00440 1EDC 3021 		movlw	high DestBuffer
00441 1EDD 0087 		movwf	FSR1H
00442 1EDE 272C 		call	CompareBlock
00443 1EDF 	;
00444 1EDF 1809 		btfsc	WREG,0	;Matches?
00445 1EE0 320C 		bra	BLP_WriteBuffer_end	; Yes
00446 1EE1 	;	
00447 1EE1 3040 		movlw	low DestBuffer
00448 1EE2 0086 		movwf	FSR1L
00449 1EE3 3021 		movlw	high DestBuffer
00450 1EE4 0087 		movwf	FSR1H
00451 1EE5 2721 		call	TestErased
00452 1EE6 1C09 		btfss	WREG,0	;Erased?
00453 1EE7 	;
00454 1EE7 2761 		call	EraseProgBlock	; No, Erase it.
00455 1EE8 	;
00456 1EE8 3000 		movlw	low SourceBuffer
00457 1EE9 0086 		movwf	FSR1L
00458 1EEA 3021 		movlw	high SourceBuffer
00459 1EEB 0087 		movwf	FSR1H	
00460 1EEC 2778 		call	WriteProgBlock
00461 1EED 	;
00462 1EED 10AC 	BLP_WriteBuffer_end	bcf	DataInBuffer
00463 1EEE 2742 		call	EraseSourceBuffer
00464 1EEF 	;
00465 1EEF 0008 		return
00466 1EF0 	;==============================================
00467 1EF0 	; Get a byte from UART, waits forever
00468 1EF0 	;
00469 1EF0 	; Entry: none
00470 1EF0 	; Exit: W=Char
00471 1EF0 	;
00472 1EF0 0020 	GetChar	MOVLB	0x00
00473 1EF1 1E91 		BTFSS	PIR1,RCIF	;RX has a byte?
00474 1EF2 33FD 		BRA	GetChar
00475 1EF3 	;
00476 1EF3 0023  a		MOVLB	RCSTA	;banksel
00475 1EF4 		BANKSEL	RCSTA	; bank 3
00477 1EF4 081D 		MOVF	RCSTA,W
00478 1EF5 3906 		ANDLW	0x06
***** #106 Unprocessed Opcode SKPZ *****
00479 1EF6 		SKPZ		;Frame or Overrun Err?
00480 1EF6 3203 		BRA	GetChar_Err	; yes
00481 1EF7 0819 		MOVF	RCREG,W
00482 1EF8 	;
00483 1EF8 0020 		movlb	0x00	; bank 0
00484 1EF9 	;	goto	SendChar	; tc
00485 1EF9 0008 		RETURN
00486 1EFA 	;
00487 1EFA 0819 	GetChar_Err	MOVF	RCREG,W	;bad byte so drop it
00488 1EFB 121D 		BCF	RCSTA,CREN
00489 1EFC 111D 		BCF	RCSTA,FERR
00490 1EFD 109D 		BCF	RCSTA,OERR
00491 1EFE 161D 		BSF	RCSTA,CREN
00492 1EFF 33F0 		bra	GetChar
00493 1F00 	;
00494 1F00 	;==============================================
00495 1F00 	; Send a byte to UART
00496 1F00 	;
00497 1F00 	; Entry: W=Char to send
00498 1F00 	SendChar:
00499 1F00 1E11 		BTFSS	PIR1,TXIF	;TX done?
00500 1F01 33FE 		bra	SendChar
00501 1F02 0023  a		MOVLB	TXREG	;banksel
00500 1F03 		BANKSEL	TXREG
00502 1F03 009A 		MOVWF	TXREG
SerialServo.asm                                                       Page: 56
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00503 1F04 0020 		MOVLB	0
00504 1F05 0008 		RETURN
00505 1F06 	;	
00506 1F06 	;==============================================
00507 1F06 	; Read EEProm(255)
00508 1F06 	;
00509 1F06 	ReadEEData:	
00510 1F06 0023  a		MOVLB	EEADRL	;banksel
00509 1F07 		BANKSEL	EEADRL
00511 1F07 30FF 		MOVLW	0xFF
00512 1F08 0091 		MOVWF	EEADRL
00513 1F09 	;
00514 1F09 	;Data Memory
00515 1F09 	;Address to read ;Deselect Config space
00516 1F09 1315 		BCF	EECON1,CFGS
00517 1F0A 1395 		BCF	EECON1,EEPGD
00518 1F0B 	;Point to DATA memory
00519 1F0B 1415 		BSF	EECON1,RD	;EE Read
00520 1F0C 0813 		MOVF	EEDATL,W	;W = EEDATL
00521 1F0D 0020 		movlb	0
00522 1F0E 0008 		return
00523 1F0F 	;
00524 1F0F 	;==============================================
00525 1F0F 	; Clear EEProm(255)
00526 1F0F 	;
00527 1F0F 	WriteEEData:
00528 1F0F 0023  a		MOVLB	EEADRL	;banksel
00527 1F10 		BANKSEL	EEADRL
00529 1F10 30FF 		MOVLW	0xFF
00530 1F11 0091 		MOVWF	EEADRL
00531 1F12 3000 		movlw	0x00
00532 1F13 0093 		movwf	EEDATL
00533 1F14 1315 		BCF	EECON1,CFGS	;not config mem
00534 1F15 1395 		BCF	EECON1,EEPGD	;not prog mem
00535 1F16 1515 		BSF	EECON1,WREN
00536 1F17 3055 		movlw	0x55
00537 1F18 0096 		movwf	EECON2
00538 1F19 30AA 		movlw	0xAA
00539 1F1A 0096 		movwf	EECON2
00540 1F1B 1495 		bsf	EECON1,WR
00541 1F1C 1895 	WriteEEData_L1	btfsc	EECON1,WR
00542 1F1D 33FE 		bra	WriteEEData_L1
00543 1F1E 1115 		bcf	EECON1,WREN
00544 1F1F 0020 		movlb	0
00545 1F20 0008 		return
00546 1F21 	;
00547 1F21 	;==============================================
00548 1F21 	; Test if block is erased
00549 1F21 	;
00550 1F21 	; Entry: FSR1 -> current data
00551 1F21 	; Exit: W=1 if new = blank else W=0
00552 1F21 	;
00553 1F21 3020 	TestErased	movlw	BlockWords
00554 1F22 00F9 		movwf	Param79
00555 1F23 0016 	TestErased_L1	moviw	FSR1++	;LSB
00556 1F24 3CFF 		sublw	0xFF
***** #106 Unprocessed Opcode SKPZ *****
00557 1F25 		SKPZ		;=0xFF?
00558 1F25 3400 		retlw	0x00	; No
00559 1F26 	;
00560 1F26 0016 		moviw	FSR1++	;MSB
00561 1F27 3C3F 		sublw	0x3F
***** #106 Unprocessed Opcode SKPZ *****
00562 1F28 		SKPZ		;=0x3F?
00563 1F28 3400 		retlw	0x00	; No
00564 1F29 	;
00565 1F29 0BF9 		decfsz	Param79,F
00566 1F2A 33F8 		bra	TestErased_L1
00567 1F2B 3401 		retlw	0x01
00568 1F2C 	;
00569 1F2C 	;==============================================
00570 1F2C 	; Compare Block
00571 1F2C 	;
00572 1F2C 	; Entry: FSR0 -> new data, FSR1 -> current data
00573 1F2C 	; Exit: W=1 if new = current else W=0
00574 1F2C 	;
00575 1F2C 3020 	CompareBlock	movlw	BlockWords
00576 1F2D 00F9 		movwf	Param79
00577 1F2E 0012 	CompareBlock_L1	moviw	FSR0++	;LSB
00578 1F2F 00F7 		movwf	Param77
00579 1F30 0012 		moviw	FSR0++	;MSB
00580 1F31 00F8 		movwf	Param78
00581 1F32 	; skip?
00582 1F32 3C3F 		sublw	0x3F
***** #106 Unprocessed Opcode SKPZ *****
00583 1F33 		SKPZ
00584 1F33 3205 		bra	CB_NotBlank
00585 1F34 0A77 		incf	Param77,W
***** #106 Unprocessed Opcode SKPZ *****
00586 1F35 		SKPZ
00587 1F35 3203 		bra	CB_NotBlank
00588 1F36 0016 		moviw	FSR1++
00589 1F37 0016 		moviw	FSR1++
00590 1F38 3206 		bra	CB_Next
00591 1F39 	;
00592 1F39 0016 	CB_NotBlank	moviw	FSR1++
00593 1F3A 0277 		subwf	Param77,W
***** #106 Unprocessed Opcode SKPZ *****
00594 1F3B 		SKPZ		;Matches?
SerialServo.asm                                                       Page: 57
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00595 1F3B 3400 		retlw	0x00	; No
00596 1F3C 0016 		moviw	FSR1++
00597 1F3D 0278 		subwf	Param78,W
***** #106 Unprocessed Opcode SKPZ *****
00598 1F3E 		SKPZ		;Matches?
00599 1F3E 3400 		retlw	0x00	; No
00600 1F3F 	;
00601 1F3F 0BF9 	CB_Next	decfsz	Param79,F
00602 1F40 33ED 		bra	CompareBlock_L1
00603 1F41 3401 		retlw	0x01	;It's a match!
00604 1F42 	;
00605 1F42 	;==============================================
00606 1F42 3000 	EraseSourceBuffer	movlw	low SourceBuffer
00607 1F43 0086 		movwf	FSR1L
00608 1F44 3021 		movlw	high SourceBuffer
00609 1F45 0087 		movwf	FSR1H
00610 1F46 	;
00611 1F46 	; Fall thru to EraseBlock
00612 1F46 	;==============================================
00613 1F46 	; Erase Block
00614 1F46 	;
00615 1F46 	; Entry: FSR1
00616 1F46 	;
00617 1F46 3020 	EraseBlock	movlw	BlockWords
00618 1F47 00F9 		movwf	Param79
00619 1F48 30FF 	EraseBlock_L1	movlw	0xFF
00620 1F49 001E 		movwi	FSR1++
00621 1F4A 303F 		movlw	0x3F
00622 1F4B 001E 		movwi	FSR1++
00623 1F4C 0BF9 		decfsz	Param79,F
00624 1F4D 33FA 		bra	EraseBlock_L1
00625 1F4E 0008 		return
00626 1F4F 	;	
00627 1F4F 	;==============================================
00628 1F4F 	; Read Program memory block
00629 1F4F 	;
00630 1F4F 	; Entry: FSR1,PROG_ADDR_HI:PROG_ADDR_LO
00631 1F4F 	; Exit: FSR1 changed, 32 words >> (FSR1++)
00632 1F4F 	;
00633 1F4F 2770 	ReadProgBlock	call	LoadProgAddr
00634 1F50 1315 		BCF	EECON1,CFGS	; Do not select Configuration Space
00635 1F51 1795 		BSF	EECON1,EEPGD	; Select Program Memory
00636 1F52 3020 		movlw	BlockWords	;Block is .32 words
00637 1F53 00F9 		movwf	Param79
00638 1F54 1415 	ReadProgBlock_L1	BSF	EECON1,RD	; Initiate read
00639 1F55 0000 		NOP		; skipped
00640 1F56 0000 		NOP		; do nothing
00641 1F57 0813 		MOVF	EEDATL,W	; Get LSB of word
00642 1F58 001E 		movwi	FSR1++	; Store in user location
00643 1F59 0814 		MOVF	EEDATH,W	; Get MSB of word
00644 1F5A 001E 		movwi	FSR1++	; Store in user location
00645 1F5B 0BF9 		decfsz	Param79,F
00646 1F5C 3202 		bra	ReadProgBlock_1
00647 1F5D 0020 		movlb	0
00648 1F5E 0008 		return
00649 1F5F 	;
00650 1F5F 0A91 	ReadProgBlock_1	incf	EEADRL,F
00651 1F60 33F3 		bra	ReadProgBlock_L1
00652 1F61 	;
00653 1F61 	;=====================================================
00654 1F61 	; Erase Program memory block
00655 1F61 	;
00656 1F61 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO
00657 1F61 	;
00658 1F61 2770 	EraseProgBlock	call	LoadProgAddr
00659 1F62 1795 		BSF	EECON1,EEPGD	;Point to program memory
00660 1F63 1315 		BCF	EECON1,CFGS	;Not configuration space
00661 1F64 1615 		BSF	EECON1,FREE	;Specify an erase operation, automaticaly cleared
00662 1F65 1515 		BSF	EECON1,WREN	;Enable writes
00663 1F66 3055 		MOVLW	55h	;Start of required sequence to initiate erase
00664 1F67 0096 		MOVWF	EECON2	;Write 55h
00665 1F68 30AA 		MOVLW	0AAh
00666 1F69 0096 		MOVWF	EECON2	;Write AAh
00667 1F6A 1495 		BSF	EECON1,WR	;Set WR bit to begin erase
00668 1F6B 0000 		NOP		;Any instructions here are ignored as processor
00669 1F6C 0000 		NOP		; halts to begin erase sequence
00670 1F6D 				;Processor will stop here and wait for erase complete.
00671 1F6D 				;after erase processor continues with 3rd instruction
00672 1F6D 1115 		BCF	EECON1,WREN	;Disable writes
00673 1F6E 0020 		movlb	0
00674 1F6F 0008 		return
00675 1F70 	;
00676 1F70 	;=========================================================
00677 1F70 	; Load the program address PROG_ADDR_HI:PROG_ADDR_LO into EEADRH:EEADRL
00678 1F70 0821 	LoadProgAddr	movf	PROG_ADDR_HI,W
00679 1F71 0023  a		MOVLB	EEADRH	;banksel
00678 1F72 		BANKSEL	EEADRH	;bank ?
00680 1F72 0092 		MOVWF	EEADRH	; Store MSB of address
00681 1F73 0020 		movlb	0	;bank 0
00682 1F74 0820 		movf	PROG_ADDR_LO,W
00683 1F75 0023  a		MOVLB	EEADRH	;banksel
00682 1F76 		BANKSEL	EEADRH	;bank ?
00684 1F76 0091 		MOVWF	EEADRL	; Store LSB of address
00685 1F77 0008 		return
00686 1F78 	;
00687 1F78 	;==========================================================
00688 1F78 	; Write Program memory block
00689 1F78 	;
00690 1F78 	; Entry: PROG_ADDR_HI:PROG_ADDR_LO, FSR1
SerialServo.asm                                                       Page: 58
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00691 1F78 	; Exit: FSR1 changed
00692 1F78 	; 
00693 1F78 2770 	WriteProgBlock	call	LoadProgAddr
00694 1F79 1795 		BSF	EECON1,EEPGD	;Point to program memory
00695 1F7A 1315 		BCF	EECON1,CFGS	;Not configuration space
00696 1F7B 1515 		BSF	EECON1,WREN	;Enable writes
00697 1F7C 1695 		BSF	EECON1,LWLO	;Only Load Write Latches
00698 1F7D 3020 		movlw	BlockWords
00699 1F7E 00F9 		movwf	Param79
00700 1F7F 	;
00701 1F7F 0016 	WriteProgBlock_L1	moviw	FSR1++
00702 1F80 0093 		movwf	EEDATL
00703 1F81 0016 		moviw	FSR1++
00704 1F82 0094 		movwf	EEDATH
00705 1F83 	;
00706 1F83 0811 		movf	EEADRL,W
00707 1F84 3A1F 		xorlw	0x1F
00708 1F85 391F 		andlw	0x1F
00709 1F86 1903 		btfsc	_Z	;EEADRL = xxx1 1111?
00710 1F87 3209 		bra	WriteProgBlock_Wr	; Yes
00711 1F88 	;
00712 1F88 3055 		movlw	0x55	; Start of required write sequence:
00713 1F89 0096 		movwf	EECON2
00714 1F8A 30AA 		movlw	0xAA
00715 1F8B 0096 		movwf	EECON2
00716 1F8C 1495 		bsf	EECON1,WR	; Set WR bit to begin write to latches
00717 1F8D 0000 		nop
00718 1F8E 0000 		nop
00719 1F8F 0A91 		incf	EEADRL,F
00720 1F90 33EE 		bra	WriteProgBlock_L1
00721 1F91 	;
00722 1F91 1295 	WriteProgBlock_Wr	bcf	EECON1,LWLO	; Write memory not latches
00723 1F92 3055 		movlw	0x55	; Start of required write sequence:
00724 1F93 0096 		movwf	EECON2
00725 1F94 30AA 		movlw	0xAA
00726 1F95 0096 		movwf	EECON2
00727 1F96 1495 		bsf	EECON1,WR	; Set WR bit to begin write
00728 1F97 0000 		nop
00729 1F98 0000 		nop
00730 1F99 	;
00731 1F99 1115 		bcf	EECON1,WREN
00732 1F9A 	;
00733 1F9A 0020 	WriteProgBlock_end	movlb	0
00734 1F9B 0008 		return	
00735 1F9C 	;
00736 1F9C 	;============================================================
00737 1F9C 	; call once
00738 1F9C 	;
00739 1F9C 0021 	InitializeBLIO	MOVLB	0x01	; select bank 1
00740 1F9D 1795 		bsf	OPTION_REG,NOT_WPUEN	; disable pullups on port B
00741 1F9E 1295 		bcf	OPTION_REG,TMR0CS	; TMR0 clock Fosc/4
00742 1F9F 1195 		bcf	OPTION_REG,PSA	; prescaler assigned to TMR0
00743 1FA0 1415 		bsf	OPTION_REG,PS0	;111 8mhz/4/256=7812.5hz=128uS/Ct=0.032768S/ISR
00744 1FA1 1495 		bsf	OPTION_REG,PS1	;101 8mhz/4/64=31250hz=32uS/Ct=0.008192S/ISR
00745 1FA2 1515 		bsf	OPTION_REG,PS2
00746 1FA3 	;
00747 1FA3 30F0 		MOVLW	OSCCON_Value
00748 1FA4 0099 		MOVWF	OSCCON
00749 1FA5 3017 		movlw	b'00010111'	; WDT prescaler 1:65536 period is 2 sec (RESET value)
00750 1FA6 0097 		movwf	WDTCON
00751 1FA7 	;
00752 1FA7 0024 		movlb	4	; bank 4
00753 1FA8 168C 		bsf	WPUA,WPUA5	;Put a pull up on the MCLR unused pin.
00754 1FA9 	;
00755 1FA9 0023 		MOVLB	0x03	; bank 3
00756 1FAA 3003 		movlw	ANSELA_Val
00757 1FAB 008C 		movwf	ANSELA
00758 1FAC 3000 		movlw	ANSELB_Val
00759 1FAD 008D 		movwf	ANSELB
00760 1FAE 	;
00761 1FAE 	;
00762 1FAE 		if UseAltSerialPort
00763 1FAE 	;SPI MISO >> SDI1 RB1, default
00764 1FAE 	;SPI CLK >> RB4, default
00765 1FAE 0022 		movlb	2	;bank 2
00766 1FAF 179D 		bsf	APFCON0,RXDTSEL	;RX >> RB2
00767 1FB0 141E 		bsf	APFCON1,TXCKSEL	;TX >> RB5
00768 1FB1 171D 		bsf	APFCON0,SDO1SEL	;SPI MOSI >> SDO1 RA6
00769 1FB2 		endif
00770 1FB2 	;
00771 1FB2 0020 		MOVLB	0x00	;Bank 0
00772 1FB3 	; setup data ports
00773 1FB3 3011 		movlw	PortBValue
00774 1FB4 008D 		movwf	PORTB	;init port B
00775 1FB5 3000 		movlw	PortAValue
00776 1FB6 008C 		movwf	PORTA
00777 1FB7 0021 		MOVLB	0x01	; bank 1
00778 1FB8 30BF 		movlw	PortADDRBits
00779 1FB9 008C 		movwf	TRISA
00780 1FBA 30C6 		movlw	PortBDDRBits	;setup for programer
00781 1FBB 008D 		movwf	TRISB
00782 1FBC 	;
00783 1FBC 	; setup serial I/O
00784 1FBC 0023  a		MOVLB	BAUDCON	;banksel
00783 1FBD 		BANKSEL	BAUDCON	; bank 3
00785 1FBD 3008 		movlw	BAUDCON_Value
00786 1FBE 009F 		movwf	BAUDCON
00787 1FBF 30CF 		MOVLW	low BaudRate
00788 1FC0 009B 		MOVWF	SPBRGL
SerialServo.asm                                                       Page: 59
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

00789 1FC1 3000 		MOVLW	high BaudRate
00790 1FC2 009C 		MOVWF	SPBRGH
00791 1FC3 3024 		MOVLW	TXSTA_Value
00792 1FC4 009E 		MOVWF	TXSTA
00793 1FC5 3090 		MOVLW	RCSTA_Value
00794 1FC6 009D 		MOVWF	RCSTA
00795 1FC7 0021 		movlb	0x01	; bank 1
00796 1FC8 	;	BSF	PIE1,RCIE	; Serial Receive interupt
00797 1FC8 0020 		movlb	0x00	; bank 0
00798 1FC9 	;
00799 1FC9 	;
00800 1FC9 0064 		CLRWDT
00801 1FCA 	;
00802 1FCA 	;	bsf	INTCON,PEIE	; enable periferal interupts
00803 1FCA 138B 		bcf	INTCON,GIE	; disable interupts
00804 1FCB 	;
00805 1FCB 0008 		return
00806 1FCC 	;
00807 1FCC 	;
00808 1FCC 	 
00809 1FCC 	 
00810 1FCC 	 
00811 1FCC 	 
00812 1FCC 	 
00813 1FCC 	 
00814 1FCC 	 
00815 1FCC 	 
00816 1FCC 	 
00817 1FCC 	 
00818 1FCC 	 
00819 1FCC 	 
00820 1FCC 	 
00821 1FCC 	 
00822 1FCC 	 
00823 1FCC 	 
00824 1FCC 	 
00825 1FCC 	 
00826 1FCC 	 
00827 1FCC 	 
00828 1FCC 	 
00829 1FCC 	 
00830 1FCC 	 
00831 1FCC 	 
00832 1FCC 	 
00833 1FCC 	 
00834 1FCC 	 
01895 1FCC 	;
01896 1FCC 	;
01897 1FCC 		END

X-Ref Table
ADCON0	009D 	ReadAN, ReadAN_1, ReadAN0_ColdStart
ADCON1	009E 	ReadAN0_ColdStart
ADGO	0001 	ReadAN_1
ADON	0000 	ReadAN
ADRESH	009C 	ReadAN_1
ADRESL	009B 	ReadAN_1
AN0_Val	0000 	ReadAN_TryAN0, ReadAN_AN0_3, ReadAN0_ColdStart
AN1_Val	0004 	ReadAN_AN0
AN2_Val	0008 	ReadAN, ReadAN_TryAN2, ReadAN_AN0_1
AN3_Val	000C 	ReadAN_AN0_2
ANFlags	00B2 	ML_1, ReadAN_TryAN0, ReadAN_AN0
ANNumMask	007C 	ReadAN
ANSELA	018C 	InitializeIO, InitializeBLIO
ANSELA_Val	0003 	InitializeIO, InitializeBLIO
ANSELB	018D 	InitializeIO, InitializeBLIO
ANSELB_Val	0000 	InitializeIO, InitializeBLIO
APFCON0	011D 	InitializeIO, InitializeBLIO
APFCON1	011E 	InitializeIO, InitializeBLIO
AS5047D_Flags	0070 	ReadEncoder, Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_ReadReg
		AS5047_Read, CheckParity_L1
AS5047_ANGLECOM	7FFF 	AS5047_ReadPos
AS5047_ANGLEUNC	7FFE 	AS5047_ReadPos_1
AS5047_DIAAGCReg	3FFC 	AS5047_ReadPos_1
AS5047_ErrReg	0001 	AS5047_ReadPos_1
AS5047_NOP	C000 	Init_AS5047D, AS5047_Read
AS5047_Read ^	025F 	AS5047_ReadReg
AS5047_ReadBit	4000 	Init_AS5047D
AS5047_ReadPos ^	0221 	ReadEncoder, AS5047_ReadPos_1
AS5047_ReadPos_1 ^	0232 	AS5047_ReadPos
AS5047_ReadReg ^	0257 	AS5047_ReadPos_1
AS5047_Settings1	0018 	AS5047_ReadPos_1
AS5047_Settings2	0019 	AS5047_ReadPos_1
AS5047_ZPOSL	0017 	AS5047_ReadPos_1
AS5047_ZPOSM	0016 	AS5047_ReadPos_1
AddressMask	00E0 	BufferIHData, BIHD_PutInBuff
AllDataRXd	RX_ParseFlags,6	RS232_Parse, RS232_Parse_DALo_End
AngleReadFlag	AS5047D_Flags,1	Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read
Aux0DigOut_1 ^	0047 	LED1_Blink_end
Aux0DigOut_2 ^	004A 	LED1_Blink_end, Aux0DigOut_1
Aux0DigOut_end ^	004C 	LED1_Blink_end
Aux1DigOut_1 ^	0078 	LED2_Blink_end
Aux1DigOut_2 ^	007B 	LED2_Blink_end, Aux1DigOut_1
Aux1DigOut_end ^	007D 	LED2_Blink_end
BAUDCON	019F 	InitializeIO, InitializeBLIO
BAUDCON_Value	0008 	InitializeIO, InitializeBLIO
BF	0000 	SPI_SendRecWord_L1, SPI_SendRecWord_L2
BIHD_FlushBuff ^	1EAF 	BufferIHData
BIHD_PutInBuff ^	1EB0 	BufferIHData
SerialServo.asm   X-Ref Table                                            Page: 60
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

BIHD_PutInBuff_E2 ^	1EB9 	BufferIHData
BIHD_PutInBuff_L1 ^	1EC7 	BIHD_PutInBuff_L1
BLPV_Addr ^	1E8C 	BLPV_Data
BLPV_Data ^	1E85 	BLP_Validate
BLP_BadCSum ^	1E7A 	BLP_IHS_CSum
BLP_IHS_AddrLSB ^	1E56 	BLP_IHS_AddrMSB
BLP_IHS_AddrMSB ^	1E4F 	BLP_TestNum_2
BLP_IHS_CSum ^	1E71 	BLP_IHS_Data
BLP_IHS_Data ^	1E66 	BLP_IHS_DataType
BLP_IHS_DataType ^	1E5D 	BLP_IHS_AddrLSB
BLP_L1 ^	1E19 	BLP_L2, BLP_NextState, BLP_IHS_Data
BLP_L2 ^	1E1A 	BLP_TestNum, BLP_TestNum_1
BLP_NextState ^	1E4D 	BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
BLP_SaveIH_Length ^	1E4A 	BLP_TestNum_2
BLP_TestNum ^	1E22 	BLP_L2
BLP_TestNum_1 ^	1E36 	BLP_TestNum
BLP_TestNum_2 ^	1E3E 	BLP_TestNum_1
BLP_Validate ^	1E7D 	BLP_IHS_CSum
BLP_WriteBuffer ^	1ED1 	BLP_Validate, BIHD_FlushBuff, BIHD_PutInBuff_L1
BLP_WriteBuffer_end ^	1EED 	BLP_WriteBuffer
BL_Parse ^	1E11 	BootLoaderStart
BL_ParseNextLine ^	1E12 	BLP_TestNum, BLP_TestNum_2, BLP_IHS_CSum, BLP_BadCSum, BLPV_Data
		BLPV_Addr
BSR	0008 	ProgStartVector
BattVolts	Cur_AN1	Cmd_RestoreParams_end
BaudRate	00CF 	InitializeIO, InitializeBLIO
BlockSize	0040 	BootLoaderStart
BlockWords	0020 	BIHD_PutInBuff_L1, TestErased, CompareBlock, EraseSourceBuffer, ReadProgBlock
		WriteProgBlock
BootLoaderStart ^	1E00 	, StoreSerOut_S0, BufferIHData
BootLoader_End ^	1E0F 	BootLoaderStart
BufferIHData ^	1E9A 	BLPV_Data
C	0000 	DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_UpdatePos, DM3_MovPlus, DM4_NotOverCurrent
		DoMode4_MovPlus, ClampInt, ClampInt_1, HandleRXData_1, Cmd_GetGripI_end, Cmd_SetAuxConfig_end
		Cmd_GetAuxConfig_end, Cmd_SetAuxNValue_end, BLP_TestNum, BLP_TestNum_2, BufferIHData
		BIHD_PutInBuff_L1
CB_Next ^	1F3F 	CompareBlock_L1
CB_NotBlank ^	1F39 	CompareBlock_L1
CCP1CON	0293 	Aux1DigOut_end, IRQ_Servo1_1, IRQ_Servo1_OH, IRQ_Servo1_Idle, IRQ_Servo1_OL
		StartServo, InitializeIO
CCP1CON_Clr	0009 	IRQ_Servo1_OH
CCP1CON_Idle	000A 	Aux1DigOut_end, IRQ_Servo1_Idle
CCP1CON_Set	0008 	IRQ_Servo1_OL, StartServo
CCP1IE	0002 	InitializeIO
CCP1IF	0002 	Aux1DigOut_end, IRQ_Servo1_X
CCP1M0	0000 	IRQ_Servo1_1, IRQ_Servo1_Idle
CCP1M1	0001 	IRQ_Servo1_1, IRQ_Servo1_Idle
CCPR1H	0292 	IRQ_Servo1_OH, IRQ_Servo1_Dwell, StartServo
CCPR1L	0291 	IRQ_Servo1_OH, IRQ_Servo1_Dwell, StartServo
CFGS	0006 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
CKE	0006 	Init_AS5047D
CREN	0004 	RX_TheByte_Err, GetChar_Err
CalcParity ^	027D 	Init_AS5047D, AS5047_ReadPos, AS5047_Read
CalcParity_L1 ^	0280 	CalcParity_L1
CalcdDwell	02A2 	IRQ_Servo1_OH, IRQ_Servo1_20mS, IRQ_Servo1_CalcDwell, IRQ_Servo1_Idle
		IRQ_Servo1_Dwell, StartServo, SetMiddlePosition
CalcdDwellH	02A3 	IRQ_Servo1_OH, IRQ_Servo1_20mS, IRQ_Servo1_CalcDwell, IRQ_Servo1_Idle
		IRQ_Servo1_Dwell, StartServo, SetMiddlePosition
CheckCurrent ^	0409 	DoModeTwo, DoModeThree, DoMode4
CheckGripCurrent ^	041B 	DoMode4
CheckParity ^	0290 	Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg
CheckParity_L1 ^	0293 	CheckParity_L1
ChkSum	002D 	BootLoaderStart, BL_ParseNextLine, BLP_SaveIH_Length, BLP_IHS_AddrMSB
		BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
ClampInt ^	05F6 	DoModeZero, DoModeTwo_Go, DM3_Go, DoMode4_Go
ClampInt_1 ^	0602 	ClampInt
ClampInt_tooHigh ^	0610 	ClampInt
ClampInt_tooLow ^	060B 	ClampInt_1
ClearRam ^	00BF 	InitializeIO
ClearRam_2 ^	00D0 	ClearRam
ClearRam_L2 ^	00D9 	ClearRam, ClearRam_2, ClearRam_L2
CmdErrorFlag	AS5047D_Flags,3	ReadEncoder, Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg
Cmd_GetAuxConfig_end ^	090E 	Cmd_SetAuxConfig_end
Cmd_GetAuxNValue_Ana ^	0946 	Cmd_SetAuxNValue_end
Cmd_GetAuxNValue_Btn ^	095B 	Cmd_SetAuxNValue_end
Cmd_GetAuxNValue_Btn1 ^	0961 	Cmd_GetAuxNValue_Btn
Cmd_GetAuxNValue_Btn2 ^	0967 	Cmd_GetAuxNValue_Btn1
Cmd_GetAuxNValue_Dig ^	0950 	Cmd_SetAuxNValue_end
Cmd_GetAuxNValue_Dig1 ^	0956 	Cmd_GetAuxNValue_Dig
Cmd_GetAuxNValue_end ^	0969 	Cmd_SetAuxNValue_end
Cmd_GetBattVolts_end ^	09B1 	Cmd_RestoreParams_end
Cmd_GetCmdPos_end ^	0837 	Cmd_SetCmdPos_end
Cmd_GetDeadBand_End ^	08D6 	Cmd_SetDeadBand_End
Cmd_GetEnaOvrCur_End ^	089F 	Cmd_SetEnaOvrCur_End
Cmd_GetEncAbs_end ^	0998 	Cmd_GetEnc_end
Cmd_GetEnc_end ^	098A 	Cmd_GetI_end
Cmd_GetEncoderOffset_End ^	0979 	Cmd_SetEncoderOffset_End
Cmd_GetFFwd_end ^	0853 	Cmd_SetFFwd_end
Cmd_GetFRev_end ^	0863 	Cmd_SetFRev_end
Cmd_GetGripI_end ^	08F0 	Cmd_SetGripI_end
Cmd_GetI_end ^	0982 	Cmd_GetEncoderOffset_End
Cmd_GetMaxI_end ^	0843 	Cmd_SetMaxI_end
Cmd_GetMax_uS_end ^	0883 	Cmd_SetMax_uS_end
Cmd_GetMin_uS_end ^	0873 	Cmd_SetMin_uS_end
Cmd_GetMode_end ^	0827 	Cmd_SetMode_end
Cmd_GetRevDir_End ^	0891 	Cmd_SetRevDir_End
Cmd_GetSpeed_End ^	08BC 	Cmd_SetSpeed_End
Cmd_GetStatus_end ^	09C1 	Cmd_GetBattVolts_end
SerialServo.asm   X-Ref Table                                            Page: 61
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

Cmd_GetStopCenter_End ^	08AF 	Cmd_SetStopCenter_End
Cmd_GetUseFastPWM_End ^	08E4 	Cmd_SetUseFastPWM_End
Cmd_GetUseIdleCenter_End ^	08CA 	Cmd_SetUseIdleCenter_End
Cmd_ReBoot_end ^	09C5 	Cmd_GetStatus_end
Cmd_RestoreParams_end ^	09A8 	Cmd_SaveParams_end
Cmd_RunBootloader_end ^	09CF 	Cmd_ReBoot_end
Cmd_SaveParams_end ^	09A0 	Cmd_GetEncAbs_end
Cmd_SendIDString_L1 ^	09E7 	Cmd_SendIDString_L1
Cmd_SendIDString_end ^	0A02 	Cmd_SetSlaveAddr_end
Cmd_SetAuxConfig_end ^	08FF 	Cmd_GetGripI_end
Cmd_SetAuxNDigOut ^	0926 	Cmd_GetAuxConfig_end
Cmd_SetAuxNLED ^	0926 	Cmd_GetAuxConfig_end
Cmd_SetAuxNValue_end ^	092E 	Cmd_GetAuxConfig_end
Cmd_SetCmdPos_end ^	082F 	Cmd_GetMode_end
Cmd_SetDeadBand_End ^	08D0 	Cmd_GetUseIdleCenter_End
Cmd_SetEnaOvrCur_End ^	0899 	Cmd_GetRevDir_End
Cmd_SetEncoderOffset_End ^	0971 	Cmd_GetAuxNValue_end
Cmd_SetFFwd_end ^	084B 	Cmd_GetMaxI_end
Cmd_SetFRev_end ^	085B 	Cmd_GetFFwd_end
Cmd_SetGripI_end ^	08EA 	Cmd_GetUseFastPWM_End
Cmd_SetMasterAddr_end ^	09D9 	Cmd_RunBootloader_end
Cmd_SetMaxI_end ^	083D 	Cmd_GetCmdPos_end
Cmd_SetMax_uS_end ^	087B 	Cmd_GetMin_uS_end
Cmd_SetMin_uS_end ^	086B 	Cmd_GetFRev_end
Cmd_SetMode_end ^	0821 	HandleRXData_1
Cmd_SetRevDir_End ^	088B 	Cmd_GetMax_uS_end
Cmd_SetSlaveAddr_end ^	09E3 	Cmd_SetMasterAddr_end
Cmd_SetSpeed_End ^	08B6 	Cmd_GetStopCenter_End
Cmd_SetStopCenter_End ^	08A7 	Cmd_GetEnaOvrCur_End
Cmd_SetUseFastPWM_End ^	08DE 	Cmd_GetDeadBand_End
Cmd_SetUseIdleCenter_End ^	08C4 	Cmd_GetSpeed_End
CompareBlock ^	1F2C 	BLP_WriteBuffer
CompareBlock_L1 ^	1F2E 	CB_Next
ContinueReadFlag	AS5047D_Flags,2	Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read
Copy7CToSig ^	05BC 	DoModeZero, DM1_FF, DM1_FR, DoModeTwo_Go, DM3_Go, DoMode4_Go
		StartServo
Copy7CToSig_1 ^	05C3 	Copy7CToSig, Copy7CToSig_1
Copy7CToSig_Done ^	05CB 	Copy7CToSig
CopyToRam ^	00DE 	InitializeIO, Cmd_SaveParams_end
CopyToRam_L1 ^	00E3 	CopyToRam_L1
Cur_AN0	00B3 	ML_1, CheckCurrent, CheckGripCurrent, ReadAN, ReadAN_TryAN0, ReadAN_AN0
		Cmd_GetEncoderOffset_End
Cur_AN1	00B5 	ReadAN_AN0_3, Cmd_GetAuxNValue_Ana, Cmd_RestoreParams_end
Cur_AN2	00B7 	DoModeZero, DoModeOne, ReadAN_AN2
Cur_AN3	00B9 	ReadAN_AN2
DM1_FF ^	03FD 	DoModeOne
DM1_FR ^	0403 	DoModeOne
DM2_NotOverCurrent ^	044D 	DoModeTwo
DM3_FF ^	04B7 	DM3_NotOverCurrent
DM3_FF_1 ^	04B9 	DM3_FR
DM3_FR ^	04C1 	DM3_NotOverCurrent
DM3_FR_1 ^	04C3 	DM3_FF
DM3_Go ^	04F3 	DM3_UpdatePos, DM3_Minus, DM3_Plus
DM3_IdleInactive ^	04B5 	DM3_IdleServo
DM3_IdleServo ^	04AA 	DoModeThree, DM3_FF_1, DM3_FR_1
DM3_Minus ^	04DF 	DM3_UpdatePos
DM3_MovPlus ^	04E4 	DM3_UpdatePos
DM3_NoSpeed ^	04EF 	DM3_UpdatePos, DM3_MovPlus
DM3_NotOverCurrent ^	048C 	DoModeThree
DM3_Plus ^	04EA 	DM3_MovPlus
DM3_UpdatePos ^	04CA 	DM3_IdleServo, DM3_FF_1
DM4_NotOverCurrent ^	0507 	DoMode4
DataInBuffer	IH_Flags,1	BootLoaderStart, BL_Parse, BLP_Validate, BufferIHData, BIHD_PutInBuff_L1
		BLP_WriteBuffer_end
DataReceivedFlag	SerFlags,1	RX_TheByte, No_NewDataAN0
DataSentFlag	SerFlags,2	TX_TheByte, ML_Ser_Out
DeadBand	005C 	DM3_NotOverCurrent, Cmd_GetUseIdleCenter_End, Cmd_SetDeadBand_End
DebounceTime	000A 	HdlBtn_DB
DecTimer ^	00FE 	DecTimer4, DecTimer3, DecTimer2
DecTimer1 ^	00FD 	ProgStartVector
DecTimer2 ^	00FB 	ProgStartVector
DecTimer3 ^	00F9 	ProgStartVector
DecTimer4 ^	00F7 	ProgStartVector
DelayWuS ^	011F 	DecTimer, ReadAN_1, ReadAN0_ColdStart
DelayWuS_Loop ^	0120 	DelayWuS_Loop
DestAddHiRXd	RX_ParseFlags,5	RS232_Parse
DestAddLoRXd	RX_ParseFlags,4	RS232_Parse, RS232_Parse_SALo_end
DestBuffer	2140 	BootLoaderStart, BLP_WriteBuffer
DoMode4 ^	04FA 	ML_Ser_End
DoMode4_1 ^	053F 	DoMode4
DoMode4_Go ^	0536 	DoMode4_Minus_1, DoMode4_Hold
DoMode4_Hold ^	0524 	DM4_NotOverCurrent, DoMode4_MovPlus
DoMode4_Minus ^	051F 	DM4_NotOverCurrent
DoMode4_Minus_1 ^	0520 	DM4_NotOverCurrent, DoMode4_Hold
DoMode4_MovPlus ^	0528 	DM4_NotOverCurrent
DoMode4_Plus ^	0532 	DoMode4_MovPlus
DoMode4_Plus_1 ^	0533 	DoMode4_MovPlus
DoModeOne ^	03DF 	ML_Ser_End
DoModeThree ^	0480 	ML_Ser_End
DoModeTwo ^	0441 	ML_Ser_End
DoModeTwo_1 ^	047E 	DoModeTwo
DoModeTwo_Go ^	0477 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_Plus
DoModeTwo_Minus ^	0463 	DM2_NotOverCurrent
DoModeTwo_MovPlus ^	0468 	DM2_NotOverCurrent
DoModeTwo_NoSpeed ^	0473 	DM2_NotOverCurrent, DoModeTwo_MovPlus
DoModeTwo_Plus ^	046E 	DoModeTwo_MovPlus
DoModeZero ^	03D3 	ML_Ser_End
EEADR	0191 	EERead, EEWrite
EEADRH	0192 	LoadProgAddr
SerialServo.asm   X-Ref Table                                            Page: 62
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

EEADRL	0191 	ReadEEData, WriteEEData, ReadProgBlock_1, LoadProgAddr, WriteProgBlock_L1
EEAddrTemp	002A 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DelayWuS_Loop
		EERead, EEWriteW, EEWrite
EECON1	0195 	EERead, EEWrite, EEWriteLoop, ReadEEData, WriteEEData, WriteEEData_L1
		ReadProgBlock, ReadProgBlock_L1, EraseProgBlock, WriteProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
EECON2	0196 	EEWrite, WriteEEData, EraseProgBlock, WriteProgBlock_L1, WriteProgBlock_Wr
EEDAT	0193 	EERead, EEWrite
EEDATH	0194 	ReadProgBlock_L1, WriteProgBlock_L1
EEDATL	0193 	ReadEEData, WriteEEData, ReadProgBlock_L1, WriteProgBlock_L1
EEDataTemp	002B 	SaveParams_L1, EEWrite, Cmd_ReBoot_end
EEPGD	0007 	EERead, EEWrite, ReadEEData, WriteEEData, ReadProgBlock, EraseProgBlock
		WriteProgBlock
EERead ^	0126 	CopyToRam_L1
EEWrite ^	0130 	SaveParams_L1
EEWriteLoop ^	0142 	EEWriteLoop
EEWriteW ^	012F 	Cmd_ReBoot_end
EncoderAccum	0042 	ReadEncoder_2, HA_SetIt, Home_Here, Cmd_GetEnc_end
EncoderFlags	0047 	CopyToRam, SaveParams, ReadEncoder, ReadEncoder_1, ReadEncoder_2
		SaveHomePos
EncoderHome	0048 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetIt
EncoderOffset	004A 	DM3_NotOverCurrent, Cmd_GetAuxNValue_end, Cmd_SetEncoderOffset_End
EncoderVal	0045 	ReadEncoder, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetItNeg, HA_SetIt, DoModeOne, DM3_NotOverCurrent, Cmd_GetI_end
EraseBlock_L1 ^	1F48 	EraseBlock_L1
EraseProgBlock ^	1F61 	BLP_WriteBuffer
EraseSourceBuffer ^	1F42 	BootLoaderStart, BLP_WriteBuffer_end
F	0001 	ProgStartVector, SystemBlink_end, LED1_Blinking, Aux0DigOut_end, LED2_Blinking
		IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, IRQ_Servo1_Dwell, ClearRam, ClearRam_L2, CopyToRam_L1
		SaveParams_L1, DecTimer, DelayWuS_Loop, ReadEncoder_1, ReadEncoder_2, Home_Absolute_2
		SaveHomePos, HA_SetItNeg, Init_AS5047D, AS5047_ReadPos, AS5047_ReadReg, CalcParity_L1
		CheckParity_L1, StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse, RS232_Parse_Byte
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_ClearTXData_L1
		RS232_Send, RS232_Send_L1, ML_1, DoModeZero, DoModeOne, CheckCurrent, CheckGripCurrent
		DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus, DM3_NotOverCurrent
		DM3_UpdatePos, DM3_Minus, DM3_MovPlus, DM3_Plus, DM4_NotOverCurrent, DoMode4_Minus_1
		DoMode4_MovPlus, DoMode4_Plus_1, ClampInt_1, Cmd_SendIDString_L1, BLP_TestNum, BLP_TestNum_1
		BLP_TestNum_2, BLP_SaveIH_Length, BLP_NextState, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB
		BLP_IHS_DataType, BLP_IHS_Data, BufferIHData, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
		TestErased_L1, CB_Next, EraseBlock_L1, ReadProgBlock_L1, ReadProgBlock_1, WriteProgBlock_L1
FERR	0002 	RX_TheByte_Err, GetChar_Err
FREE	0004 	EraseProgBlock
FSR0	0004 	ClearRam, ClearRam_2, ClearRam_L2, StoreSerIn, StoreSerOut
FSR0H	0005 	ClearRam, CopyToRam, SaveParams, DecTimer, StoreSerIn, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, ReadAN, HandleRXData_1, Cmd_GetGripI_end
		Cmd_GetAuxConfig_end, Cmd_SetAuxNDigOut, BL_ParseNextLine, BLPV_Addr, BIHD_PutInBuff_E2
FSR0L	0004 	CopyToRam, CopyToRam_L1, SaveParams, SaveParams_L1, DecTimer, GetSerIn
		GetSerOut, RS232_Parse_DALo_End, RS232_Parse_Data_end, ReadAN_TryAN0, ReadAN_AN0
		ReadAN_AN0_3, ReadAN_AN2, HandleRXData_1, Cmd_GetGripI_end, Cmd_GetAuxConfig_end
		Cmd_SetAuxNDigOut, BL_ParseNextLine, BLPV_Addr, BIHD_PutInBuff_E2
FSR1H	0007 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, HandleRXData_1, Cmd_SetAuxConfig_end
		Cmd_SetAuxNValue_end, Cmd_GetAuxNValue_Ana, BIHD_PutInBuff_E2, BLP_WriteBuffer
		EraseSourceBuffer
FSR1L	0006 	RS232_Parse_Data_end, RS232_ClearTXData, RS232_Send, HandleRXData_1, Cmd_SetAuxConfig_end
		Cmd_SetAuxNValue_end, Cmd_GetAuxNValue_Ana, BIHD_PutInBuff_E2, BLP_WriteBuffer
		EraseSourceBuffer
FirstRAMParam	EncoderFlags	CopyToRam, SaveParams
FlushInBuff ^	02DC 	RS232_Parse_Error
GIE	0007 	EEWrite, EEWriteLoop, Copy7CToSig_1, InitializeIO, InitializeBLIO
GO	0001 	ReadAN0_ColdStart
GO_NOT_DONE	0001 	ReadAN
GetChar ^	1EF0 	BLP_L2, GetChar, GetChar_Err
GetChar_Err ^	1EFA 	GetChar
GetSerIn ^	02CC 	RS232_Parse_Byte
GetSerInBytes ^	02E2 	MainLoop
GetSerIn_End ^	02DA 	GetSerIn
GetSerOut ^	02FF 	ML_Ser_Out
GetSerOut_End ^	030D 	GetSerOut
GripIMet	ssTempFlags,4	CheckGripCurrent, DoMode4_MovPlus, DoMode4_Go, DoMode4_1
GripIOver	ssTempFlags,5	CheckGripCurrent, DoMode4_Hold, DoMode4_Go, DoMode4_1
HA_SetIt ^	01E7 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos
HA_SetItNeg ^	01E5 	Home_Absolute_2
HandleButtons ^	0543 	No_NewDataAN0
HandleRXData ^	0805 	MainLoop
HandleRXData_1 ^	080B 	HandleRXData
HandleRXData_Rtn ^	0809 	HandleRXData_1, Cmd_GetGripI_end, Cmd_SetAuxConfig_end, Cmd_GetAuxConfig_end
		Cmd_SetAuxNValue_end
HdlBtn_1 ^	0551 	HandleButtons
HdlBtn_Btn1 ^	055A 	HdlBtn_1
HdlBtn_Btn2 ^	055B 	HdlBtn_1
HdlBtn_Btn3 ^	055C 	HdlBtn_1
HdlBtn_Btn4 ^	055D 	HdlBtn_1
HdlBtn_DB ^	054E 	HandleButtons, HdlBtn_Btn1, HdlBtn_Btn2, HdlBtn_Btn3, HdlBtn_Btn4
Home_Absolute_1 ^	019A 	ReadEncoder_2
Home_Absolute_2 ^	01A6 	ReadEncoder_2, Home_Absolute_1
Home_Absolute_3 ^	01C5 	Home_Absolute_2
Home_Here ^	01F2 	ReadEncoder_2
IDString ^	09EE 	Cmd_SendIDString_L1
IHS_AddrLSB	0003 	BLP_IHS_AddrLSB
IHS_AddrMSB	0002 	BLP_IHS_AddrMSB
IHS_CSum	0006 	BLP_IHS_CSum
IHS_Data	0005 	BLP_IHS_Data
IHS_DataType	0004 	BLP_IHS_DataType
IHS_Length	0001 	BLP_L2, BLP_TestNum_2
IHT_Data	0000 	BLPV_Data
IHT_End	0001 	BLP_Validate
IHT_HighAddr	0004 	BLPV_Addr
SerialServo.asm   X-Ref Table                                            Page: 63
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

IH_Ack	002A 	BootLoaderStart, BLP_Validate, BLPV_Data, BLPV_Addr
IH_Addr_Hi	0025 	BootLoaderStart, BLPV_Addr, BufferIHData
IH_Addr_Lo	0023 	BootLoaderStart, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BufferIHData
		BIHD_PutInBuff
IH_ByteCount	0028 	BootLoaderStart, BL_ParseNextLine, BLP_IHS_Data, BIHD_PutInBuff_E2
IH_Bytes	0027 	BootLoaderStart, BLP_SaveIH_Length, BLP_IHS_DataType, BLP_IHS_Data
IH_ErrorBadCSum	002D 	BLP_BadCSum
IH_ErrorBadLen	002B 	BLP_TestNum_2
IH_Flags	002C 	BootLoaderStart, BL_Parse, BLP_L1, BLP_TestNum_1, BLP_Validate, BufferIHData
		BIHD_PutInBuff_L1, BLP_WriteBuffer_end
IH_State	002A 	BootLoaderStart, BL_ParseNextLine, BLP_L2, BLP_TestNum, BLP_TestNum_2
		BLP_NextState, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
		BLP_IHS_CSum
IH_TempVal	002B 	BootLoaderStart, BLP_TestNum_1, BLP_TestNum_2, BLP_SaveIH_Length
		BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data, BLP_IHS_CSum
IH_Type	0029 	BootLoaderStart, BLP_IHS_DataType, BLP_Validate, BLPV_Data, BLPV_Addr
INDF0	0000 	ClearRam_L2, DecTimer, StoreSerIn, GetSerIn, StoreSerOut, GetSerOut, RS232_Parse_DALo_End
		Cmd_SetRevDir_End, Cmd_SetEnaOvrCur_End, Cmd_SetUseIdleCenter_End, Cmd_SetUseFastPWM_End
		Cmd_GetAuxConfig_end
INDF1	0001 	HandleRXData_1, Cmd_GetMax_uS_end, Cmd_GetRevDir_End, Cmd_GetSpeed_End
		Cmd_GetDeadBand_End, Cmd_GetGripI_end, Cmd_SetAuxConfig_end, Cmd_SetAuxNValue_end
INTCON	000B 	EEWrite, EEWriteLoop, Copy7CToSig_1, InitializeIO, InitializeBLIO
IRQ_Ser_End ^	00BE 	IRQ_Servo1_End
IRQ_Servo1_1 ^	0087 	Aux1DigOut_end
IRQ_Servo1_20mS ^	009D 	IRQ_Servo1_OH
IRQ_Servo1_CalcDwell ^	00A2 	IRQ_Servo1_OH
IRQ_Servo1_Dwell ^	00B5 	Aux1DigOut_end, IRQ_Servo1_Idle
IRQ_Servo1_End ^	00BB 	Aux1DigOut_end
IRQ_Servo1_Idle ^	00A7 	IRQ_Servo1_1
IRQ_Servo1_OH ^	008E 	IRQ_Servo1_Idle
IRQ_Servo1_OL ^	00B3 	IRQ_Servo1_1
IRQ_Servo1_X ^	00B9 	IRQ_Servo1_CalcDwell
Init_AS5047D ^	01F7 	InitializeIO
InitializeBLIO ^	1F9C 	BootLoaderStart
InitializeIO ^	0615 	start
LATA	010C 	LED1_Blink_end, Aux0DigOut_1, LED2_Blink_end, Aux1DigOut_1
LATB	010D 	Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L2
LED1_Bit	0002 	ProgStartVector, SystemBlink_end, LED1_NextBlink, LED1_Blink_end, Aux0DigOut_1
		Aux0DigOut_2
LED1_BlinkCount	0026 	SystemBlink_end, LED1_Blinking, LED1_Start
LED1_Blink_end ^	003D 	SystemBlink_end, LED1_Blinking
LED1_Blinking ^	002B 	SystemBlink_end
LED1_Blinks	0024 	SystemBlink_end, LED1_Start, LED1_Blink_end, InitializeIO, HandleRXData_1
		Cmd_SetAuxNDigOut
LED1_Count	0028 	SystemBlink_end, LED1_Blinking, LED1_NextBlink
LED1_Lat	LATA,LED1_Bit	LED1_Blink_end, Aux0DigOut_1
LED1_NextBlink ^	0039 	LED1_Blinking
LED1_Start ^	0037 	LED1_Blinking
LED1_Tris	TRISA,LED1_Bit	ProgStartVector, SystemBlink_end, LED1_NextBlink, Aux0DigOut_2
LED2_Bit	0003 	ProgStartVector, Aux0DigOut_end, LED2_NextBlink, LED2_Blink_end, Aux1DigOut_1
		Aux1DigOut_2
LED2_BlinkCount	0027 	Aux0DigOut_end, LED2_Blinking, LED2_Start
LED2_Blink_end ^	006E 	Aux0DigOut_end, LED2_Blinking
LED2_Blinking ^	005C 	Aux0DigOut_end
LED2_Blinks	0025 	Aux0DigOut_end, LED2_Start, LED2_Blink_end
LED2_Count	0029 	Aux0DigOut_end, LED2_Blinking, LED2_NextBlink
LED2_Lat	LATA,LED2_Bit	LED2_Blink_end, Aux1DigOut_1
LED2_NextBlink ^	006A 	LED2_Blinking
LED2_Start ^	0068 	LED2_Blinking
LED2_Tris	TRISA,LED2_Bit	ProgStartVector, Aux0DigOut_end, LED2_NextBlink, Aux1DigOut_2
LEDErrorTime	000A 	ML_1
LEDFastTime	0014 	LED1_NextBlink, LED2_NextBlink
LEDTIME	0064 	LED1_Blinking, LED2_Blinking, ML_1, InitializeIO
LWLO	0005 	WriteProgBlock, WriteProgBlock_Wr
LastRAMParam	SysFlags	CopyToRam_L1, SaveParams_L1
LoadProgAddr ^	1F70 	ReadProgBlock, EraseProgBlock, WriteProgBlock
MD3_FFwd	ssStatus,0	DM3_IdleServo, DM3_FF_1, DM3_FR_1
MD3_FRev	ssStatus,1	DM3_IdleServo, DM3_FF_1, DM3_FR_1
ML_1 ^	03A6 	MainLoop
ML_Ser_End ^	03CA 	ML_Ser_Out
ML_Ser_Out ^	03C3 	No_NewDataAN0
MSN_Done	IH_Flags,0	BootLoaderStart, BLP_L1, BLP_TestNum_1
MagEnc_HighZone	EncoderFlags,0	ReadEncoder, ReadEncoder_2
MagEnc_Homed	EncoderFlags,4	ReadEncoder, ReadEncoder_2, SaveHomePos
MagEnc_Index	EncoderFlags,2	ReadEncoder, ReadEncoder_2
MagEnc_IndexLatch	EncoderFlags,3	ReadEncoder, ReadEncoder_1, ReadEncoder_2
MagEnc_LowZone	EncoderFlags,1	ReadEncoder, ReadEncoder_1, ReadEncoder_2
MainLoop ^	039D 	ModeReturn
ModeReturn ^	03D2 	DoModeZero, DoModeOne, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_Go
		DoModeTwo_1, DM3_IdleInactive, DM3_UpdatePos, DM3_Go, DM4_NotOverCurrent, DoMode4_Go
		DoMode4_1
ModeZeroPot	Cur_AN2	DoModeZero, DoModeOne
NOT_WPUEN	0007 	InitializeIO, InitializeBLIO
NewDataAN0	ANFlags,0	ML_1, ReadAN_TryAN0, ReadAN_AN0
No_NewDataAN0 ^	03BA 	ML_1
OERR	0001 	RX_TheByte_Err, GetChar_Err
OPTION_REG	0095 	InitializeIO, InitializeBLIO
OSCCON	0099 	InitializeIO, InitializeBLIO
OSCCON_Value	00F0 	InitializeIO, InitializeBLIO
OldAN0Value	00BB 	ML_1
OverCurrentFlag	ssTempFlags,3	CheckCurrent, DoModeTwo, DoModeThree, DoMode4
PCLATH	000A 	ProgStartVector, SaveHomePos, MainLoop, RS232_Send_S0, Cmd_GetEncAbs_end
		Cmd_SaveParams_end, Cmd_ReBoot_end, Cmd_RunBootloader_end, Cmd_SetMasterAddr_end
		StoreSerOut_S0
PEIE	0006 	InitializeIO
PIE1	0091 	InitializeIO
PIR1	0011 	ProgStartVector, Aux1DigOut_end, IRQ_Servo1_X, IRQ_Servo1_End, No_NewDataAN0
		GetChar, SendChar
POP_SerOut_End ^	02FD 	StoreSerOut
SerialServo.asm   X-Ref Table                                            Page: 64
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

PORTA	000C 	SystemBlink_end, Aux0DigOut_end, InitializeIO, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1
		InitializeBLIO
PORTB	000D 	InitializeIO, InitializeBLIO
PR2	001B 	InitializeIO
PR2_Value	007D 	InitializeIO
PROG_ADDR_HI	0021 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PROG_ADDR_LO	0020 	BootLoaderStart, BufferIHData, BIHD_PutInBuff, LoadProgAddr
PS0	0000 	InitializeIO, InitializeBLIO
PS1	0001 	InitializeIO, InitializeBLIO
PS2	0002 	InitializeIO, InitializeBLIO
PSA	0003 	InitializeIO, InitializeBLIO
Param76	0076 	ReadEncoder, ReadEncoder_2, CalcParity, CalcParity_L1, CheckParity
		CheckParity_L1
Param77	0077 	DelayWuS, DelayWuS_Loop, ReadEncoder, ReadEncoder_1, ReadEncoder_2
		CalcParity, CalcParity_L1, CheckParity, CheckParity_L1, CompareBlock_L1, CB_NotBlank
Param78	0078 	ReadEncoder, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_Read, SPI_SendRecWord_L1
		SPI_SendRecWord_L2, CalcParity_L1, CheckParity_L1, StoreSerIn, GetSerIn, StoreSerOut
		GetSerOut, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo, RS232_Parse_SALo_end
		RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_Parse_L1, RS232_ClearTXData, RS232_ClearTXData_L1
		ML_Ser_Out, CheckCurrent, CheckGripCurrent, ReadAN, ReadAN_TryAN2, ReadAN_TryAN0
		ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2, ReadAN_AN0_3, ReadAN_1, HandleRXData_1
		Cmd_SetMode_end, Cmd_GetMode_end, Cmd_SetCmdPos_end, Cmd_GetCmdPos_end, Cmd_SetMaxI_end
		Cmd_GetMaxI_end, Cmd_SetFFwd_end, Cmd_GetFFwd_end, Cmd_SetFRev_end, Cmd_GetFRev_end
		Cmd_SetMin_uS_end, Cmd_GetMin_uS_end, Cmd_SetMax_uS_end, Cmd_GetMax_uS_end, Cmd_SetRevDir_End
		Cmd_GetRevDir_End, Cmd_SetEnaOvrCur_End, Cmd_GetEnaOvrCur_End, Cmd_SetStopCenter_End
		Cmd_GetStopCenter_End, Cmd_SetSpeed_End, Cmd_GetSpeed_End, Cmd_SetUseIdleCenter_End
		Cmd_GetUseIdleCenter_End, Cmd_SetDeadBand_End, Cmd_GetDeadBand_End, Cmd_SetUseFastPWM_End
		Cmd_GetUseFastPWM_End, Cmd_SetGripI_end, Cmd_GetGripI_end, Cmd_SetAuxConfig_end
		Cmd_GetAuxConfig_end, Cmd_SetAuxNDigOut, Cmd_SetAuxNValue_end, Cmd_GetAuxNValue_Ana
		Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_end, Cmd_SetEncoderOffset_End
		Cmd_GetEncoderOffset_End, Cmd_GetI_end, Cmd_GetEnc_end, Cmd_GetEncAbs_end, Cmd_SaveParams_end
		Cmd_RestoreParams_end, Cmd_GetBattVolts_end, Cmd_GetStatus_end, Cmd_ReBoot_end
		Cmd_RunBootloader_end, Cmd_SetMasterAddr_end, Cmd_SetSlaveAddr_end, BLP_L2, BLP_TestNum
		BLP_TestNum_1, BLP_TestNum_2, BLP_IHS_CSum, BufferIHData, CompareBlock_L1, CB_NotBlank
Param79	0079 	ReadEncoder, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		Init_AS5047D, AS5047_ReadPos, AS5047_ReadPos_1, AS5047_ReadReg, AS5047_Read, SPI_SendRecWord
		SPI_SendRecWord_L1, CalcParity_L1, CheckParity_L1, RS232_Send, RS232_Send_L1, DoModeOne
		CheckCurrent, CheckGripCurrent, DM3_NotOverCurrent, Cmd_SetSlaveAddr_end, Cmd_SendIDString_L1
		BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, TestErased, TestErased_L1, CompareBlock, CB_Next
		EraseSourceBuffer, EraseBlock_L1, ReadProgBlock, ReadProgBlock_L1, WriteProgBlock
Param7A	007A 	ReadEncoder, ReadEncoder_2, Init_AS5047D, RS232_Send, RS232_Send_L1
		DoModeOne, DM3_NotOverCurrent
Param7B	007B 	Init_AS5047D
Param7C	007C 	DoModeZero, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_MovPlus, DoModeTwo_Go
		DM3_NotOverCurrent, DM3_UpdatePos, DM3_MovPlus, DM3_Go, DM4_NotOverCurrent, DoMode4_MovPlus
		DoMode4_Go, Copy7CToSig, Copy7CToSig_1, SetMiddlePosition, ClampInt, ClampInt_1
		ClampInt_tooLow, ClampInt_tooHigh
Param7D	007D 	DoModeZero, DM1_FF, DM1_FR, DM2_NotOverCurrent, DoModeTwo_MovPlus, DoModeTwo_Go
		DM3_NotOverCurrent, DM3_UpdatePos, DM3_MovPlus, DM3_Go, DM4_NotOverCurrent, DoMode4_MovPlus
		DoMode4_Go, Copy7CToSig, Copy7CToSig_1, SetMiddlePosition, ClampInt, ClampInt_1
		ClampInt_tooLow, ClampInt_tooHigh
Param7F	007F 	ClearRam, ClearRam_2, ClearRam_L2
ParityErrFlag	AS5047D_Flags,0	ReadEncoder, CheckParity_L1
PortADDRBits	00BF 	InitializeIO, InitializeBLIO
PortAValue	0000 	InitializeIO, InitializeBLIO
PortBDDRBits	00C6 	InitializeIO, InitializeBLIO
PortBValue	0011 	InitializeIO, InitializeBLIO
ProgStartVector ^	0002 	BootLoader_End
ProgWordCount	0022 	BootLoaderStart, BIHD_PutInBuff, BIHD_PutInBuff_E2, BIHD_PutInBuff_L1
PulseSent	ssTempFlags,0	Aux1DigOut_end, DM2_NotOverCurrent, DM3_UpdatePos, DM4_NotOverCurrent
RCIE	0005 	InitializeIO
RCIF	0005 	IRQ_Servo1_End, GetChar
RCREG	0199 	RX_TheByte, RX_TheByte_Err, GetChar, GetChar_Err
RCSTA	019D 	RX_TheByte, RX_TheByte_Err, InitializeIO, GetChar, GetChar_Err, InitializeBLIO
RCSTA_Value	0090 	InitializeIO, InitializeBLIO
RD	0000 	EERead, ReadEEData, ReadProgBlock_L1
RP_DataBytes	0004 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_ClearTXData
		RS232_Send
RP_LongAddr	0000 	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Send
RS232_ClearTXData ^	0376 	RS232_Send_L1
RS232_ClearTXData_L1 ^	037E 	RS232_ClearTXData_L1
RS232_MasterAddr	0058 	RS232_Parse_SALo, RS232_Send, Cmd_RunBootloader_end
RS232_Parse ^	030F 	MainLoop
RS232_Parse_Byte ^	0318 	RS232_Parse
RS232_Parse_DALo_End ^	034A 	RS232_Parse_SALo_end
RS232_Parse_Data_end ^	035A 	RS232_Parse_DALo_End
RS232_Parse_Error ^	0374 	RS232_Parse_Sync2, RS232_Parse_Data_end
RS232_Parse_L1 ^	0367 	RS232_Parse_L1
RS232_Parse_Rtn ^	033B 	RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo_end
		RS232_Parse_DALo_End
RS232_Parse_SALo ^	032C 	RS232_Parse_Sync2
RS232_Parse_SALo_end ^	033D 	RS232_Parse_SALo
RS232_Parse_Sync2 ^	0325 	RS232_Parse_Byte
RS232_Send ^	0383 	RS232_Send_S0
RS232_Send_L1 ^	0392 	RS232_Send_L1
RS232_Send_S0 ^	0800 	Cmd_SetMode_end, Cmd_SetCmdPos_end, Cmd_SetMaxI_end, Cmd_SetFFwd_end
		Cmd_SetFRev_end, Cmd_SetMin_uS_end, Cmd_SetMax_uS_end, Cmd_SetRevDir_End, Cmd_SetEnaOvrCur_End
		Cmd_SetStopCenter_End, Cmd_SetSpeed_End, Cmd_SetUseIdleCenter_End, Cmd_SetDeadBand_End
		Cmd_SetUseFastPWM_End, Cmd_SetGripI_end, Cmd_SetAuxConfig_end, Cmd_GetAuxNValue_Ana
		Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Dig1, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1
		Cmd_GetAuxNValue_Btn2, Cmd_SetEncoderOffset_End, Cmd_GetEncoderOffset_End, Cmd_GetI_end
		Cmd_GetEnc_end, Cmd_RestoreParams_end, Cmd_GetBattVolts_end, Cmd_RunBootloader_end
		Cmd_SetMasterAddr_end
RS232_SlaveAddr	0059 	RS232_Parse_SALo_end, RS232_Send, Cmd_SetMasterAddr_end
RXByte	0035 	RX_TheByte, RX_TheByte_Err, No_NewDataAN0
RXDTSEL	0007 	InitializeIO, InitializeBLIO
RXDataIsNew	RX_Flags,1	RS232_Parse, RS232_Parse_L1, MainLoop, HandleRXData
RXDataValidFlag	RX_Flags,0	RS232_Parse, RS232_Parse_L1, HandleRXData
SerialServo.asm   X-Ref Table                                            Page: 65
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

RXDstIsMe	RX_Flags,3	RS232_Parse, RS232_Parse_SALo_end, RS232_Parse_L1
RXSrcIsMaster	RX_Flags,2	RS232_Parse, RS232_Parse_SALo, RS232_Parse_L1
RXTimeout	0005 	RS232_Parse_Byte
RX_CSUM	00A3 	RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_Data	00AA 	RS232_Parse_Data_end, HandleRXData_1
RX_DataCount	00A2 	RS232_Parse_SALo, RS232_Parse_DALo_End
RX_DstAdd	00A5 	RS232_Parse_SALo_end
RX_Flags	00A1 	RS232_Parse, RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_L1
		MainLoop, HandleRXData
RX_ParseFlags	00A0 	RS232_Parse, RS232_Parse_Byte, RS232_Parse_Sync2, RS232_Parse_SALo
		RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_L1, RS232_Parse_Error
RX_SrcAdd	00A4 	RS232_Parse_SALo
RX_TempData	00A6 	RS232_Parse_DALo_End, RS232_Parse_Data_end
RX_TheByte ^	02AD 	IRQ_Servo1_End
RX_TheByte_Err ^	02B6 	RX_TheByte
ReadAN ^	055E 	ML_1
ReadAN0_ColdStart ^	05B1 	start, ReadAN
ReadAN_1 ^	05A4 	ReadAN_TryAN0, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2, ReadAN_AN0_3
ReadAN_AN0 ^	0582 	ReadAN, ReadAN_TryAN0
ReadAN_AN0_1 ^	058C 	ReadAN_AN0_3
ReadAN_AN0_2 ^	0592 	ReadAN_AN2
ReadAN_AN0_3 ^	0598 	ReadAN_AN2
ReadAN_AN2 ^	059E 	ReadAN, ReadAN_TryAN2
ReadAN_Rtn ^	05BA 	ReadAN
ReadAN_TryAN0 ^	0578 	ReadAN_TryAN2
ReadAN_TryAN2 ^	0571 	ReadAN
ReadEEData ^	1F06 	BootLoaderStart
ReadEncoder ^	0148 	No_NewDataAN0
ReadEncoder_1 ^	0161 	ReadEncoder
ReadEncoder_2 ^	016A 	ReadEncoder, ReadEncoder_1
ReadProgBlock ^	1F4F 	BLP_WriteBuffer
ReadProgBlock_1 ^	1F5F 	ReadProgBlock_L1
ReadProgBlock_L1 ^	1F54 	ReadProgBlock_1
SDO1SEL	0006 	InitializeIO, InitializeBLIO
SMP	0007 	Init_AS5047D
SPBRGH	019C 	InitializeIO, InitializeBLIO
SPBRGL	019B 	InitializeIO, InitializeBLIO
SPI_CLK_Tris	TRISB,4	Init_AS5047D
SPI_CSn	LATB,0	Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L2
SPI_CSn_Tris	TRISB,0	Init_AS5047D
SPI_MISO_Tris	TRISB,1	Init_AS5047D
SPI_MOSI_Tris	TRISA,6	Init_AS5047D
SPI_SendRecWord ^	0268 	Init_AS5047D, AS5047_ReadPos, AS5047_Read
SPI_SendRecWord_L1 ^	026D 	SPI_SendRecWord_L1
SPI_SendRecWord_L2 ^	0274 	SPI_SendRecWord_L2
SSP1BUF	0211 	SPI_SendRecWord, SPI_SendRecWord_L1, SPI_SendRecWord_L2
SSP1CON1	0215 	Init_AS5047D
SSP1CON1_Val	0022 	Init_AS5047D
SSP1STAT	0214 	Init_AS5047D, SPI_SendRecWord_L1, SPI_SendRecWord_L2
STATUS	0003 	DM2_NotOverCurrent, DoModeTwo_MovPlus, DM3_UpdatePos, DM3_MovPlus, DM4_NotOverCurrent
		DoMode4_MovPlus, ClampInt, ClampInt_1, HandleRXData_1, Cmd_GetGripI_end, Cmd_SetAuxConfig_end
		Cmd_GetAuxConfig_end, Cmd_SetAuxNValue_end, BLP_TestNum, BLP_TestNum_2, BufferIHData
		BIHD_PutInBuff_L1, WriteProgBlock_L1
SW1_Flag	SysFlags,0	SystemBlink_end, HandleButtons, HdlBtn_1, Cmd_GetAuxNValue_Btn
SW1_In	PORTA,2	SystemBlink_end, Cmd_GetAuxNValue_Dig
SW2_Flag	SysFlags,1	Aux0DigOut_end, HandleButtons, HdlBtn_1, Cmd_GetAuxNValue_Btn1
SW2_In	PORTA,3	Aux0DigOut_end, Cmd_GetAuxNValue_Dig1
SW3_Flag	SysFlags,2	HandleButtons, HdlBtn_1
SW4_Flag	SysFlags,3	HandleButtons, HdlBtn_1
SaveHomePos ^	01D8 	ReadEncoder_2
SaveParams ^	00EA 	SaveHomePos, Cmd_GetEncAbs_end, Cmd_RunBootloader_end, Cmd_SetMasterAddr_end
SaveParams_L1 ^	00EF 	SaveParams_L1
SendChar ^	1F00 	BootLoaderStart, BLP_TestNum_2, BLP_BadCSum, BLP_Validate, BLPV_Data
		BLPV_Addr, SendChar
SerFlags	0036 	TX_TheByte, RX_TheByte, No_NewDataAN0, ML_Ser_Out
Ser_Buff_Bank	2	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes, StoreSerOut, GetSerOut
Ser_In_Buff	0126 	StoreSerIn, GetSerIn, StoreSerOut, GetSerOut
Ser_In_Bytes	0120 	StoreSerIn, GetSerIn, FlushInBuff, GetSerInBytes
Ser_In_InPtr	0122 	StoreSerIn, FlushInBuff
Ser_In_OutPtr	0123 	GetSerIn, FlushInBuff
Ser_Out_Buff	0146 	StoreSerOut, GetSerOut
Ser_Out_Bytes	0121 	GetSerInBytes, StoreSerOut, GetSerOut
Ser_Out_InPtr	0124 	StoreSerOut
Ser_Out_OutPtr	0125 	GetSerOut
SerialBuffer	2180 	BootLoaderStart, BL_ParseNextLine, BLPV_Addr, BIHD_PutInBuff_E2
ServoCurrent	Cur_AN0	CheckCurrent, CheckGripCurrent
ServoFastForward	004C 	DM1_FF, DM3_FF_1, Cmd_GetMaxI_end, Cmd_SetFFwd_end
ServoFastReverse	004E 	DM1_FR, DM3_FR_1, Cmd_GetFFwd_end, Cmd_SetFRev_end
ServoIdle	ssTempFlags,2	IRQ_Servo1_1, DoModeOne, DoModeTwo_1, DM3_IdleInactive, DoMode4_1
		Copy7CToSig_Done, SetMiddlePosition
ServoMax_uS	0054 	ClampInt, ClampInt_tooHigh, Cmd_GetMin_uS_end, Cmd_SetMax_uS_end
ServoMin_uS	0052 	ClampInt_1, ClampInt_tooLow, Cmd_GetFRev_end, Cmd_SetMin_uS_end
ServoOff	ssTempFlags,1	Aux1DigOut_end, StartServo, SetMiddlePosition, InitializeIO
ServoSpeed	0056 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_MovPlus, DoModeTwo_Plus
		DM3_UpdatePos, DM3_Minus, DM3_MovPlus, DM3_Plus, DM4_NotOverCurrent, DoMode4_Minus
		DoMode4_MovPlus, DoMode4_Plus, Cmd_GetStopCenter_End, Cmd_SetSpeed_End
ServoStopCenter	0050 	DM3_IdleServo, Cmd_GetEnaOvrCur_End, Cmd_SetStopCenter_End
SetMiddlePosition ^	05E5 	StartServo
SigOutTime	02A0 	IRQ_Servo1_OH, IRQ_Servo1_CalcDwell, Copy7CToSig, Copy7CToSig_1
SigOutTimeH	02A1 	Copy7CToSig, Copy7CToSig_1
SourceAddHiRXd	RX_ParseFlags,3	RS232_Parse
SourceAddLoRXd	RX_ParseFlags,2	RS232_Parse, RS232_Parse_SALo
SourceBuffer	2100 	BootLoaderStart, BIHD_PutInBuff_E2, BLP_WriteBuffer, EraseSourceBuffer
StartServo ^	05CE 	start
StoreSerIn ^	02BE 	No_NewDataAN0
StoreSerOut ^	02EA 	RS232_Send, RS232_Send_L1, StoreSerOut_S0
StoreSerOut_S0 ^	0A04 	Cmd_SendIDString_L1
SyncByte1RXd	RX_ParseFlags,0	RS232_Parse, RS232_Parse_Byte
SyncByte2RXd	RX_ParseFlags,1	RS232_Parse, RS232_Parse_Sync2
SerialServo.asm   X-Ref Table                                            Page: 66
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

SysFlags	0061 	SystemBlink_end, Aux0DigOut_end, CopyToRam_L1, SaveParams_L1, HandleButtons
		HdlBtn_1, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_Btn1
SysLEDCount	0023 	ProgStartVector, SystemBlink_Std, InitializeIO
SysLED_Bit	0007 	ProgStartVector, SystemBlink_Std
SysLED_BlinkCount	0022 	SystemBlink_Std
SysLED_Blinks	0021 	ProgStartVector
SysLED_Time	0020 	SystemBlink_Std, ML_1, InitializeIO
SysLED_Tris	TRISA,SysLED_Bit	ProgStartVector, SystemBlink_Std
SysMode	0057 	ML_Ser_End, InitializeIO, HandleRXData_1, Cmd_SetMode_end
SystemBlink_Std ^	0016 	ProgStartVector
SystemBlink_end ^	001B 	ProgStartVector
SystemTick_end ^	007D 	ProgStartVector
T1CON	0018 	InitializeIO
T1CON_Val	0021 	InitializeIO
T1GCON	0019 	InitializeIO
T2CON	001C 	InitializeIO
T2CON_Value	004F 	InitializeIO
TMR0CS	0005 	InitializeIO, InitializeBLIO
TMR1GE	0007 	InitializeIO
TMR1H	0017 	StartServo
TMR1L	0016 	StartServo
TMR2IE	0001 	InitializeIO
TMR2IF	0001 	ProgStartVector
TRISA	008C 	ProgStartVector, SystemBlink_Std, SystemBlink_end, LED1_NextBlink, Aux0DigOut_2
		Aux0DigOut_end, LED2_NextBlink, Aux1DigOut_2, Init_AS5047D, InitializeIO, InitializeBLIO
TRISB	008D 	Init_AS5047D, InitializeIO, InitializeBLIO
TXByte	0034 	TX_TheByte, ML_Ser_Out
TXCKSEL	0000 	InitializeIO, InitializeBLIO
TXIF	0004 	No_NewDataAN0, SendChar
TXREG	019A 	TX_TheByte, SendChar
TXSTA	019E 	InitializeIO, InitializeBLIO
TXSTA_Value	0024 	InitializeIO, InitializeBLIO
TX_ACK ^	0A03 	HandleRXData_1, Cmd_GetMode_end, Cmd_GetCmdPos_end, Cmd_GetMaxI_end
		Cmd_GetFFwd_end, Cmd_GetFRev_end, Cmd_GetMin_uS_end, Cmd_GetMax_uS_end, Cmd_GetRevDir_End
		Cmd_GetEnaOvrCur_End, Cmd_GetStopCenter_End, Cmd_GetSpeed_End, Cmd_GetUseIdleCenter_End
		Cmd_GetDeadBand_End, Cmd_GetUseFastPWM_End, Cmd_GetGripI_end, Cmd_GetAuxConfig_end
		Cmd_SetAuxNDigOut, Cmd_GetAuxNValue_end, Cmd_GetEncAbs_end, Cmd_SaveParams_end
TX_Data	00AE 	RS232_ClearTXData, RS232_Send, HandleRXData_1
TX_TheByte ^	02A5 	No_NewDataAN0
TestErased ^	1F21 	BLP_WriteBuffer
TestErased_L1 ^	1F23 	TestErased_L1
Timer1Hi	002D 	DecTimer1, DecTimer
Timer1Lo	002C 	DecTimer, RS232_Parse, RS232_Parse_Byte
Timer2Hi	002F 	DecTimer2, DecTimer
Timer2Lo	002E 	DecTimer
Timer3Hi	0031 	DecTimer3, DecTimer
Timer3Lo	0030 	DecTimer
Timer4Hi	0033 	DecTimer4, DecTimer
Timer4Lo	0032 	DecTimer, HandleButtons, HdlBtn_DB, InitializeIO
UseAltSerialPort	0001 	InitializeBLIO
UseEEParams	0001 	ClearRam, CopyToRam
UseRS232Chksum	0001 	RS232_Parse, RS232_Parse_DALo_End, RS232_Parse_Data_end, RS232_Send_L1
UseRS232SendSyncBytes	0000 	RS232_Parse, RS232_Send
UseRS232SyncBytes	0001 	RS232_Parse, RS232_Parse_Byte
W	0000 	SystemBlink_Std, SystemBlink_end, LED1_Blinking, LED1_Start, LED1_Blink_end
		Aux0DigOut_end, LED2_Blinking, LED2_Start, LED2_Blink_end, IRQ_Servo1_OH, IRQ_Servo1_CalcDwell
		IRQ_Servo1_Dwell, CopyToRam_L1, SaveParams_L1, DecTimer, EERead, EEWrite, ReadEncoder
		ReadEncoder_1, ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3
		SaveHomePos, HA_SetIt, Init_AS5047D, SPI_SendRecWord, SPI_SendRecWord_L1, SPI_SendRecWord_L2
		CalcParity_L1, CheckParity_L1, TX_TheByte, RX_TheByte, RX_TheByte_Err, StoreSerIn
		GetSerIn, GetSerInBytes, StoreSerOut, GetSerOut, RS232_Parse_Byte, RS232_Parse_Sync2
		RS232_Parse_SALo, RS232_Parse_SALo_end, RS232_Parse_DALo_End, RS232_Parse_Data_end
		RS232_Send, RS232_Send_L1, ML_1, No_NewDataAN0, ML_Ser_End, DoModeZero, DoModeOne
		DM1_FF, DM1_FR, CheckCurrent, CheckGripCurrent, DM2_NotOverCurrent, DoModeTwo_Minus
		DoModeTwo_MovPlus, DoModeTwo_Plus, DoModeTwo_NoSpeed, DoModeTwo_Go, DM3_NotOverCurrent
		DM3_IdleServo, DM3_FF_1, DM3_FR_1, DM3_UpdatePos, DM3_Minus, DM3_MovPlus, DM3_Plus
		DM3_NoSpeed, DM3_Go, DM4_NotOverCurrent, DoMode4_Minus, DoMode4_MovPlus, DoMode4_Plus
		DoMode4_Go, ReadAN, ReadAN_TryAN2, ReadAN_TryAN0, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2
		ReadAN_1, Copy7CToSig, Copy7CToSig_1, ClampInt, ClampInt_1, ClampInt_tooLow, ClampInt_tooHigh
		InitializeIO, HandleRXData_1, Cmd_SetMode_end, Cmd_GetMode_end, Cmd_SetCmdPos_end
		Cmd_GetCmdPos_end, Cmd_SetMaxI_end, Cmd_GetMaxI_end, Cmd_SetFFwd_end, Cmd_GetFFwd_end
		Cmd_SetFRev_end, Cmd_GetFRev_end, Cmd_SetMin_uS_end, Cmd_GetMin_uS_end, Cmd_SetMax_uS_end
		Cmd_GetMax_uS_end, Cmd_SetRevDir_End, Cmd_GetRevDir_End, Cmd_SetEnaOvrCur_End, Cmd_GetEnaOvrCur_End
		Cmd_SetStopCenter_End, Cmd_GetStopCenter_End, Cmd_SetSpeed_End, Cmd_GetSpeed_End
		Cmd_SetUseIdleCenter_End, Cmd_GetUseIdleCenter_End, Cmd_SetDeadBand_End, Cmd_GetDeadBand_End
		Cmd_SetUseFastPWM_End, Cmd_GetUseFastPWM_End, Cmd_SetGripI_end, Cmd_GetGripI_end
		Cmd_SetAuxConfig_end, Cmd_GetAuxConfig_end, Cmd_SetAuxNDigOut, Cmd_SetAuxNValue_end
		Cmd_GetAuxNValue_Ana, Cmd_GetAuxNValue_Dig, Cmd_GetAuxNValue_Btn, Cmd_GetAuxNValue_end
		Cmd_SetEncoderOffset_End, Cmd_GetEncoderOffset_End, Cmd_GetI_end, Cmd_GetEnc_end
		Cmd_GetEncAbs_end, Cmd_SaveParams_end, Cmd_RestoreParams_end, Cmd_GetBattVolts_end
		Cmd_GetStatus_end, Cmd_ReBoot_end, Cmd_RunBootloader_end, Cmd_SetMasterAddr_end
		Cmd_SetSlaveAddr_end, Cmd_SendIDString_L1, BLP_L2, BLP_TestNum, BLP_TestNum_1, BLP_TestNum_2
		BLP_SaveIH_Length, BLP_IHS_AddrMSB, BLP_IHS_AddrLSB, BLP_IHS_DataType, BLP_IHS_Data
		BLP_IHS_CSum, BLP_Validate, BLPV_Data, BLPV_Addr, BufferIHData, BIHD_PutInBuff
		BIHD_PutInBuff_E2, BIHD_PutInBuff_L1, GetChar, GetChar_Err, ReadEEData, CompareBlock_L1
		CB_NotBlank, ReadProgBlock_L1, LoadProgAddr, WriteProgBlock_L1
WDTCON	0097 	InitializeIO, InitializeBLIO
WPUA	020C 	InitializeIO, InitializeBLIO
WPUA5	0005 	InitializeIO, InitializeBLIO
WR	0001 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock_L1
		WriteProgBlock_Wr
WREG	0009 	ReadEncoder_2, Home_Absolute_1, Home_Absolute_2, Home_Absolute_3, CheckParity_L1
		ReadAN_1, ReadAN0_ColdStart, BIHD_PutInBuff_E2, BLP_WriteBuffer
WREN	0002 	EEWrite, EEWriteLoop, WriteEEData, WriteEEData_L1, EraseProgBlock, WriteProgBlock
		WriteProgBlock_Wr
WriteEEData ^	1F0F 	BootLoaderStart
WriteEEData_L1 ^	1F1C 	WriteEEData_L1
WriteProgBlock ^	1F78 	BLP_WriteBuffer
WriteProgBlock_L1 ^	1F7F 	WriteProgBlock_L1
SerialServo.asm   X-Ref Table                                            Page: 67
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

WriteProgBlock_Wr ^	1F91 	WriteProgBlock_L1
Z	0002 	WriteProgBlock_L1
_C	STATUS,C	DM2_NotOverCurrent, DM3_UpdatePos, DM4_NotOverCurrent
_Z	STATUS,Z	WriteProgBlock_L1
kAuxIOAnalogIn	0004 	ReadAN, ReadAN_TryAN2, ReadAN_AN0, ReadAN_AN0_1, ReadAN_AN0_2
kAuxIODigitalOut	0003 	LED1_Blink_end, LED2_Blink_end
kAuxIOLEDBtn	0001 	SystemBlink_end, Aux0DigOut_end
kCmd_GetAuxConfig	0022 	Cmd_SetAuxConfig_end
kCmd_GetAuxNValue	0023 	Cmd_SetAuxNValue_end
kCmd_GetBattVolts	0096 	Cmd_RestoreParams_end
kCmd_GetCmdPos	0002 	Cmd_SetCmdPos_end
kCmd_GetDeadBand	000E 	Cmd_SetDeadBand_End
kCmd_GetEnaOvrCur	0009 	Cmd_SetEnaOvrCur_End
kCmd_GetEnc	0092 	Cmd_GetI_end
kCmd_GetEncAbs	0093 	Cmd_GetEnc_end
kCmd_GetEncoderOffset	0024 	Cmd_SetEncoderOffset_End
kCmd_GetFFwd	0004 	Cmd_SetFFwd_end
kCmd_GetFRev	0005 	Cmd_SetFRev_end
kCmd_GetGripI	0021 	Cmd_SetGripI_end
kCmd_GetI	0091 	Cmd_GetEncoderOffset_End
kCmd_GetMaxI	0003 	Cmd_SetMaxI_end
kCmd_GetMax_uS	0007 	Cmd_SetMax_uS_end
kCmd_GetMin_uS	0006 	Cmd_SetMin_uS_end
kCmd_GetMode	0001 	Cmd_SetMode_end
kCmd_GetRevDir	0008 	Cmd_SetRevDir_End
kCmd_GetSpeed	000C 	Cmd_SetSpeed_End
kCmd_GetStatus	0098 	Cmd_GetBattVolts_end
kCmd_GetStopCenter	000B 	Cmd_SetStopCenter_End
kCmd_GetUseFastPWM	000F 	Cmd_SetUseFastPWM_End
kCmd_GetUseIdleCenter	000D 	Cmd_SetUseIdleCenter_End
kCmd_ReBoot	0099 	Cmd_GetStatus_end
kCmd_RestoreParams	0095 	Cmd_SaveParams_end
kCmd_RunBootloader	009A 	Cmd_ReBoot_end
kCmd_SaveParams	0094 	Cmd_GetEncAbs_end
kCmd_SendIDString	00AA 	Cmd_SetSlaveAddr_end
kCmd_SetAuxConfig	00B2 	Cmd_GetGripI_end
kCmd_SetAuxNValue	00B3 	Cmd_GetAuxConfig_end
kCmd_SetCmdPos	0082 	Cmd_GetMode_end
kCmd_SetDeadBand	008E 	Cmd_GetUseIdleCenter_End
kCmd_SetEnaOvrCur	0089 	Cmd_GetRevDir_End
kCmd_SetEncoderOffset	00B4 	Cmd_GetAuxNValue_end
kCmd_SetFFwd	0084 	Cmd_GetMaxI_end
kCmd_SetFRev	0085 	Cmd_GetFFwd_end
kCmd_SetGripI	00B1 	Cmd_GetUseFastPWM_End
kCmd_SetMasterAddr	00A1 	Cmd_RunBootloader_end
kCmd_SetMaxI	0083 	Cmd_GetCmdPos_end
kCmd_SetMax_uS	0087 	Cmd_GetMin_uS_end
kCmd_SetMin_uS	0086 	Cmd_GetFRev_end
kCmd_SetMode	0081 	HandleRXData_1
kCmd_SetRevDir	0088 	Cmd_GetMax_uS_end
kCmd_SetSlaveAddr	00A2 	Cmd_SetMasterAddr_end
kCmd_SetSpeed	008C 	Cmd_GetStopCenter_End
kCmd_SetStopCenter	008B 	Cmd_GetEnaOvrCur_End
kCmd_SetUseFastPWM	008F 	Cmd_GetDeadBand_End
kCmd_SetUseIdleCenter	008D 	Cmd_GetSpeed_End
kDeadBand	0064 	InitializeBLIO
kGripI	0028 	InitializeBLIO
kGripperHC	0004 	CheckGripCurrent
kMaxMode	0004 	HandleRXData_1
kMaxPulseWidth	1068 	InitializeBLIO
kMaxT	076C 	ReadEncoder_2, Home_Absolute_2, Home_Absolute_3
kMidPulseWidth	0BB8 	SetMiddlePosition
kMinPulseWidth	0708 	InitializeBLIO
kRS232SyncByteValue	00DD 	RS232_Parse_Byte, RS232_Parse_Sync2
kRS232_MasterAddr	0001 	InitializeBLIO
kRS232_SlaveAddr	0002 	InitializeBLIO
kServoCenterStop	0B86 	InitializeBLIO
kServoDwellTime	9C40 	IRQ_Servo1_20mS, IRQ_Servo1_Idle, StartServo, SetMiddlePosition
kServoFastDwellTime	4E20 	IRQ_Servo1_OH
kServoFastForward	0BEA 	InitializeBLIO
kServoFastReverse	0B22 	InitializeBLIO
kServoSpeed	000A 	InitializeBLIO
kStandAlone	0000 	Init_AS5047D
kSysFlags	0000 	InitializeBLIO
kSysMode	0003 	InitializeBLIO
kUpper4Bits	003C 	ReadEncoder, ReadEncoder_1, ReadEncoder_2
kssFlags	0019 	InitializeBLIO
kssMaxI	0032 	InitializeBLIO
nvDeadBand	0015 	InitializeBLIO
nvEncoderFlags	0000 	InitializeBLIO, CopyToRam, SaveParams
nvEncoderHome	0001 	InitializeBLIO
nvEncoderOffset	0003 	InitializeBLIO
nvFirstParamByte	nvEncoderFlags	InitializeBLIO, CopyToRam, SaveParams
nvLastParamByte	nvSysFlags	InitializeBLIO
nvRS232_MasterAddr	0011 	InitializeBLIO
nvRS232_SlaveAddr	0012 	InitializeBLIO
nvServoFastForward	0005 	InitializeBLIO
nvServoFastReverse	0007 	InitializeBLIO
nvServoMax_uS	000D 	InitializeBLIO
nvServoMin_uS	000B 	InitializeBLIO
nvServoSpeed	000F 	InitializeBLIO
nvServoStopCenter	0009 	InitializeBLIO
nvSysFlags	001A 	InitializeBLIO
nvSysMode	0010 	InitializeBLIO
nvssAux0Config	0017 	InitializeBLIO
nvssAux1Config	0018 	InitializeBLIO
nvssAux2Config	0019 	InitializeBLIO
nvssFlags	0013 	InitializeBLIO
nvssGripI	0016 	InitializeBLIO
SerialServo.asm   X-Ref Table                                            Page: 68
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

nvssMaxI	0014 	InitializeBLIO
oldCode	0000 	DecTimer
ssAux0Config	005E 	SystemBlink_end, LED1_Blink_end, ReadAN, ReadAN_AN0, Cmd_GetGripI_end
		Cmd_SetAuxConfig_end, Cmd_GetAuxConfig_end, Cmd_SetAuxNValue_end
ssAux1Config	005F 	Aux0DigOut_end, LED2_Blink_end, ReadAN_TryAN2, ReadAN_AN0_1
ssAux2Config	0060 	ReadAN_AN0_2
ssCmdPos	0037 	DoModeTwo, DM2_NotOverCurrent, DoModeTwo_NoSpeed, DoModeThree, DM3_NotOverCurrent
		DoMode4, DM4_NotOverCurrent, InitializeIO, Cmd_GetMode_end, Cmd_SetCmdPos_end
ssCurPos	0039 	DM2_NotOverCurrent, DoModeTwo_Minus, DoModeTwo_Plus, DoModeTwo_NoSpeed
		DoModeTwo_Go, DM3_IdleServo, DM3_UpdatePos, DM3_Minus, DM3_Plus, DM3_NoSpeed, DM3_Go
		DM4_NotOverCurrent, DoMode4_Minus_1, DoMode4_Plus_1, DoMode4_Go
ssEnableFastPWM	ssFlags,4	IRQ_Servo1_OH, Cmd_GetDeadBand_End, Cmd_SetUseFastPWM_End
ssEnableOverCur	ssFlags,0	CheckCurrent, Cmd_GetRevDir_End, Cmd_SetEnaOvrCur_End
ssEncCmdError	ssStatus+1,1	ReadEncoder
ssEncParityError	ssStatus+1,0	ReadEncoder
ssFlags	005A 	IRQ_Servo1_OH, CheckCurrent, DM3_IdleServo, DM3_FF, DM3_FR, Cmd_GetMax_uS_end
		Cmd_SetRevDir_End, Cmd_GetRevDir_End, Cmd_SetEnaOvrCur_End, Cmd_GetSpeed_End, Cmd_SetUseIdleCenter_End
		Cmd_GetDeadBand_End, Cmd_SetUseFastPWM_End
ssGripI	005D 	CheckGripCurrent, Cmd_GetUseFastPWM_End, Cmd_SetGripI_end
ssGripMCur	ssStatus,5	CheckGripCurrent, Cmd_GetBattVolts_end
ssGripOCur	ssStatus,4	CheckGripCurrent, Cmd_GetBattVolts_end
ssMD3_Dest	003B 	DM3_IdleServo, DM3_FF_1, DM3_FR_1, DM3_UpdatePos, DM3_NoSpeed
ssMaxI	005B 	CheckCurrent, Cmd_GetCmdPos_end, Cmd_SetMaxI_end
ssMode3IdleCenter	ssFlags,3	DM3_IdleServo, Cmd_GetSpeed_End, Cmd_SetUseIdleCenter_End
ssRX_Timeout	ssStatus,3	RS232_Parse, Cmd_GetBattVolts_end
ssReverseDir	ssFlags,1	DM3_FF, DM3_FR, Cmd_GetMax_uS_end, Cmd_SetRevDir_End
ssStatus	003E 	ReadEncoder, RS232_Parse, ML_1, CheckGripCurrent, DoModeTwo, DM2_NotOverCurrent
		DoModeThree, DM3_NotOverCurrent, DM3_IdleServo, DM3_FF_1, DM3_FR_1, DoMode4, DM4_NotOverCurrent
		Cmd_GetBattVolts_end
ssTempFlags	003D 	Aux1DigOut_end, IRQ_Servo1_1, DoModeOne, CheckCurrent, CheckGripCurrent
		DoModeTwo, DM2_NotOverCurrent, DoModeTwo_1, DoModeThree, DM3_IdleInactive, DM3_UpdatePos
		DoMode4, DM4_NotOverCurrent, DoMode4_Hold, DoMode4_MovPlus, DoMode4_Go, DoMode4_1
		Copy7CToSig_Done, StartServo, SetMiddlePosition, InitializeIO
ssio_OverCurSD	ssStatus,2	ML_1, DoModeTwo, DM2_NotOverCurrent, DoModeThree, DM3_NotOverCurrent
		DoMode4, DM4_NotOverCurrent
start ^	039A 	ProgStartVector
useRS232	0001 	InitializeIO
 

X-Ref Table (The UnCalled)
AS5047_ReadANGLEUNCReg !	0235 	
AS5047_ReadDIAAGCReg !	023A 	
AS5047_ReadErrorReg !	0253 	
AS5047_ReadStgs1Reg !	0249 	
AS5047_ReadStgs2Reg !	024E 	
AS5047_ReadZPOSLReg !	0244 	
AS5047_ReadZPOSMReg !	023F 	
AS5047_Write !	0205 	
Bank0_Rtn !	05BA 	
BootLoader !	1E00 	
Cmd_GetCalPot_end !	09B1 	
Delay100uS !	011C 	
Delay10uS !	011A 	
Delay40uS !	011E 	
EEReadW !	0125 	
EraseBlock !	1F46 	
GetSerOutBytes !	02E6 	
HA_SetItPos !	01E2 	
Home_Absolute !	0188 	
IRQ_Ser !	00BB 	
IRQ_Servo1 !	007D 	
POP_SerOut !	02F8 	
RS232_Parse_DALo !	033D 	
RS232_Parse_Data !	034A 	
ReadAN_3 !	05B9 	
ReadAN_AN1 !	059B 	
ReadAN_AN3 !	05A1 	
StopServo !	05EA 	
SystemBlink_DoIt !	0018 	
TestT1_Zero !	0116 	
TestT2_Zero !	0112 	
TestT3_Zero !	010E 	
TestT4_Zero !	010A 	
WriteProgBlock_end !	1F9A 	
 

Memory Usage Map ('X' = Used, '-' = Unused)
 
0000  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
SerialServo.asm   Memory Usage Map                                       Page: 69
/Users/davidflynn/Projects/SerialServo/Firmware Rev C PCB/

0540  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX---------- ----------------
0800  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00  : XXXXXXXXX------- ---------------- ---------------- ----------------
1E00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1E80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1EC0  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F00  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F40  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1F80  : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1FC0  : XXXXXXXXXXXX---- ---------------- ---------------- ----------------
 
Program Memory Words Used:2619
Program Memory Words Free:5573
 
UserID
8000  :XXXX
 
Config
8007  :XX
 
EEPROM
F000  : XXXXXXXXXXXXXXXX XXXXXXXXXXX----- ---------------- ----------------
F0C0  : ---------------- ---------------- ---------------- ---------------X
 
Data EEPROM Bytes Used:28
Data EEPROM Bytes Free:228
